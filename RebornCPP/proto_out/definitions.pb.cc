// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definitions.proto

#include "pch.h"

#include "definitions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace HederaDefinitions {
PROTOBUF_CONSTEXPR FRotator::FRotator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.roll_)*/0} {}
struct FRotatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FRotatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FRotatorDefaultTypeInternal() {}
  union {
    FRotator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FRotatorDefaultTypeInternal _FRotator_default_instance_;
PROTOBUF_CONSTEXPR FVector::FVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct FVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FVectorDefaultTypeInternal() {}
  union {
    FVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FVectorDefaultTypeInternal _FVector_default_instance_;
PROTOBUF_CONSTEXPR ReplicatedActorReference::ReplicatedActorReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actorid_)*/0u} {}
struct ReplicatedActorReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicatedActorReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicatedActorReferenceDefaultTypeInternal() {}
  union {
    ReplicatedActorReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicatedActorReferenceDefaultTypeInternal _ReplicatedActorReference_default_instance_;
PROTOBUF_CONSTEXPR NonReplicatedObjectReference::NonReplicatedObjectReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fullnamelookup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NonReplicatedObjectReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonReplicatedObjectReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonReplicatedObjectReferenceDefaultTypeInternal() {}
  union {
    NonReplicatedObjectReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonReplicatedObjectReferenceDefaultTypeInternal _NonReplicatedObjectReference_default_instance_;
PROTOBUF_CONSTEXPR FName::FName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fnameentryid_)*/0
  , /*decltype(_impl_.instancenumber_)*/0} {}
struct FNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FNameDefaultTypeInternal() {}
  union {
    FName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FNameDefaultTypeInternal _FName_default_instance_;
PROTOBUF_CONSTEXPR FEnvironmentalEffectInfo::FEnvironmentalEffectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.effectid_)*/0
  , /*decltype(_impl_.auxbusvolume_)*/0
  , /*decltype(_impl_.outputbusvolume_)*/0} {}
struct FEnvironmentalEffectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FEnvironmentalEffectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FEnvironmentalEffectInfoDefaultTypeInternal() {}
  union {
    FEnvironmentalEffectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FEnvironmentalEffectInfoDefaultTypeInternal _FEnvironmentalEffectInfo_default_instance_;
PROTOBUF_CONSTEXPR FAttributeDefinitionDefault::FAttributeDefinitionDefault(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_)*/nullptr
  , /*decltype(_impl_.defaultvalue_)*/0} {}
struct FAttributeDefinitionDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FAttributeDefinitionDefaultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FAttributeDefinitionDefaultDefaultTypeInternal() {}
  union {
    FAttributeDefinitionDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FAttributeDefinitionDefaultDefaultTypeInternal _FAttributeDefinitionDefault_default_instance_;
PROTOBUF_CONSTEXPR FAttributeScalarParam::FAttributeScalarParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paramname_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.mininput_)*/nullptr
  , /*decltype(_impl_.maxinput_)*/nullptr
  , /*decltype(_impl_.minoutput_)*/nullptr
  , /*decltype(_impl_.maxoutput_)*/nullptr
  , /*decltype(_impl_.bvectorparam_)*/false
  , /*decltype(_impl_.bclampinput_)*/false
  , /*decltype(_impl_.scalarparamoperand_)*/0
  , /*decltype(_impl_.currentvalue_)*/0} {}
struct FAttributeScalarParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FAttributeScalarParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FAttributeScalarParamDefaultTypeInternal() {}
  union {
    FAttributeScalarParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FAttributeScalarParamDefaultTypeInternal _FAttributeScalarParam_default_instance_;
PROTOBUF_CONSTEXPR FScreenParticleModifier::FScreenParticleModifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scalarparams_)*/{}
  , /*decltype(_impl_.cachedvalue_)*/0} {}
struct FScreenParticleModifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FScreenParticleModifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FScreenParticleModifierDefaultTypeInternal() {}
  union {
    FScreenParticleModifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FScreenParticleModifierDefaultTypeInternal _FScreenParticleModifier_default_instance_;
PROTOBUF_CONSTEXPR FInteractionIconWithOverrides::FInteractionIconWithOverrides(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.icondef_)*/nullptr
  , /*decltype(_impl_.overrideicondef_)*/nullptr
  , /*decltype(_impl_.boverrideicon_)*/false
  , /*decltype(_impl_.boverrideaction_)*/false
  , /*decltype(_impl_.boverridetext_)*/false
  , /*decltype(_impl_.bcoststouse_)*/false
  , /*decltype(_impl_.costscurrencytype_)*/0
  , /*decltype(_impl_.costsamount_)*/0} {}
struct FInteractionIconWithOverridesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FInteractionIconWithOverridesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FInteractionIconWithOverridesDefaultTypeInternal() {}
  union {
    FInteractionIconWithOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FInteractionIconWithOverridesDefaultTypeInternal _FInteractionIconWithOverrides_default_instance_;
PROTOBUF_CONSTEXPR FVector2D::FVector2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct FVector2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FVector2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FVector2DDefaultTypeInternal() {}
  union {
    FVector2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FVector2DDefaultTypeInternal _FVector2D_default_instance_;
PROTOBUF_CONSTEXPR FScreenParticleScalarParamOverTime::FScreenParticleScalarParamOverTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parametername_)*/nullptr
  , /*decltype(_impl_.totaltime_)*/0
  , /*decltype(_impl_.startvalue_)*/0
  , /*decltype(_impl_.endvalue_)*/0
  , /*decltype(_impl_.lastvalue_)*/0} {}
struct FScreenParticleScalarParamOverTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FScreenParticleScalarParamOverTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FScreenParticleScalarParamOverTimeDefaultTypeInternal() {}
  union {
    FScreenParticleScalarParamOverTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FScreenParticleScalarParamOverTimeDefaultTypeInternal _FScreenParticleScalarParamOverTime_default_instance_;
PROTOBUF_CONSTEXPR FScreenParticleVectorParamOverTime::FScreenParticleVectorParamOverTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parametername_)*/nullptr
  , /*decltype(_impl_.vectorstartvalue_)*/nullptr
  , /*decltype(_impl_.vectorendvalue_)*/nullptr
  , /*decltype(_impl_.lastvalue_)*/nullptr
  , /*decltype(_impl_.totaltime_)*/0} {}
struct FScreenParticleVectorParamOverTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FScreenParticleVectorParamOverTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FScreenParticleVectorParamOverTimeDefaultTypeInternal() {}
  union {
    FScreenParticleVectorParamOverTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FScreenParticleVectorParamOverTimeDefaultTypeInternal _FScreenParticleVectorParamOverTime_default_instance_;
PROTOBUF_CONSTEXPR FScreenParticleParamOverTime::FScreenParticleParamOverTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scalarparams_)*/{}
  , /*decltype(_impl_.vectorparams_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FScreenParticleParamOverTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FScreenParticleParamOverTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FScreenParticleParamOverTimeDefaultTypeInternal() {}
  union {
    FScreenParticleParamOverTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FScreenParticleParamOverTimeDefaultTypeInternal _FScreenParticleParamOverTime_default_instance_;
PROTOBUF_CONSTEXPR FScreenParticleInitParams::FScreenParticleInitParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.screenparticlemodifiers_)*/{}
  , /*decltype(_impl_.template__)*/nullptr
  , /*decltype(_impl_.templatescreenparticlematerial_)*/nullptr
  , /*decltype(_impl_.matparamname_)*/nullptr
  , /*decltype(_impl_.particletag_)*/nullptr
  , /*decltype(_impl_.contentdims_)*/nullptr
  , /*decltype(_impl_.stopparamsot_)*/nullptr
  , /*decltype(_impl_.particledepth_)*/0
  , /*decltype(_impl_.scalingmode_)*/0
  , /*decltype(_impl_.bhidewhenfinished_)*/false
  , /*decltype(_impl_.bonlyownersee_)*/false
  , /*decltype(_impl_.balwaysvisible_)*/false
  , /*decltype(_impl_.busedesignerattributeparameters_)*/false
  , /*decltype(_impl_.effectdepthprioritygroup_)*/0} {}
struct FScreenParticleInitParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FScreenParticleInitParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FScreenParticleInitParamsDefaultTypeInternal() {}
  union {
    FScreenParticleInitParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FScreenParticleInitParamsDefaultTypeInternal _FScreenParticleInitParams_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedDamageScreenParticle::FReplicatedDamageScreenParticle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.referenceloaction_)*/nullptr
  , /*decltype(_impl_.genericscale_)*/0
  , /*decltype(_impl_.counter_)*/0} {}
struct FReplicatedDamageScreenParticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedDamageScreenParticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedDamageScreenParticleDefaultTypeInternal() {}
  union {
    FReplicatedDamageScreenParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedDamageScreenParticleDefaultTypeInternal _FReplicatedDamageScreenParticle_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedProgressBarData::FReplicatedProgressBarData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.rate_)*/0
  , /*decltype(_impl_.startoffset_)*/0} {}
struct FReplicatedProgressBarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedProgressBarDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedProgressBarDataDefaultTypeInternal() {}
  union {
    FReplicatedProgressBarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedProgressBarDataDefaultTypeInternal _FReplicatedProgressBarData_default_instance_;
PROTOBUF_CONSTEXPR FCameraViewData::FCameraViewData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewtarget_)*/nullptr
  , /*decltype(_impl_.modename_)*/nullptr
  , /*decltype(_impl_.blendtimeoverride_)*/0
  , /*decltype(_impl_.bisteleport_)*/false
  , /*decltype(_impl_.desireddeathspectatorstate_)*/0} {}
struct FCameraViewDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FCameraViewDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FCameraViewDataDefaultTypeInternal() {}
  union {
    FCameraViewData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FCameraViewDataDefaultTypeInternal _FCameraViewData_default_instance_;
PROTOBUF_CONSTEXPR FActorSelectionDataContainer::FActorSelectionDataContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.unittype_)*/nullptr
  , /*decltype(_impl_.pri_)*/nullptr
  , /*decltype(_impl_.nameid_)*/nullptr
  , /*decltype(_impl_.health_)*/0
  , /*decltype(_impl_.shield_)*/0
  , /*decltype(_impl_.overshield_)*/0
  , /*decltype(_impl_.bdisplayhealth_)*/false
  , /*decltype(_impl_.bdisplayshield_)*/false
  , /*decltype(_impl_.bdisplayovershield_)*/false
  , /*decltype(_impl_.bdisplaylevel_)*/false
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.respawntime_)*/0
  , /*decltype(_impl_.bdisplayrespawntime_)*/false
  , /*decltype(_impl_.bdisplayname_)*/false
  , /*decltype(_impl_.bactive_)*/false
  , /*decltype(_impl_.binjured_)*/false} {}
struct FActorSelectionDataContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FActorSelectionDataContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FActorSelectionDataContainerDefaultTypeInternal() {}
  union {
    FActorSelectionDataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FActorSelectionDataContainerDefaultTypeInternal _FActorSelectionDataContainer_default_instance_;
PROTOBUF_CONSTEXPR APoplarPlayerController::APoplarPlayerController(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currentinteractionicon_)*/{}
  , /*decltype(_impl_.minimapactorselectdata_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.instigator_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.basebonename_)*/nullptr
  , /*decltype(_impl_.relativelocation_)*/nullptr
  , /*decltype(_impl_.relativerotation_)*/nullptr
  , /*decltype(_impl_.pawn_)*/nullptr
  , /*decltype(_impl_.clientpendingpsi_)*/nullptr
  , /*decltype(_impl_.clientpendingpri_)*/nullptr
  , /*decltype(_impl_.targetviewrotation_)*/nullptr
  , /*decltype(_impl_.activeaudioeffect_)*/nullptr
  , /*decltype(_impl_.mywillowpawn_)*/nullptr
  , /*decltype(_impl_.currentusableobject_object_)*/nullptr
  , /*decltype(_impl_.currentusableobject_interface_)*/nullptr
  , /*decltype(_impl_.recentdamagescreenparticle_)*/nullptr
  , /*decltype(_impl_.useprogressbar_)*/nullptr
  , /*decltype(_impl_.replicatedcameraviewdata_)*/nullptr
  , /*decltype(_impl_.pipelinesummaryhistorymanager_)*/nullptr
  , /*decltype(_impl_.drawscale_)*/0
  , /*decltype(_impl_.customtimedilation_)*/0
  , /*decltype(_impl_.physics_)*/0u
  , /*decltype(_impl_.remoterole_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.replicatedcollisiontype_)*/0u
  , /*decltype(_impl_.bhidden_)*/false
  , /*decltype(_impl_.btearoff_)*/false
  , /*decltype(_impl_.bhardattach_)*/false
  , /*decltype(_impl_.bcollideactors_)*/false
  , /*decltype(_impl_.bcollideworld_)*/false
  , /*decltype(_impl_.bblockactors_)*/false
  , /*decltype(_impl_.bprojtarget_)*/false
  , /*decltype(_impl_.bnetowner_)*/false
  , /*decltype(_impl_.targeteyeheight_)*/0
  , /*decltype(_impl_.bhideammoonhud_)*/false
  , /*decltype(_impl_.bhidecompassonhud_)*/false
  , /*decltype(_impl_.bhideskillsonhud_)*/false
  , /*decltype(_impl_.bhidexponhud_)*/false
  , /*decltype(_impl_.bconsolecontroller_)*/false
  , /*decltype(_impl_.bdisplaytradeicon_)*/false
  , /*decltype(_impl_.bdisplaytradedisabledicon_)*/false
  , /*decltype(_impl_.bresurrectall_)*/false
  , /*decltype(_impl_.bplayingteleportersound_)*/false
  , /*decltype(_impl_.fovmodifierspeed_)*/0
  , /*decltype(_impl_.fovmodifierspeedbasevalue_)*/0
  , /*decltype(_impl_.postprocessdurationmultiplier_)*/0
  , /*decltype(_impl_.targetedwarningseverity_)*/0
  , /*decltype(_impl_.currentminimapactorselectionindex_)*/0} {}
struct APoplarPlayerControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APoplarPlayerControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APoplarPlayerControllerDefaultTypeInternal() {}
  union {
    APoplarPlayerController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APoplarPlayerControllerDefaultTypeInternal _APoplarPlayerController_default_instance_;
PROTOBUF_CONSTEXPR FUniqueID::FUniqueID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rawid_)*/{}
  , /*decltype(_impl_.bhasvalue_)*/false} {}
struct FUniqueIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FUniqueIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FUniqueIDDefaultTypeInternal() {}
  union {
    FUniqueID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FUniqueIDDefaultTypeInternal _FUniqueID_default_instance_;
PROTOBUF_CONSTEXPR FCurrencyState::FCurrencyState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.currentamount_)*/0
  , /*decltype(_impl_.lastknownamount_)*/0} {}
struct FCurrencyStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FCurrencyStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FCurrencyStateDefaultTypeInternal() {}
  union {
    FCurrencyState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FCurrencyStateDefaultTypeInternal _FCurrencyState_default_instance_;
PROTOBUF_CONSTEXPR FResourcePoolReference::FResourcePoolReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.poolmanager_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.poolindexinmanager_)*/0
  , /*decltype(_impl_.poolguid_)*/0} {}
struct FResourcePoolReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FResourcePoolReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FResourcePoolReferenceDefaultTypeInternal() {}
  union {
    FResourcePoolReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FResourcePoolReferenceDefaultTypeInternal _FResourcePoolReference_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedNounAttributeState::FReplicatedNounAttributeState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nounname_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.bonlyrelevanttoowner_)*/false} {}
struct FReplicatedNounAttributeStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedNounAttributeStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedNounAttributeStateDefaultTypeInternal() {}
  union {
    FReplicatedNounAttributeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedNounAttributeStateDefaultTypeInternal _FReplicatedNounAttributeState_default_instance_;
PROTOBUF_CONSTEXPR FWeaponDefinitionData::FWeaponDefinitionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weapontypedefinition_)*/nullptr} {}
struct FWeaponDefinitionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FWeaponDefinitionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FWeaponDefinitionDataDefaultTypeInternal() {}
  union {
    FWeaponDefinitionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FWeaponDefinitionDataDefaultTypeInternal _FWeaponDefinitionData_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedStandInGear::FReplicatedStandInGear(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weapon1data_)*/nullptr
  , /*decltype(_impl_.weapon2data_)*/nullptr} {}
struct FReplicatedStandInGearDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedStandInGearDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedStandInGearDefaultTypeInternal() {}
  union {
    FReplicatedStandInGear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedStandInGearDefaultTypeInternal _FReplicatedStandInGear_default_instance_;
PROTOBUF_CONSTEXPR FTrackedSkillState::FTrackedSkillState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.skilldef_)*/nullptr
  , /*decltype(_impl_.packedstackcountandpercentcomplete_)*/0} {}
struct FTrackedSkillStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTrackedSkillStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTrackedSkillStateDefaultTypeInternal() {}
  union {
    FTrackedSkillState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTrackedSkillStateDefaultTypeInternal _FTrackedSkillState_default_instance_;
PROTOBUF_CONSTEXPR FManagedActorCountData::FManagedActorCountData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.count_)*/0} {}
struct FManagedActorCountDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FManagedActorCountDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FManagedActorCountDataDefaultTypeInternal() {}
  union {
    FManagedActorCountData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FManagedActorCountDataDefaultTypeInternal _FManagedActorCountData_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedPerkItem::FReplicatedPerkItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.assetkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apollojson_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/nullptr
  , /*decltype(_impl_.perkfunction_)*/nullptr
  , /*decltype(_impl_.wearable_)*/nullptr
  , /*decltype(_impl_.itemlevel_)*/0
  , /*decltype(_impl_.rarity_)*/0
  , /*decltype(_impl_.bcanuse_)*/false
  , /*decltype(_impl_.bactive_)*/false
  , /*decltype(_impl_.entitlementindex_)*/0} {}
struct FReplicatedPerkItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedPerkItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedPerkItemDefaultTypeInternal() {}
  union {
    FReplicatedPerkItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedPerkItemDefaultTypeInternal _FReplicatedPerkItem_default_instance_;
PROTOBUF_CONSTEXPR FAugInstance::FAugInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.augdef_)*/nullptr
  , /*decltype(_impl_.currenttier_)*/0
  , /*decltype(_impl_.clientpurchasestatus_)*/0
  , /*decltype(_impl_.preselected_)*/false} {}
struct FAugInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FAugInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FAugInstanceDefaultTypeInternal() {}
  union {
    FAugInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FAugInstanceDefaultTypeInternal _FAugInstance_default_instance_;
PROTOBUF_CONSTEXPR FAugCategoryInstance::FAugCategoryInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.augs_)*/{}
  , /*decltype(_impl_.categorydef_)*/nullptr
  , /*decltype(_impl_.mutation_)*/nullptr
  , /*decltype(_impl_.categoryisunlocked_)*/false} {}
struct FAugCategoryInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FAugCategoryInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FAugCategoryInstanceDefaultTypeInternal() {}
  union {
    FAugCategoryInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FAugCategoryInstanceDefaultTypeInternal _FAugCategoryInstance_default_instance_;
PROTOBUF_CONSTEXPR FAugSetInstance::FAugSetInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allcategories_)*/{}
  , /*decltype(_impl_.augsetdef_)*/nullptr} {}
struct FAugSetInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FAugSetInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FAugSetInstanceDefaultTypeInternal() {}
  union {
    FAugSetInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FAugSetInstanceDefaultTypeInternal _FAugSetInstance_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedBehaviorConsumerState::FReplicatedBehaviorConsumerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.behaviorsequenceenabledflags_)*/0
  , /*decltype(_impl_.bisprocesssuspended_)*/false
  , /*decltype(_impl_.bneedtoapplythisstate_)*/false} {}
struct FReplicatedBehaviorConsumerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedBehaviorConsumerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedBehaviorConsumerStateDefaultTypeInternal() {}
  union {
    FReplicatedBehaviorConsumerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedBehaviorConsumerStateDefaultTypeInternal _FReplicatedBehaviorConsumerState_default_instance_;
PROTOBUF_CONSTEXPR FReplicatedBehaviorEvent::FReplicatedBehaviorEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instigator_)*/nullptr
  , /*decltype(_impl_.sequenceindex_)*/0
  , /*decltype(_impl_.eventcounter_)*/0
  , /*decltype(_impl_.eventindex_)*/0
  , /*decltype(_impl_.eventoutput_)*/0} {}
struct FReplicatedBehaviorEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FReplicatedBehaviorEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FReplicatedBehaviorEventDefaultTypeInternal() {}
  union {
    FReplicatedBehaviorEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FReplicatedBehaviorEventDefaultTypeInternal _FReplicatedBehaviorEvent_default_instance_;
PROTOBUF_CONSTEXPR FCinematicModeOptions::FCinematicModeOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bcinematicmode_)*/false
  , /*decltype(_impl_.bhideplayer_)*/false
  , /*decltype(_impl_.baffectshud_)*/false
  , /*decltype(_impl_.baffectsmovement_)*/false
  , /*decltype(_impl_.baffectsturning_)*/false
  , /*decltype(_impl_.baffectsbuttons_)*/false
  , /*decltype(_impl_.baffectsgodmode_)*/false
  , /*decltype(_impl_.baffectsnotarget_)*/false
  , /*decltype(_impl_.ballowcinematicsplitscreen_)*/false
  , /*decltype(_impl_.baffectsaudio_)*/false
  , /*decltype(_impl_.bkismetsetcinematicmode_)*/false
  , /*decltype(_impl_.bhideoutlines_)*/false
  , /*decltype(_impl_.baffectsskills_)*/false
  , /*decltype(_impl_.bhidescreenparticles_)*/false
  , /*decltype(_impl_.applicationmode_)*/0
  , /*decltype(_impl_.modetoken_)*/0} {}
struct FCinematicModeOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FCinematicModeOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FCinematicModeOptionsDefaultTypeInternal() {}
  union {
    FCinematicModeOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FCinematicModeOptionsDefaultTypeInternal _FCinematicModeOptions_default_instance_;
PROTOBUF_CONSTEXPR APoplarPlayerReplicationInfo::APoplarPlayerReplicationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_)*/{}
  , /*decltype(_impl_.replicatednouns_)*/{}
  , /*decltype(_impl_.trackedskills_)*/{}
  , /*decltype(_impl_.nemesispriarray_)*/{}
  , /*decltype(_impl_.managedactorcounts_)*/{}
  , /*decltype(_impl_.activatedperkflags_)*/{}
  , /*decltype(_impl_.perks_)*/{}
  , /*decltype(_impl_.currentwearabledefinitions_)*/{}
  , /*decltype(_impl_.playername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.instigator_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.team_)*/nullptr
  , /*decltype(_impl_.healthpool_)*/nullptr
  , /*decltype(_impl_.shieldarmor_)*/nullptr
  , /*decltype(_impl_.pawnallegiance_)*/nullptr
  , /*decltype(_impl_.characternameiddef_)*/nullptr
  , /*decltype(_impl_.standingear_)*/nullptr
  , /*decltype(_impl_.poplarpsi_)*/nullptr
  , /*decltype(_impl_.botownerpri_)*/nullptr
  , /*decltype(_impl_.myalertpoint_)*/nullptr
  , /*decltype(_impl_.energypool_)*/nullptr
  , /*decltype(_impl_.unittypedefinition_)*/nullptr
  , /*decltype(_impl_.statreplicationinfo_)*/nullptr
  , /*decltype(_impl_.browsecharacternameiddef_)*/nullptr
  , /*decltype(_impl_.browseskiniddef_)*/nullptr
  , /*decltype(_impl_.skiniddef_)*/nullptr
  , /*decltype(_impl_.augs_)*/nullptr
  , /*decltype(_impl_.replicatedbehaviorconsumerstate_)*/nullptr
  , /*decltype(_impl_.replicatedbehaviorevent_)*/nullptr
  , /*decltype(_impl_.replicatedcinematicmodeoptions_)*/nullptr
  , /*decltype(_impl_.uniqueid_)*/nullptr
  , /*decltype(_impl_.drawscale_)*/0
  , /*decltype(_impl_.customtimedilation_)*/0
  , /*decltype(_impl_.physics_)*/0u
  , /*decltype(_impl_.remoterole_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.replicatedcollisiontype_)*/0u
  , /*decltype(_impl_.bhidden_)*/false
  , /*decltype(_impl_.btearoff_)*/false
  , /*decltype(_impl_.bhardattach_)*/false
  , /*decltype(_impl_.bcollideactors_)*/false
  , /*decltype(_impl_.bcollideworld_)*/false
  , /*decltype(_impl_.bblockactors_)*/false
  , /*decltype(_impl_.bprojtarget_)*/false
  , /*decltype(_impl_.bnetowner_)*/false
  , /*decltype(_impl_.deaths_)*/0
  , /*decltype(_impl_.ping_)*/0
  , /*decltype(_impl_.badmin_)*/false
  , /*decltype(_impl_.bisspectator_)*/false
  , /*decltype(_impl_.bonlyspectator_)*/false
  , /*decltype(_impl_.boutoflives_)*/false
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.bbot_)*/false
  , /*decltype(_impl_.bfrompreviouslevel_)*/false
  , /*decltype(_impl_.bplayerafk_)*/false
  , /*decltype(_impl_.bisdead_)*/false
  , /*decltype(_impl_.starttime_)*/0
  , /*decltype(_impl_.kills_)*/0
  , /*decltype(_impl_.explevel_)*/0
  , /*decltype(_impl_.exppointsnextlevelat_)*/0
  , /*decltype(_impl_.exppointsnextlevelatbasevalue_)*/0
  , /*decltype(_impl_.generalskillpoints_)*/0
  , /*decltype(_impl_.specialistskillpoints_)*/0
  , /*decltype(_impl_.currentinstanthitcriticalhitbonus_)*/0
  , /*decltype(_impl_.currentinstanthitcriticalhitbonusbasevalue_)*/0
  , /*decltype(_impl_.numtrackedskillslotsinuse_)*/0
  , /*decltype(_impl_.bhideonhudifenemy_)*/false
  , /*decltype(_impl_.bgfxmenuopen_)*/false
  , /*decltype(_impl_.bnpc_)*/false
  , /*decltype(_impl_.bdigitaldelux_)*/false
  , /*decltype(_impl_.highestcompletedplaythrough_)*/0
  , /*decltype(_impl_.numreplicatednouns_)*/0
  , /*decltype(_impl_.bplaybrowsingtaunt_)*/false
  , /*decltype(_impl_.bispvematch_)*/false
  , /*decltype(_impl_.bneedstocastsurrendervote_)*/false
  , /*decltype(_impl_.botdifficulty_)*/0
  , /*decltype(_impl_.replicatedrespawntimeremaining_)*/0u
  , /*decltype(_impl_.characterselectionstate_)*/0u
  , /*decltype(_impl_.overshieldstrength_)*/0
  , /*decltype(_impl_.maxovershieldvalue_)*/0} {}
struct APoplarPlayerReplicationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APoplarPlayerReplicationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APoplarPlayerReplicationInfoDefaultTypeInternal() {}
  union {
    APoplarPlayerReplicationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APoplarPlayerReplicationInfoDefaultTypeInternal _APoplarPlayerReplicationInfo_default_instance_;
PROTOBUF_CONSTEXPR ActorReplicationMessage::ActorReplicationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.replicationmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.actortype_)*/0
  , /*decltype(_impl_.isinitial_)*/false
  , /*decltype(_impl_.actorid_)*/0u} {}
struct ActorReplicationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorReplicationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorReplicationMessageDefaultTypeInternal() {}
  union {
    ActorReplicationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorReplicationMessageDefaultTypeInternal _ActorReplicationMessage_default_instance_;
PROTOBUF_CONSTEXPR ReplicationFrame::ReplicationFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actorreplicationmessages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplicationFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicationFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicationFrameDefaultTypeInternal() {}
  union {
    ReplicationFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicationFrameDefaultTypeInternal _ReplicationFrame_default_instance_;
}  // namespace HederaDefinitions
static ::_pb::Metadata file_level_metadata_definitions_2eproto[38];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_definitions_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_definitions_2eproto = nullptr;

const uint32_t TableStruct_definitions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FRotator, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FRotator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FRotator, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FRotator, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FRotator, _impl_.roll_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ReplicatedActorReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ReplicatedActorReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ReplicatedActorReference, _impl_.actorid_),
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::NonReplicatedObjectReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::NonReplicatedObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::NonReplicatedObjectReference, _impl_.fullnamelookup_),
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FName, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FName, _impl_.fnameentryid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FName, _impl_.instancenumber_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FEnvironmentalEffectInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FEnvironmentalEffectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FEnvironmentalEffectInfo, _impl_.effectid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FEnvironmentalEffectInfo, _impl_.auxbusvolume_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FEnvironmentalEffectInfo, _impl_.outputbusvolume_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeDefinitionDefault, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeDefinitionDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeDefinitionDefault, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeDefinitionDefault, _impl_.defaultvalue_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.paramname_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.bvectorparam_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.bclampinput_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.mininput_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.maxinput_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.minoutput_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.maxoutput_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.scalarparamoperand_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAttributeScalarParam, _impl_.currentvalue_),
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleModifier, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleModifier, _impl_.scalarparams_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleModifier, _impl_.cachedvalue_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.icondef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.overrideicondef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.boverrideicon_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.boverrideaction_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.boverridetext_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.bcoststouse_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.costscurrencytype_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FInteractionIconWithOverrides, _impl_.costsamount_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector2D, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector2D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FVector2D, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _impl_.parametername_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _impl_.totaltime_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _impl_.startvalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _impl_.endvalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleScalarParamOverTime, _impl_.lastvalue_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _impl_.parametername_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _impl_.totaltime_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _impl_.vectorstartvalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _impl_.vectorendvalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleVectorParamOverTime, _impl_.lastvalue_),
  0,
  4,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleParamOverTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleParamOverTime, _impl_.scalarparams_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleParamOverTime, _impl_.vectorparams_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.template__),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.screenparticlemodifiers_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.templatescreenparticlematerial_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.matparamname_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.bhidewhenfinished_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.particletag_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.contentdims_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.particledepth_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.scalingmode_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.stopparamsot_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.bonlyownersee_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.effectdepthprioritygroup_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.balwaysvisible_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FScreenParticleInitParams, _impl_.busedesignerattributeparameters_),
  0,
  ~0u,
  1,
  2,
  8,
  3,
  4,
  6,
  7,
  5,
  9,
  12,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedDamageScreenParticle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedDamageScreenParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedDamageScreenParticle, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedDamageScreenParticle, _impl_.referenceloaction_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedDamageScreenParticle, _impl_.genericscale_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedDamageScreenParticle, _impl_.counter_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedProgressBarData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedProgressBarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedProgressBarData, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedProgressBarData, _impl_.rate_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedProgressBarData, _impl_.startoffset_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _impl_.viewtarget_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _impl_.modename_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _impl_.blendtimeoverride_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _impl_.bisteleport_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCameraViewData, _impl_.desireddeathspectatorstate_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bdisplayhealth_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.shield_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bdisplayshield_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.overshield_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bdisplayovershield_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bdisplaylevel_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.respawntime_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bdisplayrespawntime_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bdisplayname_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.bactive_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.unittype_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.pri_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.binjured_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.nameid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FActorSelectionDataContainer, _impl_.name_),
  5,
  8,
  6,
  9,
  7,
  10,
  12,
  11,
  13,
  14,
  15,
  1,
  16,
  2,
  3,
  17,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.drawscale_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.customtimedilation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.physics_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.remoterole_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.replicatedcollisiontype_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bhidden_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.btearoff_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bhardattach_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bcollideactors_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bcollideworld_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bblockactors_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bprojtarget_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bnetowner_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.instigator_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.basebonename_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.relativelocation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.relativerotation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.pawn_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.clientpendingpsi_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.clientpendingpri_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.targetviewrotation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.targeteyeheight_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.activeaudioeffect_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bhideammoonhud_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bhidecompassonhud_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bhideskillsonhud_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bhidexponhud_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bconsolecontroller_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bdisplaytradeicon_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bdisplaytradedisabledicon_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bresurrectall_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.bplayingteleportersound_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.mywillowpawn_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.currentusableobject_object_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.currentusableobject_interface_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.currentinteractionicon_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.recentdamagescreenparticle_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.fovmodifierspeed_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.fovmodifierspeedbasevalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.postprocessdurationmultiplier_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.useprogressbar_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.targetedwarningseverity_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.replicatedcameraviewdata_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.pipelinesummaryhistorymanager_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.minimapactorselectdata_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerController, _impl_.currentminimapactorselectionindex_),
  0,
  1,
  21,
  22,
  23,
  24,
  25,
  26,
  2,
  3,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  35,
  13,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  14,
  15,
  16,
  ~0u,
  17,
  45,
  46,
  47,
  18,
  48,
  19,
  20,
  ~0u,
  49,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FUniqueID, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FUniqueID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FUniqueID, _impl_.rawid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FUniqueID, _impl_.bhasvalue_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCurrencyState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCurrencyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCurrencyState, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCurrencyState, _impl_.currentamount_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCurrencyState, _impl_.lastknownamount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FResourcePoolReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FResourcePoolReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FResourcePoolReference, _impl_.poolmanager_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FResourcePoolReference, _impl_.poolindexinmanager_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FResourcePoolReference, _impl_.poolguid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FResourcePoolReference, _impl_.data_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedNounAttributeState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedNounAttributeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedNounAttributeState, _impl_.nounname_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedNounAttributeState, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedNounAttributeState, _impl_.bonlyrelevanttoowner_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FWeaponDefinitionData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FWeaponDefinitionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FWeaponDefinitionData, _impl_.weapontypedefinition_),
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedStandInGear, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedStandInGear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedStandInGear, _impl_.weapon1data_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedStandInGear, _impl_.weapon2data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FTrackedSkillState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FTrackedSkillState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FTrackedSkillState, _impl_.skilldef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FTrackedSkillState, _impl_.packedstackcountandpercentcomplete_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FManagedActorCountData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FManagedActorCountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FManagedActorCountData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FManagedActorCountData, _impl_.count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.metaid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.assetkey_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.bcanuse_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.itemlevel_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.rarity_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.apollojson_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.entitlementindex_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.bactive_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.perkfunction_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedPerkItem, _impl_.wearable_),
  0,
  1,
  8,
  6,
  7,
  3,
  2,
  10,
  9,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugInstance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugInstance, _impl_.augdef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugInstance, _impl_.currenttier_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugInstance, _impl_.clientpurchasestatus_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugInstance, _impl_.preselected_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugCategoryInstance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugCategoryInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugCategoryInstance, _impl_.categorydef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugCategoryInstance, _impl_.augs_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugCategoryInstance, _impl_.mutation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugCategoryInstance, _impl_.categoryisunlocked_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugSetInstance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugSetInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugSetInstance, _impl_.augsetdef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FAugSetInstance, _impl_.allcategories_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorConsumerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorConsumerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorConsumerState, _impl_.bisprocesssuspended_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorConsumerState, _impl_.behaviorsequenceenabledflags_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorConsumerState, _impl_.bneedtoapplythisstate_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _impl_.sequenceindex_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _impl_.eventcounter_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _impl_.eventindex_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _impl_.eventoutput_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FReplicatedBehaviorEvent, _impl_.instigator_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.bcinematicmode_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.bhideplayer_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectshud_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsmovement_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsturning_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsbuttons_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsgodmode_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsnotarget_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.ballowcinematicsplitscreen_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsaudio_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.bkismetsetcinematicmode_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.bhideoutlines_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.baffectsskills_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.bhidescreenparticles_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.applicationmode_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::FCinematicModeOptions, _impl_.modetoken_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.drawscale_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.customtimedilation_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.physics_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.remoterole_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.replicatedcollisiontype_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bhidden_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.btearoff_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bhardattach_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bcollideactors_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bcollideworld_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bblockactors_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bprojtarget_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bnetowner_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.instigator_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.ping_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.playername_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.badmin_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bisspectator_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bonlyspectator_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.boutoflives_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bbot_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bfrompreviouslevel_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bplayerafk_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.uniqueid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.explevel_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.exppointsnextlevelat_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.exppointsnextlevelatbasevalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bisdead_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bhideonhudifenemy_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.generalskillpoints_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.specialistskillpoints_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.currentinstanthitcriticalhitbonus_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.currentinstanthitcriticalhitbonusbasevalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.healthpool_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.shieldarmor_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.pawnallegiance_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.characternameiddef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bgfxmenuopen_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.numtrackedskillslotsinuse_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.highestcompletedplaythrough_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.numreplicatednouns_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.replicatednouns_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.standingear_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.trackedskills_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.poplarpsi_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bnpc_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bdigitaldelux_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bplaybrowsingtaunt_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bispvematch_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.bneedstocastsurrendervote_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.botownerpri_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.botdifficulty_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.myalertpoint_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.energypool_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.unittypedefinition_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.statreplicationinfo_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.nemesispriarray_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.managedactorcounts_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.replicatedrespawntimeremaining_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.characterselectionstate_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.activatedperkflags_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.perks_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.overshieldstrength_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.maxovershieldvalue_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.browsecharacternameiddef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.browseskiniddef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.skiniddef_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.augs_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.replicatedbehaviorconsumerstate_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.replicatedbehaviorevent_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.replicatedcinematicmodeoptions_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::APoplarPlayerReplicationInfo, _impl_.currentwearabledefinitions_),
  1,
  2,
  27,
  28,
  29,
  30,
  31,
  32,
  3,
  4,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  5,
  6,
  41,
  42,
  0,
  43,
  44,
  45,
  46,
  48,
  49,
  50,
  47,
  7,
  52,
  53,
  26,
  54,
  55,
  56,
  51,
  62,
  57,
  58,
  59,
  60,
  ~0u,
  8,
  9,
  10,
  11,
  63,
  61,
  66,
  67,
  ~0u,
  12,
  ~0u,
  13,
  64,
  65,
  68,
  69,
  70,
  14,
  71,
  15,
  16,
  17,
  18,
  ~0u,
  ~0u,
  72,
  73,
  ~0u,
  ~0u,
  74,
  75,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ActorReplicationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ActorReplicationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ActorReplicationMessage, _impl_.actortype_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ActorReplicationMessage, _impl_.isinitial_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ActorReplicationMessage, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ActorReplicationMessage, _impl_.replicationmessage_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ReplicationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HederaDefinitions::ReplicationFrame, _impl_.actorreplicationmessages_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::HederaDefinitions::FRotator)},
  { 12, 21, -1, sizeof(::HederaDefinitions::FVector)},
  { 24, 31, -1, sizeof(::HederaDefinitions::ReplicatedActorReference)},
  { 32, 39, -1, sizeof(::HederaDefinitions::NonReplicatedObjectReference)},
  { 40, 48, -1, sizeof(::HederaDefinitions::FName)},
  { 50, 59, -1, sizeof(::HederaDefinitions::FEnvironmentalEffectInfo)},
  { 62, 70, -1, sizeof(::HederaDefinitions::FAttributeDefinitionDefault)},
  { 72, 88, -1, sizeof(::HederaDefinitions::FAttributeScalarParam)},
  { 98, 106, -1, sizeof(::HederaDefinitions::FScreenParticleModifier)},
  { 108, 122, -1, sizeof(::HederaDefinitions::FInteractionIconWithOverrides)},
  { 130, 138, -1, sizeof(::HederaDefinitions::FVector2D)},
  { 140, 151, -1, sizeof(::HederaDefinitions::FScreenParticleScalarParamOverTime)},
  { 156, 167, -1, sizeof(::HederaDefinitions::FScreenParticleVectorParamOverTime)},
  { 172, -1, -1, sizeof(::HederaDefinitions::FScreenParticleParamOverTime)},
  { 180, 200, -1, sizeof(::HederaDefinitions::FScreenParticleInitParams)},
  { 214, 224, -1, sizeof(::HederaDefinitions::FReplicatedDamageScreenParticle)},
  { 228, 237, -1, sizeof(::HederaDefinitions::FReplicatedProgressBarData)},
  { 240, 251, -1, sizeof(::HederaDefinitions::FCameraViewData)},
  { 256, 280, -1, sizeof(::HederaDefinitions::FActorSelectionDataContainer)},
  { 298, 356, -1, sizeof(::HederaDefinitions::APoplarPlayerController)},
  { 408, 416, -1, sizeof(::HederaDefinitions::FUniqueID)},
  { 418, 427, -1, sizeof(::HederaDefinitions::FCurrencyState)},
  { 430, 440, -1, sizeof(::HederaDefinitions::FResourcePoolReference)},
  { 444, 453, -1, sizeof(::HederaDefinitions::FReplicatedNounAttributeState)},
  { 456, 463, -1, sizeof(::HederaDefinitions::FWeaponDefinitionData)},
  { 464, 472, -1, sizeof(::HederaDefinitions::FReplicatedStandInGear)},
  { 474, 482, -1, sizeof(::HederaDefinitions::FTrackedSkillState)},
  { 484, 492, -1, sizeof(::HederaDefinitions::FManagedActorCountData)},
  { 494, 511, -1, sizeof(::HederaDefinitions::FReplicatedPerkItem)},
  { 522, 532, -1, sizeof(::HederaDefinitions::FAugInstance)},
  { 536, 546, -1, sizeof(::HederaDefinitions::FAugCategoryInstance)},
  { 550, 558, -1, sizeof(::HederaDefinitions::FAugSetInstance)},
  { 560, 569, -1, sizeof(::HederaDefinitions::FReplicatedBehaviorConsumerState)},
  { 572, 583, -1, sizeof(::HederaDefinitions::FReplicatedBehaviorEvent)},
  { 588, 610, -1, sizeof(::HederaDefinitions::FCinematicModeOptions)},
  { 626, 716, -1, sizeof(::HederaDefinitions::APoplarPlayerReplicationInfo)},
  { 800, 810, -1, sizeof(::HederaDefinitions::ActorReplicationMessage)},
  { 814, -1, -1, sizeof(::HederaDefinitions::ReplicationFrame)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::HederaDefinitions::_FRotator_default_instance_._instance,
  &::HederaDefinitions::_FVector_default_instance_._instance,
  &::HederaDefinitions::_ReplicatedActorReference_default_instance_._instance,
  &::HederaDefinitions::_NonReplicatedObjectReference_default_instance_._instance,
  &::HederaDefinitions::_FName_default_instance_._instance,
  &::HederaDefinitions::_FEnvironmentalEffectInfo_default_instance_._instance,
  &::HederaDefinitions::_FAttributeDefinitionDefault_default_instance_._instance,
  &::HederaDefinitions::_FAttributeScalarParam_default_instance_._instance,
  &::HederaDefinitions::_FScreenParticleModifier_default_instance_._instance,
  &::HederaDefinitions::_FInteractionIconWithOverrides_default_instance_._instance,
  &::HederaDefinitions::_FVector2D_default_instance_._instance,
  &::HederaDefinitions::_FScreenParticleScalarParamOverTime_default_instance_._instance,
  &::HederaDefinitions::_FScreenParticleVectorParamOverTime_default_instance_._instance,
  &::HederaDefinitions::_FScreenParticleParamOverTime_default_instance_._instance,
  &::HederaDefinitions::_FScreenParticleInitParams_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedDamageScreenParticle_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedProgressBarData_default_instance_._instance,
  &::HederaDefinitions::_FCameraViewData_default_instance_._instance,
  &::HederaDefinitions::_FActorSelectionDataContainer_default_instance_._instance,
  &::HederaDefinitions::_APoplarPlayerController_default_instance_._instance,
  &::HederaDefinitions::_FUniqueID_default_instance_._instance,
  &::HederaDefinitions::_FCurrencyState_default_instance_._instance,
  &::HederaDefinitions::_FResourcePoolReference_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedNounAttributeState_default_instance_._instance,
  &::HederaDefinitions::_FWeaponDefinitionData_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedStandInGear_default_instance_._instance,
  &::HederaDefinitions::_FTrackedSkillState_default_instance_._instance,
  &::HederaDefinitions::_FManagedActorCountData_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedPerkItem_default_instance_._instance,
  &::HederaDefinitions::_FAugInstance_default_instance_._instance,
  &::HederaDefinitions::_FAugCategoryInstance_default_instance_._instance,
  &::HederaDefinitions::_FAugSetInstance_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedBehaviorConsumerState_default_instance_._instance,
  &::HederaDefinitions::_FReplicatedBehaviorEvent_default_instance_._instance,
  &::HederaDefinitions::_FCinematicModeOptions_default_instance_._instance,
  &::HederaDefinitions::_APoplarPlayerReplicationInfo_default_instance_._instance,
  &::HederaDefinitions::_ActorReplicationMessage_default_instance_._instance,
  &::HederaDefinitions::_ReplicationFrame_default_instance_._instance,
};

const char descriptor_table_protodef_definitions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021definitions.proto\022\021HederaDefinitions\"4"
  "\n\010FRotator\022\r\n\005Pitch\030\001 \002(\005\022\013\n\003Yaw\030\002 \002(\005\022\014"
  "\n\004Roll\030\003 \002(\005\"*\n\007FVector\022\t\n\001X\030\001 \002(\002\022\t\n\001Y\030"
  "\002 \002(\002\022\t\n\001Z\030\003 \002(\002\"+\n\030ReplicatedActorRefer"
  "ence\022\017\n\007actorID\030\001 \002(\r\"6\n\034NonReplicatedOb"
  "jectReference\022\026\n\016fullNameLookup\030\001 \002(\t\"5\n"
  "\005FName\022\024\n\014FNameEntryId\030\001 \002(\005\022\026\n\016Instance"
  "Number\030\002 \002(\005\"[\n\030FEnvironmentalEffectInfo"
  "\022\020\n\010EffectID\030\001 \002(\005\022\024\n\014AuxBusVolume\030\002 \002(\002"
  "\022\027\n\017OutputBusVolume\030\003 \002(\002\"w\n\033FAttributeD"
  "efinitionDefault\022B\n\tAttribute\030\001 \002(\0132/.He"
  "deraDefinitions.NonReplicatedObjectRefer"
  "ence\022\024\n\014DefaultValue\030\002 \002(\002\"\352\003\n\025FAttribut"
  "eScalarParam\022+\n\tParamName\030\001 \002(\0132\030.Hedera"
  "Definitions.FName\022\024\n\014bVectorParam\030\002 \002(\010\022"
  "\023\n\013bClampInput\030\003 \002(\010\022=\n\005Input\030\004 \002(\0132..He"
  "deraDefinitions.FAttributeDefinitionDefa"
  "ult\022@\n\010MinInput\030\005 \002(\0132..HederaDefinition"
  "s.FAttributeDefinitionDefault\022@\n\010MaxInpu"
  "t\030\006 \002(\0132..HederaDefinitions.FAttributeDe"
  "finitionDefault\022A\n\tMinOutput\030\007 \002(\0132..Hed"
  "eraDefinitions.FAttributeDefinitionDefau"
  "lt\022A\n\tMaxOutput\030\010 \002(\0132..HederaDefinition"
  "s.FAttributeDefinitionDefault\022\032\n\022ScalarP"
  "aramOperand\030\t \002(\005\022\024\n\014CurrentValue\030\n \002(\002\""
  "n\n\027FScreenParticleModifier\022>\n\014ScalarPara"
  "ms\030\001 \003(\0132(.HederaDefinitions.FAttributeS"
  "calarParam\022\023\n\013CachedValue\030\002 \002(\002\"\267\002\n\035FInt"
  "eractionIconWithOverrides\022@\n\007IconDef\030\001 \002"
  "(\0132/.HederaDefinitions.NonReplicatedObje"
  "ctReference\022H\n\017OverrideIconDef\030\002 \002(\0132/.H"
  "ederaDefinitions.NonReplicatedObjectRefe"
  "rence\022\025\n\rbOverrideIcon\030\003 \002(\010\022\027\n\017bOverrid"
  "eAction\030\004 \002(\010\022\025\n\rbOverrideText\030\005 \002(\010\022\023\n\013"
  "bCostsToUse\030\006 \002(\010\022\031\n\021CostsCurrencyType\030\007"
  " \002(\005\022\023\n\013CostsAmount\030\010 \002(\005\"!\n\tFVector2D\022\t"
  "\n\001X\030\001 \002(\002\022\t\n\001Y\030\002 \002(\002\"\241\001\n\"FScreenParticle"
  "ScalarParamOverTime\022/\n\rParameterName\030\001 \002"
  "(\0132\030.HederaDefinitions.FName\022\021\n\tTotalTim"
  "e\030\002 \002(\002\022\022\n\nStartValue\030\003 \002(\002\022\020\n\010EndValue\030"
  "\004 \002(\002\022\021\n\tLastValue\030\005 \002(\002\"\201\002\n\"FScreenPart"
  "icleVectorParamOverTime\022/\n\rParameterName"
  "\030\001 \002(\0132\030.HederaDefinitions.FName\022\021\n\tTota"
  "lTime\030\002 \002(\002\0224\n\020VectorStartValue\030\003 \002(\0132\032."
  "HederaDefinitions.FVector\0222\n\016VectorEndVa"
  "lue\030\004 \002(\0132\032.HederaDefinitions.FVector\022-\n"
  "\tLastValue\030\005 \002(\0132\032.HederaDefinitions.FVe"
  "ctor\"\270\001\n\034FScreenParticleParamOverTime\022K\n"
  "\014ScalarParams\030\001 \003(\01325.HederaDefinitions."
  "FScreenParticleScalarParamOverTime\022K\n\014Ve"
  "ctorParams\030\002 \003(\01325.HederaDefinitions.FSc"
  "reenParticleVectorParamOverTime\"\236\005\n\031FScr"
  "eenParticleInitParams\022A\n\010Template\030\001 \002(\0132"
  "/.HederaDefinitions.NonReplicatedObjectR"
  "eference\022K\n\027ScreenParticleModifiers\030\002 \003("
  "\0132*.HederaDefinitions.FScreenParticleMod"
  "ifier\022W\n\036TemplateScreenParticleMaterial\030"
  "\003 \002(\0132/.HederaDefinitions.NonReplicatedO"
  "bjectReference\022.\n\014MatParamName\030\004 \002(\0132\030.H"
  "ederaDefinitions.FName\022\031\n\021bHideWhenFinis"
  "hed\030\005 \002(\010\022-\n\013ParticleTag\030\006 \002(\0132\030.HederaD"
  "efinitions.FName\0221\n\013ContentDims\030\007 \002(\0132\034."
  "HederaDefinitions.FVector2D\022\025\n\rParticleD"
  "epth\030\010 \002(\002\022\023\n\013ScalingMode\030\t \002(\005\022E\n\014StopP"
  "aramsOT\030\n \002(\0132/.HederaDefinitions.FScree"
  "nParticleParamOverTime\022\025\n\rbOnlyOwnerSee\030"
  "\013 \002(\010\022 \n\030EffectDepthPriorityGroup\030\014 \002(\005\022"
  "\026\n\016bAlwaysVisible\030\r \002(\010\022\'\n\037bUseDesignerA"
  "ttributeParameters\030\016 \002(\010\"\275\001\n\037FReplicated"
  "DamageScreenParticle\022<\n\006Params\030\001 \002(\0132,.H"
  "ederaDefinitions.FScreenParticleInitPara"
  "ms\0225\n\021ReferenceLoaction\030\002 \002(\0132\032.HederaDe"
  "finitions.FVector\022\024\n\014GenericScale\030\003 \002(\002\022"
  "\017\n\007Counter\030\004 \002(\005\"Q\n\032FReplicatedProgressB"
  "arData\022\020\n\010Duration\030\001 \002(\002\022\014\n\004Rate\030\002 \002(\002\022\023"
  "\n\013StartOffset\030\003 \002(\002\"\322\001\n\017FCameraViewData\022"
  "\?\n\nViewTarget\030\001 \002(\0132+.HederaDefinitions."
  "ReplicatedActorReference\022*\n\010ModeName\030\002 \002"
  "(\0132\030.HederaDefinitions.FName\022\031\n\021BlendTim"
  "eOverride\030\003 \002(\002\022\023\n\013bIsTeleport\030\004 \002(\010\022\"\n\032"
  "DesiredDeathSpectatorState\030\005 \002(\005\"\251\004\n\034FAc"
  "torSelectionDataContainer\022\016\n\006Health\030\001 \002("
  "\002\022\026\n\016bDisplayHealth\030\002 \002(\010\022\016\n\006Shield\030\003 \002("
  "\002\022\026\n\016bDisplayShield\030\004 \002(\010\022\022\n\nOvershield\030"
  "\005 \002(\002\022\032\n\022bDisplayOvershield\030\006 \002(\010\022\r\n\005Lev"
  "el\030\007 \002(\005\022\025\n\rbDisplayLevel\030\010 \002(\010\022\023\n\013Respa"
  "wnTime\030\t \002(\002\022\033\n\023bDisplayRespawnTime\030\n \002("
  "\010\022\024\n\014bDisplayName\030\013 \002(\010\022,\n\010Location\030\014 \002("
  "\0132\032.HederaDefinitions.FVector\022\017\n\007bActive"
  "\030\r \002(\010\022A\n\010UnitType\030\016 \002(\0132/.HederaDefinit"
  "ions.NonReplicatedObjectReference\0228\n\003PRI"
  "\030\017 \002(\0132+.HederaDefinitions.ReplicatedAct"
  "orReference\022\020\n\010bInjured\030\020 \002(\010\022\?\n\006NameID\030"
  "\021 \002(\0132/.HederaDefinitions.NonReplicatedO"
  "bjectReference\022\014\n\004Name\030\022 \002(\014\"\365\021\n\027APoplar"
  "PlayerController\022,\n\010Location\030\001 \002(\0132\032.Hed"
  "eraDefinitions.FVector\022-\n\010Rotation\030\002 \002(\013"
  "2\033.HederaDefinitions.FRotator\022\021\n\tDrawSca"
  "le\030\003 \002(\002\022\032\n\022CustomTimeDilation\030\004 \002(\002\022\017\n\007"
  "Physics\030\005 \002(\r\022\022\n\nRemoteRole\030\006 \002(\r\022\014\n\004Rol"
  "e\030\007 \002(\r\022\037\n\027ReplicatedCollisionType\030\010 \002(\r"
  "\022:\n\005Owner\030\t \002(\0132+.HederaDefinitions.Repl"
  "icatedActorReference\0229\n\004Base\030\n \002(\0132+.Hed"
  "eraDefinitions.ReplicatedActorReference\022"
  "\017\n\007bHidden\030\013 \002(\010\022\020\n\010bTearOff\030\014 \002(\010\022\023\n\013bH"
  "ardAttach\030\r \002(\010\022\026\n\016bCollideActors\030\016 \002(\010\022"
  "\025\n\rbCollideWorld\030\017 \002(\010\022\024\n\014bBlockActors\030\020"
  " \002(\010\022\023\n\013bProjTarget\030\021 \002(\010\022\021\n\tbNetOwner\030\022"
  " \002(\010\022\?\n\nInstigator\030\023 \002(\0132+.HederaDefinit"
  "ions.ReplicatedActorReference\022,\n\010Velocit"
  "y\030\024 \002(\0132\032.HederaDefinitions.FVector\022.\n\014B"
  "aseBoneName\030\025 \002(\0132\030.HederaDefinitions.FN"
  "ame\0224\n\020RelativeLocation\030\026 \002(\0132\032.HederaDe"
  "finitions.FVector\0225\n\020RelativeRotation\030\027 "
  "\002(\0132\033.HederaDefinitions.FRotator\0229\n\004Pawn"
  "\030\030 \002(\0132+.HederaDefinitions.ReplicatedAct"
  "orReference\022E\n\020ClientPendingPSI\030\031 \002(\0132+."
  "HederaDefinitions.ReplicatedActorReferen"
  "ce\022E\n\020ClientPendingPRI\030\032 \002(\0132+.HederaDef"
  "initions.ReplicatedActorReference\0227\n\022Tar"
  "getViewRotation\030\033 \002(\0132\033.HederaDefinition"
  "s.FRotator\022\027\n\017TargetEyeHeight\030\034 \002(\002\022F\n\021A"
  "ctiveAudioEffect\030\035 \002(\0132+.HederaDefinitio"
  "ns.FEnvironmentalEffectInfo\022\026\n\016bHideAmmo"
  "OnHud\030\036 \002(\010\022\031\n\021bHideCompassOnHUD\030\037 \002(\010\022\030"
  "\n\020bHideSkillsOnHUD\030  \002(\010\022\024\n\014bHideXPOnHUD"
  "\030! \002(\010\022\032\n\022bConsoleController\030\" \002(\010\022\031\n\021bD"
  "isplayTradeIcon\030# \002(\010\022!\n\031bDisplayTradeDi"
  "sabledIcon\030$ \002(\010\022\025\n\rbResurrectAll\030% \002(\010\022"
  "\037\n\027bPlayingTeleporterSound\030& \002(\010\022A\n\014MyWi"
  "llowPawn\030\' \002(\0132+.HederaDefinitions.Repli"
  "catedActorReference\022S\n\032CurrentUsableObje"
  "ct_Object\030( \002(\0132/.HederaDefinitions.NonR"
  "eplicatedObjectReference\022V\n\035CurrentUsabl"
  "eObject_Interface\030) \002(\0132/.HederaDefiniti"
  "ons.NonReplicatedObjectReference\022P\n\026Curr"
  "entInteractionIcon\030* \003(\01320.HederaDefinit"
  "ions.FInteractionIconWithOverrides\022V\n\032Re"
  "centDamageScreenParticle\030+ \002(\01322.HederaD"
  "efinitions.FReplicatedDamageScreenPartic"
  "le\022\030\n\020FOVModifierSpeed\030, \002(\002\022!\n\031FOVModif"
  "ierSpeedBaseValue\030- \002(\002\022%\n\035PostProcessDu"
  "rationMultiplier\030. \002(\002\022E\n\016UseProgressBar"
  "\030/ \002(\0132-.HederaDefinitions.FReplicatedPr"
  "ogressBarData\022\037\n\027TargetedWarningSeverity"
  "\0300 \002(\005\022D\n\030ReplicatedCameraViewData\0301 \002(\013"
  "2\".HederaDefinitions.FCameraViewData\022R\n\035"
  "PipelineSummaryHistoryManager\0302 \002(\0132+.He"
  "deraDefinitions.ReplicatedActorReference"
  "\022O\n\026MinimapActorSelectData\0303 \003(\0132/.Heder"
  "aDefinitions.FActorSelectionDataContaine"
  "r\022)\n!CurrentMinimapActorSelectionIndex\0304"
  " \002(\005\"-\n\tFUniqueID\022\r\n\005RawID\030\001 \003(\005\022\021\n\tbHas"
  "Value\030\002 \002(\010\"N\n\016FCurrencyState\022\014\n\004Type\030\001 "
  "\002(\005\022\025\n\rCurrentAmount\030\002 \002(\002\022\027\n\017LastKnownA"
  "mount\030\003 \002(\002\"\307\001\n\026FResourcePoolReference\022@"
  "\n\013PoolManager\030\001 \002(\0132+.HederaDefinitions."
  "ReplicatedActorReference\022\032\n\022PoolIndexInM"
  "anager\030\002 \002(\005\022\020\n\010PoolGUID\030\003 \002(\005\022=\n\004Data\030\004"
  " \002(\0132/.HederaDefinitions.NonReplicatedOb"
  "jectReference\"x\n\035FReplicatedNounAttribut"
  "eState\022*\n\010NounName\030\001 \002(\0132\030.HederaDefinit"
  "ions.FName\022\r\n\005Value\030\002 \002(\002\022\034\n\024bOnlyReleva"
  "ntToOwner\030\003 \002(\010\"f\n\025FWeaponDefinitionData"
  "\022M\n\024WeaponTypeDefinition\030\001 \002(\0132/.HederaD"
  "efinitions.NonReplicatedObjectReference\""
  "\226\001\n\026FReplicatedStandInGear\022=\n\013Weapon1Dat"
  "a\030\001 \002(\0132(.HederaDefinitions.FWeaponDefin"
  "itionData\022=\n\013Weapon2Data\030\002 \002(\0132(.HederaD"
  "efinitions.FWeaponDefinitionData\"\203\001\n\022FTr"
  "ackedSkillState\022A\n\010SkillDef\030\001 \002(\0132/.Hede"
  "raDefinitions.NonReplicatedObjectReferen"
  "ce\022*\n\"PackedStackCountAndPercentComplete"
  "\030\002 \002(\005\"f\n\026FManagedActorCountData\022=\n\004Type"
  "\030\001 \002(\0132/.HederaDefinitions.NonReplicated"
  "ObjectReference\022\r\n\005Count\030\002 \002(\005\"\344\002\n\023FRepl"
  "icatedPerkItem\022\016\n\006MetaID\030\001 \002(\t\022\020\n\010AssetK"
  "ey\030\002 \002(\t\022\017\n\007bCanUse\030\003 \002(\010\022\021\n\tItemLevel\030\004"
  " \002(\005\022\016\n\006Rarity\030\005 \002(\005\022.\n\010PlayerID\030\006 \002(\0132\034"
  ".HederaDefinitions.FUniqueID\022\022\n\nApolloJS"
  "ON\030\007 \002(\t\022\030\n\020EntitlementIndex\030\010 \002(\005\022\017\n\007bA"
  "ctive\030\t \002(\010\022E\n\014PerkFunction\030\n \002(\0132/.Hede"
  "raDefinitions.NonReplicatedObjectReferen"
  "ce\022A\n\010Wearable\030\013 \002(\0132/.HederaDefinitions"
  ".NonReplicatedObjectReference\"\227\001\n\014FAugIn"
  "stance\022\?\n\006AugDef\030\001 \002(\0132/.HederaDefinitio"
  "ns.NonReplicatedObjectReference\022\023\n\013Curre"
  "ntTier\030\002 \002(\005\022\034\n\024ClientPurchaseStatus\030\003 \002"
  "(\005\022\023\n\013Preselected\030\004 \002(\010\"\332\001\n\024FAugCategory"
  "Instance\022D\n\013CategoryDef\030\001 \002(\0132/.HederaDe"
  "finitions.NonReplicatedObjectReference\022-"
  "\n\004Augs\030\002 \003(\0132\037.HederaDefinitions.FAugIns"
  "tance\0221\n\010Mutation\030\003 \002(\0132\037.HederaDefiniti"
  "ons.FAugInstance\022\032\n\022CategoryIsUnlocked\030\004"
  " \002(\010\"\225\001\n\017FAugSetInstance\022B\n\tAugSetDef\030\001 "
  "\002(\0132/.HederaDefinitions.NonReplicatedObj"
  "ectReference\022>\n\rAllCategories\030\002 \003(\0132\'.He"
  "deraDefinitions.FAugCategoryInstance\"\204\001\n"
  " FReplicatedBehaviorConsumerState\022\033\n\023bIs"
  "ProcessSuspended\030\001 \002(\010\022$\n\034BehaviorSequen"
  "ceEnabledFlags\030\002 \002(\005\022\035\n\025bNeedToApplyThis"
  "State\030\003 \002(\010\"\265\001\n\030FReplicatedBehaviorEvent"
  "\022\025\n\rSequenceIndex\030\001 \002(\005\022\024\n\014EventCounter\030"
  "\002 \002(\005\022\022\n\nEventIndex\030\003 \002(\005\022\023\n\013EventOutput"
  "\030\004 \002(\005\022C\n\nInstigator\030\005 \002(\0132/.HederaDefin"
  "itions.NonReplicatedObjectReference\"\255\003\n\025"
  "FCinematicModeOptions\022\026\n\016bCinematicMode\030"
  "\001 \002(\010\022\023\n\013bHidePlayer\030\002 \002(\010\022\023\n\013bAffectsHU"
  "D\030\003 \002(\010\022\030\n\020bAffectsMovement\030\004 \002(\010\022\027\n\017bAf"
  "fectsTurning\030\005 \002(\010\022\027\n\017bAffectsButtons\030\006 "
  "\002(\010\022\027\n\017bAffectsGodMode\030\007 \002(\010\022\030\n\020bAffects"
  "NoTarget\030\010 \002(\010\022\"\n\032bAllowCinematicSplitSc"
  "reen\030\t \002(\010\022\025\n\rbAffectsAudio\030\n \002(\010\022\037\n\027bKi"
  "smetSetCinematicMode\030\013 \002(\010\022\025\n\rbHideOutli"
  "nes\030\014 \002(\010\022\026\n\016bAffectsSkills\030\r \002(\010\022\034\n\024bHi"
  "deScreenParticles\030\016 \002(\010\022\027\n\017ApplicationMo"
  "de\030\017 \002(\005\022\021\n\tModeToken\030\020 \002(\005\"\207\033\n\034APoplarP"
  "layerReplicationInfo\022,\n\010Location\030\001 \002(\0132\032"
  ".HederaDefinitions.FVector\022-\n\010Rotation\030\002"
  " \002(\0132\033.HederaDefinitions.FRotator\022\021\n\tDra"
  "wScale\030\003 \002(\002\022\032\n\022CustomTimeDilation\030\004 \002(\002"
  "\022\017\n\007Physics\030\005 \002(\r\022\022\n\nRemoteRole\030\006 \002(\r\022\014\n"
  "\004Role\030\007 \002(\r\022\037\n\027ReplicatedCollisionType\030\010"
  " \002(\r\022:\n\005Owner\030\t \002(\0132+.HederaDefinitions."
  "ReplicatedActorReference\0229\n\004Base\030\n \002(\0132+"
  ".HederaDefinitions.ReplicatedActorRefere"
  "nce\022\017\n\007bHidden\030\013 \002(\010\022\020\n\010bTearOff\030\014 \002(\010\022\023"
  "\n\013bHardAttach\030\r \002(\010\022\026\n\016bCollideActors\030\016 "
  "\002(\010\022\025\n\rbCollideWorld\030\017 \002(\010\022\024\n\014bBlockActo"
  "rs\030\020 \002(\010\022\023\n\013bProjTarget\030\021 \002(\010\022\021\n\tbNetOwn"
  "er\030\022 \002(\010\022\?\n\nInstigator\030\023 \002(\0132+.HederaDef"
  "initions.ReplicatedActorReference\022,\n\010Vel"
  "ocity\030\024 \002(\0132\032.HederaDefinitions.FVector\022"
  "\016\n\006Deaths\030\025 \002(\005\022\014\n\004Ping\030\026 \002(\005\022\022\n\nPlayerN"
  "ame\030\027 \002(\t\022\016\n\006bAdmin\030\030 \002(\010\022\024\n\014bIsSpectato"
  "r\030\031 \002(\010\022\026\n\016bOnlySpectator\030\032 \002(\010\022\023\n\013bOutO"
  "fLives\030\033 \002(\010\022\014\n\004bBot\030\034 \002(\010\022\032\n\022bFromPrevi"
  "ousLevel\030\035 \002(\010\022\022\n\nbPlayerAFK\030\036 \002(\010\022\020\n\010Pl"
  "ayerID\030\037 \002(\005\0229\n\004Team\030  \002(\0132+.HederaDefin"
  "itions.ReplicatedActorReference\022\021\n\tStart"
  "Time\030! \002(\005\022\r\n\005Kills\030\" \002(\005\022.\n\010UniqueID\030T "
  "\002(\0132\034.HederaDefinitions.FUniqueID\022\020\n\010Exp"
  "Level\030# \002(\005\022\034\n\024ExpPointsNextLevelAt\030$ \002("
  "\005\022%\n\035ExpPointsNextLevelAtBaseValue\030% \002(\005"
  "\022\017\n\007bIsDead\030& \002(\010\022\031\n\021bHideOnHUDIfEnemy\030\'"
  " \002(\010\022\032\n\022GeneralSkillPoints\030( \002(\005\022\035\n\025Spec"
  "ialistSkillPoints\030) \002(\005\022)\n!CurrentInstan"
  "tHitCriticalHitBonus\030* \002(\002\0222\n*CurrentIns"
  "tantHitCriticalHitBonusBaseValue\030+ \002(\002\0223"
  "\n\010Currency\030, \003(\0132!.HederaDefinitions.FCu"
  "rrencyState\022=\n\nHealthPool\030- \002(\0132).Hedera"
  "Definitions.FResourcePoolReference\022>\n\013Sh"
  "ieldArmor\030. \002(\0132).HederaDefinitions.FRes"
  "ourcePoolReference\022G\n\016PawnAllegiance\030/ \002"
  "(\0132/.HederaDefinitions.NonReplicatedObje"
  "ctReference\022K\n\022CharacterNameIdDef\0300 \002(\0132"
  "/.HederaDefinitions.NonReplicatedObjectR"
  "eference\022\024\n\014bGFxMenuOpen\0301 \002(\010\022!\n\031NumTra"
  "ckedSkillSlotsInUse\0302 \002(\005\022#\n\033HighestComp"
  "letedPlayThrough\0303 \002(\005\022\032\n\022NumReplicatedN"
  "ouns\0304 \002(\005\022I\n\017ReplicatedNouns\0305 \003(\01320.He"
  "deraDefinitions.FReplicatedNounAttribute"
  "State\022>\n\013StandInGear\0306 \002(\0132).HederaDefin"
  "itions.FReplicatedStandInGear\022<\n\rTracked"
  "Skills\0307 \003(\0132%.HederaDefinitions.FTracke"
  "dSkillState\022>\n\tPoplarPSI\0308 \002(\0132+.HederaD"
  "efinitions.ReplicatedActorReference\022\014\n\004b"
  "NPC\0309 \002(\010\022\025\n\rbDigitalDelux\030: \002(\010\022\032\n\022bPla"
  "yBrowsingTaunt\030; \002(\010\022\023\n\013bIsPvEMatch\030< \002("
  "\010\022!\n\031bNeedsToCastSurrenderVote\030= \002(\010\022@\n\013"
  "BotOwnerPRI\030> \002(\0132+.HederaDefinitions.Re"
  "plicatedActorReference\022\025\n\rBotDifficulty\030"
  "\? \002(\005\022A\n\014MyAlertPoint\030@ \002(\0132+.HederaDefi"
  "nitions.ReplicatedActorReference\022=\n\nEner"
  "gyPool\030A \002(\0132).HederaDefinitions.FResour"
  "cePoolReference\022K\n\022UnitTypeDefinition\030B "
  "\002(\0132/.HederaDefinitions.NonReplicatedObj"
  "ectReference\022H\n\023StatReplicationInfo\030C \002("
  "\0132+.HederaDefinitions.ReplicatedActorRef"
  "erence\022D\n\017NemesisPRIArray\030D \003(\0132+.Hedera"
  "Definitions.ReplicatedActorReference\022E\n\022"
  "ManagedActorCounts\030E \003(\0132).HederaDefinit"
  "ions.FManagedActorCountData\022&\n\036Replicate"
  "dRespawnTimeRemaining\030F \002(\r\022\037\n\027Character"
  "SelectionState\030G \002(\r\022\032\n\022ActivatedPerkFla"
  "gs\030H \003(\005\0225\n\005Perks\030I \003(\0132&.HederaDefiniti"
  "ons.FReplicatedPerkItem\022\032\n\022OvershieldStr"
  "ength\030J \002(\002\022\032\n\022MaxOvershieldValue\030K \002(\002\022"
  "Q\n\030BrowseCharacterNameIdDef\030L \002(\0132/.Hede"
  "raDefinitions.NonReplicatedObjectReferen"
  "ce\022H\n\017BrowseSkinIdDef\030M \002(\0132/.HederaDefi"
  "nitions.NonReplicatedObjectReference\022B\n\t"
  "SkinIdDef\030N \002(\0132/.HederaDefinitions.NonR"
  "eplicatedObjectReference\0220\n\004Augs\030O \002(\0132\""
  ".HederaDefinitions.FAugSetInstance\022\\\n\037Re"
  "plicatedBehaviorConsumerState\030P \002(\01323.He"
  "deraDefinitions.FReplicatedBehaviorConsu"
  "merState\022L\n\027ReplicatedBehaviorEvent\030Q \002("
  "\0132+.HederaDefinitions.FReplicatedBehavio"
  "rEvent\022P\n\036ReplicatedCinematicModeOptions"
  "\030R \002(\0132(.HederaDefinitions.FCinematicMod"
  "eOptions\022S\n\032CurrentWearableDefinitions\030S"
  " \003(\0132/.HederaDefinitions.NonReplicatedOb"
  "jectReference\"\225\003\n\027ActorReplicationMessag"
  "e\022G\n\tactorType\030\001 \002(\01624.HederaDefinitions"
  ".ActorReplicationMessage.ActorType\022\021\n\tis"
  "Initial\030\002 \002(\010\022\017\n\007actorID\030\003 \002(\r\022\032\n\022replic"
  "ationMessage\030\004 \002(\014\"\360\001\n\tActorType\022\022\n\016ACTO"
  "R_TYPE_ERR\020\000\022\'\n#ACTOR_TYPE_POPLAR_PLAYER"
  "_CONTROLLER\020\001\022\'\n#ACTOR_TYPE_POPLAR_PLAYE"
  "R_STATE_INFO\020\002\022-\n)ACTOR_TYPE_POPLAR_PLAY"
  "ER_REPLICATION_INFO\020\003\022+\n\'ACTOR_TYPE_POPL"
  "AR_GAME_REPLICATION_INFO\020\004\022!\n\035ACTOR_TYPE"
  "_POPLAR_PLAYER_PAWN\020\005\"`\n\020ReplicationFram"
  "e\022L\n\030actorReplicationMessages\030\001 \003(\0132*.He"
  "deraDefinitions.ActorReplicationMessage"
  ;
static ::_pbi::once_flag descriptor_table_definitions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_definitions_2eproto = {
    false, false, 12639, descriptor_table_protodef_definitions_2eproto,
    "definitions.proto",
    &descriptor_table_definitions_2eproto_once, nullptr, 0, 38,
    schemas, file_default_instances, TableStruct_definitions_2eproto::offsets,
    file_level_metadata_definitions_2eproto, file_level_enum_descriptors_definitions_2eproto,
    file_level_service_descriptors_definitions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_definitions_2eproto_getter() {
  return &descriptor_table_definitions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_definitions_2eproto(&descriptor_table_definitions_2eproto);
namespace HederaDefinitions {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorReplicationMessage_ActorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_definitions_2eproto);
  return file_level_enum_descriptors_definitions_2eproto[0];
}
bool ActorReplicationMessage_ActorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ACTOR_TYPE_ERR;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ACTOR_TYPE_POPLAR_PLAYER_CONTROLLER;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ACTOR_TYPE_POPLAR_PLAYER_STATE_INFO;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ACTOR_TYPE_POPLAR_PLAYER_REPLICATION_INFO;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ACTOR_TYPE_POPLAR_GAME_REPLICATION_INFO;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ACTOR_TYPE_POPLAR_PLAYER_PAWN;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ActorType_MIN;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage::ActorType_MAX;
constexpr int ActorReplicationMessage::ActorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FRotator::_Internal {
 public:
  using HasBits = decltype(std::declval<FRotator>()._impl_._has_bits_);
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FRotator::FRotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FRotator)
}
FRotator::FRotator(const FRotator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FRotator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.roll_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pitch_, &from._impl_.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FRotator)
}

inline void FRotator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.roll_){0}
  };
}

FRotator::~FRotator() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FRotator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FRotator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FRotator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FRotator::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FRotator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.roll_) -
        reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.roll_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FRotator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pitch(&has_bits);
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_yaw(&has_bits);
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roll(&has_bits);
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FRotator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FRotator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 Pitch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pitch(), target);
  }

  // required int32 Yaw = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_yaw(), target);
  }

  // required int32 Roll = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FRotator)
  return target;
}

size_t FRotator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FRotator)
  size_t total_size = 0;

  if (_internal_has_pitch()) {
    // required int32 Pitch = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());
  }

  if (_internal_has_yaw()) {
    // required int32 Yaw = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yaw());
  }

  if (_internal_has_roll()) {
    // required int32 Roll = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roll());
  }

  return total_size;
}
size_t FRotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FRotator)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 Pitch = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());

    // required int32 Yaw = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yaw());

    // required int32 Roll = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roll());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FRotator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FRotator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FRotator::GetClassData() const { return &_class_data_; }


void FRotator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FRotator*>(&to_msg);
  auto& from = static_cast<const FRotator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FRotator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pitch_ = from._impl_.pitch_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.yaw_ = from._impl_.yaw_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.roll_ = from._impl_.roll_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FRotator::CopyFrom(const FRotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FRotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRotator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FRotator::InternalSwap(FRotator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FRotator, _impl_.roll_)
      + sizeof(FRotator::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(FRotator, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FRotator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[0]);
}

// ===================================================================

class FVector::_Internal {
 public:
  using HasBits = decltype(std::declval<FVector>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FVector::FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FVector)
}
FVector::FVector(const FVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FVector)
}

inline void FVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

FVector::~FVector() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FVector::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float X = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float Y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float Z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FVector)
  return target;
}

size_t FVector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FVector)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float X = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float Y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float Z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FVector)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float X = 1;
    total_size += 1 + 4;

    // required float Y = 2;
    total_size += 1 + 4;

    // required float Z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FVector::GetClassData() const { return &_class_data_; }


void FVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FVector*>(&to_msg);
  auto& from = static_cast<const FVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FVector::CopyFrom(const FVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FVector::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FVector::InternalSwap(FVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FVector, _impl_.z_)
      + sizeof(FVector::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(FVector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[1]);
}

// ===================================================================

class ReplicatedActorReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicatedActorReference>()._impl_._has_bits_);
  static void set_has_actorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ReplicatedActorReference::ReplicatedActorReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.ReplicatedActorReference)
}
ReplicatedActorReference::ReplicatedActorReference(const ReplicatedActorReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplicatedActorReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actorid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.actorid_ = from._impl_.actorid_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.ReplicatedActorReference)
}

inline void ReplicatedActorReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actorid_){0u}
  };
}

ReplicatedActorReference::~ReplicatedActorReference() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.ReplicatedActorReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplicatedActorReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReplicatedActorReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplicatedActorReference::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.ReplicatedActorReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actorid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicatedActorReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 actorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_actorid(&has_bits);
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplicatedActorReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.ReplicatedActorReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 actorID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_actorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.ReplicatedActorReference)
  return target;
}

size_t ReplicatedActorReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.ReplicatedActorReference)
  size_t total_size = 0;

  // required uint32 actorID = 1;
  if (_internal_has_actorid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actorid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplicatedActorReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplicatedActorReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplicatedActorReference::GetClassData() const { return &_class_data_; }


void ReplicatedActorReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplicatedActorReference*>(&to_msg);
  auto& from = static_cast<const ReplicatedActorReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.ReplicatedActorReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_actorid()) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplicatedActorReference::CopyFrom(const ReplicatedActorReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.ReplicatedActorReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicatedActorReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ReplicatedActorReference::InternalSwap(ReplicatedActorReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.actorid_, other->_impl_.actorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicatedActorReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[2]);
}

// ===================================================================

class NonReplicatedObjectReference::_Internal {
 public:
  using HasBits = decltype(std::declval<NonReplicatedObjectReference>()._impl_._has_bits_);
  static void set_has_fullnamelookup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NonReplicatedObjectReference::NonReplicatedObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.NonReplicatedObjectReference)
}
NonReplicatedObjectReference::NonReplicatedObjectReference(const NonReplicatedObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NonReplicatedObjectReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fullnamelookup_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fullnamelookup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullnamelookup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fullnamelookup()) {
    _this->_impl_.fullnamelookup_.Set(from._internal_fullnamelookup(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.NonReplicatedObjectReference)
}

inline void NonReplicatedObjectReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fullnamelookup_){}
  };
  _impl_.fullnamelookup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullnamelookup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NonReplicatedObjectReference::~NonReplicatedObjectReference() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.NonReplicatedObjectReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonReplicatedObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fullnamelookup_.Destroy();
}

void NonReplicatedObjectReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NonReplicatedObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.NonReplicatedObjectReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.fullnamelookup_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonReplicatedObjectReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string fullNameLookup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fullnamelookup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "HederaDefinitions.NonReplicatedObjectReference.fullNameLookup");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonReplicatedObjectReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.NonReplicatedObjectReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string fullNameLookup = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fullnamelookup().data(), static_cast<int>(this->_internal_fullnamelookup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HederaDefinitions.NonReplicatedObjectReference.fullNameLookup");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fullnamelookup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.NonReplicatedObjectReference)
  return target;
}

size_t NonReplicatedObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.NonReplicatedObjectReference)
  size_t total_size = 0;

  // required string fullNameLookup = 1;
  if (_internal_has_fullnamelookup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullnamelookup());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NonReplicatedObjectReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NonReplicatedObjectReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NonReplicatedObjectReference::GetClassData() const { return &_class_data_; }


void NonReplicatedObjectReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NonReplicatedObjectReference*>(&to_msg);
  auto& from = static_cast<const NonReplicatedObjectReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.NonReplicatedObjectReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fullnamelookup()) {
    _this->_internal_set_fullnamelookup(from._internal_fullnamelookup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NonReplicatedObjectReference::CopyFrom(const NonReplicatedObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.NonReplicatedObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonReplicatedObjectReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void NonReplicatedObjectReference::InternalSwap(NonReplicatedObjectReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fullnamelookup_, lhs_arena,
      &other->_impl_.fullnamelookup_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NonReplicatedObjectReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[3]);
}

// ===================================================================

class FName::_Internal {
 public:
  using HasBits = decltype(std::declval<FName>()._impl_._has_bits_);
  static void set_has_fnameentryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instancenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FName::FName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FName)
}
FName::FName(const FName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fnameentryid_){}
    , decltype(_impl_.instancenumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fnameentryid_, &from._impl_.fnameentryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.instancenumber_) -
    reinterpret_cast<char*>(&_impl_.fnameentryid_)) + sizeof(_impl_.instancenumber_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FName)
}

inline void FName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fnameentryid_){0}
    , decltype(_impl_.instancenumber_){0}
  };
}

FName::~FName() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FName::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.fnameentryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.instancenumber_) -
        reinterpret_cast<char*>(&_impl_.fnameentryid_)) + sizeof(_impl_.instancenumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 FNameEntryId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fnameentryid(&has_bits);
          _impl_.fnameentryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 InstanceNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_instancenumber(&has_bits);
          _impl_.instancenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 FNameEntryId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fnameentryid(), target);
  }

  // required int32 InstanceNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_instancenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FName)
  return target;
}

size_t FName::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FName)
  size_t total_size = 0;

  if (_internal_has_fnameentryid()) {
    // required int32 FNameEntryId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fnameentryid());
  }

  if (_internal_has_instancenumber()) {
    // required int32 InstanceNumber = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_instancenumber());
  }

  return total_size;
}
size_t FName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FName)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 FNameEntryId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fnameentryid());

    // required int32 InstanceNumber = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_instancenumber());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FName::GetClassData() const { return &_class_data_; }


void FName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FName*>(&to_msg);
  auto& from = static_cast<const FName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fnameentryid_ = from._impl_.fnameentryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.instancenumber_ = from._impl_.instancenumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FName::CopyFrom(const FName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FName::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FName::InternalSwap(FName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FName, _impl_.instancenumber_)
      + sizeof(FName::_impl_.instancenumber_)
      - PROTOBUF_FIELD_OFFSET(FName, _impl_.fnameentryid_)>(
          reinterpret_cast<char*>(&_impl_.fnameentryid_),
          reinterpret_cast<char*>(&other->_impl_.fnameentryid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[4]);
}

// ===================================================================

class FEnvironmentalEffectInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FEnvironmentalEffectInfo>()._impl_._has_bits_);
  static void set_has_effectid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auxbusvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_outputbusvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FEnvironmentalEffectInfo::FEnvironmentalEffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FEnvironmentalEffectInfo)
}
FEnvironmentalEffectInfo::FEnvironmentalEffectInfo(const FEnvironmentalEffectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FEnvironmentalEffectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.effectid_){}
    , decltype(_impl_.auxbusvolume_){}
    , decltype(_impl_.outputbusvolume_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.effectid_, &from._impl_.effectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.outputbusvolume_) -
    reinterpret_cast<char*>(&_impl_.effectid_)) + sizeof(_impl_.outputbusvolume_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FEnvironmentalEffectInfo)
}

inline void FEnvironmentalEffectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.effectid_){0}
    , decltype(_impl_.auxbusvolume_){0}
    , decltype(_impl_.outputbusvolume_){0}
  };
}

FEnvironmentalEffectInfo::~FEnvironmentalEffectInfo() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FEnvironmentalEffectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FEnvironmentalEffectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FEnvironmentalEffectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FEnvironmentalEffectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FEnvironmentalEffectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.effectid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.outputbusvolume_) -
        reinterpret_cast<char*>(&_impl_.effectid_)) + sizeof(_impl_.outputbusvolume_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FEnvironmentalEffectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 EffectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_effectid(&has_bits);
          _impl_.effectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float AuxBusVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_auxbusvolume(&has_bits);
          _impl_.auxbusvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float OutputBusVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_outputbusvolume(&has_bits);
          _impl_.outputbusvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FEnvironmentalEffectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FEnvironmentalEffectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 EffectID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_effectid(), target);
  }

  // required float AuxBusVolume = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_auxbusvolume(), target);
  }

  // required float OutputBusVolume = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_outputbusvolume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FEnvironmentalEffectInfo)
  return target;
}

size_t FEnvironmentalEffectInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FEnvironmentalEffectInfo)
  size_t total_size = 0;

  if (_internal_has_effectid()) {
    // required int32 EffectID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_effectid());
  }

  if (_internal_has_auxbusvolume()) {
    // required float AuxBusVolume = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_outputbusvolume()) {
    // required float OutputBusVolume = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FEnvironmentalEffectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FEnvironmentalEffectInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 EffectID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_effectid());

    // required float AuxBusVolume = 2;
    total_size += 1 + 4;

    // required float OutputBusVolume = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FEnvironmentalEffectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FEnvironmentalEffectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FEnvironmentalEffectInfo::GetClassData() const { return &_class_data_; }


void FEnvironmentalEffectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FEnvironmentalEffectInfo*>(&to_msg);
  auto& from = static_cast<const FEnvironmentalEffectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FEnvironmentalEffectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.effectid_ = from._impl_.effectid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.auxbusvolume_ = from._impl_.auxbusvolume_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.outputbusvolume_ = from._impl_.outputbusvolume_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FEnvironmentalEffectInfo::CopyFrom(const FEnvironmentalEffectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FEnvironmentalEffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FEnvironmentalEffectInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FEnvironmentalEffectInfo::InternalSwap(FEnvironmentalEffectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FEnvironmentalEffectInfo, _impl_.outputbusvolume_)
      + sizeof(FEnvironmentalEffectInfo::_impl_.outputbusvolume_)
      - PROTOBUF_FIELD_OFFSET(FEnvironmentalEffectInfo, _impl_.effectid_)>(
          reinterpret_cast<char*>(&_impl_.effectid_),
          reinterpret_cast<char*>(&other->_impl_.effectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FEnvironmentalEffectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[5]);
}

// ===================================================================

class FAttributeDefinitionDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FAttributeDefinitionDefault>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& attribute(const FAttributeDefinitionDefault* msg);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defaultvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FAttributeDefinitionDefault::_Internal::attribute(const FAttributeDefinitionDefault* msg) {
  return *msg->_impl_.attribute_;
}
FAttributeDefinitionDefault::FAttributeDefinitionDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FAttributeDefinitionDefault)
}
FAttributeDefinitionDefault::FAttributeDefinitionDefault(const FAttributeDefinitionDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FAttributeDefinitionDefault* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){nullptr}
    , decltype(_impl_.defaultvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attribute()) {
    _this->_impl_.attribute_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.attribute_);
  }
  _this->_impl_.defaultvalue_ = from._impl_.defaultvalue_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FAttributeDefinitionDefault)
}

inline void FAttributeDefinitionDefault::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){nullptr}
    , decltype(_impl_.defaultvalue_){0}
  };
}

FAttributeDefinitionDefault::~FAttributeDefinitionDefault() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FAttributeDefinitionDefault)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FAttributeDefinitionDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attribute_;
}

void FAttributeDefinitionDefault::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FAttributeDefinitionDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FAttributeDefinitionDefault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.attribute_ != nullptr);
    _impl_.attribute_->Clear();
  }
  _impl_.defaultvalue_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAttributeDefinitionDefault::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference Attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float DefaultValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_defaultvalue(&has_bits);
          _impl_.defaultvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FAttributeDefinitionDefault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FAttributeDefinitionDefault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference Attribute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  // required float DefaultValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_defaultvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FAttributeDefinitionDefault)
  return target;
}

size_t FAttributeDefinitionDefault::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FAttributeDefinitionDefault)
  size_t total_size = 0;

  if (_internal_has_attribute()) {
    // required .HederaDefinitions.NonReplicatedObjectReference Attribute = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attribute_);
  }

  if (_internal_has_defaultvalue()) {
    // required float DefaultValue = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FAttributeDefinitionDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FAttributeDefinitionDefault)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference Attribute = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attribute_);

    // required float DefaultValue = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAttributeDefinitionDefault::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FAttributeDefinitionDefault::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAttributeDefinitionDefault::GetClassData() const { return &_class_data_; }


void FAttributeDefinitionDefault::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FAttributeDefinitionDefault*>(&to_msg);
  auto& from = static_cast<const FAttributeDefinitionDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FAttributeDefinitionDefault)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_attribute()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_attribute());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.defaultvalue_ = from._impl_.defaultvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAttributeDefinitionDefault::CopyFrom(const FAttributeDefinitionDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FAttributeDefinitionDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAttributeDefinitionDefault::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_attribute()) {
    if (!_impl_.attribute_->IsInitialized()) return false;
  }
  return true;
}

void FAttributeDefinitionDefault::InternalSwap(FAttributeDefinitionDefault* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FAttributeDefinitionDefault, _impl_.defaultvalue_)
      + sizeof(FAttributeDefinitionDefault::_impl_.defaultvalue_)
      - PROTOBUF_FIELD_OFFSET(FAttributeDefinitionDefault, _impl_.attribute_)>(
          reinterpret_cast<char*>(&_impl_.attribute_),
          reinterpret_cast<char*>(&other->_impl_.attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FAttributeDefinitionDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[6]);
}

// ===================================================================

class FAttributeScalarParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FAttributeScalarParam>()._impl_._has_bits_);
  static const ::HederaDefinitions::FName& paramname(const FAttributeScalarParam* msg);
  static void set_has_paramname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bvectorparam(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bclampinput(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::HederaDefinitions::FAttributeDefinitionDefault& input(const FAttributeScalarParam* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::HederaDefinitions::FAttributeDefinitionDefault& mininput(const FAttributeScalarParam* msg);
  static void set_has_mininput(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HederaDefinitions::FAttributeDefinitionDefault& maxinput(const FAttributeScalarParam* msg);
  static void set_has_maxinput(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::HederaDefinitions::FAttributeDefinitionDefault& minoutput(const FAttributeScalarParam* msg);
  static void set_has_minoutput(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::HederaDefinitions::FAttributeDefinitionDefault& maxoutput(const FAttributeScalarParam* msg);
  static void set_has_maxoutput(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scalarparamoperand(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_currentvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

const ::HederaDefinitions::FName&
FAttributeScalarParam::_Internal::paramname(const FAttributeScalarParam* msg) {
  return *msg->_impl_.paramname_;
}
const ::HederaDefinitions::FAttributeDefinitionDefault&
FAttributeScalarParam::_Internal::input(const FAttributeScalarParam* msg) {
  return *msg->_impl_.input_;
}
const ::HederaDefinitions::FAttributeDefinitionDefault&
FAttributeScalarParam::_Internal::mininput(const FAttributeScalarParam* msg) {
  return *msg->_impl_.mininput_;
}
const ::HederaDefinitions::FAttributeDefinitionDefault&
FAttributeScalarParam::_Internal::maxinput(const FAttributeScalarParam* msg) {
  return *msg->_impl_.maxinput_;
}
const ::HederaDefinitions::FAttributeDefinitionDefault&
FAttributeScalarParam::_Internal::minoutput(const FAttributeScalarParam* msg) {
  return *msg->_impl_.minoutput_;
}
const ::HederaDefinitions::FAttributeDefinitionDefault&
FAttributeScalarParam::_Internal::maxoutput(const FAttributeScalarParam* msg) {
  return *msg->_impl_.maxoutput_;
}
FAttributeScalarParam::FAttributeScalarParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FAttributeScalarParam)
}
FAttributeScalarParam::FAttributeScalarParam(const FAttributeScalarParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FAttributeScalarParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paramname_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.mininput_){nullptr}
    , decltype(_impl_.maxinput_){nullptr}
    , decltype(_impl_.minoutput_){nullptr}
    , decltype(_impl_.maxoutput_){nullptr}
    , decltype(_impl_.bvectorparam_){}
    , decltype(_impl_.bclampinput_){}
    , decltype(_impl_.scalarparamoperand_){}
    , decltype(_impl_.currentvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paramname()) {
    _this->_impl_.paramname_ = new ::HederaDefinitions::FName(*from._impl_.paramname_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::HederaDefinitions::FAttributeDefinitionDefault(*from._impl_.input_);
  }
  if (from._internal_has_mininput()) {
    _this->_impl_.mininput_ = new ::HederaDefinitions::FAttributeDefinitionDefault(*from._impl_.mininput_);
  }
  if (from._internal_has_maxinput()) {
    _this->_impl_.maxinput_ = new ::HederaDefinitions::FAttributeDefinitionDefault(*from._impl_.maxinput_);
  }
  if (from._internal_has_minoutput()) {
    _this->_impl_.minoutput_ = new ::HederaDefinitions::FAttributeDefinitionDefault(*from._impl_.minoutput_);
  }
  if (from._internal_has_maxoutput()) {
    _this->_impl_.maxoutput_ = new ::HederaDefinitions::FAttributeDefinitionDefault(*from._impl_.maxoutput_);
  }
  ::memcpy(&_impl_.bvectorparam_, &from._impl_.bvectorparam_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentvalue_) -
    reinterpret_cast<char*>(&_impl_.bvectorparam_)) + sizeof(_impl_.currentvalue_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FAttributeScalarParam)
}

inline void FAttributeScalarParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paramname_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.mininput_){nullptr}
    , decltype(_impl_.maxinput_){nullptr}
    , decltype(_impl_.minoutput_){nullptr}
    , decltype(_impl_.maxoutput_){nullptr}
    , decltype(_impl_.bvectorparam_){false}
    , decltype(_impl_.bclampinput_){false}
    , decltype(_impl_.scalarparamoperand_){0}
    , decltype(_impl_.currentvalue_){0}
  };
}

FAttributeScalarParam::~FAttributeScalarParam() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FAttributeScalarParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FAttributeScalarParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.paramname_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.mininput_;
  if (this != internal_default_instance()) delete _impl_.maxinput_;
  if (this != internal_default_instance()) delete _impl_.minoutput_;
  if (this != internal_default_instance()) delete _impl_.maxoutput_;
}

void FAttributeScalarParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FAttributeScalarParam::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FAttributeScalarParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.paramname_ != nullptr);
      _impl_.paramname_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.input_ != nullptr);
      _impl_.input_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.mininput_ != nullptr);
      _impl_.mininput_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.maxinput_ != nullptr);
      _impl_.maxinput_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.minoutput_ != nullptr);
      _impl_.minoutput_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.maxoutput_ != nullptr);
      _impl_.maxoutput_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.bvectorparam_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bclampinput_) -
        reinterpret_cast<char*>(&_impl_.bvectorparam_)) + sizeof(_impl_.bclampinput_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.scalarparamoperand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currentvalue_) -
        reinterpret_cast<char*>(&_impl_.scalarparamoperand_)) + sizeof(_impl_.currentvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAttributeScalarParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FName ParamName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bVectorParam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bvectorparam(&has_bits);
          _impl_.bvectorparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bClampInput = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bclampinput(&has_bits);
          _impl_.bclampinput_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAttributeDefinitionDefault Input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAttributeDefinitionDefault MinInput = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mininput(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAttributeDefinitionDefault MaxInput = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxinput(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAttributeDefinitionDefault MinOutput = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_minoutput(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAttributeDefinitionDefault MaxOutput = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxoutput(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ScalarParamOperand = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_scalarparamoperand(&has_bits);
          _impl_.scalarparamoperand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float CurrentValue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_currentvalue(&has_bits);
          _impl_.currentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FAttributeScalarParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FAttributeScalarParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FName ParamName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paramname(this),
        _Internal::paramname(this).GetCachedSize(), target, stream);
  }

  // required bool bVectorParam = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bvectorparam(), target);
  }

  // required bool bClampInput = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bclampinput(), target);
  }

  // required .HederaDefinitions.FAttributeDefinitionDefault Input = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FAttributeDefinitionDefault MinInput = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mininput(this),
        _Internal::mininput(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FAttributeDefinitionDefault MaxInput = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::maxinput(this),
        _Internal::maxinput(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FAttributeDefinitionDefault MinOutput = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::minoutput(this),
        _Internal::minoutput(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FAttributeDefinitionDefault MaxOutput = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::maxoutput(this),
        _Internal::maxoutput(this).GetCachedSize(), target, stream);
  }

  // required int32 ScalarParamOperand = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_scalarparamoperand(), target);
  }

  // required float CurrentValue = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_currentvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FAttributeScalarParam)
  return target;
}

size_t FAttributeScalarParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FAttributeScalarParam)
  size_t total_size = 0;

  if (_internal_has_paramname()) {
    // required .HederaDefinitions.FName ParamName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paramname_);
  }

  if (_internal_has_input()) {
    // required .HederaDefinitions.FAttributeDefinitionDefault Input = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  if (_internal_has_mininput()) {
    // required .HederaDefinitions.FAttributeDefinitionDefault MinInput = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mininput_);
  }

  if (_internal_has_maxinput()) {
    // required .HederaDefinitions.FAttributeDefinitionDefault MaxInput = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maxinput_);
  }

  if (_internal_has_minoutput()) {
    // required .HederaDefinitions.FAttributeDefinitionDefault MinOutput = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.minoutput_);
  }

  if (_internal_has_maxoutput()) {
    // required .HederaDefinitions.FAttributeDefinitionDefault MaxOutput = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maxoutput_);
  }

  if (_internal_has_bvectorparam()) {
    // required bool bVectorParam = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_bclampinput()) {
    // required bool bClampInput = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_scalarparamoperand()) {
    // required int32 ScalarParamOperand = 9;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scalarparamoperand());
  }

  if (_internal_has_currentvalue()) {
    // required float CurrentValue = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FAttributeScalarParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FAttributeScalarParam)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FName ParamName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paramname_);

    // required .HederaDefinitions.FAttributeDefinitionDefault Input = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);

    // required .HederaDefinitions.FAttributeDefinitionDefault MinInput = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mininput_);

    // required .HederaDefinitions.FAttributeDefinitionDefault MaxInput = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maxinput_);

    // required .HederaDefinitions.FAttributeDefinitionDefault MinOutput = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.minoutput_);

    // required .HederaDefinitions.FAttributeDefinitionDefault MaxOutput = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maxoutput_);

    // required bool bVectorParam = 2;
    total_size += 1 + 1;

    // required bool bClampInput = 3;
    total_size += 1 + 1;

    // required int32 ScalarParamOperand = 9;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scalarparamoperand());

    // required float CurrentValue = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAttributeScalarParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FAttributeScalarParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAttributeScalarParam::GetClassData() const { return &_class_data_; }


void FAttributeScalarParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FAttributeScalarParam*>(&to_msg);
  auto& from = static_cast<const FAttributeScalarParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FAttributeScalarParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_paramname()->::HederaDefinitions::FName::MergeFrom(
          from._internal_paramname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_input()->::HederaDefinitions::FAttributeDefinitionDefault::MergeFrom(
          from._internal_input());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_mininput()->::HederaDefinitions::FAttributeDefinitionDefault::MergeFrom(
          from._internal_mininput());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_maxinput()->::HederaDefinitions::FAttributeDefinitionDefault::MergeFrom(
          from._internal_maxinput());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_minoutput()->::HederaDefinitions::FAttributeDefinitionDefault::MergeFrom(
          from._internal_minoutput());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_maxoutput()->::HederaDefinitions::FAttributeDefinitionDefault::MergeFrom(
          from._internal_maxoutput());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bvectorparam_ = from._impl_.bvectorparam_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bclampinput_ = from._impl_.bclampinput_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.scalarparamoperand_ = from._impl_.scalarparamoperand_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.currentvalue_ = from._impl_.currentvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAttributeScalarParam::CopyFrom(const FAttributeScalarParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FAttributeScalarParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAttributeScalarParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_paramname()) {
    if (!_impl_.paramname_->IsInitialized()) return false;
  }
  if (_internal_has_input()) {
    if (!_impl_.input_->IsInitialized()) return false;
  }
  if (_internal_has_mininput()) {
    if (!_impl_.mininput_->IsInitialized()) return false;
  }
  if (_internal_has_maxinput()) {
    if (!_impl_.maxinput_->IsInitialized()) return false;
  }
  if (_internal_has_minoutput()) {
    if (!_impl_.minoutput_->IsInitialized()) return false;
  }
  if (_internal_has_maxoutput()) {
    if (!_impl_.maxoutput_->IsInitialized()) return false;
  }
  return true;
}

void FAttributeScalarParam::InternalSwap(FAttributeScalarParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FAttributeScalarParam, _impl_.currentvalue_)
      + sizeof(FAttributeScalarParam::_impl_.currentvalue_)
      - PROTOBUF_FIELD_OFFSET(FAttributeScalarParam, _impl_.paramname_)>(
          reinterpret_cast<char*>(&_impl_.paramname_),
          reinterpret_cast<char*>(&other->_impl_.paramname_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FAttributeScalarParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[7]);
}

// ===================================================================

class FScreenParticleModifier::_Internal {
 public:
  using HasBits = decltype(std::declval<FScreenParticleModifier>()._impl_._has_bits_);
  static void set_has_cachedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FScreenParticleModifier::FScreenParticleModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FScreenParticleModifier)
}
FScreenParticleModifier::FScreenParticleModifier(const FScreenParticleModifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FScreenParticleModifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scalarparams_){from._impl_.scalarparams_}
    , decltype(_impl_.cachedvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cachedvalue_ = from._impl_.cachedvalue_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FScreenParticleModifier)
}

inline void FScreenParticleModifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scalarparams_){arena}
    , decltype(_impl_.cachedvalue_){0}
  };
}

FScreenParticleModifier::~FScreenParticleModifier() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FScreenParticleModifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FScreenParticleModifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scalarparams_.~RepeatedPtrField();
}

void FScreenParticleModifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FScreenParticleModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FScreenParticleModifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scalarparams_.Clear();
  _impl_.cachedvalue_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FScreenParticleModifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .HederaDefinitions.FAttributeScalarParam ScalarParams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scalarparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required float CachedValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_cachedvalue(&has_bits);
          _impl_.cachedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FScreenParticleModifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FScreenParticleModifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FAttributeScalarParam ScalarParams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scalarparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_scalarparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required float CachedValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_cachedvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FScreenParticleModifier)
  return target;
}

size_t FScreenParticleModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FScreenParticleModifier)
  size_t total_size = 0;

  // required float CachedValue = 2;
  if (_internal_has_cachedvalue()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FAttributeScalarParam ScalarParams = 1;
  total_size += 1UL * this->_internal_scalarparams_size();
  for (const auto& msg : this->_impl_.scalarparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FScreenParticleModifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FScreenParticleModifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FScreenParticleModifier::GetClassData() const { return &_class_data_; }


void FScreenParticleModifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FScreenParticleModifier*>(&to_msg);
  auto& from = static_cast<const FScreenParticleModifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FScreenParticleModifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scalarparams_.MergeFrom(from._impl_.scalarparams_);
  if (from._internal_has_cachedvalue()) {
    _this->_internal_set_cachedvalue(from._internal_cachedvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FScreenParticleModifier::CopyFrom(const FScreenParticleModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FScreenParticleModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FScreenParticleModifier::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.scalarparams_))
    return false;
  return true;
}

void FScreenParticleModifier::InternalSwap(FScreenParticleModifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.scalarparams_.InternalSwap(&other->_impl_.scalarparams_);
  swap(_impl_.cachedvalue_, other->_impl_.cachedvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FScreenParticleModifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[8]);
}

// ===================================================================

class FInteractionIconWithOverrides::_Internal {
 public:
  using HasBits = decltype(std::declval<FInteractionIconWithOverrides>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& icondef(const FInteractionIconWithOverrides* msg);
  static void set_has_icondef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& overrideicondef(const FInteractionIconWithOverrides* msg);
  static void set_has_overrideicondef(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_boverrideicon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boverrideaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boverridetext(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bcoststouse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_costscurrencytype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_costsamount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FInteractionIconWithOverrides::_Internal::icondef(const FInteractionIconWithOverrides* msg) {
  return *msg->_impl_.icondef_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FInteractionIconWithOverrides::_Internal::overrideicondef(const FInteractionIconWithOverrides* msg) {
  return *msg->_impl_.overrideicondef_;
}
FInteractionIconWithOverrides::FInteractionIconWithOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FInteractionIconWithOverrides)
}
FInteractionIconWithOverrides::FInteractionIconWithOverrides(const FInteractionIconWithOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FInteractionIconWithOverrides* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.icondef_){nullptr}
    , decltype(_impl_.overrideicondef_){nullptr}
    , decltype(_impl_.boverrideicon_){}
    , decltype(_impl_.boverrideaction_){}
    , decltype(_impl_.boverridetext_){}
    , decltype(_impl_.bcoststouse_){}
    , decltype(_impl_.costscurrencytype_){}
    , decltype(_impl_.costsamount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_icondef()) {
    _this->_impl_.icondef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.icondef_);
  }
  if (from._internal_has_overrideicondef()) {
    _this->_impl_.overrideicondef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.overrideicondef_);
  }
  ::memcpy(&_impl_.boverrideicon_, &from._impl_.boverrideicon_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.costsamount_) -
    reinterpret_cast<char*>(&_impl_.boverrideicon_)) + sizeof(_impl_.costsamount_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FInteractionIconWithOverrides)
}

inline void FInteractionIconWithOverrides::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.icondef_){nullptr}
    , decltype(_impl_.overrideicondef_){nullptr}
    , decltype(_impl_.boverrideicon_){false}
    , decltype(_impl_.boverrideaction_){false}
    , decltype(_impl_.boverridetext_){false}
    , decltype(_impl_.bcoststouse_){false}
    , decltype(_impl_.costscurrencytype_){0}
    , decltype(_impl_.costsamount_){0}
  };
}

FInteractionIconWithOverrides::~FInteractionIconWithOverrides() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FInteractionIconWithOverrides)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FInteractionIconWithOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.icondef_;
  if (this != internal_default_instance()) delete _impl_.overrideicondef_;
}

void FInteractionIconWithOverrides::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FInteractionIconWithOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FInteractionIconWithOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.icondef_ != nullptr);
      _impl_.icondef_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.overrideicondef_ != nullptr);
      _impl_.overrideicondef_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.boverrideicon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.costsamount_) -
        reinterpret_cast<char*>(&_impl_.boverrideicon_)) + sizeof(_impl_.costsamount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FInteractionIconWithOverrides::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference IconDef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_icondef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference OverrideIconDef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_overrideicondef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bOverrideIcon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_boverrideicon(&has_bits);
          _impl_.boverrideicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bOverrideAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_boverrideaction(&has_bits);
          _impl_.boverrideaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bOverrideText = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_boverridetext(&has_bits);
          _impl_.boverridetext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bCostsToUse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bcoststouse(&has_bits);
          _impl_.bcoststouse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 CostsCurrencyType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_costscurrencytype(&has_bits);
          _impl_.costscurrencytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 CostsAmount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_costsamount(&has_bits);
          _impl_.costsamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FInteractionIconWithOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FInteractionIconWithOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference IconDef = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::icondef(this),
        _Internal::icondef(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference OverrideIconDef = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::overrideicondef(this),
        _Internal::overrideicondef(this).GetCachedSize(), target, stream);
  }

  // required bool bOverrideIcon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_boverrideicon(), target);
  }

  // required bool bOverrideAction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_boverrideaction(), target);
  }

  // required bool bOverrideText = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_boverridetext(), target);
  }

  // required bool bCostsToUse = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bcoststouse(), target);
  }

  // required int32 CostsCurrencyType = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_costscurrencytype(), target);
  }

  // required int32 CostsAmount = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_costsamount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FInteractionIconWithOverrides)
  return target;
}

size_t FInteractionIconWithOverrides::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FInteractionIconWithOverrides)
  size_t total_size = 0;

  if (_internal_has_icondef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference IconDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.icondef_);
  }

  if (_internal_has_overrideicondef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference OverrideIconDef = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.overrideicondef_);
  }

  if (_internal_has_boverrideicon()) {
    // required bool bOverrideIcon = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_boverrideaction()) {
    // required bool bOverrideAction = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_boverridetext()) {
    // required bool bOverrideText = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_bcoststouse()) {
    // required bool bCostsToUse = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_costscurrencytype()) {
    // required int32 CostsCurrencyType = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_costscurrencytype());
  }

  if (_internal_has_costsamount()) {
    // required int32 CostsAmount = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_costsamount());
  }

  return total_size;
}
size_t FInteractionIconWithOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FInteractionIconWithOverrides)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference IconDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.icondef_);

    // required .HederaDefinitions.NonReplicatedObjectReference OverrideIconDef = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.overrideicondef_);

    // required bool bOverrideIcon = 3;
    total_size += 1 + 1;

    // required bool bOverrideAction = 4;
    total_size += 1 + 1;

    // required bool bOverrideText = 5;
    total_size += 1 + 1;

    // required bool bCostsToUse = 6;
    total_size += 1 + 1;

    // required int32 CostsCurrencyType = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_costscurrencytype());

    // required int32 CostsAmount = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_costsamount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FInteractionIconWithOverrides::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FInteractionIconWithOverrides::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FInteractionIconWithOverrides::GetClassData() const { return &_class_data_; }


void FInteractionIconWithOverrides::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FInteractionIconWithOverrides*>(&to_msg);
  auto& from = static_cast<const FInteractionIconWithOverrides&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FInteractionIconWithOverrides)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_icondef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_icondef());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_overrideicondef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_overrideicondef());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.boverrideicon_ = from._impl_.boverrideicon_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.boverrideaction_ = from._impl_.boverrideaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.boverridetext_ = from._impl_.boverridetext_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bcoststouse_ = from._impl_.bcoststouse_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.costscurrencytype_ = from._impl_.costscurrencytype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.costsamount_ = from._impl_.costsamount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FInteractionIconWithOverrides::CopyFrom(const FInteractionIconWithOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FInteractionIconWithOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FInteractionIconWithOverrides::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_icondef()) {
    if (!_impl_.icondef_->IsInitialized()) return false;
  }
  if (_internal_has_overrideicondef()) {
    if (!_impl_.overrideicondef_->IsInitialized()) return false;
  }
  return true;
}

void FInteractionIconWithOverrides::InternalSwap(FInteractionIconWithOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FInteractionIconWithOverrides, _impl_.costsamount_)
      + sizeof(FInteractionIconWithOverrides::_impl_.costsamount_)
      - PROTOBUF_FIELD_OFFSET(FInteractionIconWithOverrides, _impl_.icondef_)>(
          reinterpret_cast<char*>(&_impl_.icondef_),
          reinterpret_cast<char*>(&other->_impl_.icondef_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FInteractionIconWithOverrides::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[9]);
}

// ===================================================================

class FVector2D::_Internal {
 public:
  using HasBits = decltype(std::declval<FVector2D>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FVector2D::FVector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FVector2D)
}
FVector2D::FVector2D(const FVector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FVector2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FVector2D)
}

inline void FVector2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

FVector2D::~FVector2D() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FVector2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FVector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FVector2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FVector2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FVector2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FVector2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FVector2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float X = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float Y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FVector2D)
  return target;
}

size_t FVector2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FVector2D)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float X = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float Y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FVector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FVector2D)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float X = 1;
    total_size += 1 + 4;

    // required float Y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FVector2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FVector2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FVector2D::GetClassData() const { return &_class_data_; }


void FVector2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FVector2D*>(&to_msg);
  auto& from = static_cast<const FVector2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FVector2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FVector2D::CopyFrom(const FVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FVector2D::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FVector2D::InternalSwap(FVector2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FVector2D, _impl_.y_)
      + sizeof(FVector2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(FVector2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FVector2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[10]);
}

// ===================================================================

class FScreenParticleScalarParamOverTime::_Internal {
 public:
  using HasBits = decltype(std::declval<FScreenParticleScalarParamOverTime>()._impl_._has_bits_);
  static const ::HederaDefinitions::FName& parametername(const FScreenParticleScalarParamOverTime* msg);
  static void set_has_parametername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_totaltime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lastvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::HederaDefinitions::FName&
FScreenParticleScalarParamOverTime::_Internal::parametername(const FScreenParticleScalarParamOverTime* msg) {
  return *msg->_impl_.parametername_;
}
FScreenParticleScalarParamOverTime::FScreenParticleScalarParamOverTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FScreenParticleScalarParamOverTime)
}
FScreenParticleScalarParamOverTime::FScreenParticleScalarParamOverTime(const FScreenParticleScalarParamOverTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FScreenParticleScalarParamOverTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parametername_){nullptr}
    , decltype(_impl_.totaltime_){}
    , decltype(_impl_.startvalue_){}
    , decltype(_impl_.endvalue_){}
    , decltype(_impl_.lastvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parametername()) {
    _this->_impl_.parametername_ = new ::HederaDefinitions::FName(*from._impl_.parametername_);
  }
  ::memcpy(&_impl_.totaltime_, &from._impl_.totaltime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastvalue_) -
    reinterpret_cast<char*>(&_impl_.totaltime_)) + sizeof(_impl_.lastvalue_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FScreenParticleScalarParamOverTime)
}

inline void FScreenParticleScalarParamOverTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parametername_){nullptr}
    , decltype(_impl_.totaltime_){0}
    , decltype(_impl_.startvalue_){0}
    , decltype(_impl_.endvalue_){0}
    , decltype(_impl_.lastvalue_){0}
  };
}

FScreenParticleScalarParamOverTime::~FScreenParticleScalarParamOverTime() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FScreenParticleScalarParamOverTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FScreenParticleScalarParamOverTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parametername_;
}

void FScreenParticleScalarParamOverTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FScreenParticleScalarParamOverTime::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FScreenParticleScalarParamOverTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.parametername_ != nullptr);
    _impl_.parametername_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.totaltime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lastvalue_) -
        reinterpret_cast<char*>(&_impl_.totaltime_)) + sizeof(_impl_.lastvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FScreenParticleScalarParamOverTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FName ParameterName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parametername(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float TotalTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_totaltime(&has_bits);
          _impl_.totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float StartValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_startvalue(&has_bits);
          _impl_.startvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float EndValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_endvalue(&has_bits);
          _impl_.endvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float LastValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_lastvalue(&has_bits);
          _impl_.lastvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FScreenParticleScalarParamOverTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FScreenParticleScalarParamOverTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FName ParameterName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parametername(this),
        _Internal::parametername(this).GetCachedSize(), target, stream);
  }

  // required float TotalTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_totaltime(), target);
  }

  // required float StartValue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_startvalue(), target);
  }

  // required float EndValue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_endvalue(), target);
  }

  // required float LastValue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_lastvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FScreenParticleScalarParamOverTime)
  return target;
}

size_t FScreenParticleScalarParamOverTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FScreenParticleScalarParamOverTime)
  size_t total_size = 0;

  if (_internal_has_parametername()) {
    // required .HederaDefinitions.FName ParameterName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parametername_);
  }

  if (_internal_has_totaltime()) {
    // required float TotalTime = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_startvalue()) {
    // required float StartValue = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_endvalue()) {
    // required float EndValue = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_lastvalue()) {
    // required float LastValue = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FScreenParticleScalarParamOverTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FScreenParticleScalarParamOverTime)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FName ParameterName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parametername_);

    // required float TotalTime = 2;
    total_size += 1 + 4;

    // required float StartValue = 3;
    total_size += 1 + 4;

    // required float EndValue = 4;
    total_size += 1 + 4;

    // required float LastValue = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FScreenParticleScalarParamOverTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FScreenParticleScalarParamOverTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FScreenParticleScalarParamOverTime::GetClassData() const { return &_class_data_; }


void FScreenParticleScalarParamOverTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FScreenParticleScalarParamOverTime*>(&to_msg);
  auto& from = static_cast<const FScreenParticleScalarParamOverTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FScreenParticleScalarParamOverTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_parametername()->::HederaDefinitions::FName::MergeFrom(
          from._internal_parametername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.totaltime_ = from._impl_.totaltime_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.startvalue_ = from._impl_.startvalue_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.endvalue_ = from._impl_.endvalue_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lastvalue_ = from._impl_.lastvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FScreenParticleScalarParamOverTime::CopyFrom(const FScreenParticleScalarParamOverTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FScreenParticleScalarParamOverTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FScreenParticleScalarParamOverTime::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_parametername()) {
    if (!_impl_.parametername_->IsInitialized()) return false;
  }
  return true;
}

void FScreenParticleScalarParamOverTime::InternalSwap(FScreenParticleScalarParamOverTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FScreenParticleScalarParamOverTime, _impl_.lastvalue_)
      + sizeof(FScreenParticleScalarParamOverTime::_impl_.lastvalue_)
      - PROTOBUF_FIELD_OFFSET(FScreenParticleScalarParamOverTime, _impl_.parametername_)>(
          reinterpret_cast<char*>(&_impl_.parametername_),
          reinterpret_cast<char*>(&other->_impl_.parametername_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FScreenParticleScalarParamOverTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[11]);
}

// ===================================================================

class FScreenParticleVectorParamOverTime::_Internal {
 public:
  using HasBits = decltype(std::declval<FScreenParticleVectorParamOverTime>()._impl_._has_bits_);
  static const ::HederaDefinitions::FName& parametername(const FScreenParticleVectorParamOverTime* msg);
  static void set_has_parametername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_totaltime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::HederaDefinitions::FVector& vectorstartvalue(const FScreenParticleVectorParamOverTime* msg);
  static void set_has_vectorstartvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::HederaDefinitions::FVector& vectorendvalue(const FScreenParticleVectorParamOverTime* msg);
  static void set_has_vectorendvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HederaDefinitions::FVector& lastvalue(const FScreenParticleVectorParamOverTime* msg);
  static void set_has_lastvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::HederaDefinitions::FName&
FScreenParticleVectorParamOverTime::_Internal::parametername(const FScreenParticleVectorParamOverTime* msg) {
  return *msg->_impl_.parametername_;
}
const ::HederaDefinitions::FVector&
FScreenParticleVectorParamOverTime::_Internal::vectorstartvalue(const FScreenParticleVectorParamOverTime* msg) {
  return *msg->_impl_.vectorstartvalue_;
}
const ::HederaDefinitions::FVector&
FScreenParticleVectorParamOverTime::_Internal::vectorendvalue(const FScreenParticleVectorParamOverTime* msg) {
  return *msg->_impl_.vectorendvalue_;
}
const ::HederaDefinitions::FVector&
FScreenParticleVectorParamOverTime::_Internal::lastvalue(const FScreenParticleVectorParamOverTime* msg) {
  return *msg->_impl_.lastvalue_;
}
FScreenParticleVectorParamOverTime::FScreenParticleVectorParamOverTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FScreenParticleVectorParamOverTime)
}
FScreenParticleVectorParamOverTime::FScreenParticleVectorParamOverTime(const FScreenParticleVectorParamOverTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FScreenParticleVectorParamOverTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parametername_){nullptr}
    , decltype(_impl_.vectorstartvalue_){nullptr}
    , decltype(_impl_.vectorendvalue_){nullptr}
    , decltype(_impl_.lastvalue_){nullptr}
    , decltype(_impl_.totaltime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parametername()) {
    _this->_impl_.parametername_ = new ::HederaDefinitions::FName(*from._impl_.parametername_);
  }
  if (from._internal_has_vectorstartvalue()) {
    _this->_impl_.vectorstartvalue_ = new ::HederaDefinitions::FVector(*from._impl_.vectorstartvalue_);
  }
  if (from._internal_has_vectorendvalue()) {
    _this->_impl_.vectorendvalue_ = new ::HederaDefinitions::FVector(*from._impl_.vectorendvalue_);
  }
  if (from._internal_has_lastvalue()) {
    _this->_impl_.lastvalue_ = new ::HederaDefinitions::FVector(*from._impl_.lastvalue_);
  }
  _this->_impl_.totaltime_ = from._impl_.totaltime_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FScreenParticleVectorParamOverTime)
}

inline void FScreenParticleVectorParamOverTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parametername_){nullptr}
    , decltype(_impl_.vectorstartvalue_){nullptr}
    , decltype(_impl_.vectorendvalue_){nullptr}
    , decltype(_impl_.lastvalue_){nullptr}
    , decltype(_impl_.totaltime_){0}
  };
}

FScreenParticleVectorParamOverTime::~FScreenParticleVectorParamOverTime() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FScreenParticleVectorParamOverTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FScreenParticleVectorParamOverTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parametername_;
  if (this != internal_default_instance()) delete _impl_.vectorstartvalue_;
  if (this != internal_default_instance()) delete _impl_.vectorendvalue_;
  if (this != internal_default_instance()) delete _impl_.lastvalue_;
}

void FScreenParticleVectorParamOverTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FScreenParticleVectorParamOverTime::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FScreenParticleVectorParamOverTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.parametername_ != nullptr);
      _impl_.parametername_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vectorstartvalue_ != nullptr);
      _impl_.vectorstartvalue_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.vectorendvalue_ != nullptr);
      _impl_.vectorendvalue_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lastvalue_ != nullptr);
      _impl_.lastvalue_->Clear();
    }
  }
  _impl_.totaltime_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FScreenParticleVectorParamOverTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FName ParameterName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parametername(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float TotalTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_totaltime(&has_bits);
          _impl_.totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector VectorStartValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vectorstartvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector VectorEndValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vectorendvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector LastValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lastvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FScreenParticleVectorParamOverTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FScreenParticleVectorParamOverTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FName ParameterName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parametername(this),
        _Internal::parametername(this).GetCachedSize(), target, stream);
  }

  // required float TotalTime = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_totaltime(), target);
  }

  // required .HederaDefinitions.FVector VectorStartValue = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vectorstartvalue(this),
        _Internal::vectorstartvalue(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector VectorEndValue = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vectorendvalue(this),
        _Internal::vectorendvalue(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector LastValue = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lastvalue(this),
        _Internal::lastvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FScreenParticleVectorParamOverTime)
  return target;
}

size_t FScreenParticleVectorParamOverTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FScreenParticleVectorParamOverTime)
  size_t total_size = 0;

  if (_internal_has_parametername()) {
    // required .HederaDefinitions.FName ParameterName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parametername_);
  }

  if (_internal_has_vectorstartvalue()) {
    // required .HederaDefinitions.FVector VectorStartValue = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vectorstartvalue_);
  }

  if (_internal_has_vectorendvalue()) {
    // required .HederaDefinitions.FVector VectorEndValue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vectorendvalue_);
  }

  if (_internal_has_lastvalue()) {
    // required .HederaDefinitions.FVector LastValue = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lastvalue_);
  }

  if (_internal_has_totaltime()) {
    // required float TotalTime = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FScreenParticleVectorParamOverTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FScreenParticleVectorParamOverTime)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FName ParameterName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parametername_);

    // required .HederaDefinitions.FVector VectorStartValue = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vectorstartvalue_);

    // required .HederaDefinitions.FVector VectorEndValue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vectorendvalue_);

    // required .HederaDefinitions.FVector LastValue = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lastvalue_);

    // required float TotalTime = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FScreenParticleVectorParamOverTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FScreenParticleVectorParamOverTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FScreenParticleVectorParamOverTime::GetClassData() const { return &_class_data_; }


void FScreenParticleVectorParamOverTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FScreenParticleVectorParamOverTime*>(&to_msg);
  auto& from = static_cast<const FScreenParticleVectorParamOverTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FScreenParticleVectorParamOverTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_parametername()->::HederaDefinitions::FName::MergeFrom(
          from._internal_parametername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vectorstartvalue()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_vectorstartvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_vectorendvalue()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_vectorendvalue());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lastvalue()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_lastvalue());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.totaltime_ = from._impl_.totaltime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FScreenParticleVectorParamOverTime::CopyFrom(const FScreenParticleVectorParamOverTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FScreenParticleVectorParamOverTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FScreenParticleVectorParamOverTime::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_parametername()) {
    if (!_impl_.parametername_->IsInitialized()) return false;
  }
  if (_internal_has_vectorstartvalue()) {
    if (!_impl_.vectorstartvalue_->IsInitialized()) return false;
  }
  if (_internal_has_vectorendvalue()) {
    if (!_impl_.vectorendvalue_->IsInitialized()) return false;
  }
  if (_internal_has_lastvalue()) {
    if (!_impl_.lastvalue_->IsInitialized()) return false;
  }
  return true;
}

void FScreenParticleVectorParamOverTime::InternalSwap(FScreenParticleVectorParamOverTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FScreenParticleVectorParamOverTime, _impl_.totaltime_)
      + sizeof(FScreenParticleVectorParamOverTime::_impl_.totaltime_)
      - PROTOBUF_FIELD_OFFSET(FScreenParticleVectorParamOverTime, _impl_.parametername_)>(
          reinterpret_cast<char*>(&_impl_.parametername_),
          reinterpret_cast<char*>(&other->_impl_.parametername_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FScreenParticleVectorParamOverTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[12]);
}

// ===================================================================

class FScreenParticleParamOverTime::_Internal {
 public:
};

FScreenParticleParamOverTime::FScreenParticleParamOverTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FScreenParticleParamOverTime)
}
FScreenParticleParamOverTime::FScreenParticleParamOverTime(const FScreenParticleParamOverTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FScreenParticleParamOverTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scalarparams_){from._impl_.scalarparams_}
    , decltype(_impl_.vectorparams_){from._impl_.vectorparams_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FScreenParticleParamOverTime)
}

inline void FScreenParticleParamOverTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scalarparams_){arena}
    , decltype(_impl_.vectorparams_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FScreenParticleParamOverTime::~FScreenParticleParamOverTime() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FScreenParticleParamOverTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FScreenParticleParamOverTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scalarparams_.~RepeatedPtrField();
  _impl_.vectorparams_.~RepeatedPtrField();
}

void FScreenParticleParamOverTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FScreenParticleParamOverTime::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FScreenParticleParamOverTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scalarparams_.Clear();
  _impl_.vectorparams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FScreenParticleParamOverTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .HederaDefinitions.FScreenParticleScalarParamOverTime ScalarParams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scalarparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FScreenParticleVectorParamOverTime VectorParams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vectorparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FScreenParticleParamOverTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FScreenParticleParamOverTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FScreenParticleScalarParamOverTime ScalarParams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scalarparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_scalarparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FScreenParticleVectorParamOverTime VectorParams = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vectorparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_vectorparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FScreenParticleParamOverTime)
  return target;
}

size_t FScreenParticleParamOverTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FScreenParticleParamOverTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FScreenParticleScalarParamOverTime ScalarParams = 1;
  total_size += 1UL * this->_internal_scalarparams_size();
  for (const auto& msg : this->_impl_.scalarparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.FScreenParticleVectorParamOverTime VectorParams = 2;
  total_size += 1UL * this->_internal_vectorparams_size();
  for (const auto& msg : this->_impl_.vectorparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FScreenParticleParamOverTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FScreenParticleParamOverTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FScreenParticleParamOverTime::GetClassData() const { return &_class_data_; }


void FScreenParticleParamOverTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FScreenParticleParamOverTime*>(&to_msg);
  auto& from = static_cast<const FScreenParticleParamOverTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FScreenParticleParamOverTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scalarparams_.MergeFrom(from._impl_.scalarparams_);
  _this->_impl_.vectorparams_.MergeFrom(from._impl_.vectorparams_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FScreenParticleParamOverTime::CopyFrom(const FScreenParticleParamOverTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FScreenParticleParamOverTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FScreenParticleParamOverTime::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.scalarparams_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.vectorparams_))
    return false;
  return true;
}

void FScreenParticleParamOverTime::InternalSwap(FScreenParticleParamOverTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scalarparams_.InternalSwap(&other->_impl_.scalarparams_);
  _impl_.vectorparams_.InternalSwap(&other->_impl_.vectorparams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FScreenParticleParamOverTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[13]);
}

// ===================================================================

class FScreenParticleInitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FScreenParticleInitParams>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& template_(const FScreenParticleInitParams* msg);
  static void set_has_template_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& templatescreenparticlematerial(const FScreenParticleInitParams* msg);
  static void set_has_templatescreenparticlematerial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::HederaDefinitions::FName& matparamname(const FScreenParticleInitParams* msg);
  static void set_has_matparamname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bhidewhenfinished(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::HederaDefinitions::FName& particletag(const FScreenParticleInitParams* msg);
  static void set_has_particletag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::HederaDefinitions::FVector2D& contentdims(const FScreenParticleInitParams* msg);
  static void set_has_contentdims(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_particledepth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scalingmode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::HederaDefinitions::FScreenParticleParamOverTime& stopparamsot(const FScreenParticleInitParams* msg);
  static void set_has_stopparamsot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bonlyownersee(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_effectdepthprioritygroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_balwaysvisible(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_busedesignerattributeparameters(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001fff) ^ 0x00001fff) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FScreenParticleInitParams::_Internal::template_(const FScreenParticleInitParams* msg) {
  return *msg->_impl_.template__;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FScreenParticleInitParams::_Internal::templatescreenparticlematerial(const FScreenParticleInitParams* msg) {
  return *msg->_impl_.templatescreenparticlematerial_;
}
const ::HederaDefinitions::FName&
FScreenParticleInitParams::_Internal::matparamname(const FScreenParticleInitParams* msg) {
  return *msg->_impl_.matparamname_;
}
const ::HederaDefinitions::FName&
FScreenParticleInitParams::_Internal::particletag(const FScreenParticleInitParams* msg) {
  return *msg->_impl_.particletag_;
}
const ::HederaDefinitions::FVector2D&
FScreenParticleInitParams::_Internal::contentdims(const FScreenParticleInitParams* msg) {
  return *msg->_impl_.contentdims_;
}
const ::HederaDefinitions::FScreenParticleParamOverTime&
FScreenParticleInitParams::_Internal::stopparamsot(const FScreenParticleInitParams* msg) {
  return *msg->_impl_.stopparamsot_;
}
FScreenParticleInitParams::FScreenParticleInitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FScreenParticleInitParams)
}
FScreenParticleInitParams::FScreenParticleInitParams(const FScreenParticleInitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FScreenParticleInitParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.screenparticlemodifiers_){from._impl_.screenparticlemodifiers_}
    , decltype(_impl_.template__){nullptr}
    , decltype(_impl_.templatescreenparticlematerial_){nullptr}
    , decltype(_impl_.matparamname_){nullptr}
    , decltype(_impl_.particletag_){nullptr}
    , decltype(_impl_.contentdims_){nullptr}
    , decltype(_impl_.stopparamsot_){nullptr}
    , decltype(_impl_.particledepth_){}
    , decltype(_impl_.scalingmode_){}
    , decltype(_impl_.bhidewhenfinished_){}
    , decltype(_impl_.bonlyownersee_){}
    , decltype(_impl_.balwaysvisible_){}
    , decltype(_impl_.busedesignerattributeparameters_){}
    , decltype(_impl_.effectdepthprioritygroup_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_template_()) {
    _this->_impl_.template__ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.template__);
  }
  if (from._internal_has_templatescreenparticlematerial()) {
    _this->_impl_.templatescreenparticlematerial_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.templatescreenparticlematerial_);
  }
  if (from._internal_has_matparamname()) {
    _this->_impl_.matparamname_ = new ::HederaDefinitions::FName(*from._impl_.matparamname_);
  }
  if (from._internal_has_particletag()) {
    _this->_impl_.particletag_ = new ::HederaDefinitions::FName(*from._impl_.particletag_);
  }
  if (from._internal_has_contentdims()) {
    _this->_impl_.contentdims_ = new ::HederaDefinitions::FVector2D(*from._impl_.contentdims_);
  }
  if (from._internal_has_stopparamsot()) {
    _this->_impl_.stopparamsot_ = new ::HederaDefinitions::FScreenParticleParamOverTime(*from._impl_.stopparamsot_);
  }
  ::memcpy(&_impl_.particledepth_, &from._impl_.particledepth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.effectdepthprioritygroup_) -
    reinterpret_cast<char*>(&_impl_.particledepth_)) + sizeof(_impl_.effectdepthprioritygroup_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FScreenParticleInitParams)
}

inline void FScreenParticleInitParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.screenparticlemodifiers_){arena}
    , decltype(_impl_.template__){nullptr}
    , decltype(_impl_.templatescreenparticlematerial_){nullptr}
    , decltype(_impl_.matparamname_){nullptr}
    , decltype(_impl_.particletag_){nullptr}
    , decltype(_impl_.contentdims_){nullptr}
    , decltype(_impl_.stopparamsot_){nullptr}
    , decltype(_impl_.particledepth_){0}
    , decltype(_impl_.scalingmode_){0}
    , decltype(_impl_.bhidewhenfinished_){false}
    , decltype(_impl_.bonlyownersee_){false}
    , decltype(_impl_.balwaysvisible_){false}
    , decltype(_impl_.busedesignerattributeparameters_){false}
    , decltype(_impl_.effectdepthprioritygroup_){0}
  };
}

FScreenParticleInitParams::~FScreenParticleInitParams() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FScreenParticleInitParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FScreenParticleInitParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.screenparticlemodifiers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.template__;
  if (this != internal_default_instance()) delete _impl_.templatescreenparticlematerial_;
  if (this != internal_default_instance()) delete _impl_.matparamname_;
  if (this != internal_default_instance()) delete _impl_.particletag_;
  if (this != internal_default_instance()) delete _impl_.contentdims_;
  if (this != internal_default_instance()) delete _impl_.stopparamsot_;
}

void FScreenParticleInitParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FScreenParticleInitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FScreenParticleInitParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.screenparticlemodifiers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.template__ != nullptr);
      _impl_.template__->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.templatescreenparticlematerial_ != nullptr);
      _impl_.templatescreenparticlematerial_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.matparamname_ != nullptr);
      _impl_.matparamname_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.particletag_ != nullptr);
      _impl_.particletag_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.contentdims_ != nullptr);
      _impl_.contentdims_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.stopparamsot_ != nullptr);
      _impl_.stopparamsot_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.particledepth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scalingmode_) -
        reinterpret_cast<char*>(&_impl_.particledepth_)) + sizeof(_impl_.scalingmode_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.bhidewhenfinished_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.effectdepthprioritygroup_) -
        reinterpret_cast<char*>(&_impl_.bhidewhenfinished_)) + sizeof(_impl_.effectdepthprioritygroup_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FScreenParticleInitParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference Template = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FScreenParticleModifier ScreenParticleModifiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_screenparticlemodifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference TemplateScreenParticleMaterial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_templatescreenparticlematerial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FName MatParamName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_matparamname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideWhenFinished = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bhidewhenfinished(&has_bits);
          _impl_.bhidewhenfinished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FName ParticleTag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_particletag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector2D ContentDims = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contentdims(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float ParticleDepth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_particledepth(&has_bits);
          _impl_.particledepth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required int32 ScalingMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_scalingmode(&has_bits);
          _impl_.scalingmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FScreenParticleParamOverTime StopParamsOT = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopparamsot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bOnlyOwnerSee = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bonlyownersee(&has_bits);
          _impl_.bonlyownersee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 EffectDepthPriorityGroup = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_effectdepthprioritygroup(&has_bits);
          _impl_.effectdepthprioritygroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAlwaysVisible = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_balwaysvisible(&has_bits);
          _impl_.balwaysvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bUseDesignerAttributeParameters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_busedesignerattributeparameters(&has_bits);
          _impl_.busedesignerattributeparameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FScreenParticleInitParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FScreenParticleInitParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference Template = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::template_(this),
        _Internal::template_(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FScreenParticleModifier ScreenParticleModifiers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_screenparticlemodifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_screenparticlemodifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference TemplateScreenParticleMaterial = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::templatescreenparticlematerial(this),
        _Internal::templatescreenparticlematerial(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FName MatParamName = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::matparamname(this),
        _Internal::matparamname(this).GetCachedSize(), target, stream);
  }

  // required bool bHideWhenFinished = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bhidewhenfinished(), target);
  }

  // required .HederaDefinitions.FName ParticleTag = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::particletag(this),
        _Internal::particletag(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector2D ContentDims = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::contentdims(this),
        _Internal::contentdims(this).GetCachedSize(), target, stream);
  }

  // required float ParticleDepth = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_particledepth(), target);
  }

  // required int32 ScalingMode = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_scalingmode(), target);
  }

  // required .HederaDefinitions.FScreenParticleParamOverTime StopParamsOT = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::stopparamsot(this),
        _Internal::stopparamsot(this).GetCachedSize(), target, stream);
  }

  // required bool bOnlyOwnerSee = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bonlyownersee(), target);
  }

  // required int32 EffectDepthPriorityGroup = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_effectdepthprioritygroup(), target);
  }

  // required bool bAlwaysVisible = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_balwaysvisible(), target);
  }

  // required bool bUseDesignerAttributeParameters = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_busedesignerattributeparameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FScreenParticleInitParams)
  return target;
}

size_t FScreenParticleInitParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FScreenParticleInitParams)
  size_t total_size = 0;

  if (_internal_has_template_()) {
    // required .HederaDefinitions.NonReplicatedObjectReference Template = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template__);
  }

  if (_internal_has_templatescreenparticlematerial()) {
    // required .HederaDefinitions.NonReplicatedObjectReference TemplateScreenParticleMaterial = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.templatescreenparticlematerial_);
  }

  if (_internal_has_matparamname()) {
    // required .HederaDefinitions.FName MatParamName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matparamname_);
  }

  if (_internal_has_particletag()) {
    // required .HederaDefinitions.FName ParticleTag = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.particletag_);
  }

  if (_internal_has_contentdims()) {
    // required .HederaDefinitions.FVector2D ContentDims = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contentdims_);
  }

  if (_internal_has_stopparamsot()) {
    // required .HederaDefinitions.FScreenParticleParamOverTime StopParamsOT = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stopparamsot_);
  }

  if (_internal_has_particledepth()) {
    // required float ParticleDepth = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_scalingmode()) {
    // required int32 ScalingMode = 9;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scalingmode());
  }

  if (_internal_has_bhidewhenfinished()) {
    // required bool bHideWhenFinished = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_bonlyownersee()) {
    // required bool bOnlyOwnerSee = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_balwaysvisible()) {
    // required bool bAlwaysVisible = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_busedesignerattributeparameters()) {
    // required bool bUseDesignerAttributeParameters = 14;
    total_size += 1 + 1;
  }

  if (_internal_has_effectdepthprioritygroup()) {
    // required int32 EffectDepthPriorityGroup = 12;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_effectdepthprioritygroup());
  }

  return total_size;
}
size_t FScreenParticleInitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FScreenParticleInitParams)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference Template = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template__);

    // required .HederaDefinitions.NonReplicatedObjectReference TemplateScreenParticleMaterial = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.templatescreenparticlematerial_);

    // required .HederaDefinitions.FName MatParamName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matparamname_);

    // required .HederaDefinitions.FName ParticleTag = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.particletag_);

    // required .HederaDefinitions.FVector2D ContentDims = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contentdims_);

    // required .HederaDefinitions.FScreenParticleParamOverTime StopParamsOT = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stopparamsot_);

    // required float ParticleDepth = 8;
    total_size += 1 + 4;

    // required int32 ScalingMode = 9;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scalingmode());

    // required bool bHideWhenFinished = 5;
    total_size += 1 + 1;

    // required bool bOnlyOwnerSee = 11;
    total_size += 1 + 1;

    // required bool bAlwaysVisible = 13;
    total_size += 1 + 1;

    // required bool bUseDesignerAttributeParameters = 14;
    total_size += 1 + 1;

    // required int32 EffectDepthPriorityGroup = 12;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_effectdepthprioritygroup());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FScreenParticleModifier ScreenParticleModifiers = 2;
  total_size += 1UL * this->_internal_screenparticlemodifiers_size();
  for (const auto& msg : this->_impl_.screenparticlemodifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FScreenParticleInitParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FScreenParticleInitParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FScreenParticleInitParams::GetClassData() const { return &_class_data_; }


void FScreenParticleInitParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FScreenParticleInitParams*>(&to_msg);
  auto& from = static_cast<const FScreenParticleInitParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FScreenParticleInitParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.screenparticlemodifiers_.MergeFrom(from._impl_.screenparticlemodifiers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_template_()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_template_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_templatescreenparticlematerial()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_templatescreenparticlematerial());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_matparamname()->::HederaDefinitions::FName::MergeFrom(
          from._internal_matparamname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_particletag()->::HederaDefinitions::FName::MergeFrom(
          from._internal_particletag());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_contentdims()->::HederaDefinitions::FVector2D::MergeFrom(
          from._internal_contentdims());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_stopparamsot()->::HederaDefinitions::FScreenParticleParamOverTime::MergeFrom(
          from._internal_stopparamsot());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.particledepth_ = from._impl_.particledepth_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.scalingmode_ = from._impl_.scalingmode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bhidewhenfinished_ = from._impl_.bhidewhenfinished_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bonlyownersee_ = from._impl_.bonlyownersee_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.balwaysvisible_ = from._impl_.balwaysvisible_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.busedesignerattributeparameters_ = from._impl_.busedesignerattributeparameters_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.effectdepthprioritygroup_ = from._impl_.effectdepthprioritygroup_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FScreenParticleInitParams::CopyFrom(const FScreenParticleInitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FScreenParticleInitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FScreenParticleInitParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.screenparticlemodifiers_))
    return false;
  if (_internal_has_template_()) {
    if (!_impl_.template__->IsInitialized()) return false;
  }
  if (_internal_has_templatescreenparticlematerial()) {
    if (!_impl_.templatescreenparticlematerial_->IsInitialized()) return false;
  }
  if (_internal_has_matparamname()) {
    if (!_impl_.matparamname_->IsInitialized()) return false;
  }
  if (_internal_has_particletag()) {
    if (!_impl_.particletag_->IsInitialized()) return false;
  }
  if (_internal_has_contentdims()) {
    if (!_impl_.contentdims_->IsInitialized()) return false;
  }
  if (_internal_has_stopparamsot()) {
    if (!_impl_.stopparamsot_->IsInitialized()) return false;
  }
  return true;
}

void FScreenParticleInitParams::InternalSwap(FScreenParticleInitParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.screenparticlemodifiers_.InternalSwap(&other->_impl_.screenparticlemodifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FScreenParticleInitParams, _impl_.effectdepthprioritygroup_)
      + sizeof(FScreenParticleInitParams::_impl_.effectdepthprioritygroup_)
      - PROTOBUF_FIELD_OFFSET(FScreenParticleInitParams, _impl_.template__)>(
          reinterpret_cast<char*>(&_impl_.template__),
          reinterpret_cast<char*>(&other->_impl_.template__));
}

::PROTOBUF_NAMESPACE_ID::Metadata FScreenParticleInitParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[14]);
}

// ===================================================================

class FReplicatedDamageScreenParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedDamageScreenParticle>()._impl_._has_bits_);
  static const ::HederaDefinitions::FScreenParticleInitParams& params(const FReplicatedDamageScreenParticle* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::FVector& referenceloaction(const FReplicatedDamageScreenParticle* msg);
  static void set_has_referenceloaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_genericscale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::HederaDefinitions::FScreenParticleInitParams&
FReplicatedDamageScreenParticle::_Internal::params(const FReplicatedDamageScreenParticle* msg) {
  return *msg->_impl_.params_;
}
const ::HederaDefinitions::FVector&
FReplicatedDamageScreenParticle::_Internal::referenceloaction(const FReplicatedDamageScreenParticle* msg) {
  return *msg->_impl_.referenceloaction_;
}
FReplicatedDamageScreenParticle::FReplicatedDamageScreenParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedDamageScreenParticle)
}
FReplicatedDamageScreenParticle::FReplicatedDamageScreenParticle(const FReplicatedDamageScreenParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedDamageScreenParticle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.referenceloaction_){nullptr}
    , decltype(_impl_.genericscale_){}
    , decltype(_impl_.counter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::HederaDefinitions::FScreenParticleInitParams(*from._impl_.params_);
  }
  if (from._internal_has_referenceloaction()) {
    _this->_impl_.referenceloaction_ = new ::HederaDefinitions::FVector(*from._impl_.referenceloaction_);
  }
  ::memcpy(&_impl_.genericscale_, &from._impl_.genericscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.counter_) -
    reinterpret_cast<char*>(&_impl_.genericscale_)) + sizeof(_impl_.counter_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedDamageScreenParticle)
}

inline void FReplicatedDamageScreenParticle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.referenceloaction_){nullptr}
    , decltype(_impl_.genericscale_){0}
    , decltype(_impl_.counter_){0}
  };
}

FReplicatedDamageScreenParticle::~FReplicatedDamageScreenParticle() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedDamageScreenParticle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedDamageScreenParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
  if (this != internal_default_instance()) delete _impl_.referenceloaction_;
}

void FReplicatedDamageScreenParticle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedDamageScreenParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedDamageScreenParticle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.referenceloaction_ != nullptr);
      _impl_.referenceloaction_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.genericscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.counter_) -
        reinterpret_cast<char*>(&_impl_.genericscale_)) + sizeof(_impl_.counter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedDamageScreenParticle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FScreenParticleInitParams Params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector ReferenceLoaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_referenceloaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float GenericScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_genericscale(&has_bits);
          _impl_.genericscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required int32 Counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_counter(&has_bits);
          _impl_.counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedDamageScreenParticle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedDamageScreenParticle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FScreenParticleInitParams Params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector ReferenceLoaction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::referenceloaction(this),
        _Internal::referenceloaction(this).GetCachedSize(), target, stream);
  }

  // required float GenericScale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_genericscale(), target);
  }

  // required int32 Counter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedDamageScreenParticle)
  return target;
}

size_t FReplicatedDamageScreenParticle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedDamageScreenParticle)
  size_t total_size = 0;

  if (_internal_has_params()) {
    // required .HederaDefinitions.FScreenParticleInitParams Params = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  if (_internal_has_referenceloaction()) {
    // required .HederaDefinitions.FVector ReferenceLoaction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referenceloaction_);
  }

  if (_internal_has_genericscale()) {
    // required float GenericScale = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_counter()) {
    // required int32 Counter = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_counter());
  }

  return total_size;
}
size_t FReplicatedDamageScreenParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedDamageScreenParticle)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FScreenParticleInitParams Params = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);

    // required .HederaDefinitions.FVector ReferenceLoaction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referenceloaction_);

    // required float GenericScale = 3;
    total_size += 1 + 4;

    // required int32 Counter = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_counter());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedDamageScreenParticle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedDamageScreenParticle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedDamageScreenParticle::GetClassData() const { return &_class_data_; }


void FReplicatedDamageScreenParticle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedDamageScreenParticle*>(&to_msg);
  auto& from = static_cast<const FReplicatedDamageScreenParticle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedDamageScreenParticle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_params()->::HederaDefinitions::FScreenParticleInitParams::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_referenceloaction()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_referenceloaction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.genericscale_ = from._impl_.genericscale_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.counter_ = from._impl_.counter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedDamageScreenParticle::CopyFrom(const FReplicatedDamageScreenParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedDamageScreenParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedDamageScreenParticle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_params()) {
    if (!_impl_.params_->IsInitialized()) return false;
  }
  if (_internal_has_referenceloaction()) {
    if (!_impl_.referenceloaction_->IsInitialized()) return false;
  }
  return true;
}

void FReplicatedDamageScreenParticle::InternalSwap(FReplicatedDamageScreenParticle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedDamageScreenParticle, _impl_.counter_)
      + sizeof(FReplicatedDamageScreenParticle::_impl_.counter_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedDamageScreenParticle, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedDamageScreenParticle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[15]);
}

// ===================================================================

class FReplicatedProgressBarData::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedProgressBarData>()._impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FReplicatedProgressBarData::FReplicatedProgressBarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedProgressBarData)
}
FReplicatedProgressBarData::FReplicatedProgressBarData(const FReplicatedProgressBarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedProgressBarData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.rate_){}
    , decltype(_impl_.startoffset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.startoffset_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.startoffset_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedProgressBarData)
}

inline void FReplicatedProgressBarData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.rate_){0}
    , decltype(_impl_.startoffset_){0}
  };
}

FReplicatedProgressBarData::~FReplicatedProgressBarData() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedProgressBarData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedProgressBarData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FReplicatedProgressBarData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedProgressBarData::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedProgressBarData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.startoffset_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.startoffset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedProgressBarData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float Duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float Rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_rate(&has_bits);
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float StartOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_startoffset(&has_bits);
          _impl_.startoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedProgressBarData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedProgressBarData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float Duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_duration(), target);
  }

  // required float Rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_rate(), target);
  }

  // required float StartOffset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_startoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedProgressBarData)
  return target;
}

size_t FReplicatedProgressBarData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedProgressBarData)
  size_t total_size = 0;

  if (_internal_has_duration()) {
    // required float Duration = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_rate()) {
    // required float Rate = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_startoffset()) {
    // required float StartOffset = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FReplicatedProgressBarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedProgressBarData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float Duration = 1;
    total_size += 1 + 4;

    // required float Rate = 2;
    total_size += 1 + 4;

    // required float StartOffset = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedProgressBarData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedProgressBarData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedProgressBarData::GetClassData() const { return &_class_data_; }


void FReplicatedProgressBarData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedProgressBarData*>(&to_msg);
  auto& from = static_cast<const FReplicatedProgressBarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedProgressBarData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rate_ = from._impl_.rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.startoffset_ = from._impl_.startoffset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedProgressBarData::CopyFrom(const FReplicatedProgressBarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedProgressBarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedProgressBarData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FReplicatedProgressBarData::InternalSwap(FReplicatedProgressBarData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedProgressBarData, _impl_.startoffset_)
      + sizeof(FReplicatedProgressBarData::_impl_.startoffset_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedProgressBarData, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedProgressBarData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[16]);
}

// ===================================================================

class FCameraViewData::_Internal {
 public:
  using HasBits = decltype(std::declval<FCameraViewData>()._impl_._has_bits_);
  static const ::HederaDefinitions::ReplicatedActorReference& viewtarget(const FCameraViewData* msg);
  static void set_has_viewtarget(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::FName& modename(const FCameraViewData* msg);
  static void set_has_modename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_blendtimeoverride(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bisteleport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_desireddeathspectatorstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::HederaDefinitions::ReplicatedActorReference&
FCameraViewData::_Internal::viewtarget(const FCameraViewData* msg) {
  return *msg->_impl_.viewtarget_;
}
const ::HederaDefinitions::FName&
FCameraViewData::_Internal::modename(const FCameraViewData* msg) {
  return *msg->_impl_.modename_;
}
FCameraViewData::FCameraViewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FCameraViewData)
}
FCameraViewData::FCameraViewData(const FCameraViewData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FCameraViewData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtarget_){nullptr}
    , decltype(_impl_.modename_){nullptr}
    , decltype(_impl_.blendtimeoverride_){}
    , decltype(_impl_.bisteleport_){}
    , decltype(_impl_.desireddeathspectatorstate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_viewtarget()) {
    _this->_impl_.viewtarget_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.viewtarget_);
  }
  if (from._internal_has_modename()) {
    _this->_impl_.modename_ = new ::HederaDefinitions::FName(*from._impl_.modename_);
  }
  ::memcpy(&_impl_.blendtimeoverride_, &from._impl_.blendtimeoverride_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.desireddeathspectatorstate_) -
    reinterpret_cast<char*>(&_impl_.blendtimeoverride_)) + sizeof(_impl_.desireddeathspectatorstate_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FCameraViewData)
}

inline void FCameraViewData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtarget_){nullptr}
    , decltype(_impl_.modename_){nullptr}
    , decltype(_impl_.blendtimeoverride_){0}
    , decltype(_impl_.bisteleport_){false}
    , decltype(_impl_.desireddeathspectatorstate_){0}
  };
}

FCameraViewData::~FCameraViewData() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FCameraViewData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FCameraViewData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewtarget_;
  if (this != internal_default_instance()) delete _impl_.modename_;
}

void FCameraViewData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FCameraViewData::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FCameraViewData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.viewtarget_ != nullptr);
      _impl_.viewtarget_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.modename_ != nullptr);
      _impl_.modename_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.blendtimeoverride_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.desireddeathspectatorstate_) -
        reinterpret_cast<char*>(&_impl_.blendtimeoverride_)) + sizeof(_impl_.desireddeathspectatorstate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FCameraViewData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.ReplicatedActorReference ViewTarget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewtarget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FName ModeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_modename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float BlendTimeOverride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_blendtimeoverride(&has_bits);
          _impl_.blendtimeoverride_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool bIsTeleport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bisteleport(&has_bits);
          _impl_.bisteleport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 DesiredDeathSpectatorState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_desireddeathspectatorstate(&has_bits);
          _impl_.desireddeathspectatorstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FCameraViewData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FCameraViewData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference ViewTarget = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewtarget(this),
        _Internal::viewtarget(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FName ModeName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::modename(this),
        _Internal::modename(this).GetCachedSize(), target, stream);
  }

  // required float BlendTimeOverride = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_blendtimeoverride(), target);
  }

  // required bool bIsTeleport = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bisteleport(), target);
  }

  // required int32 DesiredDeathSpectatorState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_desireddeathspectatorstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FCameraViewData)
  return target;
}

size_t FCameraViewData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FCameraViewData)
  size_t total_size = 0;

  if (_internal_has_viewtarget()) {
    // required .HederaDefinitions.ReplicatedActorReference ViewTarget = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewtarget_);
  }

  if (_internal_has_modename()) {
    // required .HederaDefinitions.FName ModeName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modename_);
  }

  if (_internal_has_blendtimeoverride()) {
    // required float BlendTimeOverride = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_bisteleport()) {
    // required bool bIsTeleport = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_desireddeathspectatorstate()) {
    // required int32 DesiredDeathSpectatorState = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_desireddeathspectatorstate());
  }

  return total_size;
}
size_t FCameraViewData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FCameraViewData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.ReplicatedActorReference ViewTarget = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewtarget_);

    // required .HederaDefinitions.FName ModeName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modename_);

    // required float BlendTimeOverride = 3;
    total_size += 1 + 4;

    // required bool bIsTeleport = 4;
    total_size += 1 + 1;

    // required int32 DesiredDeathSpectatorState = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_desireddeathspectatorstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FCameraViewData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FCameraViewData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FCameraViewData::GetClassData() const { return &_class_data_; }


void FCameraViewData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FCameraViewData*>(&to_msg);
  auto& from = static_cast<const FCameraViewData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FCameraViewData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_viewtarget()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_viewtarget());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_modename()->::HederaDefinitions::FName::MergeFrom(
          from._internal_modename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.blendtimeoverride_ = from._impl_.blendtimeoverride_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bisteleport_ = from._impl_.bisteleport_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.desireddeathspectatorstate_ = from._impl_.desireddeathspectatorstate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FCameraViewData::CopyFrom(const FCameraViewData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FCameraViewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCameraViewData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_viewtarget()) {
    if (!_impl_.viewtarget_->IsInitialized()) return false;
  }
  if (_internal_has_modename()) {
    if (!_impl_.modename_->IsInitialized()) return false;
  }
  return true;
}

void FCameraViewData::InternalSwap(FCameraViewData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FCameraViewData, _impl_.desireddeathspectatorstate_)
      + sizeof(FCameraViewData::_impl_.desireddeathspectatorstate_)
      - PROTOBUF_FIELD_OFFSET(FCameraViewData, _impl_.viewtarget_)>(
          reinterpret_cast<char*>(&_impl_.viewtarget_),
          reinterpret_cast<char*>(&other->_impl_.viewtarget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FCameraViewData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[17]);
}

// ===================================================================

class FActorSelectionDataContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<FActorSelectionDataContainer>()._impl_._has_bits_);
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bdisplayhealth(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_shield(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bdisplayshield(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_overshield(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bdisplayovershield(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bdisplaylevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_respawntime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bdisplayrespawntime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bdisplayname(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::HederaDefinitions::FVector& location(const FActorSelectionDataContainer* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bactive(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& unittype(const FActorSelectionDataContainer* msg);
  static void set_has_unittype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& pri(const FActorSelectionDataContainer* msg);
  static void set_has_pri(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_binjured(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& nameid(const FActorSelectionDataContainer* msg);
  static void set_has_nameid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003ffff) ^ 0x0003ffff) != 0;
  }
};

const ::HederaDefinitions::FVector&
FActorSelectionDataContainer::_Internal::location(const FActorSelectionDataContainer* msg) {
  return *msg->_impl_.location_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FActorSelectionDataContainer::_Internal::unittype(const FActorSelectionDataContainer* msg) {
  return *msg->_impl_.unittype_;
}
const ::HederaDefinitions::ReplicatedActorReference&
FActorSelectionDataContainer::_Internal::pri(const FActorSelectionDataContainer* msg) {
  return *msg->_impl_.pri_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FActorSelectionDataContainer::_Internal::nameid(const FActorSelectionDataContainer* msg) {
  return *msg->_impl_.nameid_;
}
FActorSelectionDataContainer::FActorSelectionDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FActorSelectionDataContainer)
}
FActorSelectionDataContainer::FActorSelectionDataContainer(const FActorSelectionDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FActorSelectionDataContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.unittype_){nullptr}
    , decltype(_impl_.pri_){nullptr}
    , decltype(_impl_.nameid_){nullptr}
    , decltype(_impl_.health_){}
    , decltype(_impl_.shield_){}
    , decltype(_impl_.overshield_){}
    , decltype(_impl_.bdisplayhealth_){}
    , decltype(_impl_.bdisplayshield_){}
    , decltype(_impl_.bdisplayovershield_){}
    , decltype(_impl_.bdisplaylevel_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.respawntime_){}
    , decltype(_impl_.bdisplayrespawntime_){}
    , decltype(_impl_.bdisplayname_){}
    , decltype(_impl_.bactive_){}
    , decltype(_impl_.binjured_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::HederaDefinitions::FVector(*from._impl_.location_);
  }
  if (from._internal_has_unittype()) {
    _this->_impl_.unittype_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.unittype_);
  }
  if (from._internal_has_pri()) {
    _this->_impl_.pri_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.pri_);
  }
  if (from._internal_has_nameid()) {
    _this->_impl_.nameid_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.nameid_);
  }
  ::memcpy(&_impl_.health_, &from._impl_.health_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.binjured_) -
    reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.binjured_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FActorSelectionDataContainer)
}

inline void FActorSelectionDataContainer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.unittype_){nullptr}
    , decltype(_impl_.pri_){nullptr}
    , decltype(_impl_.nameid_){nullptr}
    , decltype(_impl_.health_){0}
    , decltype(_impl_.shield_){0}
    , decltype(_impl_.overshield_){0}
    , decltype(_impl_.bdisplayhealth_){false}
    , decltype(_impl_.bdisplayshield_){false}
    , decltype(_impl_.bdisplayovershield_){false}
    , decltype(_impl_.bdisplaylevel_){false}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.respawntime_){0}
    , decltype(_impl_.bdisplayrespawntime_){false}
    , decltype(_impl_.bdisplayname_){false}
    , decltype(_impl_.bactive_){false}
    , decltype(_impl_.binjured_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FActorSelectionDataContainer::~FActorSelectionDataContainer() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FActorSelectionDataContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FActorSelectionDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.unittype_;
  if (this != internal_default_instance()) delete _impl_.pri_;
  if (this != internal_default_instance()) delete _impl_.nameid_;
}

void FActorSelectionDataContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FActorSelectionDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FActorSelectionDataContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.unittype_ != nullptr);
      _impl_.unittype_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.pri_ != nullptr);
      _impl_.pri_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.nameid_ != nullptr);
      _impl_.nameid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.health_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.overshield_) -
        reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.overshield_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.bdisplayhealth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bdisplayname_) -
        reinterpret_cast<char*>(&_impl_.bdisplayhealth_)) + sizeof(_impl_.bdisplayname_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.bactive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.binjured_) -
        reinterpret_cast<char*>(&_impl_.bactive_)) + sizeof(_impl_.binjured_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FActorSelectionDataContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float Health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_health(&has_bits);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayHealth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bdisplayhealth(&has_bits);
          _impl_.bdisplayhealth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float Shield = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_shield(&has_bits);
          _impl_.shield_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayShield = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bdisplayshield(&has_bits);
          _impl_.bdisplayshield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float Overshield = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_overshield(&has_bits);
          _impl_.overshield_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayOvershield = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bdisplayovershield(&has_bits);
          _impl_.bdisplayovershield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayLevel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bdisplaylevel(&has_bits);
          _impl_.bdisplaylevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float RespawnTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_respawntime(&has_bits);
          _impl_.respawntime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayRespawnTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_bdisplayrespawntime(&has_bits);
          _impl_.bdisplayrespawntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bdisplayname(&has_bits);
          _impl_.bdisplayname_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector Location = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bActive = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bactive(&has_bits);
          _impl_.bactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference UnitType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_unittype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference PRI = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bInjured = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_binjured(&has_bits);
          _impl_.binjured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference NameID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_nameid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes Name = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FActorSelectionDataContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FActorSelectionDataContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float Health = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_health(), target);
  }

  // required bool bDisplayHealth = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bdisplayhealth(), target);
  }

  // required float Shield = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_shield(), target);
  }

  // required bool bDisplayShield = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bdisplayshield(), target);
  }

  // required float Overshield = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_overshield(), target);
  }

  // required bool bDisplayOvershield = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bdisplayovershield(), target);
  }

  // required int32 Level = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  // required bool bDisplayLevel = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_bdisplaylevel(), target);
  }

  // required float RespawnTime = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_respawntime(), target);
  }

  // required bool bDisplayRespawnTime = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_bdisplayrespawntime(), target);
  }

  // required bool bDisplayName = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bdisplayname(), target);
  }

  // required .HederaDefinitions.FVector Location = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // required bool bActive = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_bactive(), target);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference UnitType = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::unittype(this),
        _Internal::unittype(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference PRI = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::pri(this),
        _Internal::pri(this).GetCachedSize(), target, stream);
  }

  // required bool bInjured = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_binjured(), target);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference NameID = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::nameid(this),
        _Internal::nameid(this).GetCachedSize(), target, stream);
  }

  // required bytes Name = 18;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FActorSelectionDataContainer)
  return target;
}

size_t FActorSelectionDataContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FActorSelectionDataContainer)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required bytes Name = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (_internal_has_location()) {
    // required .HederaDefinitions.FVector Location = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (_internal_has_unittype()) {
    // required .HederaDefinitions.NonReplicatedObjectReference UnitType = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unittype_);
  }

  if (_internal_has_pri()) {
    // required .HederaDefinitions.ReplicatedActorReference PRI = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pri_);
  }

  if (_internal_has_nameid()) {
    // required .HederaDefinitions.NonReplicatedObjectReference NameID = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nameid_);
  }

  if (_internal_has_health()) {
    // required float Health = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_shield()) {
    // required float Shield = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_overshield()) {
    // required float Overshield = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_bdisplayhealth()) {
    // required bool bDisplayHealth = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_bdisplayshield()) {
    // required bool bDisplayShield = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_bdisplayovershield()) {
    // required bool bDisplayOvershield = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_bdisplaylevel()) {
    // required bool bDisplayLevel = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_level()) {
    // required int32 Level = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_respawntime()) {
    // required float RespawnTime = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_bdisplayrespawntime()) {
    // required bool bDisplayRespawnTime = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_bdisplayname()) {
    // required bool bDisplayName = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_bactive()) {
    // required bool bActive = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_binjured()) {
    // required bool bInjured = 16;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t FActorSelectionDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FActorSelectionDataContainer)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required bytes Name = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());

    // required .HederaDefinitions.FVector Location = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);

    // required .HederaDefinitions.NonReplicatedObjectReference UnitType = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unittype_);

    // required .HederaDefinitions.ReplicatedActorReference PRI = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pri_);

    // required .HederaDefinitions.NonReplicatedObjectReference NameID = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nameid_);

    // required float Health = 1;
    total_size += 1 + 4;

    // required float Shield = 3;
    total_size += 1 + 4;

    // required float Overshield = 5;
    total_size += 1 + 4;

    // required bool bDisplayHealth = 2;
    total_size += 1 + 1;

    // required bool bDisplayShield = 4;
    total_size += 1 + 1;

    // required bool bDisplayOvershield = 6;
    total_size += 1 + 1;

    // required bool bDisplayLevel = 8;
    total_size += 1 + 1;

    // required int32 Level = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());

    // required float RespawnTime = 9;
    total_size += 1 + 4;

    // required bool bDisplayRespawnTime = 10;
    total_size += 1 + 1;

    // required bool bDisplayName = 11;
    total_size += 1 + 1;

    // required bool bActive = 13;
    total_size += 1 + 1;

    // required bool bInjured = 16;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FActorSelectionDataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FActorSelectionDataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FActorSelectionDataContainer::GetClassData() const { return &_class_data_; }


void FActorSelectionDataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FActorSelectionDataContainer*>(&to_msg);
  auto& from = static_cast<const FActorSelectionDataContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FActorSelectionDataContainer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_unittype()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_unittype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_pri()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_pri());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_nameid()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_nameid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.shield_ = from._impl_.shield_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.overshield_ = from._impl_.overshield_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bdisplayhealth_ = from._impl_.bdisplayhealth_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bdisplayshield_ = from._impl_.bdisplayshield_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bdisplayovershield_ = from._impl_.bdisplayovershield_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bdisplaylevel_ = from._impl_.bdisplaylevel_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.respawntime_ = from._impl_.respawntime_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.bdisplayrespawntime_ = from._impl_.bdisplayrespawntime_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.bdisplayname_ = from._impl_.bdisplayname_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.bactive_ = from._impl_.bactive_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.binjured_ = from._impl_.binjured_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FActorSelectionDataContainer::CopyFrom(const FActorSelectionDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FActorSelectionDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FActorSelectionDataContainer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_unittype()) {
    if (!_impl_.unittype_->IsInitialized()) return false;
  }
  if (_internal_has_pri()) {
    if (!_impl_.pri_->IsInitialized()) return false;
  }
  if (_internal_has_nameid()) {
    if (!_impl_.nameid_->IsInitialized()) return false;
  }
  return true;
}

void FActorSelectionDataContainer::InternalSwap(FActorSelectionDataContainer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FActorSelectionDataContainer, _impl_.binjured_)
      + sizeof(FActorSelectionDataContainer::_impl_.binjured_)
      - PROTOBUF_FIELD_OFFSET(FActorSelectionDataContainer, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FActorSelectionDataContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[18]);
}

// ===================================================================

class APoplarPlayerController::_Internal {
 public:
  using HasBits = decltype(std::declval<APoplarPlayerController>()._impl_._has_bits_);
  static const ::HederaDefinitions::FVector& location(const APoplarPlayerController* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::FRotator& rotation(const APoplarPlayerController* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drawscale(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_customtimedilation(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_physics(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_remoterole(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_replicatedcollisiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& owner(const APoplarPlayerController* msg);
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& base(const APoplarPlayerController* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bhidden(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_btearoff(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_bhardattach(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_bcollideactors(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_bcollideworld(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_bblockactors(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_bprojtarget(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_bnetowner(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& instigator(const APoplarPlayerController* msg);
  static void set_has_instigator(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::HederaDefinitions::FVector& velocity(const APoplarPlayerController* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::HederaDefinitions::FName& basebonename(const APoplarPlayerController* msg);
  static void set_has_basebonename(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::HederaDefinitions::FVector& relativelocation(const APoplarPlayerController* msg);
  static void set_has_relativelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::HederaDefinitions::FRotator& relativerotation(const APoplarPlayerController* msg);
  static void set_has_relativerotation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& pawn(const APoplarPlayerController* msg);
  static void set_has_pawn(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& clientpendingpsi(const APoplarPlayerController* msg);
  static void set_has_clientpendingpsi(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& clientpendingpri(const APoplarPlayerController* msg);
  static void set_has_clientpendingpri(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::HederaDefinitions::FRotator& targetviewrotation(const APoplarPlayerController* msg);
  static void set_has_targetviewrotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_targeteyeheight(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::HederaDefinitions::FEnvironmentalEffectInfo& activeaudioeffect(const APoplarPlayerController* msg);
  static void set_has_activeaudioeffect(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bhideammoonhud(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_bhidecompassonhud(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bhideskillsonhud(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_bhidexponhud(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_bconsolecontroller(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_bdisplaytradeicon(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_bdisplaytradedisabledicon(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_bresurrectall(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_bplayingteleportersound(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& mywillowpawn(const APoplarPlayerController* msg);
  static void set_has_mywillowpawn(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& currentusableobject_object(const APoplarPlayerController* msg);
  static void set_has_currentusableobject_object(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& currentusableobject_interface(const APoplarPlayerController* msg);
  static void set_has_currentusableobject_interface(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::HederaDefinitions::FReplicatedDamageScreenParticle& recentdamagescreenparticle(const APoplarPlayerController* msg);
  static void set_has_recentdamagescreenparticle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_fovmodifierspeed(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_fovmodifierspeedbasevalue(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_postprocessdurationmultiplier(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::HederaDefinitions::FReplicatedProgressBarData& useprogressbar(const APoplarPlayerController* msg);
  static void set_has_useprogressbar(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_targetedwarningseverity(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::HederaDefinitions::FCameraViewData& replicatedcameraviewdata(const APoplarPlayerController* msg);
  static void set_has_replicatedcameraviewdata(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& pipelinesummaryhistorymanager(const APoplarPlayerController* msg);
  static void set_has_pipelinesummaryhistorymanager(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_currentminimapactorselectionindex(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0xffffffff) ^ 0xffffffff)
       | ((has_bits[1] & 0x0003ffff) ^ 0x0003ffff)) != 0;
  }
};

const ::HederaDefinitions::FVector&
APoplarPlayerController::_Internal::location(const APoplarPlayerController* msg) {
  return *msg->_impl_.location_;
}
const ::HederaDefinitions::FRotator&
APoplarPlayerController::_Internal::rotation(const APoplarPlayerController* msg) {
  return *msg->_impl_.rotation_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::owner(const APoplarPlayerController* msg) {
  return *msg->_impl_.owner_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::base(const APoplarPlayerController* msg) {
  return *msg->_impl_.base_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::instigator(const APoplarPlayerController* msg) {
  return *msg->_impl_.instigator_;
}
const ::HederaDefinitions::FVector&
APoplarPlayerController::_Internal::velocity(const APoplarPlayerController* msg) {
  return *msg->_impl_.velocity_;
}
const ::HederaDefinitions::FName&
APoplarPlayerController::_Internal::basebonename(const APoplarPlayerController* msg) {
  return *msg->_impl_.basebonename_;
}
const ::HederaDefinitions::FVector&
APoplarPlayerController::_Internal::relativelocation(const APoplarPlayerController* msg) {
  return *msg->_impl_.relativelocation_;
}
const ::HederaDefinitions::FRotator&
APoplarPlayerController::_Internal::relativerotation(const APoplarPlayerController* msg) {
  return *msg->_impl_.relativerotation_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::pawn(const APoplarPlayerController* msg) {
  return *msg->_impl_.pawn_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::clientpendingpsi(const APoplarPlayerController* msg) {
  return *msg->_impl_.clientpendingpsi_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::clientpendingpri(const APoplarPlayerController* msg) {
  return *msg->_impl_.clientpendingpri_;
}
const ::HederaDefinitions::FRotator&
APoplarPlayerController::_Internal::targetviewrotation(const APoplarPlayerController* msg) {
  return *msg->_impl_.targetviewrotation_;
}
const ::HederaDefinitions::FEnvironmentalEffectInfo&
APoplarPlayerController::_Internal::activeaudioeffect(const APoplarPlayerController* msg) {
  return *msg->_impl_.activeaudioeffect_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::mywillowpawn(const APoplarPlayerController* msg) {
  return *msg->_impl_.mywillowpawn_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerController::_Internal::currentusableobject_object(const APoplarPlayerController* msg) {
  return *msg->_impl_.currentusableobject_object_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerController::_Internal::currentusableobject_interface(const APoplarPlayerController* msg) {
  return *msg->_impl_.currentusableobject_interface_;
}
const ::HederaDefinitions::FReplicatedDamageScreenParticle&
APoplarPlayerController::_Internal::recentdamagescreenparticle(const APoplarPlayerController* msg) {
  return *msg->_impl_.recentdamagescreenparticle_;
}
const ::HederaDefinitions::FReplicatedProgressBarData&
APoplarPlayerController::_Internal::useprogressbar(const APoplarPlayerController* msg) {
  return *msg->_impl_.useprogressbar_;
}
const ::HederaDefinitions::FCameraViewData&
APoplarPlayerController::_Internal::replicatedcameraviewdata(const APoplarPlayerController* msg) {
  return *msg->_impl_.replicatedcameraviewdata_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerController::_Internal::pipelinesummaryhistorymanager(const APoplarPlayerController* msg) {
  return *msg->_impl_.pipelinesummaryhistorymanager_;
}
APoplarPlayerController::APoplarPlayerController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.APoplarPlayerController)
}
APoplarPlayerController::APoplarPlayerController(const APoplarPlayerController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APoplarPlayerController* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currentinteractionicon_){from._impl_.currentinteractionicon_}
    , decltype(_impl_.minimapactorselectdata_){from._impl_.minimapactorselectdata_}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.instigator_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.basebonename_){nullptr}
    , decltype(_impl_.relativelocation_){nullptr}
    , decltype(_impl_.relativerotation_){nullptr}
    , decltype(_impl_.pawn_){nullptr}
    , decltype(_impl_.clientpendingpsi_){nullptr}
    , decltype(_impl_.clientpendingpri_){nullptr}
    , decltype(_impl_.targetviewrotation_){nullptr}
    , decltype(_impl_.activeaudioeffect_){nullptr}
    , decltype(_impl_.mywillowpawn_){nullptr}
    , decltype(_impl_.currentusableobject_object_){nullptr}
    , decltype(_impl_.currentusableobject_interface_){nullptr}
    , decltype(_impl_.recentdamagescreenparticle_){nullptr}
    , decltype(_impl_.useprogressbar_){nullptr}
    , decltype(_impl_.replicatedcameraviewdata_){nullptr}
    , decltype(_impl_.pipelinesummaryhistorymanager_){nullptr}
    , decltype(_impl_.drawscale_){}
    , decltype(_impl_.customtimedilation_){}
    , decltype(_impl_.physics_){}
    , decltype(_impl_.remoterole_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.replicatedcollisiontype_){}
    , decltype(_impl_.bhidden_){}
    , decltype(_impl_.btearoff_){}
    , decltype(_impl_.bhardattach_){}
    , decltype(_impl_.bcollideactors_){}
    , decltype(_impl_.bcollideworld_){}
    , decltype(_impl_.bblockactors_){}
    , decltype(_impl_.bprojtarget_){}
    , decltype(_impl_.bnetowner_){}
    , decltype(_impl_.targeteyeheight_){}
    , decltype(_impl_.bhideammoonhud_){}
    , decltype(_impl_.bhidecompassonhud_){}
    , decltype(_impl_.bhideskillsonhud_){}
    , decltype(_impl_.bhidexponhud_){}
    , decltype(_impl_.bconsolecontroller_){}
    , decltype(_impl_.bdisplaytradeicon_){}
    , decltype(_impl_.bdisplaytradedisabledicon_){}
    , decltype(_impl_.bresurrectall_){}
    , decltype(_impl_.bplayingteleportersound_){}
    , decltype(_impl_.fovmodifierspeed_){}
    , decltype(_impl_.fovmodifierspeedbasevalue_){}
    , decltype(_impl_.postprocessdurationmultiplier_){}
    , decltype(_impl_.targetedwarningseverity_){}
    , decltype(_impl_.currentminimapactorselectionindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::HederaDefinitions::FVector(*from._impl_.location_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::HederaDefinitions::FRotator(*from._impl_.rotation_);
  }
  if (from._internal_has_owner()) {
    _this->_impl_.owner_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.owner_);
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.base_);
  }
  if (from._internal_has_instigator()) {
    _this->_impl_.instigator_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.instigator_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::HederaDefinitions::FVector(*from._impl_.velocity_);
  }
  if (from._internal_has_basebonename()) {
    _this->_impl_.basebonename_ = new ::HederaDefinitions::FName(*from._impl_.basebonename_);
  }
  if (from._internal_has_relativelocation()) {
    _this->_impl_.relativelocation_ = new ::HederaDefinitions::FVector(*from._impl_.relativelocation_);
  }
  if (from._internal_has_relativerotation()) {
    _this->_impl_.relativerotation_ = new ::HederaDefinitions::FRotator(*from._impl_.relativerotation_);
  }
  if (from._internal_has_pawn()) {
    _this->_impl_.pawn_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.pawn_);
  }
  if (from._internal_has_clientpendingpsi()) {
    _this->_impl_.clientpendingpsi_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.clientpendingpsi_);
  }
  if (from._internal_has_clientpendingpri()) {
    _this->_impl_.clientpendingpri_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.clientpendingpri_);
  }
  if (from._internal_has_targetviewrotation()) {
    _this->_impl_.targetviewrotation_ = new ::HederaDefinitions::FRotator(*from._impl_.targetviewrotation_);
  }
  if (from._internal_has_activeaudioeffect()) {
    _this->_impl_.activeaudioeffect_ = new ::HederaDefinitions::FEnvironmentalEffectInfo(*from._impl_.activeaudioeffect_);
  }
  if (from._internal_has_mywillowpawn()) {
    _this->_impl_.mywillowpawn_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.mywillowpawn_);
  }
  if (from._internal_has_currentusableobject_object()) {
    _this->_impl_.currentusableobject_object_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.currentusableobject_object_);
  }
  if (from._internal_has_currentusableobject_interface()) {
    _this->_impl_.currentusableobject_interface_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.currentusableobject_interface_);
  }
  if (from._internal_has_recentdamagescreenparticle()) {
    _this->_impl_.recentdamagescreenparticle_ = new ::HederaDefinitions::FReplicatedDamageScreenParticle(*from._impl_.recentdamagescreenparticle_);
  }
  if (from._internal_has_useprogressbar()) {
    _this->_impl_.useprogressbar_ = new ::HederaDefinitions::FReplicatedProgressBarData(*from._impl_.useprogressbar_);
  }
  if (from._internal_has_replicatedcameraviewdata()) {
    _this->_impl_.replicatedcameraviewdata_ = new ::HederaDefinitions::FCameraViewData(*from._impl_.replicatedcameraviewdata_);
  }
  if (from._internal_has_pipelinesummaryhistorymanager()) {
    _this->_impl_.pipelinesummaryhistorymanager_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.pipelinesummaryhistorymanager_);
  }
  ::memcpy(&_impl_.drawscale_, &from._impl_.drawscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentminimapactorselectionindex_) -
    reinterpret_cast<char*>(&_impl_.drawscale_)) + sizeof(_impl_.currentminimapactorselectionindex_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.APoplarPlayerController)
}

inline void APoplarPlayerController::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currentinteractionicon_){arena}
    , decltype(_impl_.minimapactorselectdata_){arena}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.instigator_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.basebonename_){nullptr}
    , decltype(_impl_.relativelocation_){nullptr}
    , decltype(_impl_.relativerotation_){nullptr}
    , decltype(_impl_.pawn_){nullptr}
    , decltype(_impl_.clientpendingpsi_){nullptr}
    , decltype(_impl_.clientpendingpri_){nullptr}
    , decltype(_impl_.targetviewrotation_){nullptr}
    , decltype(_impl_.activeaudioeffect_){nullptr}
    , decltype(_impl_.mywillowpawn_){nullptr}
    , decltype(_impl_.currentusableobject_object_){nullptr}
    , decltype(_impl_.currentusableobject_interface_){nullptr}
    , decltype(_impl_.recentdamagescreenparticle_){nullptr}
    , decltype(_impl_.useprogressbar_){nullptr}
    , decltype(_impl_.replicatedcameraviewdata_){nullptr}
    , decltype(_impl_.pipelinesummaryhistorymanager_){nullptr}
    , decltype(_impl_.drawscale_){0}
    , decltype(_impl_.customtimedilation_){0}
    , decltype(_impl_.physics_){0u}
    , decltype(_impl_.remoterole_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.replicatedcollisiontype_){0u}
    , decltype(_impl_.bhidden_){false}
    , decltype(_impl_.btearoff_){false}
    , decltype(_impl_.bhardattach_){false}
    , decltype(_impl_.bcollideactors_){false}
    , decltype(_impl_.bcollideworld_){false}
    , decltype(_impl_.bblockactors_){false}
    , decltype(_impl_.bprojtarget_){false}
    , decltype(_impl_.bnetowner_){false}
    , decltype(_impl_.targeteyeheight_){0}
    , decltype(_impl_.bhideammoonhud_){false}
    , decltype(_impl_.bhidecompassonhud_){false}
    , decltype(_impl_.bhideskillsonhud_){false}
    , decltype(_impl_.bhidexponhud_){false}
    , decltype(_impl_.bconsolecontroller_){false}
    , decltype(_impl_.bdisplaytradeicon_){false}
    , decltype(_impl_.bdisplaytradedisabledicon_){false}
    , decltype(_impl_.bresurrectall_){false}
    , decltype(_impl_.bplayingteleportersound_){false}
    , decltype(_impl_.fovmodifierspeed_){0}
    , decltype(_impl_.fovmodifierspeedbasevalue_){0}
    , decltype(_impl_.postprocessdurationmultiplier_){0}
    , decltype(_impl_.targetedwarningseverity_){0}
    , decltype(_impl_.currentminimapactorselectionindex_){0}
  };
}

APoplarPlayerController::~APoplarPlayerController() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.APoplarPlayerController)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APoplarPlayerController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currentinteractionicon_.~RepeatedPtrField();
  _impl_.minimapactorselectdata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.owner_;
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.instigator_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.basebonename_;
  if (this != internal_default_instance()) delete _impl_.relativelocation_;
  if (this != internal_default_instance()) delete _impl_.relativerotation_;
  if (this != internal_default_instance()) delete _impl_.pawn_;
  if (this != internal_default_instance()) delete _impl_.clientpendingpsi_;
  if (this != internal_default_instance()) delete _impl_.clientpendingpri_;
  if (this != internal_default_instance()) delete _impl_.targetviewrotation_;
  if (this != internal_default_instance()) delete _impl_.activeaudioeffect_;
  if (this != internal_default_instance()) delete _impl_.mywillowpawn_;
  if (this != internal_default_instance()) delete _impl_.currentusableobject_object_;
  if (this != internal_default_instance()) delete _impl_.currentusableobject_interface_;
  if (this != internal_default_instance()) delete _impl_.recentdamagescreenparticle_;
  if (this != internal_default_instance()) delete _impl_.useprogressbar_;
  if (this != internal_default_instance()) delete _impl_.replicatedcameraviewdata_;
  if (this != internal_default_instance()) delete _impl_.pipelinesummaryhistorymanager_;
}

void APoplarPlayerController::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APoplarPlayerController::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.APoplarPlayerController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currentinteractionicon_.Clear();
  _impl_.minimapactorselectdata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.owner_ != nullptr);
      _impl_.owner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.instigator_ != nullptr);
      _impl_.instigator_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.basebonename_ != nullptr);
      _impl_.basebonename_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.relativelocation_ != nullptr);
      _impl_.relativelocation_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.relativerotation_ != nullptr);
      _impl_.relativerotation_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.pawn_ != nullptr);
      _impl_.pawn_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.clientpendingpsi_ != nullptr);
      _impl_.clientpendingpsi_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.clientpendingpri_ != nullptr);
      _impl_.clientpendingpri_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.targetviewrotation_ != nullptr);
      _impl_.targetviewrotation_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.activeaudioeffect_ != nullptr);
      _impl_.activeaudioeffect_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.mywillowpawn_ != nullptr);
      _impl_.mywillowpawn_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.currentusableobject_object_ != nullptr);
      _impl_.currentusableobject_object_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.currentusableobject_interface_ != nullptr);
      _impl_.currentusableobject_interface_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.recentdamagescreenparticle_ != nullptr);
      _impl_.recentdamagescreenparticle_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.useprogressbar_ != nullptr);
      _impl_.useprogressbar_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.replicatedcameraviewdata_ != nullptr);
      _impl_.replicatedcameraviewdata_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.pipelinesummaryhistorymanager_ != nullptr);
      _impl_.pipelinesummaryhistorymanager_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&_impl_.drawscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.physics_) -
        reinterpret_cast<char*>(&_impl_.drawscale_)) + sizeof(_impl_.physics_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.remoterole_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bcollideworld_) -
        reinterpret_cast<char*>(&_impl_.remoterole_)) + sizeof(_impl_.bcollideworld_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bblockactors_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bhidexponhud_) -
        reinterpret_cast<char*>(&_impl_.bblockactors_)) + sizeof(_impl_.bhidexponhud_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.bconsolecontroller_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.postprocessdurationmultiplier_) -
        reinterpret_cast<char*>(&_impl_.bconsolecontroller_)) + sizeof(_impl_.postprocessdurationmultiplier_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.targetedwarningseverity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currentminimapactorselectionindex_) -
        reinterpret_cast<char*>(&_impl_.targetedwarningseverity_)) + sizeof(_impl_.currentminimapactorselectionindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APoplarPlayerController::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FVector Location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FRotator Rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float DrawScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_drawscale(&_impl_._has_bits_);
          _impl_.drawscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float CustomTimeDilation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_customtimedilation(&_impl_._has_bits_);
          _impl_.customtimedilation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required uint32 Physics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_physics(&_impl_._has_bits_);
          _impl_.physics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 RemoteRole = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_remoterole(&_impl_._has_bits_);
          _impl_.remoterole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 Role = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_role(&_impl_._has_bits_);
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ReplicatedCollisionType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_replicatedcollisiontype(&_impl_._has_bits_);
          _impl_.replicatedcollisiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Base = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHidden = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bhidden(&_impl_._has_bits_);
          _impl_.bhidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bTearOff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_btearoff(&_impl_._has_bits_);
          _impl_.btearoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHardAttach = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bhardattach(&_impl_._has_bits_);
          _impl_.bhardattach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bCollideActors = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_bcollideactors(&_impl_._has_bits_);
          _impl_.bcollideactors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bCollideWorld = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_bcollideworld(&_impl_._has_bits_);
          _impl_.bcollideworld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bBlockActors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_bblockactors(&_impl_._has_bits_);
          _impl_.bblockactors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bProjTarget = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_bprojtarget(&_impl_._has_bits_);
          _impl_.bprojtarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bNetOwner = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_bnetowner(&_impl_._has_bits_);
          _impl_.bnetowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_instigator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector Velocity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FName BaseBoneName = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_basebonename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector RelativeLocation = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativelocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FRotator RelativeRotation = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativerotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Pawn = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pawn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference ClientPendingPSI = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientpendingpsi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference ClientPendingPRI = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientpendingpri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FRotator TargetViewRotation = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetviewrotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float TargetEyeHeight = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_targeteyeheight(&_impl_._has_bits_);
          _impl_.targeteyeheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FEnvironmentalEffectInfo ActiveAudioEffect = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_activeaudioeffect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideAmmoOnHud = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_bhideammoonhud(&_impl_._has_bits_);
          _impl_.bhideammoonhud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideCompassOnHUD = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_bhidecompassonhud(&_impl_._has_bits_);
          _impl_.bhidecompassonhud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideSkillsOnHUD = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_bhideskillsonhud(&_impl_._has_bits_);
          _impl_.bhideskillsonhud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideXPOnHUD = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bhidexponhud(&_impl_._has_bits_);
          _impl_.bhidexponhud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bConsoleController = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bconsolecontroller(&_impl_._has_bits_);
          _impl_.bconsolecontroller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayTradeIcon = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bdisplaytradeicon(&_impl_._has_bits_);
          _impl_.bdisplaytradeicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bDisplayTradeDisabledIcon = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bdisplaytradedisabledicon(&_impl_._has_bits_);
          _impl_.bdisplaytradedisabledicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bResurrectAll = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bresurrectall(&_impl_._has_bits_);
          _impl_.bresurrectall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bPlayingTeleporterSound = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bplayingteleportersound(&_impl_._has_bits_);
          _impl_.bplayingteleportersound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference MyWillowPawn = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mywillowpawn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Object = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentusableobject_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Interface = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentusableobject_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FInteractionIconWithOverrides CurrentInteractionIcon = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_currentinteractionicon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FReplicatedDamageScreenParticle RecentDamageScreenParticle = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_recentdamagescreenparticle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float FOVModifierSpeed = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_fovmodifierspeed(&_impl_._has_bits_);
          _impl_.fovmodifierspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float FOVModifierSpeedBaseValue = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_fovmodifierspeedbasevalue(&_impl_._has_bits_);
          _impl_.fovmodifierspeedbasevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float PostProcessDurationMultiplier = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_postprocessdurationmultiplier(&_impl_._has_bits_);
          _impl_.postprocessdurationmultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FReplicatedProgressBarData UseProgressBar = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_useprogressbar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 TargetedWarningSeverity = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_targetedwarningseverity(&_impl_._has_bits_);
          _impl_.targetedwarningseverity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FCameraViewData ReplicatedCameraViewData = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicatedcameraviewdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference PipelineSummaryHistoryManager = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipelinesummaryhistorymanager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FActorSelectionDataContainer MinimapActorSelectData = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_minimapactorselectdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 CurrentMinimapActorSelectionIndex = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_currentminimapactorselectionindex(&_impl_._has_bits_);
          _impl_.currentminimapactorselectionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APoplarPlayerController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.APoplarPlayerController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FVector Location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FRotator Rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // required float DrawScale = 3;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_drawscale(), target);
  }

  // required float CustomTimeDilation = 4;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_customtimedilation(), target);
  }

  // required uint32 Physics = 5;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_physics(), target);
  }

  // required uint32 RemoteRole = 6;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remoterole(), target);
  }

  // required uint32 Role = 7;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_role(), target);
  }

  // required uint32 ReplicatedCollisionType = 8;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_replicatedcollisiontype(), target);
  }

  // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference Base = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // required bool bHidden = 11;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bhidden(), target);
  }

  // required bool bTearOff = 12;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_btearoff(), target);
  }

  // required bool bHardAttach = 13;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_bhardattach(), target);
  }

  // required bool bCollideActors = 14;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_bcollideactors(), target);
  }

  // required bool bCollideWorld = 15;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_bcollideworld(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required bool bBlockActors = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_bblockactors(), target);
  }

  // required bool bProjTarget = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_bprojtarget(), target);
  }

  // required bool bNetOwner = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_bnetowner(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::instigator(this),
        _Internal::instigator(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector Velocity = 20;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FName BaseBoneName = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::basebonename(this),
        _Internal::basebonename(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector RelativeLocation = 22;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::relativelocation(this),
        _Internal::relativelocation(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FRotator RelativeRotation = 23;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::relativerotation(this),
        _Internal::relativerotation(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference Pawn = 24;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::pawn(this),
        _Internal::pawn(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference ClientPendingPSI = 25;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::clientpendingpsi(this),
        _Internal::clientpendingpsi(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference ClientPendingPRI = 26;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::clientpendingpri(this),
        _Internal::clientpendingpri(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FRotator TargetViewRotation = 27;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::targetviewrotation(this),
        _Internal::targetviewrotation(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required float TargetEyeHeight = 28;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_targeteyeheight(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FEnvironmentalEffectInfo ActiveAudioEffect = 29;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::activeaudioeffect(this),
        _Internal::activeaudioeffect(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required bool bHideAmmoOnHud = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_bhideammoonhud(), target);
  }

  // required bool bHideCompassOnHUD = 31;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_bhidecompassonhud(), target);
  }

  // required bool bHideSkillsOnHUD = 32;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_bhideskillsonhud(), target);
  }

  // required bool bHideXPOnHUD = 33;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_bhidexponhud(), target);
  }

  // required bool bConsoleController = 34;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_bconsolecontroller(), target);
  }

  // required bool bDisplayTradeIcon = 35;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_bdisplaytradeicon(), target);
  }

  // required bool bDisplayTradeDisabledIcon = 36;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_bdisplaytradedisabledicon(), target);
  }

  // required bool bResurrectAll = 37;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_bresurrectall(), target);
  }

  // required bool bPlayingTeleporterSound = 38;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_bplayingteleportersound(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference MyWillowPawn = 39;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::mywillowpawn(this),
        _Internal::mywillowpawn(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Object = 40;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::currentusableobject_object(this),
        _Internal::currentusableobject_object(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Interface = 41;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::currentusableobject_interface(this),
        _Internal::currentusableobject_interface(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FInteractionIconWithOverrides CurrentInteractionIcon = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_currentinteractionicon_size()); i < n; i++) {
    const auto& repfield = this->_internal_currentinteractionicon(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FReplicatedDamageScreenParticle RecentDamageScreenParticle = 43;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::recentdamagescreenparticle(this),
        _Internal::recentdamagescreenparticle(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required float FOVModifierSpeed = 44;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(44, this->_internal_fovmodifierspeed(), target);
  }

  // required float FOVModifierSpeedBaseValue = 45;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_fovmodifierspeedbasevalue(), target);
  }

  // required float PostProcessDurationMultiplier = 46;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(46, this->_internal_postprocessdurationmultiplier(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FReplicatedProgressBarData UseProgressBar = 47;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::useprogressbar(this),
        _Internal::useprogressbar(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required int32 TargetedWarningSeverity = 48;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_targetedwarningseverity(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FCameraViewData ReplicatedCameraViewData = 49;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::replicatedcameraviewdata(this),
        _Internal::replicatedcameraviewdata(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference PipelineSummaryHistoryManager = 50;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::pipelinesummaryhistorymanager(this),
        _Internal::pipelinesummaryhistorymanager(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FActorSelectionDataContainer MinimapActorSelectData = 51;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minimapactorselectdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_minimapactorselectdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(51, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required int32 CurrentMinimapActorSelectionIndex = 52;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_currentminimapactorselectionindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.APoplarPlayerController)
  return target;
}

size_t APoplarPlayerController::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.APoplarPlayerController)
  size_t total_size = 0;

  if (_internal_has_location()) {
    // required .HederaDefinitions.FVector Location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (_internal_has_rotation()) {
    // required .HederaDefinitions.FRotator Rotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  if (_internal_has_owner()) {
    // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  if (_internal_has_base()) {
    // required .HederaDefinitions.ReplicatedActorReference Base = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  if (_internal_has_instigator()) {
    // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instigator_);
  }

  if (_internal_has_velocity()) {
    // required .HederaDefinitions.FVector Velocity = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  if (_internal_has_basebonename()) {
    // required .HederaDefinitions.FName BaseBoneName = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basebonename_);
  }

  if (_internal_has_relativelocation()) {
    // required .HederaDefinitions.FVector RelativeLocation = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relativelocation_);
  }

  if (_internal_has_relativerotation()) {
    // required .HederaDefinitions.FRotator RelativeRotation = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relativerotation_);
  }

  if (_internal_has_pawn()) {
    // required .HederaDefinitions.ReplicatedActorReference Pawn = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pawn_);
  }

  if (_internal_has_clientpendingpsi()) {
    // required .HederaDefinitions.ReplicatedActorReference ClientPendingPSI = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clientpendingpsi_);
  }

  if (_internal_has_clientpendingpri()) {
    // required .HederaDefinitions.ReplicatedActorReference ClientPendingPRI = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clientpendingpri_);
  }

  if (_internal_has_targetviewrotation()) {
    // required .HederaDefinitions.FRotator TargetViewRotation = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetviewrotation_);
  }

  if (_internal_has_activeaudioeffect()) {
    // required .HederaDefinitions.FEnvironmentalEffectInfo ActiveAudioEffect = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activeaudioeffect_);
  }

  if (_internal_has_mywillowpawn()) {
    // required .HederaDefinitions.ReplicatedActorReference MyWillowPawn = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mywillowpawn_);
  }

  if (_internal_has_currentusableobject_object()) {
    // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Object = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentusableobject_object_);
  }

  if (_internal_has_currentusableobject_interface()) {
    // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Interface = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentusableobject_interface_);
  }

  if (_internal_has_recentdamagescreenparticle()) {
    // required .HederaDefinitions.FReplicatedDamageScreenParticle RecentDamageScreenParticle = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recentdamagescreenparticle_);
  }

  if (_internal_has_useprogressbar()) {
    // required .HederaDefinitions.FReplicatedProgressBarData UseProgressBar = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.useprogressbar_);
  }

  if (_internal_has_replicatedcameraviewdata()) {
    // required .HederaDefinitions.FCameraViewData ReplicatedCameraViewData = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedcameraviewdata_);
  }

  if (_internal_has_pipelinesummaryhistorymanager()) {
    // required .HederaDefinitions.ReplicatedActorReference PipelineSummaryHistoryManager = 50;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pipelinesummaryhistorymanager_);
  }

  if (_internal_has_drawscale()) {
    // required float DrawScale = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_customtimedilation()) {
    // required float CustomTimeDilation = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_physics()) {
    // required uint32 Physics = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_physics());
  }

  if (_internal_has_remoterole()) {
    // required uint32 RemoteRole = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remoterole());
  }

  if (_internal_has_role()) {
    // required uint32 Role = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
  }

  if (_internal_has_replicatedcollisiontype()) {
    // required uint32 ReplicatedCollisionType = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replicatedcollisiontype());
  }

  if (_internal_has_bhidden()) {
    // required bool bHidden = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_btearoff()) {
    // required bool bTearOff = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_bhardattach()) {
    // required bool bHardAttach = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_bcollideactors()) {
    // required bool bCollideActors = 14;
    total_size += 1 + 1;
  }

  if (_internal_has_bcollideworld()) {
    // required bool bCollideWorld = 15;
    total_size += 1 + 1;
  }

  if (_internal_has_bblockactors()) {
    // required bool bBlockActors = 16;
    total_size += 2 + 1;
  }

  if (_internal_has_bprojtarget()) {
    // required bool bProjTarget = 17;
    total_size += 2 + 1;
  }

  if (_internal_has_bnetowner()) {
    // required bool bNetOwner = 18;
    total_size += 2 + 1;
  }

  if (_internal_has_targeteyeheight()) {
    // required float TargetEyeHeight = 28;
    total_size += 2 + 4;
  }

  if (_internal_has_bhideammoonhud()) {
    // required bool bHideAmmoOnHud = 30;
    total_size += 2 + 1;
  }

  if (_internal_has_bhidecompassonhud()) {
    // required bool bHideCompassOnHUD = 31;
    total_size += 2 + 1;
  }

  if (_internal_has_bhideskillsonhud()) {
    // required bool bHideSkillsOnHUD = 32;
    total_size += 2 + 1;
  }

  if (_internal_has_bhidexponhud()) {
    // required bool bHideXPOnHUD = 33;
    total_size += 2 + 1;
  }

  if (_internal_has_bconsolecontroller()) {
    // required bool bConsoleController = 34;
    total_size += 2 + 1;
  }

  if (_internal_has_bdisplaytradeicon()) {
    // required bool bDisplayTradeIcon = 35;
    total_size += 2 + 1;
  }

  if (_internal_has_bdisplaytradedisabledicon()) {
    // required bool bDisplayTradeDisabledIcon = 36;
    total_size += 2 + 1;
  }

  if (_internal_has_bresurrectall()) {
    // required bool bResurrectAll = 37;
    total_size += 2 + 1;
  }

  if (_internal_has_bplayingteleportersound()) {
    // required bool bPlayingTeleporterSound = 38;
    total_size += 2 + 1;
  }

  if (_internal_has_fovmodifierspeed()) {
    // required float FOVModifierSpeed = 44;
    total_size += 2 + 4;
  }

  if (_internal_has_fovmodifierspeedbasevalue()) {
    // required float FOVModifierSpeedBaseValue = 45;
    total_size += 2 + 4;
  }

  if (_internal_has_postprocessdurationmultiplier()) {
    // required float PostProcessDurationMultiplier = 46;
    total_size += 2 + 4;
  }

  if (_internal_has_targetedwarningseverity()) {
    // required int32 TargetedWarningSeverity = 48;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_targetedwarningseverity());
  }

  if (_internal_has_currentminimapactorselectionindex()) {
    // required int32 CurrentMinimapActorSelectionIndex = 52;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_currentminimapactorselectionindex());
  }

  return total_size;
}
size_t APoplarPlayerController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.APoplarPlayerController)
  size_t total_size = 0;

  if ((((_impl_._has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_impl_._has_bits_[1] & 0x0003ffff) ^ 0x0003ffff)) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FVector Location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);

    // required .HederaDefinitions.FRotator Rotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);

    // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);

    // required .HederaDefinitions.ReplicatedActorReference Base = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);

    // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instigator_);

    // required .HederaDefinitions.FVector Velocity = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);

    // required .HederaDefinitions.FName BaseBoneName = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basebonename_);

    // required .HederaDefinitions.FVector RelativeLocation = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relativelocation_);

    // required .HederaDefinitions.FRotator RelativeRotation = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relativerotation_);

    // required .HederaDefinitions.ReplicatedActorReference Pawn = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pawn_);

    // required .HederaDefinitions.ReplicatedActorReference ClientPendingPSI = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clientpendingpsi_);

    // required .HederaDefinitions.ReplicatedActorReference ClientPendingPRI = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clientpendingpri_);

    // required .HederaDefinitions.FRotator TargetViewRotation = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetviewrotation_);

    // required .HederaDefinitions.FEnvironmentalEffectInfo ActiveAudioEffect = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activeaudioeffect_);

    // required .HederaDefinitions.ReplicatedActorReference MyWillowPawn = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mywillowpawn_);

    // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Object = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentusableobject_object_);

    // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Interface = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentusableobject_interface_);

    // required .HederaDefinitions.FReplicatedDamageScreenParticle RecentDamageScreenParticle = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recentdamagescreenparticle_);

    // required .HederaDefinitions.FReplicatedProgressBarData UseProgressBar = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.useprogressbar_);

    // required .HederaDefinitions.FCameraViewData ReplicatedCameraViewData = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedcameraviewdata_);

    // required .HederaDefinitions.ReplicatedActorReference PipelineSummaryHistoryManager = 50;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pipelinesummaryhistorymanager_);

    // required float DrawScale = 3;
    total_size += 1 + 4;

    // required float CustomTimeDilation = 4;
    total_size += 1 + 4;

    // required uint32 Physics = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_physics());

    // required uint32 RemoteRole = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remoterole());

    // required uint32 Role = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());

    // required uint32 ReplicatedCollisionType = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replicatedcollisiontype());

    // required bool bHidden = 11;
    total_size += 1 + 1;

    // required bool bTearOff = 12;
    total_size += 1 + 1;

    // required bool bHardAttach = 13;
    total_size += 1 + 1;

    // required bool bCollideActors = 14;
    total_size += 1 + 1;

    // required bool bCollideWorld = 15;
    total_size += 1 + 1;

    // required bool bBlockActors = 16;
    total_size += 2 + 1;

    // required bool bProjTarget = 17;
    total_size += 2 + 1;

    // required bool bNetOwner = 18;
    total_size += 2 + 1;

    // required float TargetEyeHeight = 28;
    total_size += 2 + 4;

    // required bool bHideAmmoOnHud = 30;
    total_size += 2 + 1;

    // required bool bHideCompassOnHUD = 31;
    total_size += 2 + 1;

    // required bool bHideSkillsOnHUD = 32;
    total_size += 2 + 1;

    // required bool bHideXPOnHUD = 33;
    total_size += 2 + 1;

    // required bool bConsoleController = 34;
    total_size += 2 + 1;

    // required bool bDisplayTradeIcon = 35;
    total_size += 2 + 1;

    // required bool bDisplayTradeDisabledIcon = 36;
    total_size += 2 + 1;

    // required bool bResurrectAll = 37;
    total_size += 2 + 1;

    // required bool bPlayingTeleporterSound = 38;
    total_size += 2 + 1;

    // required float FOVModifierSpeed = 44;
    total_size += 2 + 4;

    // required float FOVModifierSpeedBaseValue = 45;
    total_size += 2 + 4;

    // required float PostProcessDurationMultiplier = 46;
    total_size += 2 + 4;

    // required int32 TargetedWarningSeverity = 48;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_targetedwarningseverity());

    // required int32 CurrentMinimapActorSelectionIndex = 52;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_currentminimapactorselectionindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FInteractionIconWithOverrides CurrentInteractionIcon = 42;
  total_size += 2UL * this->_internal_currentinteractionicon_size();
  for (const auto& msg : this->_impl_.currentinteractionicon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.FActorSelectionDataContainer MinimapActorSelectData = 51;
  total_size += 2UL * this->_internal_minimapactorselectdata_size();
  for (const auto& msg : this->_impl_.minimapactorselectdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APoplarPlayerController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APoplarPlayerController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APoplarPlayerController::GetClassData() const { return &_class_data_; }


void APoplarPlayerController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APoplarPlayerController*>(&to_msg);
  auto& from = static_cast<const APoplarPlayerController&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.APoplarPlayerController)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.currentinteractionicon_.MergeFrom(from._impl_.currentinteractionicon_);
  _this->_impl_.minimapactorselectdata_.MergeFrom(from._impl_.minimapactorselectdata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rotation()->::HederaDefinitions::FRotator::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_owner()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_owner());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_base()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_instigator()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_instigator());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_velocity()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_basebonename()->::HederaDefinitions::FName::MergeFrom(
          from._internal_basebonename());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_relativelocation()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_relativelocation());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_relativerotation()->::HederaDefinitions::FRotator::MergeFrom(
          from._internal_relativerotation());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_pawn()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_pawn());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_clientpendingpsi()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_clientpendingpsi());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_clientpendingpri()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_clientpendingpri());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_targetviewrotation()->::HederaDefinitions::FRotator::MergeFrom(
          from._internal_targetviewrotation());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_activeaudioeffect()->::HederaDefinitions::FEnvironmentalEffectInfo::MergeFrom(
          from._internal_activeaudioeffect());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_mywillowpawn()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_mywillowpawn());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_currentusableobject_object()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_currentusableobject_object());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_currentusableobject_interface()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_currentusableobject_interface());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_recentdamagescreenparticle()->::HederaDefinitions::FReplicatedDamageScreenParticle::MergeFrom(
          from._internal_recentdamagescreenparticle());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_useprogressbar()->::HederaDefinitions::FReplicatedProgressBarData::MergeFrom(
          from._internal_useprogressbar());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_replicatedcameraviewdata()->::HederaDefinitions::FCameraViewData::MergeFrom(
          from._internal_replicatedcameraviewdata());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_pipelinesummaryhistorymanager()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_pipelinesummaryhistorymanager());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.drawscale_ = from._impl_.drawscale_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.customtimedilation_ = from._impl_.customtimedilation_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.physics_ = from._impl_.physics_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.remoterole_ = from._impl_.remoterole_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.replicatedcollisiontype_ = from._impl_.replicatedcollisiontype_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.bhidden_ = from._impl_.bhidden_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.btearoff_ = from._impl_.btearoff_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.bhardattach_ = from._impl_.bhardattach_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.bcollideactors_ = from._impl_.bcollideactors_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.bcollideworld_ = from._impl_.bcollideworld_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bblockactors_ = from._impl_.bblockactors_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bprojtarget_ = from._impl_.bprojtarget_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bnetowner_ = from._impl_.bnetowner_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.targeteyeheight_ = from._impl_.targeteyeheight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bhideammoonhud_ = from._impl_.bhideammoonhud_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bhidecompassonhud_ = from._impl_.bhidecompassonhud_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bhideskillsonhud_ = from._impl_.bhideskillsonhud_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bhidexponhud_ = from._impl_.bhidexponhud_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bconsolecontroller_ = from._impl_.bconsolecontroller_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bdisplaytradeicon_ = from._impl_.bdisplaytradeicon_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bdisplaytradedisabledicon_ = from._impl_.bdisplaytradedisabledicon_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bresurrectall_ = from._impl_.bresurrectall_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.bplayingteleportersound_ = from._impl_.bplayingteleportersound_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.fovmodifierspeed_ = from._impl_.fovmodifierspeed_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.fovmodifierspeedbasevalue_ = from._impl_.fovmodifierspeedbasevalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.postprocessdurationmultiplier_ = from._impl_.postprocessdurationmultiplier_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.targetedwarningseverity_ = from._impl_.targetedwarningseverity_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.currentminimapactorselectionindex_ = from._impl_.currentminimapactorselectionindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APoplarPlayerController::CopyFrom(const APoplarPlayerController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.APoplarPlayerController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APoplarPlayerController::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.currentinteractionicon_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.minimapactorselectdata_))
    return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_rotation()) {
    if (!_impl_.rotation_->IsInitialized()) return false;
  }
  if (_internal_has_owner()) {
    if (!_impl_.owner_->IsInitialized()) return false;
  }
  if (_internal_has_base()) {
    if (!_impl_.base_->IsInitialized()) return false;
  }
  if (_internal_has_instigator()) {
    if (!_impl_.instigator_->IsInitialized()) return false;
  }
  if (_internal_has_velocity()) {
    if (!_impl_.velocity_->IsInitialized()) return false;
  }
  if (_internal_has_basebonename()) {
    if (!_impl_.basebonename_->IsInitialized()) return false;
  }
  if (_internal_has_relativelocation()) {
    if (!_impl_.relativelocation_->IsInitialized()) return false;
  }
  if (_internal_has_relativerotation()) {
    if (!_impl_.relativerotation_->IsInitialized()) return false;
  }
  if (_internal_has_pawn()) {
    if (!_impl_.pawn_->IsInitialized()) return false;
  }
  if (_internal_has_clientpendingpsi()) {
    if (!_impl_.clientpendingpsi_->IsInitialized()) return false;
  }
  if (_internal_has_clientpendingpri()) {
    if (!_impl_.clientpendingpri_->IsInitialized()) return false;
  }
  if (_internal_has_targetviewrotation()) {
    if (!_impl_.targetviewrotation_->IsInitialized()) return false;
  }
  if (_internal_has_activeaudioeffect()) {
    if (!_impl_.activeaudioeffect_->IsInitialized()) return false;
  }
  if (_internal_has_mywillowpawn()) {
    if (!_impl_.mywillowpawn_->IsInitialized()) return false;
  }
  if (_internal_has_currentusableobject_object()) {
    if (!_impl_.currentusableobject_object_->IsInitialized()) return false;
  }
  if (_internal_has_currentusableobject_interface()) {
    if (!_impl_.currentusableobject_interface_->IsInitialized()) return false;
  }
  if (_internal_has_recentdamagescreenparticle()) {
    if (!_impl_.recentdamagescreenparticle_->IsInitialized()) return false;
  }
  if (_internal_has_useprogressbar()) {
    if (!_impl_.useprogressbar_->IsInitialized()) return false;
  }
  if (_internal_has_replicatedcameraviewdata()) {
    if (!_impl_.replicatedcameraviewdata_->IsInitialized()) return false;
  }
  if (_internal_has_pipelinesummaryhistorymanager()) {
    if (!_impl_.pipelinesummaryhistorymanager_->IsInitialized()) return false;
  }
  return true;
}

void APoplarPlayerController::InternalSwap(APoplarPlayerController* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.currentinteractionicon_.InternalSwap(&other->_impl_.currentinteractionicon_);
  _impl_.minimapactorselectdata_.InternalSwap(&other->_impl_.minimapactorselectdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APoplarPlayerController, _impl_.currentminimapactorselectionindex_)
      + sizeof(APoplarPlayerController::_impl_.currentminimapactorselectionindex_)
      - PROTOBUF_FIELD_OFFSET(APoplarPlayerController, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APoplarPlayerController::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[19]);
}

// ===================================================================

class FUniqueID::_Internal {
 public:
  using HasBits = decltype(std::declval<FUniqueID>()._impl_._has_bits_);
  static void set_has_bhasvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FUniqueID::FUniqueID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FUniqueID)
}
FUniqueID::FUniqueID(const FUniqueID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FUniqueID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rawid_){from._impl_.rawid_}
    , decltype(_impl_.bhasvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bhasvalue_ = from._impl_.bhasvalue_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FUniqueID)
}

inline void FUniqueID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rawid_){arena}
    , decltype(_impl_.bhasvalue_){false}
  };
}

FUniqueID::~FUniqueID() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FUniqueID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FUniqueID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rawid_.~RepeatedField();
}

void FUniqueID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FUniqueID::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FUniqueID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rawid_.Clear();
  _impl_.bhasvalue_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FUniqueID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 RawID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rawid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rawid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHasValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bhasvalue(&has_bits);
          _impl_.bhasvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FUniqueID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FUniqueID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 RawID = 1;
  for (int i = 0, n = this->_internal_rawid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rawid(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required bool bHasValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bhasvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FUniqueID)
  return target;
}

size_t FUniqueID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FUniqueID)
  size_t total_size = 0;

  // required bool bHasValue = 2;
  if (_internal_has_bhasvalue()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 RawID = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rawid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_rawid_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FUniqueID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FUniqueID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FUniqueID::GetClassData() const { return &_class_data_; }


void FUniqueID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FUniqueID*>(&to_msg);
  auto& from = static_cast<const FUniqueID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FUniqueID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rawid_.MergeFrom(from._impl_.rawid_);
  if (from._internal_has_bhasvalue()) {
    _this->_internal_set_bhasvalue(from._internal_bhasvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FUniqueID::CopyFrom(const FUniqueID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FUniqueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FUniqueID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FUniqueID::InternalSwap(FUniqueID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rawid_.InternalSwap(&other->_impl_.rawid_);
  swap(_impl_.bhasvalue_, other->_impl_.bhasvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FUniqueID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[20]);
}

// ===================================================================

class FCurrencyState::_Internal {
 public:
  using HasBits = decltype(std::declval<FCurrencyState>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currentamount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lastknownamount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FCurrencyState::FCurrencyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FCurrencyState)
}
FCurrencyState::FCurrencyState(const FCurrencyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FCurrencyState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.currentamount_){}
    , decltype(_impl_.lastknownamount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastknownamount_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.lastknownamount_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FCurrencyState)
}

inline void FCurrencyState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.currentamount_){0}
    , decltype(_impl_.lastknownamount_){0}
  };
}

FCurrencyState::~FCurrencyState() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FCurrencyState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FCurrencyState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FCurrencyState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FCurrencyState::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FCurrencyState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lastknownamount_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.lastknownamount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FCurrencyState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float CurrentAmount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_currentamount(&has_bits);
          _impl_.currentamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float LastKnownAmount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_lastknownamount(&has_bits);
          _impl_.lastknownamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FCurrencyState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FCurrencyState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // required float CurrentAmount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_currentamount(), target);
  }

  // required float LastKnownAmount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_lastknownamount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FCurrencyState)
  return target;
}

size_t FCurrencyState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FCurrencyState)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required int32 Type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_currentamount()) {
    // required float CurrentAmount = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_lastknownamount()) {
    // required float LastKnownAmount = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FCurrencyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FCurrencyState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 Type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

    // required float CurrentAmount = 2;
    total_size += 1 + 4;

    // required float LastKnownAmount = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FCurrencyState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FCurrencyState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FCurrencyState::GetClassData() const { return &_class_data_; }


void FCurrencyState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FCurrencyState*>(&to_msg);
  auto& from = static_cast<const FCurrencyState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FCurrencyState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currentamount_ = from._impl_.currentamount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lastknownamount_ = from._impl_.lastknownamount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FCurrencyState::CopyFrom(const FCurrencyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FCurrencyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCurrencyState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FCurrencyState::InternalSwap(FCurrencyState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FCurrencyState, _impl_.lastknownamount_)
      + sizeof(FCurrencyState::_impl_.lastknownamount_)
      - PROTOBUF_FIELD_OFFSET(FCurrencyState, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FCurrencyState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[21]);
}

// ===================================================================

class FResourcePoolReference::_Internal {
 public:
  using HasBits = decltype(std::declval<FResourcePoolReference>()._impl_._has_bits_);
  static const ::HederaDefinitions::ReplicatedActorReference& poolmanager(const FResourcePoolReference* msg);
  static void set_has_poolmanager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_poolindexinmanager(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_poolguid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& data(const FResourcePoolReference* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::HederaDefinitions::ReplicatedActorReference&
FResourcePoolReference::_Internal::poolmanager(const FResourcePoolReference* msg) {
  return *msg->_impl_.poolmanager_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FResourcePoolReference::_Internal::data(const FResourcePoolReference* msg) {
  return *msg->_impl_.data_;
}
FResourcePoolReference::FResourcePoolReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FResourcePoolReference)
}
FResourcePoolReference::FResourcePoolReference(const FResourcePoolReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FResourcePoolReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.poolmanager_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.poolindexinmanager_){}
    , decltype(_impl_.poolguid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_poolmanager()) {
    _this->_impl_.poolmanager_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.poolmanager_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.data_);
  }
  ::memcpy(&_impl_.poolindexinmanager_, &from._impl_.poolindexinmanager_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.poolguid_) -
    reinterpret_cast<char*>(&_impl_.poolindexinmanager_)) + sizeof(_impl_.poolguid_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FResourcePoolReference)
}

inline void FResourcePoolReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.poolmanager_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.poolindexinmanager_){0}
    , decltype(_impl_.poolguid_){0}
  };
}

FResourcePoolReference::~FResourcePoolReference() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FResourcePoolReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FResourcePoolReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.poolmanager_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void FResourcePoolReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FResourcePoolReference::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FResourcePoolReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.poolmanager_ != nullptr);
      _impl_.poolmanager_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.poolindexinmanager_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.poolguid_) -
        reinterpret_cast<char*>(&_impl_.poolindexinmanager_)) + sizeof(_impl_.poolguid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FResourcePoolReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.ReplicatedActorReference PoolManager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_poolmanager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 PoolIndexInManager = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_poolindexinmanager(&has_bits);
          _impl_.poolindexinmanager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 PoolGUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_poolguid(&has_bits);
          _impl_.poolguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference Data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FResourcePoolReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FResourcePoolReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference PoolManager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::poolmanager(this),
        _Internal::poolmanager(this).GetCachedSize(), target, stream);
  }

  // required int32 PoolIndexInManager = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_poolindexinmanager(), target);
  }

  // required int32 PoolGUID = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_poolguid(), target);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference Data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FResourcePoolReference)
  return target;
}

size_t FResourcePoolReference::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FResourcePoolReference)
  size_t total_size = 0;

  if (_internal_has_poolmanager()) {
    // required .HederaDefinitions.ReplicatedActorReference PoolManager = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.poolmanager_);
  }

  if (_internal_has_data()) {
    // required .HederaDefinitions.NonReplicatedObjectReference Data = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  if (_internal_has_poolindexinmanager()) {
    // required int32 PoolIndexInManager = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poolindexinmanager());
  }

  if (_internal_has_poolguid()) {
    // required int32 PoolGUID = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poolguid());
  }

  return total_size;
}
size_t FResourcePoolReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FResourcePoolReference)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.ReplicatedActorReference PoolManager = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.poolmanager_);

    // required .HederaDefinitions.NonReplicatedObjectReference Data = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);

    // required int32 PoolIndexInManager = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poolindexinmanager());

    // required int32 PoolGUID = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poolguid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FResourcePoolReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FResourcePoolReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FResourcePoolReference::GetClassData() const { return &_class_data_; }


void FResourcePoolReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FResourcePoolReference*>(&to_msg);
  auto& from = static_cast<const FResourcePoolReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FResourcePoolReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_poolmanager()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_poolmanager());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.poolindexinmanager_ = from._impl_.poolindexinmanager_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.poolguid_ = from._impl_.poolguid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FResourcePoolReference::CopyFrom(const FResourcePoolReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FResourcePoolReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FResourcePoolReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_poolmanager()) {
    if (!_impl_.poolmanager_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void FResourcePoolReference::InternalSwap(FResourcePoolReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FResourcePoolReference, _impl_.poolguid_)
      + sizeof(FResourcePoolReference::_impl_.poolguid_)
      - PROTOBUF_FIELD_OFFSET(FResourcePoolReference, _impl_.poolmanager_)>(
          reinterpret_cast<char*>(&_impl_.poolmanager_),
          reinterpret_cast<char*>(&other->_impl_.poolmanager_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FResourcePoolReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[22]);
}

// ===================================================================

class FReplicatedNounAttributeState::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedNounAttributeState>()._impl_._has_bits_);
  static const ::HederaDefinitions::FName& nounname(const FReplicatedNounAttributeState* msg);
  static void set_has_nounname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonlyrelevanttoowner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::HederaDefinitions::FName&
FReplicatedNounAttributeState::_Internal::nounname(const FReplicatedNounAttributeState* msg) {
  return *msg->_impl_.nounname_;
}
FReplicatedNounAttributeState::FReplicatedNounAttributeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedNounAttributeState)
}
FReplicatedNounAttributeState::FReplicatedNounAttributeState(const FReplicatedNounAttributeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedNounAttributeState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nounname_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.bonlyrelevanttoowner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nounname()) {
    _this->_impl_.nounname_ = new ::HederaDefinitions::FName(*from._impl_.nounname_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bonlyrelevanttoowner_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.bonlyrelevanttoowner_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedNounAttributeState)
}

inline void FReplicatedNounAttributeState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nounname_){nullptr}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.bonlyrelevanttoowner_){false}
  };
}

FReplicatedNounAttributeState::~FReplicatedNounAttributeState() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedNounAttributeState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedNounAttributeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nounname_;
}

void FReplicatedNounAttributeState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedNounAttributeState::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedNounAttributeState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.nounname_ != nullptr);
    _impl_.nounname_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bonlyrelevanttoowner_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.bonlyrelevanttoowner_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedNounAttributeState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FName NounName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nounname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool bOnlyRelevantToOwner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bonlyrelevanttoowner(&has_bits);
          _impl_.bonlyrelevanttoowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedNounAttributeState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedNounAttributeState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FName NounName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nounname(this),
        _Internal::nounname(this).GetCachedSize(), target, stream);
  }

  // required float Value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // required bool bOnlyRelevantToOwner = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bonlyrelevanttoowner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedNounAttributeState)
  return target;
}

size_t FReplicatedNounAttributeState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedNounAttributeState)
  size_t total_size = 0;

  if (_internal_has_nounname()) {
    // required .HederaDefinitions.FName NounName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nounname_);
  }

  if (_internal_has_value()) {
    // required float Value = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_bonlyrelevanttoowner()) {
    // required bool bOnlyRelevantToOwner = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FReplicatedNounAttributeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedNounAttributeState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FName NounName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nounname_);

    // required float Value = 2;
    total_size += 1 + 4;

    // required bool bOnlyRelevantToOwner = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedNounAttributeState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedNounAttributeState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedNounAttributeState::GetClassData() const { return &_class_data_; }


void FReplicatedNounAttributeState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedNounAttributeState*>(&to_msg);
  auto& from = static_cast<const FReplicatedNounAttributeState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedNounAttributeState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_nounname()->::HederaDefinitions::FName::MergeFrom(
          from._internal_nounname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bonlyrelevanttoowner_ = from._impl_.bonlyrelevanttoowner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedNounAttributeState::CopyFrom(const FReplicatedNounAttributeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedNounAttributeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedNounAttributeState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_nounname()) {
    if (!_impl_.nounname_->IsInitialized()) return false;
  }
  return true;
}

void FReplicatedNounAttributeState::InternalSwap(FReplicatedNounAttributeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedNounAttributeState, _impl_.bonlyrelevanttoowner_)
      + sizeof(FReplicatedNounAttributeState::_impl_.bonlyrelevanttoowner_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedNounAttributeState, _impl_.nounname_)>(
          reinterpret_cast<char*>(&_impl_.nounname_),
          reinterpret_cast<char*>(&other->_impl_.nounname_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedNounAttributeState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[23]);
}

// ===================================================================

class FWeaponDefinitionData::_Internal {
 public:
  using HasBits = decltype(std::declval<FWeaponDefinitionData>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& weapontypedefinition(const FWeaponDefinitionData* msg);
  static void set_has_weapontypedefinition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FWeaponDefinitionData::_Internal::weapontypedefinition(const FWeaponDefinitionData* msg) {
  return *msg->_impl_.weapontypedefinition_;
}
FWeaponDefinitionData::FWeaponDefinitionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FWeaponDefinitionData)
}
FWeaponDefinitionData::FWeaponDefinitionData(const FWeaponDefinitionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FWeaponDefinitionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weapontypedefinition_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weapontypedefinition()) {
    _this->_impl_.weapontypedefinition_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.weapontypedefinition_);
  }
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FWeaponDefinitionData)
}

inline void FWeaponDefinitionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weapontypedefinition_){nullptr}
  };
}

FWeaponDefinitionData::~FWeaponDefinitionData() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FWeaponDefinitionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FWeaponDefinitionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weapontypedefinition_;
}

void FWeaponDefinitionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FWeaponDefinitionData::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FWeaponDefinitionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.weapontypedefinition_ != nullptr);
    _impl_.weapontypedefinition_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FWeaponDefinitionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference WeaponTypeDefinition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapontypedefinition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FWeaponDefinitionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FWeaponDefinitionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference WeaponTypeDefinition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::weapontypedefinition(this),
        _Internal::weapontypedefinition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FWeaponDefinitionData)
  return target;
}

size_t FWeaponDefinitionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FWeaponDefinitionData)
  size_t total_size = 0;

  // required .HederaDefinitions.NonReplicatedObjectReference WeaponTypeDefinition = 1;
  if (_internal_has_weapontypedefinition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapontypedefinition_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FWeaponDefinitionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FWeaponDefinitionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FWeaponDefinitionData::GetClassData() const { return &_class_data_; }


void FWeaponDefinitionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FWeaponDefinitionData*>(&to_msg);
  auto& from = static_cast<const FWeaponDefinitionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FWeaponDefinitionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_weapontypedefinition()) {
    _this->_internal_mutable_weapontypedefinition()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
        from._internal_weapontypedefinition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FWeaponDefinitionData::CopyFrom(const FWeaponDefinitionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FWeaponDefinitionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FWeaponDefinitionData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_weapontypedefinition()) {
    if (!_impl_.weapontypedefinition_->IsInitialized()) return false;
  }
  return true;
}

void FWeaponDefinitionData::InternalSwap(FWeaponDefinitionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.weapontypedefinition_, other->_impl_.weapontypedefinition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FWeaponDefinitionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[24]);
}

// ===================================================================

class FReplicatedStandInGear::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedStandInGear>()._impl_._has_bits_);
  static const ::HederaDefinitions::FWeaponDefinitionData& weapon1data(const FReplicatedStandInGear* msg);
  static void set_has_weapon1data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::FWeaponDefinitionData& weapon2data(const FReplicatedStandInGear* msg);
  static void set_has_weapon2data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::HederaDefinitions::FWeaponDefinitionData&
FReplicatedStandInGear::_Internal::weapon1data(const FReplicatedStandInGear* msg) {
  return *msg->_impl_.weapon1data_;
}
const ::HederaDefinitions::FWeaponDefinitionData&
FReplicatedStandInGear::_Internal::weapon2data(const FReplicatedStandInGear* msg) {
  return *msg->_impl_.weapon2data_;
}
FReplicatedStandInGear::FReplicatedStandInGear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedStandInGear)
}
FReplicatedStandInGear::FReplicatedStandInGear(const FReplicatedStandInGear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedStandInGear* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weapon1data_){nullptr}
    , decltype(_impl_.weapon2data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weapon1data()) {
    _this->_impl_.weapon1data_ = new ::HederaDefinitions::FWeaponDefinitionData(*from._impl_.weapon1data_);
  }
  if (from._internal_has_weapon2data()) {
    _this->_impl_.weapon2data_ = new ::HederaDefinitions::FWeaponDefinitionData(*from._impl_.weapon2data_);
  }
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedStandInGear)
}

inline void FReplicatedStandInGear::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weapon1data_){nullptr}
    , decltype(_impl_.weapon2data_){nullptr}
  };
}

FReplicatedStandInGear::~FReplicatedStandInGear() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedStandInGear)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedStandInGear::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weapon1data_;
  if (this != internal_default_instance()) delete _impl_.weapon2data_;
}

void FReplicatedStandInGear::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedStandInGear::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedStandInGear)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.weapon1data_ != nullptr);
      _impl_.weapon1data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.weapon2data_ != nullptr);
      _impl_.weapon2data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedStandInGear::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FWeaponDefinitionData Weapon1Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon1data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FWeaponDefinitionData Weapon2Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon2data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedStandInGear::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedStandInGear)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FWeaponDefinitionData Weapon1Data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::weapon1data(this),
        _Internal::weapon1data(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FWeaponDefinitionData Weapon2Data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::weapon2data(this),
        _Internal::weapon2data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedStandInGear)
  return target;
}

size_t FReplicatedStandInGear::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedStandInGear)
  size_t total_size = 0;

  if (_internal_has_weapon1data()) {
    // required .HederaDefinitions.FWeaponDefinitionData Weapon1Data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapon1data_);
  }

  if (_internal_has_weapon2data()) {
    // required .HederaDefinitions.FWeaponDefinitionData Weapon2Data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapon2data_);
  }

  return total_size;
}
size_t FReplicatedStandInGear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedStandInGear)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .HederaDefinitions.FWeaponDefinitionData Weapon1Data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapon1data_);

    // required .HederaDefinitions.FWeaponDefinitionData Weapon2Data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapon2data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedStandInGear::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedStandInGear::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedStandInGear::GetClassData() const { return &_class_data_; }


void FReplicatedStandInGear::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedStandInGear*>(&to_msg);
  auto& from = static_cast<const FReplicatedStandInGear&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedStandInGear)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_weapon1data()->::HederaDefinitions::FWeaponDefinitionData::MergeFrom(
          from._internal_weapon1data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_weapon2data()->::HederaDefinitions::FWeaponDefinitionData::MergeFrom(
          from._internal_weapon2data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedStandInGear::CopyFrom(const FReplicatedStandInGear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedStandInGear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedStandInGear::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_weapon1data()) {
    if (!_impl_.weapon1data_->IsInitialized()) return false;
  }
  if (_internal_has_weapon2data()) {
    if (!_impl_.weapon2data_->IsInitialized()) return false;
  }
  return true;
}

void FReplicatedStandInGear::InternalSwap(FReplicatedStandInGear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedStandInGear, _impl_.weapon2data_)
      + sizeof(FReplicatedStandInGear::_impl_.weapon2data_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedStandInGear, _impl_.weapon1data_)>(
          reinterpret_cast<char*>(&_impl_.weapon1data_),
          reinterpret_cast<char*>(&other->_impl_.weapon1data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedStandInGear::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[25]);
}

// ===================================================================

class FTrackedSkillState::_Internal {
 public:
  using HasBits = decltype(std::declval<FTrackedSkillState>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& skilldef(const FTrackedSkillState* msg);
  static void set_has_skilldef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packedstackcountandpercentcomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FTrackedSkillState::_Internal::skilldef(const FTrackedSkillState* msg) {
  return *msg->_impl_.skilldef_;
}
FTrackedSkillState::FTrackedSkillState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FTrackedSkillState)
}
FTrackedSkillState::FTrackedSkillState(const FTrackedSkillState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FTrackedSkillState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skilldef_){nullptr}
    , decltype(_impl_.packedstackcountandpercentcomplete_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_skilldef()) {
    _this->_impl_.skilldef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.skilldef_);
  }
  _this->_impl_.packedstackcountandpercentcomplete_ = from._impl_.packedstackcountandpercentcomplete_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FTrackedSkillState)
}

inline void FTrackedSkillState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skilldef_){nullptr}
    , decltype(_impl_.packedstackcountandpercentcomplete_){0}
  };
}

FTrackedSkillState::~FTrackedSkillState() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FTrackedSkillState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FTrackedSkillState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.skilldef_;
}

void FTrackedSkillState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FTrackedSkillState::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FTrackedSkillState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.skilldef_ != nullptr);
    _impl_.skilldef_->Clear();
  }
  _impl_.packedstackcountandpercentcomplete_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FTrackedSkillState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference SkillDef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_skilldef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 PackedStackCountAndPercentComplete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_packedstackcountandpercentcomplete(&has_bits);
          _impl_.packedstackcountandpercentcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FTrackedSkillState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FTrackedSkillState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference SkillDef = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::skilldef(this),
        _Internal::skilldef(this).GetCachedSize(), target, stream);
  }

  // required int32 PackedStackCountAndPercentComplete = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_packedstackcountandpercentcomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FTrackedSkillState)
  return target;
}

size_t FTrackedSkillState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FTrackedSkillState)
  size_t total_size = 0;

  if (_internal_has_skilldef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference SkillDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skilldef_);
  }

  if (_internal_has_packedstackcountandpercentcomplete()) {
    // required int32 PackedStackCountAndPercentComplete = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packedstackcountandpercentcomplete());
  }

  return total_size;
}
size_t FTrackedSkillState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FTrackedSkillState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference SkillDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skilldef_);

    // required int32 PackedStackCountAndPercentComplete = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packedstackcountandpercentcomplete());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FTrackedSkillState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FTrackedSkillState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FTrackedSkillState::GetClassData() const { return &_class_data_; }


void FTrackedSkillState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FTrackedSkillState*>(&to_msg);
  auto& from = static_cast<const FTrackedSkillState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FTrackedSkillState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_skilldef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_skilldef());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.packedstackcountandpercentcomplete_ = from._impl_.packedstackcountandpercentcomplete_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FTrackedSkillState::CopyFrom(const FTrackedSkillState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FTrackedSkillState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTrackedSkillState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_skilldef()) {
    if (!_impl_.skilldef_->IsInitialized()) return false;
  }
  return true;
}

void FTrackedSkillState::InternalSwap(FTrackedSkillState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FTrackedSkillState, _impl_.packedstackcountandpercentcomplete_)
      + sizeof(FTrackedSkillState::_impl_.packedstackcountandpercentcomplete_)
      - PROTOBUF_FIELD_OFFSET(FTrackedSkillState, _impl_.skilldef_)>(
          reinterpret_cast<char*>(&_impl_.skilldef_),
          reinterpret_cast<char*>(&other->_impl_.skilldef_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FTrackedSkillState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[26]);
}

// ===================================================================

class FManagedActorCountData::_Internal {
 public:
  using HasBits = decltype(std::declval<FManagedActorCountData>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& type(const FManagedActorCountData* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FManagedActorCountData::_Internal::type(const FManagedActorCountData* msg) {
  return *msg->_impl_.type_;
}
FManagedActorCountData::FManagedActorCountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FManagedActorCountData)
}
FManagedActorCountData::FManagedActorCountData(const FManagedActorCountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FManagedActorCountData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.type_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FManagedActorCountData)
}

inline void FManagedActorCountData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.count_){0}
  };
}

FManagedActorCountData::~FManagedActorCountData() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FManagedActorCountData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FManagedActorCountData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.type_;
}

void FManagedActorCountData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FManagedActorCountData::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FManagedActorCountData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.type_ != nullptr);
    _impl_.type_->Clear();
  }
  _impl_.count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FManagedActorCountData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FManagedActorCountData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FManagedActorCountData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference Type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FManagedActorCountData)
  return target;
}

size_t FManagedActorCountData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FManagedActorCountData)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .HederaDefinitions.NonReplicatedObjectReference Type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  if (_internal_has_count()) {
    // required int32 Count = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t FManagedActorCountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FManagedActorCountData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference Type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);

    // required int32 Count = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FManagedActorCountData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FManagedActorCountData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FManagedActorCountData::GetClassData() const { return &_class_data_; }


void FManagedActorCountData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FManagedActorCountData*>(&to_msg);
  auto& from = static_cast<const FManagedActorCountData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FManagedActorCountData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_type()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FManagedActorCountData::CopyFrom(const FManagedActorCountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FManagedActorCountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FManagedActorCountData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void FManagedActorCountData::InternalSwap(FManagedActorCountData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FManagedActorCountData, _impl_.count_)
      + sizeof(FManagedActorCountData::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(FManagedActorCountData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FManagedActorCountData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[27]);
}

// ===================================================================

class FReplicatedPerkItem::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedPerkItem>()._impl_._has_bits_);
  static void set_has_metaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_assetkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bcanuse(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_itemlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::HederaDefinitions::FUniqueID& playerid(const FReplicatedPerkItem* msg);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_apollojson(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entitlementindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bactive(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& perkfunction(const FReplicatedPerkItem* msg);
  static void set_has_perkfunction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& wearable(const FReplicatedPerkItem* msg);
  static void set_has_wearable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

const ::HederaDefinitions::FUniqueID&
FReplicatedPerkItem::_Internal::playerid(const FReplicatedPerkItem* msg) {
  return *msg->_impl_.playerid_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FReplicatedPerkItem::_Internal::perkfunction(const FReplicatedPerkItem* msg) {
  return *msg->_impl_.perkfunction_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
FReplicatedPerkItem::_Internal::wearable(const FReplicatedPerkItem* msg) {
  return *msg->_impl_.wearable_;
}
FReplicatedPerkItem::FReplicatedPerkItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedPerkItem)
}
FReplicatedPerkItem::FReplicatedPerkItem(const FReplicatedPerkItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedPerkItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metaid_){}
    , decltype(_impl_.assetkey_){}
    , decltype(_impl_.apollojson_){}
    , decltype(_impl_.playerid_){nullptr}
    , decltype(_impl_.perkfunction_){nullptr}
    , decltype(_impl_.wearable_){nullptr}
    , decltype(_impl_.itemlevel_){}
    , decltype(_impl_.rarity_){}
    , decltype(_impl_.bcanuse_){}
    , decltype(_impl_.bactive_){}
    , decltype(_impl_.entitlementindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metaid()) {
    _this->_impl_.metaid_.Set(from._internal_metaid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.assetkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assetkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_assetkey()) {
    _this->_impl_.assetkey_.Set(from._internal_assetkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apollojson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apollojson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apollojson()) {
    _this->_impl_.apollojson_.Set(from._internal_apollojson(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_playerid()) {
    _this->_impl_.playerid_ = new ::HederaDefinitions::FUniqueID(*from._impl_.playerid_);
  }
  if (from._internal_has_perkfunction()) {
    _this->_impl_.perkfunction_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.perkfunction_);
  }
  if (from._internal_has_wearable()) {
    _this->_impl_.wearable_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.wearable_);
  }
  ::memcpy(&_impl_.itemlevel_, &from._impl_.itemlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entitlementindex_) -
    reinterpret_cast<char*>(&_impl_.itemlevel_)) + sizeof(_impl_.entitlementindex_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedPerkItem)
}

inline void FReplicatedPerkItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metaid_){}
    , decltype(_impl_.assetkey_){}
    , decltype(_impl_.apollojson_){}
    , decltype(_impl_.playerid_){nullptr}
    , decltype(_impl_.perkfunction_){nullptr}
    , decltype(_impl_.wearable_){nullptr}
    , decltype(_impl_.itemlevel_){0}
    , decltype(_impl_.rarity_){0}
    , decltype(_impl_.bcanuse_){false}
    , decltype(_impl_.bactive_){false}
    , decltype(_impl_.entitlementindex_){0}
  };
  _impl_.metaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.assetkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assetkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apollojson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apollojson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FReplicatedPerkItem::~FReplicatedPerkItem() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedPerkItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedPerkItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metaid_.Destroy();
  _impl_.assetkey_.Destroy();
  _impl_.apollojson_.Destroy();
  if (this != internal_default_instance()) delete _impl_.playerid_;
  if (this != internal_default_instance()) delete _impl_.perkfunction_;
  if (this != internal_default_instance()) delete _impl_.wearable_;
}

void FReplicatedPerkItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedPerkItem::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedPerkItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.metaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.assetkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.apollojson_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.playerid_ != nullptr);
      _impl_.playerid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.perkfunction_ != nullptr);
      _impl_.perkfunction_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.wearable_ != nullptr);
      _impl_.wearable_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.itemlevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rarity_) -
        reinterpret_cast<char*>(&_impl_.itemlevel_)) + sizeof(_impl_.rarity_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.bcanuse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.entitlementindex_) -
        reinterpret_cast<char*>(&_impl_.bcanuse_)) + sizeof(_impl_.entitlementindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedPerkItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string MetaID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "HederaDefinitions.FReplicatedPerkItem.MetaID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string AssetKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_assetkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "HederaDefinitions.FReplicatedPerkItem.AssetKey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool bCanUse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bcanuse(&has_bits);
          _impl_.bcanuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ItemLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_itemlevel(&has_bits);
          _impl_.itemlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          _impl_.rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FUniqueID PlayerID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string ApolloJSON = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_apollojson();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "HederaDefinitions.FReplicatedPerkItem.ApolloJSON");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 EntitlementIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_entitlementindex(&has_bits);
          _impl_.entitlementindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bActive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bactive(&has_bits);
          _impl_.bactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference PerkFunction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_perkfunction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference Wearable = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_wearable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedPerkItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedPerkItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string MetaID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metaid().data(), static_cast<int>(this->_internal_metaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HederaDefinitions.FReplicatedPerkItem.MetaID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metaid(), target);
  }

  // required string AssetKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assetkey().data(), static_cast<int>(this->_internal_assetkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HederaDefinitions.FReplicatedPerkItem.AssetKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_assetkey(), target);
  }

  // required bool bCanUse = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bcanuse(), target);
  }

  // required int32 ItemLevel = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_itemlevel(), target);
  }

  // required int32 Rarity = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_rarity(), target);
  }

  // required .HederaDefinitions.FUniqueID PlayerID = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::playerid(this),
        _Internal::playerid(this).GetCachedSize(), target, stream);
  }

  // required string ApolloJSON = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_apollojson().data(), static_cast<int>(this->_internal_apollojson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HederaDefinitions.FReplicatedPerkItem.ApolloJSON");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_apollojson(), target);
  }

  // required int32 EntitlementIndex = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_entitlementindex(), target);
  }

  // required bool bActive = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_bactive(), target);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference PerkFunction = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::perkfunction(this),
        _Internal::perkfunction(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference Wearable = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::wearable(this),
        _Internal::wearable(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedPerkItem)
  return target;
}

size_t FReplicatedPerkItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedPerkItem)
  size_t total_size = 0;

  if (_internal_has_metaid()) {
    // required string MetaID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metaid());
  }

  if (_internal_has_assetkey()) {
    // required string AssetKey = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetkey());
  }

  if (_internal_has_apollojson()) {
    // required string ApolloJSON = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apollojson());
  }

  if (_internal_has_playerid()) {
    // required .HederaDefinitions.FUniqueID PlayerID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerid_);
  }

  if (_internal_has_perkfunction()) {
    // required .HederaDefinitions.NonReplicatedObjectReference PerkFunction = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.perkfunction_);
  }

  if (_internal_has_wearable()) {
    // required .HederaDefinitions.NonReplicatedObjectReference Wearable = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wearable_);
  }

  if (_internal_has_itemlevel()) {
    // required int32 ItemLevel = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemlevel());
  }

  if (_internal_has_rarity()) {
    // required int32 Rarity = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rarity());
  }

  if (_internal_has_bcanuse()) {
    // required bool bCanUse = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_bactive()) {
    // required bool bActive = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_entitlementindex()) {
    // required int32 EntitlementIndex = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entitlementindex());
  }

  return total_size;
}
size_t FReplicatedPerkItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedPerkItem)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string MetaID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metaid());

    // required string AssetKey = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetkey());

    // required string ApolloJSON = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apollojson());

    // required .HederaDefinitions.FUniqueID PlayerID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerid_);

    // required .HederaDefinitions.NonReplicatedObjectReference PerkFunction = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.perkfunction_);

    // required .HederaDefinitions.NonReplicatedObjectReference Wearable = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wearable_);

    // required int32 ItemLevel = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemlevel());

    // required int32 Rarity = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rarity());

    // required bool bCanUse = 3;
    total_size += 1 + 1;

    // required bool bActive = 9;
    total_size += 1 + 1;

    // required int32 EntitlementIndex = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entitlementindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedPerkItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedPerkItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedPerkItem::GetClassData() const { return &_class_data_; }


void FReplicatedPerkItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedPerkItem*>(&to_msg);
  auto& from = static_cast<const FReplicatedPerkItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedPerkItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_metaid(from._internal_metaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_assetkey(from._internal_assetkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_apollojson(from._internal_apollojson());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_playerid()->::HederaDefinitions::FUniqueID::MergeFrom(
          from._internal_playerid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_perkfunction()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_perkfunction());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_wearable()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_wearable());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.itemlevel_ = from._impl_.itemlevel_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.rarity_ = from._impl_.rarity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bcanuse_ = from._impl_.bcanuse_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bactive_ = from._impl_.bactive_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.entitlementindex_ = from._impl_.entitlementindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedPerkItem::CopyFrom(const FReplicatedPerkItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedPerkItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedPerkItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_playerid()) {
    if (!_impl_.playerid_->IsInitialized()) return false;
  }
  if (_internal_has_perkfunction()) {
    if (!_impl_.perkfunction_->IsInitialized()) return false;
  }
  if (_internal_has_wearable()) {
    if (!_impl_.wearable_->IsInitialized()) return false;
  }
  return true;
}

void FReplicatedPerkItem::InternalSwap(FReplicatedPerkItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metaid_, lhs_arena,
      &other->_impl_.metaid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.assetkey_, lhs_arena,
      &other->_impl_.assetkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apollojson_, lhs_arena,
      &other->_impl_.apollojson_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedPerkItem, _impl_.entitlementindex_)
      + sizeof(FReplicatedPerkItem::_impl_.entitlementindex_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedPerkItem, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedPerkItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[28]);
}

// ===================================================================

class FAugInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<FAugInstance>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& augdef(const FAugInstance* msg);
  static void set_has_augdef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currenttier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientpurchasestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preselected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FAugInstance::_Internal::augdef(const FAugInstance* msg) {
  return *msg->_impl_.augdef_;
}
FAugInstance::FAugInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FAugInstance)
}
FAugInstance::FAugInstance(const FAugInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FAugInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.augdef_){nullptr}
    , decltype(_impl_.currenttier_){}
    , decltype(_impl_.clientpurchasestatus_){}
    , decltype(_impl_.preselected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_augdef()) {
    _this->_impl_.augdef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.augdef_);
  }
  ::memcpy(&_impl_.currenttier_, &from._impl_.currenttier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preselected_) -
    reinterpret_cast<char*>(&_impl_.currenttier_)) + sizeof(_impl_.preselected_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FAugInstance)
}

inline void FAugInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.augdef_){nullptr}
    , decltype(_impl_.currenttier_){0}
    , decltype(_impl_.clientpurchasestatus_){0}
    , decltype(_impl_.preselected_){false}
  };
}

FAugInstance::~FAugInstance() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FAugInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FAugInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.augdef_;
}

void FAugInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FAugInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FAugInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.augdef_ != nullptr);
    _impl_.augdef_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.currenttier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preselected_) -
        reinterpret_cast<char*>(&_impl_.currenttier_)) + sizeof(_impl_.preselected_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAugInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference AugDef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_augdef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 CurrentTier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currenttier(&has_bits);
          _impl_.currenttier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ClientPurchaseStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clientpurchasestatus(&has_bits);
          _impl_.clientpurchasestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool Preselected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preselected(&has_bits);
          _impl_.preselected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FAugInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FAugInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference AugDef = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::augdef(this),
        _Internal::augdef(this).GetCachedSize(), target, stream);
  }

  // required int32 CurrentTier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_currenttier(), target);
  }

  // required int32 ClientPurchaseStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_clientpurchasestatus(), target);
  }

  // required bool Preselected = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_preselected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FAugInstance)
  return target;
}

size_t FAugInstance::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FAugInstance)
  size_t total_size = 0;

  if (_internal_has_augdef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference AugDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.augdef_);
  }

  if (_internal_has_currenttier()) {
    // required int32 CurrentTier = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currenttier());
  }

  if (_internal_has_clientpurchasestatus()) {
    // required int32 ClientPurchaseStatus = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientpurchasestatus());
  }

  if (_internal_has_preselected()) {
    // required bool Preselected = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FAugInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FAugInstance)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference AugDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.augdef_);

    // required int32 CurrentTier = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currenttier());

    // required int32 ClientPurchaseStatus = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientpurchasestatus());

    // required bool Preselected = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAugInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FAugInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAugInstance::GetClassData() const { return &_class_data_; }


void FAugInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FAugInstance*>(&to_msg);
  auto& from = static_cast<const FAugInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FAugInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_augdef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_augdef());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currenttier_ = from._impl_.currenttier_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.clientpurchasestatus_ = from._impl_.clientpurchasestatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.preselected_ = from._impl_.preselected_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAugInstance::CopyFrom(const FAugInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FAugInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAugInstance::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_augdef()) {
    if (!_impl_.augdef_->IsInitialized()) return false;
  }
  return true;
}

void FAugInstance::InternalSwap(FAugInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FAugInstance, _impl_.preselected_)
      + sizeof(FAugInstance::_impl_.preselected_)
      - PROTOBUF_FIELD_OFFSET(FAugInstance, _impl_.augdef_)>(
          reinterpret_cast<char*>(&_impl_.augdef_),
          reinterpret_cast<char*>(&other->_impl_.augdef_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FAugInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[29]);
}

// ===================================================================

class FAugCategoryInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<FAugCategoryInstance>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& categorydef(const FAugCategoryInstance* msg);
  static void set_has_categorydef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HederaDefinitions::FAugInstance& mutation(const FAugCategoryInstance* msg);
  static void set_has_mutation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_categoryisunlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FAugCategoryInstance::_Internal::categorydef(const FAugCategoryInstance* msg) {
  return *msg->_impl_.categorydef_;
}
const ::HederaDefinitions::FAugInstance&
FAugCategoryInstance::_Internal::mutation(const FAugCategoryInstance* msg) {
  return *msg->_impl_.mutation_;
}
FAugCategoryInstance::FAugCategoryInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FAugCategoryInstance)
}
FAugCategoryInstance::FAugCategoryInstance(const FAugCategoryInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FAugCategoryInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.augs_){from._impl_.augs_}
    , decltype(_impl_.categorydef_){nullptr}
    , decltype(_impl_.mutation_){nullptr}
    , decltype(_impl_.categoryisunlocked_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_categorydef()) {
    _this->_impl_.categorydef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.categorydef_);
  }
  if (from._internal_has_mutation()) {
    _this->_impl_.mutation_ = new ::HederaDefinitions::FAugInstance(*from._impl_.mutation_);
  }
  _this->_impl_.categoryisunlocked_ = from._impl_.categoryisunlocked_;
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FAugCategoryInstance)
}

inline void FAugCategoryInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.augs_){arena}
    , decltype(_impl_.categorydef_){nullptr}
    , decltype(_impl_.mutation_){nullptr}
    , decltype(_impl_.categoryisunlocked_){false}
  };
}

FAugCategoryInstance::~FAugCategoryInstance() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FAugCategoryInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FAugCategoryInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.augs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.categorydef_;
  if (this != internal_default_instance()) delete _impl_.mutation_;
}

void FAugCategoryInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FAugCategoryInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FAugCategoryInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.augs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.categorydef_ != nullptr);
      _impl_.categorydef_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.mutation_ != nullptr);
      _impl_.mutation_->Clear();
    }
  }
  _impl_.categoryisunlocked_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAugCategoryInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference CategoryDef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_categorydef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FAugInstance Augs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_augs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAugInstance Mutation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool CategoryIsUnlocked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_categoryisunlocked(&has_bits);
          _impl_.categoryisunlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FAugCategoryInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FAugCategoryInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference CategoryDef = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::categorydef(this),
        _Internal::categorydef(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FAugInstance Augs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_augs_size()); i < n; i++) {
    const auto& repfield = this->_internal_augs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FAugInstance Mutation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mutation(this),
        _Internal::mutation(this).GetCachedSize(), target, stream);
  }

  // required bool CategoryIsUnlocked = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_categoryisunlocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FAugCategoryInstance)
  return target;
}

size_t FAugCategoryInstance::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FAugCategoryInstance)
  size_t total_size = 0;

  if (_internal_has_categorydef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference CategoryDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.categorydef_);
  }

  if (_internal_has_mutation()) {
    // required .HederaDefinitions.FAugInstance Mutation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mutation_);
  }

  if (_internal_has_categoryisunlocked()) {
    // required bool CategoryIsUnlocked = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FAugCategoryInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FAugCategoryInstance)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference CategoryDef = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.categorydef_);

    // required .HederaDefinitions.FAugInstance Mutation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mutation_);

    // required bool CategoryIsUnlocked = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FAugInstance Augs = 2;
  total_size += 1UL * this->_internal_augs_size();
  for (const auto& msg : this->_impl_.augs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAugCategoryInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FAugCategoryInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAugCategoryInstance::GetClassData() const { return &_class_data_; }


void FAugCategoryInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FAugCategoryInstance*>(&to_msg);
  auto& from = static_cast<const FAugCategoryInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FAugCategoryInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.augs_.MergeFrom(from._impl_.augs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_categorydef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_categorydef());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mutation()->::HederaDefinitions::FAugInstance::MergeFrom(
          from._internal_mutation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.categoryisunlocked_ = from._impl_.categoryisunlocked_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAugCategoryInstance::CopyFrom(const FAugCategoryInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FAugCategoryInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAugCategoryInstance::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.augs_))
    return false;
  if (_internal_has_categorydef()) {
    if (!_impl_.categorydef_->IsInitialized()) return false;
  }
  if (_internal_has_mutation()) {
    if (!_impl_.mutation_->IsInitialized()) return false;
  }
  return true;
}

void FAugCategoryInstance::InternalSwap(FAugCategoryInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.augs_.InternalSwap(&other->_impl_.augs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FAugCategoryInstance, _impl_.categoryisunlocked_)
      + sizeof(FAugCategoryInstance::_impl_.categoryisunlocked_)
      - PROTOBUF_FIELD_OFFSET(FAugCategoryInstance, _impl_.categorydef_)>(
          reinterpret_cast<char*>(&_impl_.categorydef_),
          reinterpret_cast<char*>(&other->_impl_.categorydef_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FAugCategoryInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[30]);
}

// ===================================================================

class FAugSetInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<FAugSetInstance>()._impl_._has_bits_);
  static const ::HederaDefinitions::NonReplicatedObjectReference& augsetdef(const FAugSetInstance* msg);
  static void set_has_augsetdef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FAugSetInstance::_Internal::augsetdef(const FAugSetInstance* msg) {
  return *msg->_impl_.augsetdef_;
}
FAugSetInstance::FAugSetInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FAugSetInstance)
}
FAugSetInstance::FAugSetInstance(const FAugSetInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FAugSetInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allcategories_){from._impl_.allcategories_}
    , decltype(_impl_.augsetdef_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_augsetdef()) {
    _this->_impl_.augsetdef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.augsetdef_);
  }
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FAugSetInstance)
}

inline void FAugSetInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allcategories_){arena}
    , decltype(_impl_.augsetdef_){nullptr}
  };
}

FAugSetInstance::~FAugSetInstance() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FAugSetInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FAugSetInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allcategories_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.augsetdef_;
}

void FAugSetInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FAugSetInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FAugSetInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allcategories_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.augsetdef_ != nullptr);
    _impl_.augsetdef_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAugSetInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.NonReplicatedObjectReference AugSetDef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_augsetdef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FAugCategoryInstance AllCategories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allcategories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FAugSetInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FAugSetInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference AugSetDef = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::augsetdef(this),
        _Internal::augsetdef(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FAugCategoryInstance AllCategories = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allcategories_size()); i < n; i++) {
    const auto& repfield = this->_internal_allcategories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FAugSetInstance)
  return target;
}

size_t FAugSetInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FAugSetInstance)
  size_t total_size = 0;

  // required .HederaDefinitions.NonReplicatedObjectReference AugSetDef = 1;
  if (_internal_has_augsetdef()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.augsetdef_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FAugCategoryInstance AllCategories = 2;
  total_size += 1UL * this->_internal_allcategories_size();
  for (const auto& msg : this->_impl_.allcategories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAugSetInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FAugSetInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAugSetInstance::GetClassData() const { return &_class_data_; }


void FAugSetInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FAugSetInstance*>(&to_msg);
  auto& from = static_cast<const FAugSetInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FAugSetInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allcategories_.MergeFrom(from._impl_.allcategories_);
  if (from._internal_has_augsetdef()) {
    _this->_internal_mutable_augsetdef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
        from._internal_augsetdef());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAugSetInstance::CopyFrom(const FAugSetInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FAugSetInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAugSetInstance::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.allcategories_))
    return false;
  if (_internal_has_augsetdef()) {
    if (!_impl_.augsetdef_->IsInitialized()) return false;
  }
  return true;
}

void FAugSetInstance::InternalSwap(FAugSetInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allcategories_.InternalSwap(&other->_impl_.allcategories_);
  swap(_impl_.augsetdef_, other->_impl_.augsetdef_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FAugSetInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[31]);
}

// ===================================================================

class FReplicatedBehaviorConsumerState::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedBehaviorConsumerState>()._impl_._has_bits_);
  static void set_has_bisprocesssuspended(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_behaviorsequenceenabledflags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bneedtoapplythisstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

FReplicatedBehaviorConsumerState::FReplicatedBehaviorConsumerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedBehaviorConsumerState)
}
FReplicatedBehaviorConsumerState::FReplicatedBehaviorConsumerState(const FReplicatedBehaviorConsumerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedBehaviorConsumerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.behaviorsequenceenabledflags_){}
    , decltype(_impl_.bisprocesssuspended_){}
    , decltype(_impl_.bneedtoapplythisstate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.behaviorsequenceenabledflags_, &from._impl_.behaviorsequenceenabledflags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bneedtoapplythisstate_) -
    reinterpret_cast<char*>(&_impl_.behaviorsequenceenabledflags_)) + sizeof(_impl_.bneedtoapplythisstate_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedBehaviorConsumerState)
}

inline void FReplicatedBehaviorConsumerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.behaviorsequenceenabledflags_){0}
    , decltype(_impl_.bisprocesssuspended_){false}
    , decltype(_impl_.bneedtoapplythisstate_){false}
  };
}

FReplicatedBehaviorConsumerState::~FReplicatedBehaviorConsumerState() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedBehaviorConsumerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedBehaviorConsumerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FReplicatedBehaviorConsumerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedBehaviorConsumerState::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedBehaviorConsumerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.behaviorsequenceenabledflags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bneedtoapplythisstate_) -
        reinterpret_cast<char*>(&_impl_.behaviorsequenceenabledflags_)) + sizeof(_impl_.bneedtoapplythisstate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedBehaviorConsumerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool bIsProcessSuspended = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bisprocesssuspended(&has_bits);
          _impl_.bisprocesssuspended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 BehaviorSequenceEnabledFlags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_behaviorsequenceenabledflags(&has_bits);
          _impl_.behaviorsequenceenabledflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bNeedToApplyThisState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bneedtoapplythisstate(&has_bits);
          _impl_.bneedtoapplythisstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedBehaviorConsumerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedBehaviorConsumerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool bIsProcessSuspended = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bisprocesssuspended(), target);
  }

  // required int32 BehaviorSequenceEnabledFlags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_behaviorsequenceenabledflags(), target);
  }

  // required bool bNeedToApplyThisState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bneedtoapplythisstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedBehaviorConsumerState)
  return target;
}

size_t FReplicatedBehaviorConsumerState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedBehaviorConsumerState)
  size_t total_size = 0;

  if (_internal_has_behaviorsequenceenabledflags()) {
    // required int32 BehaviorSequenceEnabledFlags = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_behaviorsequenceenabledflags());
  }

  if (_internal_has_bisprocesssuspended()) {
    // required bool bIsProcessSuspended = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_bneedtoapplythisstate()) {
    // required bool bNeedToApplyThisState = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FReplicatedBehaviorConsumerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedBehaviorConsumerState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 BehaviorSequenceEnabledFlags = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_behaviorsequenceenabledflags());

    // required bool bIsProcessSuspended = 1;
    total_size += 1 + 1;

    // required bool bNeedToApplyThisState = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedBehaviorConsumerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedBehaviorConsumerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedBehaviorConsumerState::GetClassData() const { return &_class_data_; }


void FReplicatedBehaviorConsumerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedBehaviorConsumerState*>(&to_msg);
  auto& from = static_cast<const FReplicatedBehaviorConsumerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedBehaviorConsumerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.behaviorsequenceenabledflags_ = from._impl_.behaviorsequenceenabledflags_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bisprocesssuspended_ = from._impl_.bisprocesssuspended_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bneedtoapplythisstate_ = from._impl_.bneedtoapplythisstate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedBehaviorConsumerState::CopyFrom(const FReplicatedBehaviorConsumerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedBehaviorConsumerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedBehaviorConsumerState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FReplicatedBehaviorConsumerState::InternalSwap(FReplicatedBehaviorConsumerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedBehaviorConsumerState, _impl_.bneedtoapplythisstate_)
      + sizeof(FReplicatedBehaviorConsumerState::_impl_.bneedtoapplythisstate_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedBehaviorConsumerState, _impl_.behaviorsequenceenabledflags_)>(
          reinterpret_cast<char*>(&_impl_.behaviorsequenceenabledflags_),
          reinterpret_cast<char*>(&other->_impl_.behaviorsequenceenabledflags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedBehaviorConsumerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[32]);
}

// ===================================================================

class FReplicatedBehaviorEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FReplicatedBehaviorEvent>()._impl_._has_bits_);
  static void set_has_sequenceindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eventcounter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eventindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eventoutput(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& instigator(const FReplicatedBehaviorEvent* msg);
  static void set_has_instigator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::HederaDefinitions::NonReplicatedObjectReference&
FReplicatedBehaviorEvent::_Internal::instigator(const FReplicatedBehaviorEvent* msg) {
  return *msg->_impl_.instigator_;
}
FReplicatedBehaviorEvent::FReplicatedBehaviorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FReplicatedBehaviorEvent)
}
FReplicatedBehaviorEvent::FReplicatedBehaviorEvent(const FReplicatedBehaviorEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FReplicatedBehaviorEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instigator_){nullptr}
    , decltype(_impl_.sequenceindex_){}
    , decltype(_impl_.eventcounter_){}
    , decltype(_impl_.eventindex_){}
    , decltype(_impl_.eventoutput_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instigator()) {
    _this->_impl_.instigator_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.instigator_);
  }
  ::memcpy(&_impl_.sequenceindex_, &from._impl_.sequenceindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eventoutput_) -
    reinterpret_cast<char*>(&_impl_.sequenceindex_)) + sizeof(_impl_.eventoutput_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FReplicatedBehaviorEvent)
}

inline void FReplicatedBehaviorEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instigator_){nullptr}
    , decltype(_impl_.sequenceindex_){0}
    , decltype(_impl_.eventcounter_){0}
    , decltype(_impl_.eventindex_){0}
    , decltype(_impl_.eventoutput_){0}
  };
}

FReplicatedBehaviorEvent::~FReplicatedBehaviorEvent() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FReplicatedBehaviorEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FReplicatedBehaviorEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instigator_;
}

void FReplicatedBehaviorEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FReplicatedBehaviorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FReplicatedBehaviorEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.instigator_ != nullptr);
    _impl_.instigator_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.sequenceindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.eventoutput_) -
        reinterpret_cast<char*>(&_impl_.sequenceindex_)) + sizeof(_impl_.eventoutput_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FReplicatedBehaviorEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 SequenceIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequenceindex(&has_bits);
          _impl_.sequenceindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 EventCounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eventcounter(&has_bits);
          _impl_.eventcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 EventIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eventindex(&has_bits);
          _impl_.eventindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 EventOutput = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_eventoutput(&has_bits);
          _impl_.eventoutput_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference Instigator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_instigator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FReplicatedBehaviorEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FReplicatedBehaviorEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 SequenceIndex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequenceindex(), target);
  }

  // required int32 EventCounter = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventcounter(), target);
  }

  // required int32 EventIndex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_eventindex(), target);
  }

  // required int32 EventOutput = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_eventoutput(), target);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference Instigator = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::instigator(this),
        _Internal::instigator(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FReplicatedBehaviorEvent)
  return target;
}

size_t FReplicatedBehaviorEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FReplicatedBehaviorEvent)
  size_t total_size = 0;

  if (_internal_has_instigator()) {
    // required .HederaDefinitions.NonReplicatedObjectReference Instigator = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instigator_);
  }

  if (_internal_has_sequenceindex()) {
    // required int32 SequenceIndex = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequenceindex());
  }

  if (_internal_has_eventcounter()) {
    // required int32 EventCounter = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventcounter());
  }

  if (_internal_has_eventindex()) {
    // required int32 EventIndex = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventindex());
  }

  if (_internal_has_eventoutput()) {
    // required int32 EventOutput = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventoutput());
  }

  return total_size;
}
size_t FReplicatedBehaviorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FReplicatedBehaviorEvent)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .HederaDefinitions.NonReplicatedObjectReference Instigator = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instigator_);

    // required int32 SequenceIndex = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequenceindex());

    // required int32 EventCounter = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventcounter());

    // required int32 EventIndex = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventindex());

    // required int32 EventOutput = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventoutput());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FReplicatedBehaviorEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FReplicatedBehaviorEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FReplicatedBehaviorEvent::GetClassData() const { return &_class_data_; }


void FReplicatedBehaviorEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FReplicatedBehaviorEvent*>(&to_msg);
  auto& from = static_cast<const FReplicatedBehaviorEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FReplicatedBehaviorEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_instigator()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_instigator());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequenceindex_ = from._impl_.sequenceindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eventcounter_ = from._impl_.eventcounter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.eventindex_ = from._impl_.eventindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.eventoutput_ = from._impl_.eventoutput_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FReplicatedBehaviorEvent::CopyFrom(const FReplicatedBehaviorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FReplicatedBehaviorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FReplicatedBehaviorEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_instigator()) {
    if (!_impl_.instigator_->IsInitialized()) return false;
  }
  return true;
}

void FReplicatedBehaviorEvent::InternalSwap(FReplicatedBehaviorEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FReplicatedBehaviorEvent, _impl_.eventoutput_)
      + sizeof(FReplicatedBehaviorEvent::_impl_.eventoutput_)
      - PROTOBUF_FIELD_OFFSET(FReplicatedBehaviorEvent, _impl_.instigator_)>(
          reinterpret_cast<char*>(&_impl_.instigator_),
          reinterpret_cast<char*>(&other->_impl_.instigator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FReplicatedBehaviorEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[33]);
}

// ===================================================================

class FCinematicModeOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<FCinematicModeOptions>()._impl_._has_bits_);
  static void set_has_bcinematicmode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bhideplayer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baffectshud(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_baffectsmovement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_baffectsturning(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_baffectsbuttons(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_baffectsgodmode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_baffectsnotarget(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ballowcinematicsplitscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_baffectsaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bkismetsetcinematicmode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bhideoutlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_baffectsskills(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bhidescreenparticles(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_applicationmode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_modetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000ffff) ^ 0x0000ffff) != 0;
  }
};

FCinematicModeOptions::FCinematicModeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.FCinematicModeOptions)
}
FCinematicModeOptions::FCinematicModeOptions(const FCinematicModeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FCinematicModeOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bcinematicmode_){}
    , decltype(_impl_.bhideplayer_){}
    , decltype(_impl_.baffectshud_){}
    , decltype(_impl_.baffectsmovement_){}
    , decltype(_impl_.baffectsturning_){}
    , decltype(_impl_.baffectsbuttons_){}
    , decltype(_impl_.baffectsgodmode_){}
    , decltype(_impl_.baffectsnotarget_){}
    , decltype(_impl_.ballowcinematicsplitscreen_){}
    , decltype(_impl_.baffectsaudio_){}
    , decltype(_impl_.bkismetsetcinematicmode_){}
    , decltype(_impl_.bhideoutlines_){}
    , decltype(_impl_.baffectsskills_){}
    , decltype(_impl_.bhidescreenparticles_){}
    , decltype(_impl_.applicationmode_){}
    , decltype(_impl_.modetoken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bcinematicmode_, &from._impl_.bcinematicmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.modetoken_) -
    reinterpret_cast<char*>(&_impl_.bcinematicmode_)) + sizeof(_impl_.modetoken_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.FCinematicModeOptions)
}

inline void FCinematicModeOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bcinematicmode_){false}
    , decltype(_impl_.bhideplayer_){false}
    , decltype(_impl_.baffectshud_){false}
    , decltype(_impl_.baffectsmovement_){false}
    , decltype(_impl_.baffectsturning_){false}
    , decltype(_impl_.baffectsbuttons_){false}
    , decltype(_impl_.baffectsgodmode_){false}
    , decltype(_impl_.baffectsnotarget_){false}
    , decltype(_impl_.ballowcinematicsplitscreen_){false}
    , decltype(_impl_.baffectsaudio_){false}
    , decltype(_impl_.bkismetsetcinematicmode_){false}
    , decltype(_impl_.bhideoutlines_){false}
    , decltype(_impl_.baffectsskills_){false}
    , decltype(_impl_.bhidescreenparticles_){false}
    , decltype(_impl_.applicationmode_){0}
    , decltype(_impl_.modetoken_){0}
  };
}

FCinematicModeOptions::~FCinematicModeOptions() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.FCinematicModeOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FCinematicModeOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FCinematicModeOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FCinematicModeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.FCinematicModeOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bcinematicmode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.baffectsnotarget_) -
        reinterpret_cast<char*>(&_impl_.bcinematicmode_)) + sizeof(_impl_.baffectsnotarget_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.ballowcinematicsplitscreen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.modetoken_) -
        reinterpret_cast<char*>(&_impl_.ballowcinematicsplitscreen_)) + sizeof(_impl_.modetoken_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FCinematicModeOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool bCinematicMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bcinematicmode(&has_bits);
          _impl_.bcinematicmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHidePlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bhideplayer(&has_bits);
          _impl_.bhideplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsHUD = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_baffectshud(&has_bits);
          _impl_.baffectshud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsMovement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_baffectsmovement(&has_bits);
          _impl_.baffectsmovement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsTurning = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_baffectsturning(&has_bits);
          _impl_.baffectsturning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsButtons = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_baffectsbuttons(&has_bits);
          _impl_.baffectsbuttons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsGodMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_baffectsgodmode(&has_bits);
          _impl_.baffectsgodmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsNoTarget = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_baffectsnotarget(&has_bits);
          _impl_.baffectsnotarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAllowCinematicSplitScreen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ballowcinematicsplitscreen(&has_bits);
          _impl_.ballowcinematicsplitscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsAudio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_baffectsaudio(&has_bits);
          _impl_.baffectsaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bKismetSetCinematicMode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bkismetsetcinematicmode(&has_bits);
          _impl_.bkismetsetcinematicmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideOutlines = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_bhideoutlines(&has_bits);
          _impl_.bhideoutlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bAffectsSkills = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_baffectsskills(&has_bits);
          _impl_.baffectsskills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideScreenParticles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_bhidescreenparticles(&has_bits);
          _impl_.bhidescreenparticles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ApplicationMode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_applicationmode(&has_bits);
          _impl_.applicationmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ModeToken = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_modetoken(&has_bits);
          _impl_.modetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FCinematicModeOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.FCinematicModeOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool bCinematicMode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bcinematicmode(), target);
  }

  // required bool bHidePlayer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bhideplayer(), target);
  }

  // required bool bAffectsHUD = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_baffectshud(), target);
  }

  // required bool bAffectsMovement = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_baffectsmovement(), target);
  }

  // required bool bAffectsTurning = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_baffectsturning(), target);
  }

  // required bool bAffectsButtons = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_baffectsbuttons(), target);
  }

  // required bool bAffectsGodMode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_baffectsgodmode(), target);
  }

  // required bool bAffectsNoTarget = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_baffectsnotarget(), target);
  }

  // required bool bAllowCinematicSplitScreen = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ballowcinematicsplitscreen(), target);
  }

  // required bool bAffectsAudio = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_baffectsaudio(), target);
  }

  // required bool bKismetSetCinematicMode = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bkismetsetcinematicmode(), target);
  }

  // required bool bHideOutlines = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_bhideoutlines(), target);
  }

  // required bool bAffectsSkills = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_baffectsskills(), target);
  }

  // required bool bHideScreenParticles = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_bhidescreenparticles(), target);
  }

  // required int32 ApplicationMode = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_applicationmode(), target);
  }

  // required int32 ModeToken = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_modetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.FCinematicModeOptions)
  return target;
}

size_t FCinematicModeOptions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.FCinematicModeOptions)
  size_t total_size = 0;

  if (_internal_has_bcinematicmode()) {
    // required bool bCinematicMode = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_bhideplayer()) {
    // required bool bHidePlayer = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectshud()) {
    // required bool bAffectsHUD = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsmovement()) {
    // required bool bAffectsMovement = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsturning()) {
    // required bool bAffectsTurning = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsbuttons()) {
    // required bool bAffectsButtons = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsgodmode()) {
    // required bool bAffectsGodMode = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsnotarget()) {
    // required bool bAffectsNoTarget = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_ballowcinematicsplitscreen()) {
    // required bool bAllowCinematicSplitScreen = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsaudio()) {
    // required bool bAffectsAudio = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_bkismetsetcinematicmode()) {
    // required bool bKismetSetCinematicMode = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_bhideoutlines()) {
    // required bool bHideOutlines = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_baffectsskills()) {
    // required bool bAffectsSkills = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_bhidescreenparticles()) {
    // required bool bHideScreenParticles = 14;
    total_size += 1 + 1;
  }

  if (_internal_has_applicationmode()) {
    // required int32 ApplicationMode = 15;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_applicationmode());
  }

  if (_internal_has_modetoken()) {
    // required int32 ModeToken = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_modetoken());
  }

  return total_size;
}
size_t FCinematicModeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.FCinematicModeOptions)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required bool bCinematicMode = 1;
    total_size += 1 + 1;

    // required bool bHidePlayer = 2;
    total_size += 1 + 1;

    // required bool bAffectsHUD = 3;
    total_size += 1 + 1;

    // required bool bAffectsMovement = 4;
    total_size += 1 + 1;

    // required bool bAffectsTurning = 5;
    total_size += 1 + 1;

    // required bool bAffectsButtons = 6;
    total_size += 1 + 1;

    // required bool bAffectsGodMode = 7;
    total_size += 1 + 1;

    // required bool bAffectsNoTarget = 8;
    total_size += 1 + 1;

    // required bool bAllowCinematicSplitScreen = 9;
    total_size += 1 + 1;

    // required bool bAffectsAudio = 10;
    total_size += 1 + 1;

    // required bool bKismetSetCinematicMode = 11;
    total_size += 1 + 1;

    // required bool bHideOutlines = 12;
    total_size += 1 + 1;

    // required bool bAffectsSkills = 13;
    total_size += 1 + 1;

    // required bool bHideScreenParticles = 14;
    total_size += 1 + 1;

    // required int32 ApplicationMode = 15;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_applicationmode());

    // required int32 ModeToken = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_modetoken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FCinematicModeOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FCinematicModeOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FCinematicModeOptions::GetClassData() const { return &_class_data_; }


void FCinematicModeOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FCinematicModeOptions*>(&to_msg);
  auto& from = static_cast<const FCinematicModeOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.FCinematicModeOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bcinematicmode_ = from._impl_.bcinematicmode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bhideplayer_ = from._impl_.bhideplayer_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.baffectshud_ = from._impl_.baffectshud_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.baffectsmovement_ = from._impl_.baffectsmovement_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.baffectsturning_ = from._impl_.baffectsturning_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.baffectsbuttons_ = from._impl_.baffectsbuttons_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.baffectsgodmode_ = from._impl_.baffectsgodmode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.baffectsnotarget_ = from._impl_.baffectsnotarget_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ballowcinematicsplitscreen_ = from._impl_.ballowcinematicsplitscreen_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.baffectsaudio_ = from._impl_.baffectsaudio_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bkismetsetcinematicmode_ = from._impl_.bkismetsetcinematicmode_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bhideoutlines_ = from._impl_.bhideoutlines_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.baffectsskills_ = from._impl_.baffectsskills_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bhidescreenparticles_ = from._impl_.bhidescreenparticles_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.applicationmode_ = from._impl_.applicationmode_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.modetoken_ = from._impl_.modetoken_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FCinematicModeOptions::CopyFrom(const FCinematicModeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.FCinematicModeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCinematicModeOptions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FCinematicModeOptions::InternalSwap(FCinematicModeOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FCinematicModeOptions, _impl_.modetoken_)
      + sizeof(FCinematicModeOptions::_impl_.modetoken_)
      - PROTOBUF_FIELD_OFFSET(FCinematicModeOptions, _impl_.bcinematicmode_)>(
          reinterpret_cast<char*>(&_impl_.bcinematicmode_),
          reinterpret_cast<char*>(&other->_impl_.bcinematicmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FCinematicModeOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[34]);
}

// ===================================================================

class APoplarPlayerReplicationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<APoplarPlayerReplicationInfo>()._impl_._has_bits_);
  static const ::HederaDefinitions::FVector& location(const APoplarPlayerReplicationInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::HederaDefinitions::FRotator& rotation(const APoplarPlayerReplicationInfo* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drawscale(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_customtimedilation(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_physics(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_remoterole(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_replicatedcollisiontype(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& owner(const APoplarPlayerReplicationInfo* msg);
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& base(const APoplarPlayerReplicationInfo* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bhidden(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_btearoff(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_bhardattach(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_bcollideactors(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_bcollideworld(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bblockactors(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_bprojtarget(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_bnetowner(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& instigator(const APoplarPlayerReplicationInfo* msg);
  static void set_has_instigator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::HederaDefinitions::FVector& velocity(const APoplarPlayerReplicationInfo* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_badmin(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_bisspectator(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_bonlyspectator(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_boutoflives(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_bbot(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_bfrompreviouslevel(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_bplayerafk(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& team(const APoplarPlayerReplicationInfo* msg);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::HederaDefinitions::FUniqueID& uniqueid(const APoplarPlayerReplicationInfo* msg);
  static void set_has_uniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_explevel(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_exppointsnextlevelat(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_exppointsnextlevelatbasevalue(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_bisdead(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_bhideonhudifenemy(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_generalskillpoints(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_specialistskillpoints(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_currentinstanthitcriticalhitbonus(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_currentinstanthitcriticalhitbonusbasevalue(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::HederaDefinitions::FResourcePoolReference& healthpool(const APoplarPlayerReplicationInfo* msg);
  static void set_has_healthpool(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::HederaDefinitions::FResourcePoolReference& shieldarmor(const APoplarPlayerReplicationInfo* msg);
  static void set_has_shieldarmor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& pawnallegiance(const APoplarPlayerReplicationInfo* msg);
  static void set_has_pawnallegiance(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& characternameiddef(const APoplarPlayerReplicationInfo* msg);
  static void set_has_characternameiddef(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bgfxmenuopen(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_numtrackedskillslotsinuse(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_highestcompletedplaythrough(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_numreplicatednouns(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::HederaDefinitions::FReplicatedStandInGear& standingear(const APoplarPlayerReplicationInfo* msg);
  static void set_has_standingear(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& poplarpsi(const APoplarPlayerReplicationInfo* msg);
  static void set_has_poplarpsi(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bnpc(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_bdigitaldelux(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_bplaybrowsingtaunt(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_bispvematch(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_bneedstocastsurrendervote(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& botownerpri(const APoplarPlayerReplicationInfo* msg);
  static void set_has_botownerpri(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_botdifficulty(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& myalertpoint(const APoplarPlayerReplicationInfo* msg);
  static void set_has_myalertpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::HederaDefinitions::FResourcePoolReference& energypool(const APoplarPlayerReplicationInfo* msg);
  static void set_has_energypool(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& unittypedefinition(const APoplarPlayerReplicationInfo* msg);
  static void set_has_unittypedefinition(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::HederaDefinitions::ReplicatedActorReference& statreplicationinfo(const APoplarPlayerReplicationInfo* msg);
  static void set_has_statreplicationinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_replicatedrespawntimeremaining(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_characterselectionstate(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_overshieldstrength(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_maxovershieldvalue(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& browsecharacternameiddef(const APoplarPlayerReplicationInfo* msg);
  static void set_has_browsecharacternameiddef(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& browseskiniddef(const APoplarPlayerReplicationInfo* msg);
  static void set_has_browseskiniddef(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::HederaDefinitions::NonReplicatedObjectReference& skiniddef(const APoplarPlayerReplicationInfo* msg);
  static void set_has_skiniddef(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::HederaDefinitions::FAugSetInstance& augs(const APoplarPlayerReplicationInfo* msg);
  static void set_has_augs(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::HederaDefinitions::FReplicatedBehaviorConsumerState& replicatedbehaviorconsumerstate(const APoplarPlayerReplicationInfo* msg);
  static void set_has_replicatedbehaviorconsumerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::HederaDefinitions::FReplicatedBehaviorEvent& replicatedbehaviorevent(const APoplarPlayerReplicationInfo* msg);
  static void set_has_replicatedbehaviorevent(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::HederaDefinitions::FCinematicModeOptions& replicatedcinematicmodeoptions(const APoplarPlayerReplicationInfo* msg);
  static void set_has_replicatedcinematicmodeoptions(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0xffffffff) ^ 0xffffffff)
       | ((has_bits[1] & 0xffffffff) ^ 0xffffffff)
       | ((has_bits[2] & 0x00000fff) ^ 0x00000fff)) != 0;
  }
};

const ::HederaDefinitions::FVector&
APoplarPlayerReplicationInfo::_Internal::location(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.location_;
}
const ::HederaDefinitions::FRotator&
APoplarPlayerReplicationInfo::_Internal::rotation(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.rotation_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::owner(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.owner_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::base(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.base_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::instigator(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.instigator_;
}
const ::HederaDefinitions::FVector&
APoplarPlayerReplicationInfo::_Internal::velocity(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.velocity_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::team(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.team_;
}
const ::HederaDefinitions::FUniqueID&
APoplarPlayerReplicationInfo::_Internal::uniqueid(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.uniqueid_;
}
const ::HederaDefinitions::FResourcePoolReference&
APoplarPlayerReplicationInfo::_Internal::healthpool(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.healthpool_;
}
const ::HederaDefinitions::FResourcePoolReference&
APoplarPlayerReplicationInfo::_Internal::shieldarmor(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.shieldarmor_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerReplicationInfo::_Internal::pawnallegiance(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.pawnallegiance_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerReplicationInfo::_Internal::characternameiddef(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.characternameiddef_;
}
const ::HederaDefinitions::FReplicatedStandInGear&
APoplarPlayerReplicationInfo::_Internal::standingear(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.standingear_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::poplarpsi(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.poplarpsi_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::botownerpri(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.botownerpri_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::myalertpoint(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.myalertpoint_;
}
const ::HederaDefinitions::FResourcePoolReference&
APoplarPlayerReplicationInfo::_Internal::energypool(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.energypool_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerReplicationInfo::_Internal::unittypedefinition(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.unittypedefinition_;
}
const ::HederaDefinitions::ReplicatedActorReference&
APoplarPlayerReplicationInfo::_Internal::statreplicationinfo(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.statreplicationinfo_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerReplicationInfo::_Internal::browsecharacternameiddef(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.browsecharacternameiddef_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerReplicationInfo::_Internal::browseskiniddef(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.browseskiniddef_;
}
const ::HederaDefinitions::NonReplicatedObjectReference&
APoplarPlayerReplicationInfo::_Internal::skiniddef(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.skiniddef_;
}
const ::HederaDefinitions::FAugSetInstance&
APoplarPlayerReplicationInfo::_Internal::augs(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.augs_;
}
const ::HederaDefinitions::FReplicatedBehaviorConsumerState&
APoplarPlayerReplicationInfo::_Internal::replicatedbehaviorconsumerstate(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.replicatedbehaviorconsumerstate_;
}
const ::HederaDefinitions::FReplicatedBehaviorEvent&
APoplarPlayerReplicationInfo::_Internal::replicatedbehaviorevent(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.replicatedbehaviorevent_;
}
const ::HederaDefinitions::FCinematicModeOptions&
APoplarPlayerReplicationInfo::_Internal::replicatedcinematicmodeoptions(const APoplarPlayerReplicationInfo* msg) {
  return *msg->_impl_.replicatedcinematicmodeoptions_;
}
APoplarPlayerReplicationInfo::APoplarPlayerReplicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.APoplarPlayerReplicationInfo)
}
APoplarPlayerReplicationInfo::APoplarPlayerReplicationInfo(const APoplarPlayerReplicationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APoplarPlayerReplicationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_){from._impl_.currency_}
    , decltype(_impl_.replicatednouns_){from._impl_.replicatednouns_}
    , decltype(_impl_.trackedskills_){from._impl_.trackedskills_}
    , decltype(_impl_.nemesispriarray_){from._impl_.nemesispriarray_}
    , decltype(_impl_.managedactorcounts_){from._impl_.managedactorcounts_}
    , decltype(_impl_.activatedperkflags_){from._impl_.activatedperkflags_}
    , decltype(_impl_.perks_){from._impl_.perks_}
    , decltype(_impl_.currentwearabledefinitions_){from._impl_.currentwearabledefinitions_}
    , decltype(_impl_.playername_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.instigator_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.team_){nullptr}
    , decltype(_impl_.healthpool_){nullptr}
    , decltype(_impl_.shieldarmor_){nullptr}
    , decltype(_impl_.pawnallegiance_){nullptr}
    , decltype(_impl_.characternameiddef_){nullptr}
    , decltype(_impl_.standingear_){nullptr}
    , decltype(_impl_.poplarpsi_){nullptr}
    , decltype(_impl_.botownerpri_){nullptr}
    , decltype(_impl_.myalertpoint_){nullptr}
    , decltype(_impl_.energypool_){nullptr}
    , decltype(_impl_.unittypedefinition_){nullptr}
    , decltype(_impl_.statreplicationinfo_){nullptr}
    , decltype(_impl_.browsecharacternameiddef_){nullptr}
    , decltype(_impl_.browseskiniddef_){nullptr}
    , decltype(_impl_.skiniddef_){nullptr}
    , decltype(_impl_.augs_){nullptr}
    , decltype(_impl_.replicatedbehaviorconsumerstate_){nullptr}
    , decltype(_impl_.replicatedbehaviorevent_){nullptr}
    , decltype(_impl_.replicatedcinematicmodeoptions_){nullptr}
    , decltype(_impl_.uniqueid_){nullptr}
    , decltype(_impl_.drawscale_){}
    , decltype(_impl_.customtimedilation_){}
    , decltype(_impl_.physics_){}
    , decltype(_impl_.remoterole_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.replicatedcollisiontype_){}
    , decltype(_impl_.bhidden_){}
    , decltype(_impl_.btearoff_){}
    , decltype(_impl_.bhardattach_){}
    , decltype(_impl_.bcollideactors_){}
    , decltype(_impl_.bcollideworld_){}
    , decltype(_impl_.bblockactors_){}
    , decltype(_impl_.bprojtarget_){}
    , decltype(_impl_.bnetowner_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.badmin_){}
    , decltype(_impl_.bisspectator_){}
    , decltype(_impl_.bonlyspectator_){}
    , decltype(_impl_.boutoflives_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.bbot_){}
    , decltype(_impl_.bfrompreviouslevel_){}
    , decltype(_impl_.bplayerafk_){}
    , decltype(_impl_.bisdead_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.explevel_){}
    , decltype(_impl_.exppointsnextlevelat_){}
    , decltype(_impl_.exppointsnextlevelatbasevalue_){}
    , decltype(_impl_.generalskillpoints_){}
    , decltype(_impl_.specialistskillpoints_){}
    , decltype(_impl_.currentinstanthitcriticalhitbonus_){}
    , decltype(_impl_.currentinstanthitcriticalhitbonusbasevalue_){}
    , decltype(_impl_.numtrackedskillslotsinuse_){}
    , decltype(_impl_.bhideonhudifenemy_){}
    , decltype(_impl_.bgfxmenuopen_){}
    , decltype(_impl_.bnpc_){}
    , decltype(_impl_.bdigitaldelux_){}
    , decltype(_impl_.highestcompletedplaythrough_){}
    , decltype(_impl_.numreplicatednouns_){}
    , decltype(_impl_.bplaybrowsingtaunt_){}
    , decltype(_impl_.bispvematch_){}
    , decltype(_impl_.bneedstocastsurrendervote_){}
    , decltype(_impl_.botdifficulty_){}
    , decltype(_impl_.replicatedrespawntimeremaining_){}
    , decltype(_impl_.characterselectionstate_){}
    , decltype(_impl_.overshieldstrength_){}
    , decltype(_impl_.maxovershieldvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_playername()) {
    _this->_impl_.playername_.Set(from._internal_playername(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::HederaDefinitions::FVector(*from._impl_.location_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::HederaDefinitions::FRotator(*from._impl_.rotation_);
  }
  if (from._internal_has_owner()) {
    _this->_impl_.owner_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.owner_);
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.base_);
  }
  if (from._internal_has_instigator()) {
    _this->_impl_.instigator_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.instigator_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::HederaDefinitions::FVector(*from._impl_.velocity_);
  }
  if (from._internal_has_team()) {
    _this->_impl_.team_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.team_);
  }
  if (from._internal_has_healthpool()) {
    _this->_impl_.healthpool_ = new ::HederaDefinitions::FResourcePoolReference(*from._impl_.healthpool_);
  }
  if (from._internal_has_shieldarmor()) {
    _this->_impl_.shieldarmor_ = new ::HederaDefinitions::FResourcePoolReference(*from._impl_.shieldarmor_);
  }
  if (from._internal_has_pawnallegiance()) {
    _this->_impl_.pawnallegiance_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.pawnallegiance_);
  }
  if (from._internal_has_characternameiddef()) {
    _this->_impl_.characternameiddef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.characternameiddef_);
  }
  if (from._internal_has_standingear()) {
    _this->_impl_.standingear_ = new ::HederaDefinitions::FReplicatedStandInGear(*from._impl_.standingear_);
  }
  if (from._internal_has_poplarpsi()) {
    _this->_impl_.poplarpsi_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.poplarpsi_);
  }
  if (from._internal_has_botownerpri()) {
    _this->_impl_.botownerpri_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.botownerpri_);
  }
  if (from._internal_has_myalertpoint()) {
    _this->_impl_.myalertpoint_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.myalertpoint_);
  }
  if (from._internal_has_energypool()) {
    _this->_impl_.energypool_ = new ::HederaDefinitions::FResourcePoolReference(*from._impl_.energypool_);
  }
  if (from._internal_has_unittypedefinition()) {
    _this->_impl_.unittypedefinition_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.unittypedefinition_);
  }
  if (from._internal_has_statreplicationinfo()) {
    _this->_impl_.statreplicationinfo_ = new ::HederaDefinitions::ReplicatedActorReference(*from._impl_.statreplicationinfo_);
  }
  if (from._internal_has_browsecharacternameiddef()) {
    _this->_impl_.browsecharacternameiddef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.browsecharacternameiddef_);
  }
  if (from._internal_has_browseskiniddef()) {
    _this->_impl_.browseskiniddef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.browseskiniddef_);
  }
  if (from._internal_has_skiniddef()) {
    _this->_impl_.skiniddef_ = new ::HederaDefinitions::NonReplicatedObjectReference(*from._impl_.skiniddef_);
  }
  if (from._internal_has_augs()) {
    _this->_impl_.augs_ = new ::HederaDefinitions::FAugSetInstance(*from._impl_.augs_);
  }
  if (from._internal_has_replicatedbehaviorconsumerstate()) {
    _this->_impl_.replicatedbehaviorconsumerstate_ = new ::HederaDefinitions::FReplicatedBehaviorConsumerState(*from._impl_.replicatedbehaviorconsumerstate_);
  }
  if (from._internal_has_replicatedbehaviorevent()) {
    _this->_impl_.replicatedbehaviorevent_ = new ::HederaDefinitions::FReplicatedBehaviorEvent(*from._impl_.replicatedbehaviorevent_);
  }
  if (from._internal_has_replicatedcinematicmodeoptions()) {
    _this->_impl_.replicatedcinematicmodeoptions_ = new ::HederaDefinitions::FCinematicModeOptions(*from._impl_.replicatedcinematicmodeoptions_);
  }
  if (from._internal_has_uniqueid()) {
    _this->_impl_.uniqueid_ = new ::HederaDefinitions::FUniqueID(*from._impl_.uniqueid_);
  }
  ::memcpy(&_impl_.drawscale_, &from._impl_.drawscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxovershieldvalue_) -
    reinterpret_cast<char*>(&_impl_.drawscale_)) + sizeof(_impl_.maxovershieldvalue_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.APoplarPlayerReplicationInfo)
}

inline void APoplarPlayerReplicationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_){arena}
    , decltype(_impl_.replicatednouns_){arena}
    , decltype(_impl_.trackedskills_){arena}
    , decltype(_impl_.nemesispriarray_){arena}
    , decltype(_impl_.managedactorcounts_){arena}
    , decltype(_impl_.activatedperkflags_){arena}
    , decltype(_impl_.perks_){arena}
    , decltype(_impl_.currentwearabledefinitions_){arena}
    , decltype(_impl_.playername_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.instigator_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.team_){nullptr}
    , decltype(_impl_.healthpool_){nullptr}
    , decltype(_impl_.shieldarmor_){nullptr}
    , decltype(_impl_.pawnallegiance_){nullptr}
    , decltype(_impl_.characternameiddef_){nullptr}
    , decltype(_impl_.standingear_){nullptr}
    , decltype(_impl_.poplarpsi_){nullptr}
    , decltype(_impl_.botownerpri_){nullptr}
    , decltype(_impl_.myalertpoint_){nullptr}
    , decltype(_impl_.energypool_){nullptr}
    , decltype(_impl_.unittypedefinition_){nullptr}
    , decltype(_impl_.statreplicationinfo_){nullptr}
    , decltype(_impl_.browsecharacternameiddef_){nullptr}
    , decltype(_impl_.browseskiniddef_){nullptr}
    , decltype(_impl_.skiniddef_){nullptr}
    , decltype(_impl_.augs_){nullptr}
    , decltype(_impl_.replicatedbehaviorconsumerstate_){nullptr}
    , decltype(_impl_.replicatedbehaviorevent_){nullptr}
    , decltype(_impl_.replicatedcinematicmodeoptions_){nullptr}
    , decltype(_impl_.uniqueid_){nullptr}
    , decltype(_impl_.drawscale_){0}
    , decltype(_impl_.customtimedilation_){0}
    , decltype(_impl_.physics_){0u}
    , decltype(_impl_.remoterole_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.replicatedcollisiontype_){0u}
    , decltype(_impl_.bhidden_){false}
    , decltype(_impl_.btearoff_){false}
    , decltype(_impl_.bhardattach_){false}
    , decltype(_impl_.bcollideactors_){false}
    , decltype(_impl_.bcollideworld_){false}
    , decltype(_impl_.bblockactors_){false}
    , decltype(_impl_.bprojtarget_){false}
    , decltype(_impl_.bnetowner_){false}
    , decltype(_impl_.deaths_){0}
    , decltype(_impl_.ping_){0}
    , decltype(_impl_.badmin_){false}
    , decltype(_impl_.bisspectator_){false}
    , decltype(_impl_.bonlyspectator_){false}
    , decltype(_impl_.boutoflives_){false}
    , decltype(_impl_.playerid_){0}
    , decltype(_impl_.bbot_){false}
    , decltype(_impl_.bfrompreviouslevel_){false}
    , decltype(_impl_.bplayerafk_){false}
    , decltype(_impl_.bisdead_){false}
    , decltype(_impl_.starttime_){0}
    , decltype(_impl_.kills_){0}
    , decltype(_impl_.explevel_){0}
    , decltype(_impl_.exppointsnextlevelat_){0}
    , decltype(_impl_.exppointsnextlevelatbasevalue_){0}
    , decltype(_impl_.generalskillpoints_){0}
    , decltype(_impl_.specialistskillpoints_){0}
    , decltype(_impl_.currentinstanthitcriticalhitbonus_){0}
    , decltype(_impl_.currentinstanthitcriticalhitbonusbasevalue_){0}
    , decltype(_impl_.numtrackedskillslotsinuse_){0}
    , decltype(_impl_.bhideonhudifenemy_){false}
    , decltype(_impl_.bgfxmenuopen_){false}
    , decltype(_impl_.bnpc_){false}
    , decltype(_impl_.bdigitaldelux_){false}
    , decltype(_impl_.highestcompletedplaythrough_){0}
    , decltype(_impl_.numreplicatednouns_){0}
    , decltype(_impl_.bplaybrowsingtaunt_){false}
    , decltype(_impl_.bispvematch_){false}
    , decltype(_impl_.bneedstocastsurrendervote_){false}
    , decltype(_impl_.botdifficulty_){0}
    , decltype(_impl_.replicatedrespawntimeremaining_){0u}
    , decltype(_impl_.characterselectionstate_){0u}
    , decltype(_impl_.overshieldstrength_){0}
    , decltype(_impl_.maxovershieldvalue_){0}
  };
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APoplarPlayerReplicationInfo::~APoplarPlayerReplicationInfo() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.APoplarPlayerReplicationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APoplarPlayerReplicationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_.~RepeatedPtrField();
  _impl_.replicatednouns_.~RepeatedPtrField();
  _impl_.trackedskills_.~RepeatedPtrField();
  _impl_.nemesispriarray_.~RepeatedPtrField();
  _impl_.managedactorcounts_.~RepeatedPtrField();
  _impl_.activatedperkflags_.~RepeatedField();
  _impl_.perks_.~RepeatedPtrField();
  _impl_.currentwearabledefinitions_.~RepeatedPtrField();
  _impl_.playername_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.owner_;
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.instigator_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.team_;
  if (this != internal_default_instance()) delete _impl_.healthpool_;
  if (this != internal_default_instance()) delete _impl_.shieldarmor_;
  if (this != internal_default_instance()) delete _impl_.pawnallegiance_;
  if (this != internal_default_instance()) delete _impl_.characternameiddef_;
  if (this != internal_default_instance()) delete _impl_.standingear_;
  if (this != internal_default_instance()) delete _impl_.poplarpsi_;
  if (this != internal_default_instance()) delete _impl_.botownerpri_;
  if (this != internal_default_instance()) delete _impl_.myalertpoint_;
  if (this != internal_default_instance()) delete _impl_.energypool_;
  if (this != internal_default_instance()) delete _impl_.unittypedefinition_;
  if (this != internal_default_instance()) delete _impl_.statreplicationinfo_;
  if (this != internal_default_instance()) delete _impl_.browsecharacternameiddef_;
  if (this != internal_default_instance()) delete _impl_.browseskiniddef_;
  if (this != internal_default_instance()) delete _impl_.skiniddef_;
  if (this != internal_default_instance()) delete _impl_.augs_;
  if (this != internal_default_instance()) delete _impl_.replicatedbehaviorconsumerstate_;
  if (this != internal_default_instance()) delete _impl_.replicatedbehaviorevent_;
  if (this != internal_default_instance()) delete _impl_.replicatedcinematicmodeoptions_;
  if (this != internal_default_instance()) delete _impl_.uniqueid_;
}

void APoplarPlayerReplicationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APoplarPlayerReplicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.APoplarPlayerReplicationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currency_.Clear();
  _impl_.replicatednouns_.Clear();
  _impl_.trackedskills_.Clear();
  _impl_.nemesispriarray_.Clear();
  _impl_.managedactorcounts_.Clear();
  _impl_.activatedperkflags_.Clear();
  _impl_.perks_.Clear();
  _impl_.currentwearabledefinitions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.playername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.owner_ != nullptr);
      _impl_.owner_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.instigator_ != nullptr);
      _impl_.instigator_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.team_ != nullptr);
      _impl_.team_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.healthpool_ != nullptr);
      _impl_.healthpool_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.shieldarmor_ != nullptr);
      _impl_.shieldarmor_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.pawnallegiance_ != nullptr);
      _impl_.pawnallegiance_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.characternameiddef_ != nullptr);
      _impl_.characternameiddef_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.standingear_ != nullptr);
      _impl_.standingear_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.poplarpsi_ != nullptr);
      _impl_.poplarpsi_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.botownerpri_ != nullptr);
      _impl_.botownerpri_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.myalertpoint_ != nullptr);
      _impl_.myalertpoint_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.energypool_ != nullptr);
      _impl_.energypool_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.unittypedefinition_ != nullptr);
      _impl_.unittypedefinition_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.statreplicationinfo_ != nullptr);
      _impl_.statreplicationinfo_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.browsecharacternameiddef_ != nullptr);
      _impl_.browsecharacternameiddef_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.browseskiniddef_ != nullptr);
      _impl_.browseskiniddef_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.skiniddef_ != nullptr);
      _impl_.skiniddef_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.augs_ != nullptr);
      _impl_.augs_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.replicatedbehaviorconsumerstate_ != nullptr);
      _impl_.replicatedbehaviorconsumerstate_->Clear();
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.replicatedbehaviorevent_ != nullptr);
      _impl_.replicatedbehaviorevent_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.replicatedcinematicmodeoptions_ != nullptr);
      _impl_.replicatedcinematicmodeoptions_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.uniqueid_ != nullptr);
      _impl_.uniqueid_->Clear();
    }
  }
  if (cached_has_bits & 0xf8000000u) {
    ::memset(&_impl_.drawscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.role_) -
        reinterpret_cast<char*>(&_impl_.drawscale_)) + sizeof(_impl_.role_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.replicatedcollisiontype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bprojtarget_) -
        reinterpret_cast<char*>(&_impl_.replicatedcollisiontype_)) + sizeof(_impl_.bprojtarget_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.bnetowner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.bnetowner_)) + sizeof(_impl_.playerid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.bbot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.exppointsnextlevelat_) -
        reinterpret_cast<char*>(&_impl_.bbot_)) + sizeof(_impl_.exppointsnextlevelat_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.exppointsnextlevelatbasevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bgfxmenuopen_) -
        reinterpret_cast<char*>(&_impl_.exppointsnextlevelatbasevalue_)) + sizeof(_impl_.bgfxmenuopen_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bnpc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.botdifficulty_) -
        reinterpret_cast<char*>(&_impl_.bnpc_)) + sizeof(_impl_.botdifficulty_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.replicatedrespawntimeremaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.maxovershieldvalue_) -
        reinterpret_cast<char*>(&_impl_.replicatedrespawntimeremaining_)) + sizeof(_impl_.maxovershieldvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APoplarPlayerReplicationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.FVector Location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FRotator Rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float DrawScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_drawscale(&_impl_._has_bits_);
          _impl_.drawscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float CustomTimeDilation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_customtimedilation(&_impl_._has_bits_);
          _impl_.customtimedilation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required uint32 Physics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_physics(&_impl_._has_bits_);
          _impl_.physics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 RemoteRole = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_remoterole(&_impl_._has_bits_);
          _impl_.remoterole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 Role = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_role(&_impl_._has_bits_);
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ReplicatedCollisionType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_replicatedcollisiontype(&_impl_._has_bits_);
          _impl_.replicatedcollisiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Base = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHidden = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bhidden(&_impl_._has_bits_);
          _impl_.bhidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bTearOff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_btearoff(&_impl_._has_bits_);
          _impl_.btearoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHardAttach = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bhardattach(&_impl_._has_bits_);
          _impl_.bhardattach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bCollideActors = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_bcollideactors(&_impl_._has_bits_);
          _impl_.bcollideactors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bCollideWorld = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_bcollideworld(&_impl_._has_bits_);
          _impl_.bcollideworld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bBlockActors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_bblockactors(&_impl_._has_bits_);
          _impl_.bblockactors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bProjTarget = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_bprojtarget(&_impl_._has_bits_);
          _impl_.bprojtarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bNetOwner = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_bnetowner(&_impl_._has_bits_);
          _impl_.bnetowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_instigator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FVector Velocity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Deaths = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_deaths(&_impl_._has_bits_);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Ping = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_ping(&_impl_._has_bits_);
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string PlayerName = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_playername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool bAdmin = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_badmin(&_impl_._has_bits_);
          _impl_.badmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bIsSpectator = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_bisspectator(&_impl_._has_bits_);
          _impl_.bisspectator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bOnlySpectator = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_bonlyspectator(&_impl_._has_bits_);
          _impl_.bonlyspectator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bOutOfLives = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_boutoflives(&_impl_._has_bits_);
          _impl_.boutoflives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bBot = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_bbot(&_impl_._has_bits_);
          _impl_.bbot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bFromPreviousLevel = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_bfrompreviouslevel(&_impl_._has_bits_);
          _impl_.bfrompreviouslevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bPlayerAFK = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_bplayerafk(&_impl_._has_bits_);
          _impl_.bplayerafk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 PlayerID = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_playerid(&_impl_._has_bits_);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference Team = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 StartTime = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_starttime(&_impl_._has_bits_);
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Kills = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kills(&_impl_._has_bits_);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ExpLevel = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_explevel(&_impl_._has_bits_);
          _impl_.explevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ExpPointsNextLevelAt = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_exppointsnextlevelat(&_impl_._has_bits_);
          _impl_.exppointsnextlevelat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ExpPointsNextLevelAtBaseValue = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_exppointsnextlevelatbasevalue(&_impl_._has_bits_);
          _impl_.exppointsnextlevelatbasevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bIsDead = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bisdead(&_impl_._has_bits_);
          _impl_.bisdead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bHideOnHUDIfEnemy = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bhideonhudifenemy(&_impl_._has_bits_);
          _impl_.bhideonhudifenemy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 GeneralSkillPoints = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_generalskillpoints(&_impl_._has_bits_);
          _impl_.generalskillpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 SpecialistSkillPoints = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_specialistskillpoints(&_impl_._has_bits_);
          _impl_.specialistskillpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float CurrentInstantHitCriticalHitBonus = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_currentinstanthitcriticalhitbonus(&_impl_._has_bits_);
          _impl_.currentinstanthitcriticalhitbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float CurrentInstantHitCriticalHitBonusBaseValue = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_currentinstanthitcriticalhitbonusbasevalue(&_impl_._has_bits_);
          _impl_.currentinstanthitcriticalhitbonusbasevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FCurrencyState Currency = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_currency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FResourcePoolReference HealthPool = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthpool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FResourcePoolReference ShieldArmor = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_shieldarmor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference PawnAllegiance = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pawnallegiance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference CharacterNameIdDef = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_characternameiddef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bGFxMenuOpen = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_bgfxmenuopen(&_impl_._has_bits_);
          _impl_.bgfxmenuopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 NumTrackedSkillSlotsInUse = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_numtrackedskillslotsinuse(&_impl_._has_bits_);
          _impl_.numtrackedskillslotsinuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 HighestCompletedPlayThrough = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_highestcompletedplaythrough(&_impl_._has_bits_);
          _impl_.highestcompletedplaythrough_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 NumReplicatedNouns = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_numreplicatednouns(&_impl_._has_bits_);
          _impl_.numreplicatednouns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FReplicatedNounAttributeState ReplicatedNouns = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_replicatednouns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<426>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FReplicatedStandInGear StandInGear = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_standingear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FTrackedSkillState TrackedSkills = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_trackedskills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference PoplarPSI = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_poplarpsi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bNPC = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_bnpc(&_impl_._has_bits_);
          _impl_.bnpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bDigitalDelux = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_bdigitaldelux(&_impl_._has_bits_);
          _impl_.bdigitaldelux_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bPlayBrowsingTaunt = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_bplaybrowsingtaunt(&_impl_._has_bits_);
          _impl_.bplaybrowsingtaunt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bIsPvEMatch = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_bispvematch(&_impl_._has_bits_);
          _impl_.bispvematch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bNeedsToCastSurrenderVote = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_bneedstocastsurrendervote(&_impl_._has_bits_);
          _impl_.bneedstocastsurrendervote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference BotOwnerPRI = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_botownerpri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 BotDifficulty = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_botdifficulty(&_impl_._has_bits_);
          _impl_.botdifficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference MyAlertPoint = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_myalertpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FResourcePoolReference EnergyPool = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_energypool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference UnitTypeDefinition = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unittypedefinition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.ReplicatedActorReference StatReplicationInfo = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_statreplicationinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.ReplicatedActorReference NemesisPRIArray = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_nemesispriarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<546>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FManagedActorCountData ManagedActorCounts = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_managedactorcounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<554>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 ReplicatedRespawnTimeRemaining = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_replicatedrespawntimeremaining(&_impl_._has_bits_);
          _impl_.replicatedrespawntimeremaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 CharacterSelectionState = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_characterselectionstate(&_impl_._has_bits_);
          _impl_.characterselectionstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ActivatedPerkFlags = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_activatedperkflags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<576>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_activatedperkflags(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.FReplicatedPerkItem Perks = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_perks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<586>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required float OvershieldStrength = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_overshieldstrength(&_impl_._has_bits_);
          _impl_.overshieldstrength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float MaxOvershieldValue = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_maxovershieldvalue(&_impl_._has_bits_);
          _impl_.maxovershieldvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference BrowseCharacterNameIdDef = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_browsecharacternameiddef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference BrowseSkinIdDef = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_browseskiniddef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.NonReplicatedObjectReference SkinIdDef = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_skiniddef(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FAugSetInstance Augs = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_augs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FReplicatedBehaviorConsumerState ReplicatedBehaviorConsumerState = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicatedbehaviorconsumerstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FReplicatedBehaviorEvent ReplicatedBehaviorEvent = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicatedbehaviorevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FCinematicModeOptions ReplicatedCinematicModeOptions = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicatedcinematicmodeoptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HederaDefinitions.NonReplicatedObjectReference CurrentWearableDefinitions = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_currentwearabledefinitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<666>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .HederaDefinitions.FUniqueID UniqueID = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniqueid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APoplarPlayerReplicationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.APoplarPlayerReplicationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FVector Location = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FRotator Rotation = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // required float DrawScale = 3;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_drawscale(), target);
  }

  // required float CustomTimeDilation = 4;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_customtimedilation(), target);
  }

  // required uint32 Physics = 5;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_physics(), target);
  }

  // required uint32 RemoteRole = 6;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remoterole(), target);
  }

  // required uint32 Role = 7;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_role(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required uint32 ReplicatedCollisionType = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_replicatedcollisiontype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference Base = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required bool bHidden = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bhidden(), target);
  }

  // required bool bTearOff = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_btearoff(), target);
  }

  // required bool bHardAttach = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_bhardattach(), target);
  }

  // required bool bCollideActors = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_bcollideactors(), target);
  }

  // required bool bCollideWorld = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_bcollideworld(), target);
  }

  // required bool bBlockActors = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_bblockactors(), target);
  }

  // required bool bProjTarget = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_bprojtarget(), target);
  }

  // required bool bNetOwner = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_bnetowner(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::instigator(this),
        _Internal::instigator(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FVector Velocity = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required int32 Deaths = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_deaths(), target);
  }

  // required int32 Ping = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_ping(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string PlayerName = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_playername(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required bool bAdmin = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_badmin(), target);
  }

  // required bool bIsSpectator = 25;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_bisspectator(), target);
  }

  // required bool bOnlySpectator = 26;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_bonlyspectator(), target);
  }

  // required bool bOutOfLives = 27;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_boutoflives(), target);
  }

  // required bool bBot = 28;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_bbot(), target);
  }

  // required bool bFromPreviousLevel = 29;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_bfrompreviouslevel(), target);
  }

  // required bool bPlayerAFK = 30;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_bplayerafk(), target);
  }

  // required int32 PlayerID = 31;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_playerid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference Team = 32;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::team(this),
        _Internal::team(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required int32 StartTime = 33;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_starttime(), target);
  }

  // required int32 Kills = 34;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_kills(), target);
  }

  // required int32 ExpLevel = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_explevel(), target);
  }

  // required int32 ExpPointsNextLevelAt = 36;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_exppointsnextlevelat(), target);
  }

  // required int32 ExpPointsNextLevelAtBaseValue = 37;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_exppointsnextlevelatbasevalue(), target);
  }

  // required bool bIsDead = 38;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_bisdead(), target);
  }

  // required bool bHideOnHUDIfEnemy = 39;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_bhideonhudifenemy(), target);
  }

  // required int32 GeneralSkillPoints = 40;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_generalskillpoints(), target);
  }

  // required int32 SpecialistSkillPoints = 41;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_specialistskillpoints(), target);
  }

  // required float CurrentInstantHitCriticalHitBonus = 42;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_currentinstanthitcriticalhitbonus(), target);
  }

  // required float CurrentInstantHitCriticalHitBonusBaseValue = 43;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(43, this->_internal_currentinstanthitcriticalhitbonusbasevalue(), target);
  }

  // repeated .HederaDefinitions.FCurrencyState Currency = 44;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_currency_size()); i < n; i++) {
    const auto& repfield = this->_internal_currency(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FResourcePoolReference HealthPool = 45;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::healthpool(this),
        _Internal::healthpool(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FResourcePoolReference ShieldArmor = 46;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::shieldarmor(this),
        _Internal::shieldarmor(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference PawnAllegiance = 47;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::pawnallegiance(this),
        _Internal::pawnallegiance(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference CharacterNameIdDef = 48;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::characternameiddef(this),
        _Internal::characternameiddef(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required bool bGFxMenuOpen = 49;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(49, this->_internal_bgfxmenuopen(), target);
  }

  // required int32 NumTrackedSkillSlotsInUse = 50;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_numtrackedskillslotsinuse(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // required int32 HighestCompletedPlayThrough = 51;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_highestcompletedplaythrough(), target);
  }

  // required int32 NumReplicatedNouns = 52;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_numreplicatednouns(), target);
  }

  // repeated .HederaDefinitions.FReplicatedNounAttributeState ReplicatedNouns = 53;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replicatednouns_size()); i < n; i++) {
    const auto& repfield = this->_internal_replicatednouns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(53, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.FReplicatedStandInGear StandInGear = 54;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::standingear(this),
        _Internal::standingear(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FTrackedSkillState TrackedSkills = 55;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trackedskills_size()); i < n; i++) {
    const auto& repfield = this->_internal_trackedskills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(55, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference PoplarPSI = 56;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::poplarpsi(this),
        _Internal::poplarpsi(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // required bool bNPC = 57;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(57, this->_internal_bnpc(), target);
  }

  // required bool bDigitalDelux = 58;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(58, this->_internal_bdigitaldelux(), target);
  }

  // required bool bPlayBrowsingTaunt = 59;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(59, this->_internal_bplaybrowsingtaunt(), target);
  }

  // required bool bIsPvEMatch = 60;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_bispvematch(), target);
  }

  // required bool bNeedsToCastSurrenderVote = 61;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(61, this->_internal_bneedstocastsurrendervote(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference BotOwnerPRI = 62;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::botownerpri(this),
        _Internal::botownerpri(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // required int32 BotDifficulty = 63;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(63, this->_internal_botdifficulty(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ReplicatedActorReference MyAlertPoint = 64;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::myalertpoint(this),
        _Internal::myalertpoint(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FResourcePoolReference EnergyPool = 65;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::energypool(this),
        _Internal::energypool(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference UnitTypeDefinition = 66;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::unittypedefinition(this),
        _Internal::unittypedefinition(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.ReplicatedActorReference StatReplicationInfo = 67;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::statreplicationinfo(this),
        _Internal::statreplicationinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.ReplicatedActorReference NemesisPRIArray = 68;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nemesispriarray_size()); i < n; i++) {
    const auto& repfield = this->_internal_nemesispriarray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(68, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.FManagedActorCountData ManagedActorCounts = 69;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_managedactorcounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_managedactorcounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(69, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // required uint32 ReplicatedRespawnTimeRemaining = 70;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(70, this->_internal_replicatedrespawntimeremaining(), target);
  }

  // required uint32 CharacterSelectionState = 71;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(71, this->_internal_characterselectionstate(), target);
  }

  // repeated int32 ActivatedPerkFlags = 72;
  for (int i = 0, n = this->_internal_activatedperkflags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(72, this->_internal_activatedperkflags(i), target);
  }

  // repeated .HederaDefinitions.FReplicatedPerkItem Perks = 73;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perks_size()); i < n; i++) {
    const auto& repfield = this->_internal_perks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(73, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required float OvershieldStrength = 74;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(74, this->_internal_overshieldstrength(), target);
  }

  // required float MaxOvershieldValue = 75;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(75, this->_internal_maxovershieldvalue(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.NonReplicatedObjectReference BrowseCharacterNameIdDef = 76;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::browsecharacternameiddef(this),
        _Internal::browsecharacternameiddef(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference BrowseSkinIdDef = 77;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::browseskiniddef(this),
        _Internal::browseskiniddef(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.NonReplicatedObjectReference SkinIdDef = 78;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::skiniddef(this),
        _Internal::skiniddef(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FAugSetInstance Augs = 79;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::augs(this),
        _Internal::augs(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FReplicatedBehaviorConsumerState ReplicatedBehaviorConsumerState = 80;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::replicatedbehaviorconsumerstate(this),
        _Internal::replicatedbehaviorconsumerstate(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FReplicatedBehaviorEvent ReplicatedBehaviorEvent = 81;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::replicatedbehaviorevent(this),
        _Internal::replicatedbehaviorevent(this).GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FCinematicModeOptions ReplicatedCinematicModeOptions = 82;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::replicatedcinematicmodeoptions(this),
        _Internal::replicatedcinematicmodeoptions(this).GetCachedSize(), target, stream);
  }

  // repeated .HederaDefinitions.NonReplicatedObjectReference CurrentWearableDefinitions = 83;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_currentwearabledefinitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_currentwearabledefinitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(83, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .HederaDefinitions.FUniqueID UniqueID = 84;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::uniqueid(this),
        _Internal::uniqueid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.APoplarPlayerReplicationInfo)
  return target;
}

size_t APoplarPlayerReplicationInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.APoplarPlayerReplicationInfo)
  size_t total_size = 0;

  if (_internal_has_playername()) {
    // required string PlayerName = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (_internal_has_location()) {
    // required .HederaDefinitions.FVector Location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (_internal_has_rotation()) {
    // required .HederaDefinitions.FRotator Rotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  if (_internal_has_owner()) {
    // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  if (_internal_has_base()) {
    // required .HederaDefinitions.ReplicatedActorReference Base = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  if (_internal_has_instigator()) {
    // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instigator_);
  }

  if (_internal_has_velocity()) {
    // required .HederaDefinitions.FVector Velocity = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  if (_internal_has_team()) {
    // required .HederaDefinitions.ReplicatedActorReference Team = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.team_);
  }

  if (_internal_has_healthpool()) {
    // required .HederaDefinitions.FResourcePoolReference HealthPool = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.healthpool_);
  }

  if (_internal_has_shieldarmor()) {
    // required .HederaDefinitions.FResourcePoolReference ShieldArmor = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shieldarmor_);
  }

  if (_internal_has_pawnallegiance()) {
    // required .HederaDefinitions.NonReplicatedObjectReference PawnAllegiance = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pawnallegiance_);
  }

  if (_internal_has_characternameiddef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference CharacterNameIdDef = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.characternameiddef_);
  }

  if (_internal_has_standingear()) {
    // required .HederaDefinitions.FReplicatedStandInGear StandInGear = 54;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.standingear_);
  }

  if (_internal_has_poplarpsi()) {
    // required .HederaDefinitions.ReplicatedActorReference PoplarPSI = 56;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.poplarpsi_);
  }

  if (_internal_has_botownerpri()) {
    // required .HederaDefinitions.ReplicatedActorReference BotOwnerPRI = 62;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.botownerpri_);
  }

  if (_internal_has_myalertpoint()) {
    // required .HederaDefinitions.ReplicatedActorReference MyAlertPoint = 64;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.myalertpoint_);
  }

  if (_internal_has_energypool()) {
    // required .HederaDefinitions.FResourcePoolReference EnergyPool = 65;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.energypool_);
  }

  if (_internal_has_unittypedefinition()) {
    // required .HederaDefinitions.NonReplicatedObjectReference UnitTypeDefinition = 66;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unittypedefinition_);
  }

  if (_internal_has_statreplicationinfo()) {
    // required .HederaDefinitions.ReplicatedActorReference StatReplicationInfo = 67;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statreplicationinfo_);
  }

  if (_internal_has_browsecharacternameiddef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference BrowseCharacterNameIdDef = 76;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.browsecharacternameiddef_);
  }

  if (_internal_has_browseskiniddef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference BrowseSkinIdDef = 77;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.browseskiniddef_);
  }

  if (_internal_has_skiniddef()) {
    // required .HederaDefinitions.NonReplicatedObjectReference SkinIdDef = 78;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skiniddef_);
  }

  if (_internal_has_augs()) {
    // required .HederaDefinitions.FAugSetInstance Augs = 79;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.augs_);
  }

  if (_internal_has_replicatedbehaviorconsumerstate()) {
    // required .HederaDefinitions.FReplicatedBehaviorConsumerState ReplicatedBehaviorConsumerState = 80;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedbehaviorconsumerstate_);
  }

  if (_internal_has_replicatedbehaviorevent()) {
    // required .HederaDefinitions.FReplicatedBehaviorEvent ReplicatedBehaviorEvent = 81;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedbehaviorevent_);
  }

  if (_internal_has_replicatedcinematicmodeoptions()) {
    // required .HederaDefinitions.FCinematicModeOptions ReplicatedCinematicModeOptions = 82;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedcinematicmodeoptions_);
  }

  if (_internal_has_uniqueid()) {
    // required .HederaDefinitions.FUniqueID UniqueID = 84;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uniqueid_);
  }

  if (_internal_has_drawscale()) {
    // required float DrawScale = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_customtimedilation()) {
    // required float CustomTimeDilation = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_physics()) {
    // required uint32 Physics = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_physics());
  }

  if (_internal_has_remoterole()) {
    // required uint32 RemoteRole = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remoterole());
  }

  if (_internal_has_role()) {
    // required uint32 Role = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
  }

  if (_internal_has_replicatedcollisiontype()) {
    // required uint32 ReplicatedCollisionType = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replicatedcollisiontype());
  }

  if (_internal_has_bhidden()) {
    // required bool bHidden = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_btearoff()) {
    // required bool bTearOff = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_bhardattach()) {
    // required bool bHardAttach = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_bcollideactors()) {
    // required bool bCollideActors = 14;
    total_size += 1 + 1;
  }

  if (_internal_has_bcollideworld()) {
    // required bool bCollideWorld = 15;
    total_size += 1 + 1;
  }

  if (_internal_has_bblockactors()) {
    // required bool bBlockActors = 16;
    total_size += 2 + 1;
  }

  if (_internal_has_bprojtarget()) {
    // required bool bProjTarget = 17;
    total_size += 2 + 1;
  }

  if (_internal_has_bnetowner()) {
    // required bool bNetOwner = 18;
    total_size += 2 + 1;
  }

  if (_internal_has_deaths()) {
    // required int32 Deaths = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_deaths());
  }

  if (_internal_has_ping()) {
    // required int32 Ping = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ping());
  }

  if (_internal_has_badmin()) {
    // required bool bAdmin = 24;
    total_size += 2 + 1;
  }

  if (_internal_has_bisspectator()) {
    // required bool bIsSpectator = 25;
    total_size += 2 + 1;
  }

  if (_internal_has_bonlyspectator()) {
    // required bool bOnlySpectator = 26;
    total_size += 2 + 1;
  }

  if (_internal_has_boutoflives()) {
    // required bool bOutOfLives = 27;
    total_size += 2 + 1;
  }

  if (_internal_has_playerid()) {
    // required int32 PlayerID = 31;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (_internal_has_bbot()) {
    // required bool bBot = 28;
    total_size += 2 + 1;
  }

  if (_internal_has_bfrompreviouslevel()) {
    // required bool bFromPreviousLevel = 29;
    total_size += 2 + 1;
  }

  if (_internal_has_bplayerafk()) {
    // required bool bPlayerAFK = 30;
    total_size += 2 + 1;
  }

  if (_internal_has_bisdead()) {
    // required bool bIsDead = 38;
    total_size += 2 + 1;
  }

  if (_internal_has_starttime()) {
    // required int32 StartTime = 33;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  if (_internal_has_kills()) {
    // required int32 Kills = 34;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_kills());
  }

  if (_internal_has_explevel()) {
    // required int32 ExpLevel = 35;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_explevel());
  }

  if (_internal_has_exppointsnextlevelat()) {
    // required int32 ExpPointsNextLevelAt = 36;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exppointsnextlevelat());
  }

  if (_internal_has_exppointsnextlevelatbasevalue()) {
    // required int32 ExpPointsNextLevelAtBaseValue = 37;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exppointsnextlevelatbasevalue());
  }

  if (_internal_has_generalskillpoints()) {
    // required int32 GeneralSkillPoints = 40;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_generalskillpoints());
  }

  if (_internal_has_specialistskillpoints()) {
    // required int32 SpecialistSkillPoints = 41;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_specialistskillpoints());
  }

  if (_internal_has_currentinstanthitcriticalhitbonus()) {
    // required float CurrentInstantHitCriticalHitBonus = 42;
    total_size += 2 + 4;
  }

  if (_internal_has_currentinstanthitcriticalhitbonusbasevalue()) {
    // required float CurrentInstantHitCriticalHitBonusBaseValue = 43;
    total_size += 2 + 4;
  }

  if (_internal_has_numtrackedskillslotsinuse()) {
    // required int32 NumTrackedSkillSlotsInUse = 50;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numtrackedskillslotsinuse());
  }

  if (_internal_has_bhideonhudifenemy()) {
    // required bool bHideOnHUDIfEnemy = 39;
    total_size += 2 + 1;
  }

  if (_internal_has_bgfxmenuopen()) {
    // required bool bGFxMenuOpen = 49;
    total_size += 2 + 1;
  }

  if (_internal_has_bnpc()) {
    // required bool bNPC = 57;
    total_size += 2 + 1;
  }

  if (_internal_has_bdigitaldelux()) {
    // required bool bDigitalDelux = 58;
    total_size += 2 + 1;
  }

  if (_internal_has_highestcompletedplaythrough()) {
    // required int32 HighestCompletedPlayThrough = 51;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_highestcompletedplaythrough());
  }

  if (_internal_has_numreplicatednouns()) {
    // required int32 NumReplicatedNouns = 52;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numreplicatednouns());
  }

  if (_internal_has_bplaybrowsingtaunt()) {
    // required bool bPlayBrowsingTaunt = 59;
    total_size += 2 + 1;
  }

  if (_internal_has_bispvematch()) {
    // required bool bIsPvEMatch = 60;
    total_size += 2 + 1;
  }

  if (_internal_has_bneedstocastsurrendervote()) {
    // required bool bNeedsToCastSurrenderVote = 61;
    total_size += 2 + 1;
  }

  if (_internal_has_botdifficulty()) {
    // required int32 BotDifficulty = 63;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_botdifficulty());
  }

  if (_internal_has_replicatedrespawntimeremaining()) {
    // required uint32 ReplicatedRespawnTimeRemaining = 70;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_replicatedrespawntimeremaining());
  }

  if (_internal_has_characterselectionstate()) {
    // required uint32 CharacterSelectionState = 71;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_characterselectionstate());
  }

  if (_internal_has_overshieldstrength()) {
    // required float OvershieldStrength = 74;
    total_size += 2 + 4;
  }

  if (_internal_has_maxovershieldvalue()) {
    // required float MaxOvershieldValue = 75;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t APoplarPlayerReplicationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.APoplarPlayerReplicationInfo)
  size_t total_size = 0;

  if ((((_impl_._has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_impl_._has_bits_[1] & 0xffffffff) ^ 0xffffffff)
       | ((_impl_._has_bits_[2] & 0x00000fff) ^ 0x00000fff)) == 0) {  // All required fields are present.
    // required string PlayerName = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());

    // required .HederaDefinitions.FVector Location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);

    // required .HederaDefinitions.FRotator Rotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);

    // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);

    // required .HederaDefinitions.ReplicatedActorReference Base = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);

    // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instigator_);

    // required .HederaDefinitions.FVector Velocity = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);

    // required .HederaDefinitions.ReplicatedActorReference Team = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.team_);

    // required .HederaDefinitions.FResourcePoolReference HealthPool = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.healthpool_);

    // required .HederaDefinitions.FResourcePoolReference ShieldArmor = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shieldarmor_);

    // required .HederaDefinitions.NonReplicatedObjectReference PawnAllegiance = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pawnallegiance_);

    // required .HederaDefinitions.NonReplicatedObjectReference CharacterNameIdDef = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.characternameiddef_);

    // required .HederaDefinitions.FReplicatedStandInGear StandInGear = 54;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.standingear_);

    // required .HederaDefinitions.ReplicatedActorReference PoplarPSI = 56;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.poplarpsi_);

    // required .HederaDefinitions.ReplicatedActorReference BotOwnerPRI = 62;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.botownerpri_);

    // required .HederaDefinitions.ReplicatedActorReference MyAlertPoint = 64;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.myalertpoint_);

    // required .HederaDefinitions.FResourcePoolReference EnergyPool = 65;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.energypool_);

    // required .HederaDefinitions.NonReplicatedObjectReference UnitTypeDefinition = 66;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unittypedefinition_);

    // required .HederaDefinitions.ReplicatedActorReference StatReplicationInfo = 67;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statreplicationinfo_);

    // required .HederaDefinitions.NonReplicatedObjectReference BrowseCharacterNameIdDef = 76;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.browsecharacternameiddef_);

    // required .HederaDefinitions.NonReplicatedObjectReference BrowseSkinIdDef = 77;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.browseskiniddef_);

    // required .HederaDefinitions.NonReplicatedObjectReference SkinIdDef = 78;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skiniddef_);

    // required .HederaDefinitions.FAugSetInstance Augs = 79;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.augs_);

    // required .HederaDefinitions.FReplicatedBehaviorConsumerState ReplicatedBehaviorConsumerState = 80;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedbehaviorconsumerstate_);

    // required .HederaDefinitions.FReplicatedBehaviorEvent ReplicatedBehaviorEvent = 81;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedbehaviorevent_);

    // required .HederaDefinitions.FCinematicModeOptions ReplicatedCinematicModeOptions = 82;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicatedcinematicmodeoptions_);

    // required .HederaDefinitions.FUniqueID UniqueID = 84;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uniqueid_);

    // required float DrawScale = 3;
    total_size += 1 + 4;

    // required float CustomTimeDilation = 4;
    total_size += 1 + 4;

    // required uint32 Physics = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_physics());

    // required uint32 RemoteRole = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remoterole());

    // required uint32 Role = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());

    // required uint32 ReplicatedCollisionType = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replicatedcollisiontype());

    // required bool bHidden = 11;
    total_size += 1 + 1;

    // required bool bTearOff = 12;
    total_size += 1 + 1;

    // required bool bHardAttach = 13;
    total_size += 1 + 1;

    // required bool bCollideActors = 14;
    total_size += 1 + 1;

    // required bool bCollideWorld = 15;
    total_size += 1 + 1;

    // required bool bBlockActors = 16;
    total_size += 2 + 1;

    // required bool bProjTarget = 17;
    total_size += 2 + 1;

    // required bool bNetOwner = 18;
    total_size += 2 + 1;

    // required int32 Deaths = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_deaths());

    // required int32 Ping = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ping());

    // required bool bAdmin = 24;
    total_size += 2 + 1;

    // required bool bIsSpectator = 25;
    total_size += 2 + 1;

    // required bool bOnlySpectator = 26;
    total_size += 2 + 1;

    // required bool bOutOfLives = 27;
    total_size += 2 + 1;

    // required int32 PlayerID = 31;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_playerid());

    // required bool bBot = 28;
    total_size += 2 + 1;

    // required bool bFromPreviousLevel = 29;
    total_size += 2 + 1;

    // required bool bPlayerAFK = 30;
    total_size += 2 + 1;

    // required bool bIsDead = 38;
    total_size += 2 + 1;

    // required int32 StartTime = 33;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_starttime());

    // required int32 Kills = 34;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_kills());

    // required int32 ExpLevel = 35;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_explevel());

    // required int32 ExpPointsNextLevelAt = 36;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exppointsnextlevelat());

    // required int32 ExpPointsNextLevelAtBaseValue = 37;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exppointsnextlevelatbasevalue());

    // required int32 GeneralSkillPoints = 40;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_generalskillpoints());

    // required int32 SpecialistSkillPoints = 41;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_specialistskillpoints());

    // required float CurrentInstantHitCriticalHitBonus = 42;
    total_size += 2 + 4;

    // required float CurrentInstantHitCriticalHitBonusBaseValue = 43;
    total_size += 2 + 4;

    // required int32 NumTrackedSkillSlotsInUse = 50;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numtrackedskillslotsinuse());

    // required bool bHideOnHUDIfEnemy = 39;
    total_size += 2 + 1;

    // required bool bGFxMenuOpen = 49;
    total_size += 2 + 1;

    // required bool bNPC = 57;
    total_size += 2 + 1;

    // required bool bDigitalDelux = 58;
    total_size += 2 + 1;

    // required int32 HighestCompletedPlayThrough = 51;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_highestcompletedplaythrough());

    // required int32 NumReplicatedNouns = 52;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numreplicatednouns());

    // required bool bPlayBrowsingTaunt = 59;
    total_size += 2 + 1;

    // required bool bIsPvEMatch = 60;
    total_size += 2 + 1;

    // required bool bNeedsToCastSurrenderVote = 61;
    total_size += 2 + 1;

    // required int32 BotDifficulty = 63;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_botdifficulty());

    // required uint32 ReplicatedRespawnTimeRemaining = 70;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_replicatedrespawntimeremaining());

    // required uint32 CharacterSelectionState = 71;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_characterselectionstate());

    // required float OvershieldStrength = 74;
    total_size += 2 + 4;

    // required float MaxOvershieldValue = 75;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.FCurrencyState Currency = 44;
  total_size += 2UL * this->_internal_currency_size();
  for (const auto& msg : this->_impl_.currency_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.FReplicatedNounAttributeState ReplicatedNouns = 53;
  total_size += 2UL * this->_internal_replicatednouns_size();
  for (const auto& msg : this->_impl_.replicatednouns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.FTrackedSkillState TrackedSkills = 55;
  total_size += 2UL * this->_internal_trackedskills_size();
  for (const auto& msg : this->_impl_.trackedskills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.ReplicatedActorReference NemesisPRIArray = 68;
  total_size += 2UL * this->_internal_nemesispriarray_size();
  for (const auto& msg : this->_impl_.nemesispriarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.FManagedActorCountData ManagedActorCounts = 69;
  total_size += 2UL * this->_internal_managedactorcounts_size();
  for (const auto& msg : this->_impl_.managedactorcounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ActivatedPerkFlags = 72;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.activatedperkflags_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_activatedperkflags_size());
    total_size += data_size;
  }

  // repeated .HederaDefinitions.FReplicatedPerkItem Perks = 73;
  total_size += 2UL * this->_internal_perks_size();
  for (const auto& msg : this->_impl_.perks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HederaDefinitions.NonReplicatedObjectReference CurrentWearableDefinitions = 83;
  total_size += 2UL * this->_internal_currentwearabledefinitions_size();
  for (const auto& msg : this->_impl_.currentwearabledefinitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APoplarPlayerReplicationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APoplarPlayerReplicationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APoplarPlayerReplicationInfo::GetClassData() const { return &_class_data_; }


void APoplarPlayerReplicationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APoplarPlayerReplicationInfo*>(&to_msg);
  auto& from = static_cast<const APoplarPlayerReplicationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.APoplarPlayerReplicationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.currency_.MergeFrom(from._impl_.currency_);
  _this->_impl_.replicatednouns_.MergeFrom(from._impl_.replicatednouns_);
  _this->_impl_.trackedskills_.MergeFrom(from._impl_.trackedskills_);
  _this->_impl_.nemesispriarray_.MergeFrom(from._impl_.nemesispriarray_);
  _this->_impl_.managedactorcounts_.MergeFrom(from._impl_.managedactorcounts_);
  _this->_impl_.activatedperkflags_.MergeFrom(from._impl_.activatedperkflags_);
  _this->_impl_.perks_.MergeFrom(from._impl_.perks_);
  _this->_impl_.currentwearabledefinitions_.MergeFrom(from._impl_.currentwearabledefinitions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_playername(from._internal_playername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rotation()->::HederaDefinitions::FRotator::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_owner()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_owner());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_base()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_instigator()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_instigator());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_velocity()->::HederaDefinitions::FVector::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_team()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_team());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_healthpool()->::HederaDefinitions::FResourcePoolReference::MergeFrom(
          from._internal_healthpool());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_shieldarmor()->::HederaDefinitions::FResourcePoolReference::MergeFrom(
          from._internal_shieldarmor());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_pawnallegiance()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_pawnallegiance());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_characternameiddef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_characternameiddef());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_standingear()->::HederaDefinitions::FReplicatedStandInGear::MergeFrom(
          from._internal_standingear());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_poplarpsi()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_poplarpsi());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_botownerpri()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_botownerpri());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_myalertpoint()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_myalertpoint());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_energypool()->::HederaDefinitions::FResourcePoolReference::MergeFrom(
          from._internal_energypool());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_unittypedefinition()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_unittypedefinition());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_statreplicationinfo()->::HederaDefinitions::ReplicatedActorReference::MergeFrom(
          from._internal_statreplicationinfo());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_browsecharacternameiddef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_browsecharacternameiddef());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_browseskiniddef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_browseskiniddef());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_skiniddef()->::HederaDefinitions::NonReplicatedObjectReference::MergeFrom(
          from._internal_skiniddef());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_augs()->::HederaDefinitions::FAugSetInstance::MergeFrom(
          from._internal_augs());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_replicatedbehaviorconsumerstate()->::HederaDefinitions::FReplicatedBehaviorConsumerState::MergeFrom(
          from._internal_replicatedbehaviorconsumerstate());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_replicatedbehaviorevent()->::HederaDefinitions::FReplicatedBehaviorEvent::MergeFrom(
          from._internal_replicatedbehaviorevent());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_replicatedcinematicmodeoptions()->::HederaDefinitions::FCinematicModeOptions::MergeFrom(
          from._internal_replicatedcinematicmodeoptions());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_uniqueid()->::HederaDefinitions::FUniqueID::MergeFrom(
          from._internal_uniqueid());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.drawscale_ = from._impl_.drawscale_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.customtimedilation_ = from._impl_.customtimedilation_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.physics_ = from._impl_.physics_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.remoterole_ = from._impl_.remoterole_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.replicatedcollisiontype_ = from._impl_.replicatedcollisiontype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bhidden_ = from._impl_.bhidden_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.btearoff_ = from._impl_.btearoff_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bhardattach_ = from._impl_.bhardattach_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bcollideactors_ = from._impl_.bcollideactors_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bcollideworld_ = from._impl_.bcollideworld_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bblockactors_ = from._impl_.bblockactors_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bprojtarget_ = from._impl_.bprojtarget_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bnetowner_ = from._impl_.bnetowner_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ping_ = from._impl_.ping_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.badmin_ = from._impl_.badmin_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.bisspectator_ = from._impl_.bisspectator_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bonlyspectator_ = from._impl_.bonlyspectator_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.boutoflives_ = from._impl_.boutoflives_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.bbot_ = from._impl_.bbot_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.bfrompreviouslevel_ = from._impl_.bfrompreviouslevel_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.bplayerafk_ = from._impl_.bplayerafk_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.bisdead_ = from._impl_.bisdead_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.starttime_ = from._impl_.starttime_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.explevel_ = from._impl_.explevel_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.exppointsnextlevelat_ = from._impl_.exppointsnextlevelat_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.exppointsnextlevelatbasevalue_ = from._impl_.exppointsnextlevelatbasevalue_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.generalskillpoints_ = from._impl_.generalskillpoints_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.specialistskillpoints_ = from._impl_.specialistskillpoints_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.currentinstanthitcriticalhitbonus_ = from._impl_.currentinstanthitcriticalhitbonus_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.currentinstanthitcriticalhitbonusbasevalue_ = from._impl_.currentinstanthitcriticalhitbonusbasevalue_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.numtrackedskillslotsinuse_ = from._impl_.numtrackedskillslotsinuse_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.bhideonhudifenemy_ = from._impl_.bhideonhudifenemy_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.bgfxmenuopen_ = from._impl_.bgfxmenuopen_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bnpc_ = from._impl_.bnpc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bdigitaldelux_ = from._impl_.bdigitaldelux_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.highestcompletedplaythrough_ = from._impl_.highestcompletedplaythrough_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.numreplicatednouns_ = from._impl_.numreplicatednouns_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bplaybrowsingtaunt_ = from._impl_.bplaybrowsingtaunt_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bispvematch_ = from._impl_.bispvematch_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bneedstocastsurrendervote_ = from._impl_.bneedstocastsurrendervote_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.botdifficulty_ = from._impl_.botdifficulty_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.replicatedrespawntimeremaining_ = from._impl_.replicatedrespawntimeremaining_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.characterselectionstate_ = from._impl_.characterselectionstate_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.overshieldstrength_ = from._impl_.overshieldstrength_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.maxovershieldvalue_ = from._impl_.maxovershieldvalue_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APoplarPlayerReplicationInfo::CopyFrom(const APoplarPlayerReplicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.APoplarPlayerReplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APoplarPlayerReplicationInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.currency_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.replicatednouns_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.trackedskills_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.nemesispriarray_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.managedactorcounts_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.perks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.currentwearabledefinitions_))
    return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_rotation()) {
    if (!_impl_.rotation_->IsInitialized()) return false;
  }
  if (_internal_has_owner()) {
    if (!_impl_.owner_->IsInitialized()) return false;
  }
  if (_internal_has_base()) {
    if (!_impl_.base_->IsInitialized()) return false;
  }
  if (_internal_has_instigator()) {
    if (!_impl_.instigator_->IsInitialized()) return false;
  }
  if (_internal_has_velocity()) {
    if (!_impl_.velocity_->IsInitialized()) return false;
  }
  if (_internal_has_team()) {
    if (!_impl_.team_->IsInitialized()) return false;
  }
  if (_internal_has_healthpool()) {
    if (!_impl_.healthpool_->IsInitialized()) return false;
  }
  if (_internal_has_shieldarmor()) {
    if (!_impl_.shieldarmor_->IsInitialized()) return false;
  }
  if (_internal_has_pawnallegiance()) {
    if (!_impl_.pawnallegiance_->IsInitialized()) return false;
  }
  if (_internal_has_characternameiddef()) {
    if (!_impl_.characternameiddef_->IsInitialized()) return false;
  }
  if (_internal_has_standingear()) {
    if (!_impl_.standingear_->IsInitialized()) return false;
  }
  if (_internal_has_poplarpsi()) {
    if (!_impl_.poplarpsi_->IsInitialized()) return false;
  }
  if (_internal_has_botownerpri()) {
    if (!_impl_.botownerpri_->IsInitialized()) return false;
  }
  if (_internal_has_myalertpoint()) {
    if (!_impl_.myalertpoint_->IsInitialized()) return false;
  }
  if (_internal_has_energypool()) {
    if (!_impl_.energypool_->IsInitialized()) return false;
  }
  if (_internal_has_unittypedefinition()) {
    if (!_impl_.unittypedefinition_->IsInitialized()) return false;
  }
  if (_internal_has_statreplicationinfo()) {
    if (!_impl_.statreplicationinfo_->IsInitialized()) return false;
  }
  if (_internal_has_browsecharacternameiddef()) {
    if (!_impl_.browsecharacternameiddef_->IsInitialized()) return false;
  }
  if (_internal_has_browseskiniddef()) {
    if (!_impl_.browseskiniddef_->IsInitialized()) return false;
  }
  if (_internal_has_skiniddef()) {
    if (!_impl_.skiniddef_->IsInitialized()) return false;
  }
  if (_internal_has_augs()) {
    if (!_impl_.augs_->IsInitialized()) return false;
  }
  if (_internal_has_replicatedbehaviorconsumerstate()) {
    if (!_impl_.replicatedbehaviorconsumerstate_->IsInitialized()) return false;
  }
  if (_internal_has_replicatedbehaviorevent()) {
    if (!_impl_.replicatedbehaviorevent_->IsInitialized()) return false;
  }
  if (_internal_has_replicatedcinematicmodeoptions()) {
    if (!_impl_.replicatedcinematicmodeoptions_->IsInitialized()) return false;
  }
  if (_internal_has_uniqueid()) {
    if (!_impl_.uniqueid_->IsInitialized()) return false;
  }
  return true;
}

void APoplarPlayerReplicationInfo::InternalSwap(APoplarPlayerReplicationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  _impl_.currency_.InternalSwap(&other->_impl_.currency_);
  _impl_.replicatednouns_.InternalSwap(&other->_impl_.replicatednouns_);
  _impl_.trackedskills_.InternalSwap(&other->_impl_.trackedskills_);
  _impl_.nemesispriarray_.InternalSwap(&other->_impl_.nemesispriarray_);
  _impl_.managedactorcounts_.InternalSwap(&other->_impl_.managedactorcounts_);
  _impl_.activatedperkflags_.InternalSwap(&other->_impl_.activatedperkflags_);
  _impl_.perks_.InternalSwap(&other->_impl_.perks_);
  _impl_.currentwearabledefinitions_.InternalSwap(&other->_impl_.currentwearabledefinitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playername_, lhs_arena,
      &other->_impl_.playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APoplarPlayerReplicationInfo, _impl_.maxovershieldvalue_)
      + sizeof(APoplarPlayerReplicationInfo::_impl_.maxovershieldvalue_)
      - PROTOBUF_FIELD_OFFSET(APoplarPlayerReplicationInfo, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APoplarPlayerReplicationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[35]);
}

// ===================================================================

class ActorReplicationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ActorReplicationMessage>()._impl_._has_bits_);
  static void set_has_actortype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isinitial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_actorid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_replicationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ActorReplicationMessage::ActorReplicationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.ActorReplicationMessage)
}
ActorReplicationMessage::ActorReplicationMessage(const ActorReplicationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActorReplicationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.replicationmessage_){}
    , decltype(_impl_.actortype_){}
    , decltype(_impl_.isinitial_){}
    , decltype(_impl_.actorid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.replicationmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replicationmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_replicationmessage()) {
    _this->_impl_.replicationmessage_.Set(from._internal_replicationmessage(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.actortype_, &from._impl_.actortype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actorid_) -
    reinterpret_cast<char*>(&_impl_.actortype_)) + sizeof(_impl_.actorid_));
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.ActorReplicationMessage)
}

inline void ActorReplicationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.replicationmessage_){}
    , decltype(_impl_.actortype_){0}
    , decltype(_impl_.isinitial_){false}
    , decltype(_impl_.actorid_){0u}
  };
  _impl_.replicationmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replicationmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActorReplicationMessage::~ActorReplicationMessage() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.ActorReplicationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActorReplicationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicationmessage_.Destroy();
}

void ActorReplicationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActorReplicationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.ActorReplicationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.replicationmessage_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.actortype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.actorid_) -
        reinterpret_cast<char*>(&_impl_.actortype_)) + sizeof(_impl_.actorid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorReplicationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .HederaDefinitions.ActorReplicationMessage.ActorType actorType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HederaDefinitions::ActorReplicationMessage_ActorType_IsValid(val))) {
            _internal_set_actortype(static_cast<::HederaDefinitions::ActorReplicationMessage_ActorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool isInitial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_isinitial(&has_bits);
          _impl_.isinitial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 actorID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_actorid(&has_bits);
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes replicationMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_replicationmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActorReplicationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.ActorReplicationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .HederaDefinitions.ActorReplicationMessage.ActorType actorType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_actortype(), target);
  }

  // required bool isInitial = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isinitial(), target);
  }

  // required uint32 actorID = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_actorid(), target);
  }

  // required bytes replicationMessage = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_replicationmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.ActorReplicationMessage)
  return target;
}

size_t ActorReplicationMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HederaDefinitions.ActorReplicationMessage)
  size_t total_size = 0;

  if (_internal_has_replicationmessage()) {
    // required bytes replicationMessage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_replicationmessage());
  }

  if (_internal_has_actortype()) {
    // required .HederaDefinitions.ActorReplicationMessage.ActorType actorType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_actortype());
  }

  if (_internal_has_isinitial()) {
    // required bool isInitial = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_actorid()) {
    // required uint32 actorID = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actorid());
  }

  return total_size;
}
size_t ActorReplicationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.ActorReplicationMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes replicationMessage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_replicationmessage());

    // required .HederaDefinitions.ActorReplicationMessage.ActorType actorType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_actortype());

    // required bool isInitial = 2;
    total_size += 1 + 1;

    // required uint32 actorID = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actorid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorReplicationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActorReplicationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorReplicationMessage::GetClassData() const { return &_class_data_; }


void ActorReplicationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActorReplicationMessage*>(&to_msg);
  auto& from = static_cast<const ActorReplicationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.ActorReplicationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_replicationmessage(from._internal_replicationmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.actortype_ = from._impl_.actortype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isinitial_ = from._impl_.isinitial_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.actorid_ = from._impl_.actorid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorReplicationMessage::CopyFrom(const ActorReplicationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.ActorReplicationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorReplicationMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ActorReplicationMessage::InternalSwap(ActorReplicationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.replicationmessage_, lhs_arena,
      &other->_impl_.replicationmessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorReplicationMessage, _impl_.actorid_)
      + sizeof(ActorReplicationMessage::_impl_.actorid_)
      - PROTOBUF_FIELD_OFFSET(ActorReplicationMessage, _impl_.actortype_)>(
          reinterpret_cast<char*>(&_impl_.actortype_),
          reinterpret_cast<char*>(&other->_impl_.actortype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorReplicationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[36]);
}

// ===================================================================

class ReplicationFrame::_Internal {
 public:
};

ReplicationFrame::ReplicationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HederaDefinitions.ReplicationFrame)
}
ReplicationFrame::ReplicationFrame(const ReplicationFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplicationFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actorreplicationmessages_){from._impl_.actorreplicationmessages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HederaDefinitions.ReplicationFrame)
}

inline void ReplicationFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actorreplicationmessages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReplicationFrame::~ReplicationFrame() {
  // @@protoc_insertion_point(destructor:HederaDefinitions.ReplicationFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplicationFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actorreplicationmessages_.~RepeatedPtrField();
}

void ReplicationFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplicationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:HederaDefinitions.ReplicationFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actorreplicationmessages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicationFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .HederaDefinitions.ActorReplicationMessage actorReplicationMessages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actorreplicationmessages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplicationFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HederaDefinitions.ReplicationFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HederaDefinitions.ActorReplicationMessage actorReplicationMessages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actorreplicationmessages_size()); i < n; i++) {
    const auto& repfield = this->_internal_actorreplicationmessages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HederaDefinitions.ReplicationFrame)
  return target;
}

size_t ReplicationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HederaDefinitions.ReplicationFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HederaDefinitions.ActorReplicationMessage actorReplicationMessages = 1;
  total_size += 1UL * this->_internal_actorreplicationmessages_size();
  for (const auto& msg : this->_impl_.actorreplicationmessages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplicationFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplicationFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplicationFrame::GetClassData() const { return &_class_data_; }


void ReplicationFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplicationFrame*>(&to_msg);
  auto& from = static_cast<const ReplicationFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HederaDefinitions.ReplicationFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actorreplicationmessages_.MergeFrom(from._impl_.actorreplicationmessages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplicationFrame::CopyFrom(const ReplicationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HederaDefinitions.ReplicationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationFrame::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.actorreplicationmessages_))
    return false;
  return true;
}

void ReplicationFrame::InternalSwap(ReplicationFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actorreplicationmessages_.InternalSwap(&other->_impl_.actorreplicationmessages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_definitions_2eproto_getter, &descriptor_table_definitions_2eproto_once,
      file_level_metadata_definitions_2eproto[37]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace HederaDefinitions
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FRotator*
Arena::CreateMaybeMessage< ::HederaDefinitions::FRotator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FRotator >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FVector*
Arena::CreateMaybeMessage< ::HederaDefinitions::FVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FVector >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::ReplicatedActorReference*
Arena::CreateMaybeMessage< ::HederaDefinitions::ReplicatedActorReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::ReplicatedActorReference >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::NonReplicatedObjectReference*
Arena::CreateMaybeMessage< ::HederaDefinitions::NonReplicatedObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::NonReplicatedObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FName*
Arena::CreateMaybeMessage< ::HederaDefinitions::FName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FName >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FEnvironmentalEffectInfo*
Arena::CreateMaybeMessage< ::HederaDefinitions::FEnvironmentalEffectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FEnvironmentalEffectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FAttributeDefinitionDefault*
Arena::CreateMaybeMessage< ::HederaDefinitions::FAttributeDefinitionDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FAttributeDefinitionDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FAttributeScalarParam*
Arena::CreateMaybeMessage< ::HederaDefinitions::FAttributeScalarParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FAttributeScalarParam >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FScreenParticleModifier*
Arena::CreateMaybeMessage< ::HederaDefinitions::FScreenParticleModifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FScreenParticleModifier >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FInteractionIconWithOverrides*
Arena::CreateMaybeMessage< ::HederaDefinitions::FInteractionIconWithOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FInteractionIconWithOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FVector2D*
Arena::CreateMaybeMessage< ::HederaDefinitions::FVector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FVector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FScreenParticleScalarParamOverTime*
Arena::CreateMaybeMessage< ::HederaDefinitions::FScreenParticleScalarParamOverTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FScreenParticleScalarParamOverTime >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FScreenParticleVectorParamOverTime*
Arena::CreateMaybeMessage< ::HederaDefinitions::FScreenParticleVectorParamOverTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FScreenParticleVectorParamOverTime >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FScreenParticleParamOverTime*
Arena::CreateMaybeMessage< ::HederaDefinitions::FScreenParticleParamOverTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FScreenParticleParamOverTime >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FScreenParticleInitParams*
Arena::CreateMaybeMessage< ::HederaDefinitions::FScreenParticleInitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FScreenParticleInitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedDamageScreenParticle*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedDamageScreenParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedDamageScreenParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedProgressBarData*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedProgressBarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedProgressBarData >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FCameraViewData*
Arena::CreateMaybeMessage< ::HederaDefinitions::FCameraViewData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FCameraViewData >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FActorSelectionDataContainer*
Arena::CreateMaybeMessage< ::HederaDefinitions::FActorSelectionDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FActorSelectionDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::APoplarPlayerController*
Arena::CreateMaybeMessage< ::HederaDefinitions::APoplarPlayerController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::APoplarPlayerController >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FUniqueID*
Arena::CreateMaybeMessage< ::HederaDefinitions::FUniqueID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FUniqueID >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FCurrencyState*
Arena::CreateMaybeMessage< ::HederaDefinitions::FCurrencyState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FCurrencyState >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FResourcePoolReference*
Arena::CreateMaybeMessage< ::HederaDefinitions::FResourcePoolReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FResourcePoolReference >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedNounAttributeState*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedNounAttributeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedNounAttributeState >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FWeaponDefinitionData*
Arena::CreateMaybeMessage< ::HederaDefinitions::FWeaponDefinitionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FWeaponDefinitionData >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedStandInGear*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedStandInGear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedStandInGear >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FTrackedSkillState*
Arena::CreateMaybeMessage< ::HederaDefinitions::FTrackedSkillState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FTrackedSkillState >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FManagedActorCountData*
Arena::CreateMaybeMessage< ::HederaDefinitions::FManagedActorCountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FManagedActorCountData >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedPerkItem*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedPerkItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedPerkItem >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FAugInstance*
Arena::CreateMaybeMessage< ::HederaDefinitions::FAugInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FAugInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FAugCategoryInstance*
Arena::CreateMaybeMessage< ::HederaDefinitions::FAugCategoryInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FAugCategoryInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FAugSetInstance*
Arena::CreateMaybeMessage< ::HederaDefinitions::FAugSetInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FAugSetInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedBehaviorConsumerState*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedBehaviorConsumerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedBehaviorConsumerState >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FReplicatedBehaviorEvent*
Arena::CreateMaybeMessage< ::HederaDefinitions::FReplicatedBehaviorEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FReplicatedBehaviorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::FCinematicModeOptions*
Arena::CreateMaybeMessage< ::HederaDefinitions::FCinematicModeOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::FCinematicModeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::APoplarPlayerReplicationInfo*
Arena::CreateMaybeMessage< ::HederaDefinitions::APoplarPlayerReplicationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::APoplarPlayerReplicationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::ActorReplicationMessage*
Arena::CreateMaybeMessage< ::HederaDefinitions::ActorReplicationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::ActorReplicationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::HederaDefinitions::ReplicationFrame*
Arena::CreateMaybeMessage< ::HederaDefinitions::ReplicationFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HederaDefinitions::ReplicationFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
