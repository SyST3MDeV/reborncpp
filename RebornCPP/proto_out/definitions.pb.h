// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definitions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_definitions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_definitions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_definitions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_definitions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_definitions_2eproto;
namespace HederaDefinitions {
class APoplarPlayerController;
struct APoplarPlayerControllerDefaultTypeInternal;
extern APoplarPlayerControllerDefaultTypeInternal _APoplarPlayerController_default_instance_;
class APoplarPlayerReplicationInfo;
struct APoplarPlayerReplicationInfoDefaultTypeInternal;
extern APoplarPlayerReplicationInfoDefaultTypeInternal _APoplarPlayerReplicationInfo_default_instance_;
class ActorReplicationMessage;
struct ActorReplicationMessageDefaultTypeInternal;
extern ActorReplicationMessageDefaultTypeInternal _ActorReplicationMessage_default_instance_;
class FActorSelectionDataContainer;
struct FActorSelectionDataContainerDefaultTypeInternal;
extern FActorSelectionDataContainerDefaultTypeInternal _FActorSelectionDataContainer_default_instance_;
class FAttributeDefinitionDefault;
struct FAttributeDefinitionDefaultDefaultTypeInternal;
extern FAttributeDefinitionDefaultDefaultTypeInternal _FAttributeDefinitionDefault_default_instance_;
class FAttributeScalarParam;
struct FAttributeScalarParamDefaultTypeInternal;
extern FAttributeScalarParamDefaultTypeInternal _FAttributeScalarParam_default_instance_;
class FAugCategoryInstance;
struct FAugCategoryInstanceDefaultTypeInternal;
extern FAugCategoryInstanceDefaultTypeInternal _FAugCategoryInstance_default_instance_;
class FAugInstance;
struct FAugInstanceDefaultTypeInternal;
extern FAugInstanceDefaultTypeInternal _FAugInstance_default_instance_;
class FAugSetInstance;
struct FAugSetInstanceDefaultTypeInternal;
extern FAugSetInstanceDefaultTypeInternal _FAugSetInstance_default_instance_;
class FCameraViewData;
struct FCameraViewDataDefaultTypeInternal;
extern FCameraViewDataDefaultTypeInternal _FCameraViewData_default_instance_;
class FCinematicModeOptions;
struct FCinematicModeOptionsDefaultTypeInternal;
extern FCinematicModeOptionsDefaultTypeInternal _FCinematicModeOptions_default_instance_;
class FCurrencyState;
struct FCurrencyStateDefaultTypeInternal;
extern FCurrencyStateDefaultTypeInternal _FCurrencyState_default_instance_;
class FEnvironmentalEffectInfo;
struct FEnvironmentalEffectInfoDefaultTypeInternal;
extern FEnvironmentalEffectInfoDefaultTypeInternal _FEnvironmentalEffectInfo_default_instance_;
class FInteractionIconWithOverrides;
struct FInteractionIconWithOverridesDefaultTypeInternal;
extern FInteractionIconWithOverridesDefaultTypeInternal _FInteractionIconWithOverrides_default_instance_;
class FManagedActorCountData;
struct FManagedActorCountDataDefaultTypeInternal;
extern FManagedActorCountDataDefaultTypeInternal _FManagedActorCountData_default_instance_;
class FName;
struct FNameDefaultTypeInternal;
extern FNameDefaultTypeInternal _FName_default_instance_;
class FReplicatedBehaviorConsumerState;
struct FReplicatedBehaviorConsumerStateDefaultTypeInternal;
extern FReplicatedBehaviorConsumerStateDefaultTypeInternal _FReplicatedBehaviorConsumerState_default_instance_;
class FReplicatedBehaviorEvent;
struct FReplicatedBehaviorEventDefaultTypeInternal;
extern FReplicatedBehaviorEventDefaultTypeInternal _FReplicatedBehaviorEvent_default_instance_;
class FReplicatedDamageScreenParticle;
struct FReplicatedDamageScreenParticleDefaultTypeInternal;
extern FReplicatedDamageScreenParticleDefaultTypeInternal _FReplicatedDamageScreenParticle_default_instance_;
class FReplicatedNounAttributeState;
struct FReplicatedNounAttributeStateDefaultTypeInternal;
extern FReplicatedNounAttributeStateDefaultTypeInternal _FReplicatedNounAttributeState_default_instance_;
class FReplicatedPerkItem;
struct FReplicatedPerkItemDefaultTypeInternal;
extern FReplicatedPerkItemDefaultTypeInternal _FReplicatedPerkItem_default_instance_;
class FReplicatedProgressBarData;
struct FReplicatedProgressBarDataDefaultTypeInternal;
extern FReplicatedProgressBarDataDefaultTypeInternal _FReplicatedProgressBarData_default_instance_;
class FReplicatedStandInGear;
struct FReplicatedStandInGearDefaultTypeInternal;
extern FReplicatedStandInGearDefaultTypeInternal _FReplicatedStandInGear_default_instance_;
class FResourcePoolReference;
struct FResourcePoolReferenceDefaultTypeInternal;
extern FResourcePoolReferenceDefaultTypeInternal _FResourcePoolReference_default_instance_;
class FRotator;
struct FRotatorDefaultTypeInternal;
extern FRotatorDefaultTypeInternal _FRotator_default_instance_;
class FScreenParticleInitParams;
struct FScreenParticleInitParamsDefaultTypeInternal;
extern FScreenParticleInitParamsDefaultTypeInternal _FScreenParticleInitParams_default_instance_;
class FScreenParticleModifier;
struct FScreenParticleModifierDefaultTypeInternal;
extern FScreenParticleModifierDefaultTypeInternal _FScreenParticleModifier_default_instance_;
class FScreenParticleParamOverTime;
struct FScreenParticleParamOverTimeDefaultTypeInternal;
extern FScreenParticleParamOverTimeDefaultTypeInternal _FScreenParticleParamOverTime_default_instance_;
class FScreenParticleScalarParamOverTime;
struct FScreenParticleScalarParamOverTimeDefaultTypeInternal;
extern FScreenParticleScalarParamOverTimeDefaultTypeInternal _FScreenParticleScalarParamOverTime_default_instance_;
class FScreenParticleVectorParamOverTime;
struct FScreenParticleVectorParamOverTimeDefaultTypeInternal;
extern FScreenParticleVectorParamOverTimeDefaultTypeInternal _FScreenParticleVectorParamOverTime_default_instance_;
class FTrackedSkillState;
struct FTrackedSkillStateDefaultTypeInternal;
extern FTrackedSkillStateDefaultTypeInternal _FTrackedSkillState_default_instance_;
class FUniqueID;
struct FUniqueIDDefaultTypeInternal;
extern FUniqueIDDefaultTypeInternal _FUniqueID_default_instance_;
class FVector;
struct FVectorDefaultTypeInternal;
extern FVectorDefaultTypeInternal _FVector_default_instance_;
class FVector2D;
struct FVector2DDefaultTypeInternal;
extern FVector2DDefaultTypeInternal _FVector2D_default_instance_;
class FWeaponDefinitionData;
struct FWeaponDefinitionDataDefaultTypeInternal;
extern FWeaponDefinitionDataDefaultTypeInternal _FWeaponDefinitionData_default_instance_;
class NonReplicatedObjectReference;
struct NonReplicatedObjectReferenceDefaultTypeInternal;
extern NonReplicatedObjectReferenceDefaultTypeInternal _NonReplicatedObjectReference_default_instance_;
class ReplicatedActorReference;
struct ReplicatedActorReferenceDefaultTypeInternal;
extern ReplicatedActorReferenceDefaultTypeInternal _ReplicatedActorReference_default_instance_;
class ReplicationFrame;
struct ReplicationFrameDefaultTypeInternal;
extern ReplicationFrameDefaultTypeInternal _ReplicationFrame_default_instance_;
}  // namespace HederaDefinitions
PROTOBUF_NAMESPACE_OPEN
template<> ::HederaDefinitions::APoplarPlayerController* Arena::CreateMaybeMessage<::HederaDefinitions::APoplarPlayerController>(Arena*);
template<> ::HederaDefinitions::APoplarPlayerReplicationInfo* Arena::CreateMaybeMessage<::HederaDefinitions::APoplarPlayerReplicationInfo>(Arena*);
template<> ::HederaDefinitions::ActorReplicationMessage* Arena::CreateMaybeMessage<::HederaDefinitions::ActorReplicationMessage>(Arena*);
template<> ::HederaDefinitions::FActorSelectionDataContainer* Arena::CreateMaybeMessage<::HederaDefinitions::FActorSelectionDataContainer>(Arena*);
template<> ::HederaDefinitions::FAttributeDefinitionDefault* Arena::CreateMaybeMessage<::HederaDefinitions::FAttributeDefinitionDefault>(Arena*);
template<> ::HederaDefinitions::FAttributeScalarParam* Arena::CreateMaybeMessage<::HederaDefinitions::FAttributeScalarParam>(Arena*);
template<> ::HederaDefinitions::FAugCategoryInstance* Arena::CreateMaybeMessage<::HederaDefinitions::FAugCategoryInstance>(Arena*);
template<> ::HederaDefinitions::FAugInstance* Arena::CreateMaybeMessage<::HederaDefinitions::FAugInstance>(Arena*);
template<> ::HederaDefinitions::FAugSetInstance* Arena::CreateMaybeMessage<::HederaDefinitions::FAugSetInstance>(Arena*);
template<> ::HederaDefinitions::FCameraViewData* Arena::CreateMaybeMessage<::HederaDefinitions::FCameraViewData>(Arena*);
template<> ::HederaDefinitions::FCinematicModeOptions* Arena::CreateMaybeMessage<::HederaDefinitions::FCinematicModeOptions>(Arena*);
template<> ::HederaDefinitions::FCurrencyState* Arena::CreateMaybeMessage<::HederaDefinitions::FCurrencyState>(Arena*);
template<> ::HederaDefinitions::FEnvironmentalEffectInfo* Arena::CreateMaybeMessage<::HederaDefinitions::FEnvironmentalEffectInfo>(Arena*);
template<> ::HederaDefinitions::FInteractionIconWithOverrides* Arena::CreateMaybeMessage<::HederaDefinitions::FInteractionIconWithOverrides>(Arena*);
template<> ::HederaDefinitions::FManagedActorCountData* Arena::CreateMaybeMessage<::HederaDefinitions::FManagedActorCountData>(Arena*);
template<> ::HederaDefinitions::FName* Arena::CreateMaybeMessage<::HederaDefinitions::FName>(Arena*);
template<> ::HederaDefinitions::FReplicatedBehaviorConsumerState* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedBehaviorConsumerState>(Arena*);
template<> ::HederaDefinitions::FReplicatedBehaviorEvent* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedBehaviorEvent>(Arena*);
template<> ::HederaDefinitions::FReplicatedDamageScreenParticle* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedDamageScreenParticle>(Arena*);
template<> ::HederaDefinitions::FReplicatedNounAttributeState* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedNounAttributeState>(Arena*);
template<> ::HederaDefinitions::FReplicatedPerkItem* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedPerkItem>(Arena*);
template<> ::HederaDefinitions::FReplicatedProgressBarData* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedProgressBarData>(Arena*);
template<> ::HederaDefinitions::FReplicatedStandInGear* Arena::CreateMaybeMessage<::HederaDefinitions::FReplicatedStandInGear>(Arena*);
template<> ::HederaDefinitions::FResourcePoolReference* Arena::CreateMaybeMessage<::HederaDefinitions::FResourcePoolReference>(Arena*);
template<> ::HederaDefinitions::FRotator* Arena::CreateMaybeMessage<::HederaDefinitions::FRotator>(Arena*);
template<> ::HederaDefinitions::FScreenParticleInitParams* Arena::CreateMaybeMessage<::HederaDefinitions::FScreenParticleInitParams>(Arena*);
template<> ::HederaDefinitions::FScreenParticleModifier* Arena::CreateMaybeMessage<::HederaDefinitions::FScreenParticleModifier>(Arena*);
template<> ::HederaDefinitions::FScreenParticleParamOverTime* Arena::CreateMaybeMessage<::HederaDefinitions::FScreenParticleParamOverTime>(Arena*);
template<> ::HederaDefinitions::FScreenParticleScalarParamOverTime* Arena::CreateMaybeMessage<::HederaDefinitions::FScreenParticleScalarParamOverTime>(Arena*);
template<> ::HederaDefinitions::FScreenParticleVectorParamOverTime* Arena::CreateMaybeMessage<::HederaDefinitions::FScreenParticleVectorParamOverTime>(Arena*);
template<> ::HederaDefinitions::FTrackedSkillState* Arena::CreateMaybeMessage<::HederaDefinitions::FTrackedSkillState>(Arena*);
template<> ::HederaDefinitions::FUniqueID* Arena::CreateMaybeMessage<::HederaDefinitions::FUniqueID>(Arena*);
template<> ::HederaDefinitions::FVector* Arena::CreateMaybeMessage<::HederaDefinitions::FVector>(Arena*);
template<> ::HederaDefinitions::FVector2D* Arena::CreateMaybeMessage<::HederaDefinitions::FVector2D>(Arena*);
template<> ::HederaDefinitions::FWeaponDefinitionData* Arena::CreateMaybeMessage<::HederaDefinitions::FWeaponDefinitionData>(Arena*);
template<> ::HederaDefinitions::NonReplicatedObjectReference* Arena::CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(Arena*);
template<> ::HederaDefinitions::ReplicatedActorReference* Arena::CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(Arena*);
template<> ::HederaDefinitions::ReplicationFrame* Arena::CreateMaybeMessage<::HederaDefinitions::ReplicationFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HederaDefinitions {

enum ActorReplicationMessage_ActorType : int {
  ActorReplicationMessage_ActorType_ACTOR_TYPE_ERR = 0,
  ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_CONTROLLER = 1,
  ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_STATE_INFO = 2,
  ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_REPLICATION_INFO = 3,
  ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_GAME_REPLICATION_INFO = 4,
  ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_PAWN = 5
};
bool ActorReplicationMessage_ActorType_IsValid(int value);
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage_ActorType_ActorType_MIN = ActorReplicationMessage_ActorType_ACTOR_TYPE_ERR;
constexpr ActorReplicationMessage_ActorType ActorReplicationMessage_ActorType_ActorType_MAX = ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_PAWN;
constexpr int ActorReplicationMessage_ActorType_ActorType_ARRAYSIZE = ActorReplicationMessage_ActorType_ActorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorReplicationMessage_ActorType_descriptor();
template<typename T>
inline const std::string& ActorReplicationMessage_ActorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorReplicationMessage_ActorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorReplicationMessage_ActorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorReplicationMessage_ActorType_descriptor(), enum_t_value);
}
inline bool ActorReplicationMessage_ActorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActorReplicationMessage_ActorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorReplicationMessage_ActorType>(
    ActorReplicationMessage_ActorType_descriptor(), name, value);
}
// ===================================================================

class FRotator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FRotator) */ {
 public:
  inline FRotator() : FRotator(nullptr) {}
  ~FRotator() override;
  explicit PROTOBUF_CONSTEXPR FRotator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRotator(const FRotator& from);
  FRotator(FRotator&& from) noexcept
    : FRotator() {
    *this = ::std::move(from);
  }

  inline FRotator& operator=(const FRotator& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRotator& operator=(FRotator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRotator& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRotator* internal_default_instance() {
    return reinterpret_cast<const FRotator*>(
               &_FRotator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FRotator& a, FRotator& b) {
    a.Swap(&b);
  }
  inline void Swap(FRotator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRotator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRotator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRotator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRotator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRotator& from) {
    FRotator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRotator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FRotator";
  }
  protected:
  explicit FRotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 1,
    kYawFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // required int32 Pitch = 1;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  int32_t pitch() const;
  void set_pitch(int32_t value);
  private:
  int32_t _internal_pitch() const;
  void _internal_set_pitch(int32_t value);
  public:

  // required int32 Yaw = 2;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  int32_t yaw() const;
  void set_yaw(int32_t value);
  private:
  int32_t _internal_yaw() const;
  void _internal_set_yaw(int32_t value);
  public:

  // required int32 Roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  int32_t roll() const;
  void set_roll(int32_t value);
  private:
  int32_t _internal_roll() const;
  void _internal_set_roll(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FRotator)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t pitch_;
    int32_t yaw_;
    int32_t roll_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FVector) */ {
 public:
  inline FVector() : FVector(nullptr) {}
  ~FVector() override;
  explicit PROTOBUF_CONSTEXPR FVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FVector(const FVector& from);
  FVector(FVector&& from) noexcept
    : FVector() {
    *this = ::std::move(from);
  }

  inline FVector& operator=(const FVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVector& operator=(FVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const FVector* internal_default_instance() {
    return reinterpret_cast<const FVector*>(
               &_FVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FVector& a, FVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FVector& from) {
    FVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FVector";
  }
  protected:
  explicit FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float X = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float Y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float Z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FVector)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class ReplicatedActorReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.ReplicatedActorReference) */ {
 public:
  inline ReplicatedActorReference() : ReplicatedActorReference(nullptr) {}
  ~ReplicatedActorReference() override;
  explicit PROTOBUF_CONSTEXPR ReplicatedActorReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicatedActorReference(const ReplicatedActorReference& from);
  ReplicatedActorReference(ReplicatedActorReference&& from) noexcept
    : ReplicatedActorReference() {
    *this = ::std::move(from);
  }

  inline ReplicatedActorReference& operator=(const ReplicatedActorReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicatedActorReference& operator=(ReplicatedActorReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicatedActorReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicatedActorReference* internal_default_instance() {
    return reinterpret_cast<const ReplicatedActorReference*>(
               &_ReplicatedActorReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReplicatedActorReference& a, ReplicatedActorReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicatedActorReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicatedActorReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicatedActorReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicatedActorReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicatedActorReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicatedActorReference& from) {
    ReplicatedActorReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicatedActorReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.ReplicatedActorReference";
  }
  protected:
  explicit ReplicatedActorReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIDFieldNumber = 1,
  };
  // required uint32 actorID = 1;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  uint32_t actorid() const;
  void set_actorid(uint32_t value);
  private:
  uint32_t _internal_actorid() const;
  void _internal_set_actorid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.ReplicatedActorReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t actorid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class NonReplicatedObjectReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.NonReplicatedObjectReference) */ {
 public:
  inline NonReplicatedObjectReference() : NonReplicatedObjectReference(nullptr) {}
  ~NonReplicatedObjectReference() override;
  explicit PROTOBUF_CONSTEXPR NonReplicatedObjectReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonReplicatedObjectReference(const NonReplicatedObjectReference& from);
  NonReplicatedObjectReference(NonReplicatedObjectReference&& from) noexcept
    : NonReplicatedObjectReference() {
    *this = ::std::move(from);
  }

  inline NonReplicatedObjectReference& operator=(const NonReplicatedObjectReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonReplicatedObjectReference& operator=(NonReplicatedObjectReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonReplicatedObjectReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonReplicatedObjectReference* internal_default_instance() {
    return reinterpret_cast<const NonReplicatedObjectReference*>(
               &_NonReplicatedObjectReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NonReplicatedObjectReference& a, NonReplicatedObjectReference& b) {
    a.Swap(&b);
  }
  inline void Swap(NonReplicatedObjectReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonReplicatedObjectReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonReplicatedObjectReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonReplicatedObjectReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NonReplicatedObjectReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NonReplicatedObjectReference& from) {
    NonReplicatedObjectReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonReplicatedObjectReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.NonReplicatedObjectReference";
  }
  protected:
  explicit NonReplicatedObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullNameLookupFieldNumber = 1,
  };
  // required string fullNameLookup = 1;
  bool has_fullnamelookup() const;
  private:
  bool _internal_has_fullnamelookup() const;
  public:
  void clear_fullnamelookup();
  const std::string& fullnamelookup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fullnamelookup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fullnamelookup();
  PROTOBUF_NODISCARD std::string* release_fullnamelookup();
  void set_allocated_fullnamelookup(std::string* fullnamelookup);
  private:
  const std::string& _internal_fullnamelookup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullnamelookup(const std::string& value);
  std::string* _internal_mutable_fullnamelookup();
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.NonReplicatedObjectReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullnamelookup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FName) */ {
 public:
  inline FName() : FName(nullptr) {}
  ~FName() override;
  explicit PROTOBUF_CONSTEXPR FName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FName(const FName& from);
  FName(FName&& from) noexcept
    : FName() {
    *this = ::std::move(from);
  }

  inline FName& operator=(const FName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FName& operator=(FName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FName& default_instance() {
    return *internal_default_instance();
  }
  static inline const FName* internal_default_instance() {
    return reinterpret_cast<const FName*>(
               &_FName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FName& a, FName& b) {
    a.Swap(&b);
  }
  inline void Swap(FName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FName& from) {
    FName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FName";
  }
  protected:
  explicit FName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFNameEntryIdFieldNumber = 1,
    kInstanceNumberFieldNumber = 2,
  };
  // required int32 FNameEntryId = 1;
  bool has_fnameentryid() const;
  private:
  bool _internal_has_fnameentryid() const;
  public:
  void clear_fnameentryid();
  int32_t fnameentryid() const;
  void set_fnameentryid(int32_t value);
  private:
  int32_t _internal_fnameentryid() const;
  void _internal_set_fnameentryid(int32_t value);
  public:

  // required int32 InstanceNumber = 2;
  bool has_instancenumber() const;
  private:
  bool _internal_has_instancenumber() const;
  public:
  void clear_instancenumber();
  int32_t instancenumber() const;
  void set_instancenumber(int32_t value);
  private:
  int32_t _internal_instancenumber() const;
  void _internal_set_instancenumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FName)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t fnameentryid_;
    int32_t instancenumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FEnvironmentalEffectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FEnvironmentalEffectInfo) */ {
 public:
  inline FEnvironmentalEffectInfo() : FEnvironmentalEffectInfo(nullptr) {}
  ~FEnvironmentalEffectInfo() override;
  explicit PROTOBUF_CONSTEXPR FEnvironmentalEffectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FEnvironmentalEffectInfo(const FEnvironmentalEffectInfo& from);
  FEnvironmentalEffectInfo(FEnvironmentalEffectInfo&& from) noexcept
    : FEnvironmentalEffectInfo() {
    *this = ::std::move(from);
  }

  inline FEnvironmentalEffectInfo& operator=(const FEnvironmentalEffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FEnvironmentalEffectInfo& operator=(FEnvironmentalEffectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FEnvironmentalEffectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FEnvironmentalEffectInfo* internal_default_instance() {
    return reinterpret_cast<const FEnvironmentalEffectInfo*>(
               &_FEnvironmentalEffectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FEnvironmentalEffectInfo& a, FEnvironmentalEffectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FEnvironmentalEffectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FEnvironmentalEffectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FEnvironmentalEffectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FEnvironmentalEffectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FEnvironmentalEffectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FEnvironmentalEffectInfo& from) {
    FEnvironmentalEffectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FEnvironmentalEffectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FEnvironmentalEffectInfo";
  }
  protected:
  explicit FEnvironmentalEffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIDFieldNumber = 1,
    kAuxBusVolumeFieldNumber = 2,
    kOutputBusVolumeFieldNumber = 3,
  };
  // required int32 EffectID = 1;
  bool has_effectid() const;
  private:
  bool _internal_has_effectid() const;
  public:
  void clear_effectid();
  int32_t effectid() const;
  void set_effectid(int32_t value);
  private:
  int32_t _internal_effectid() const;
  void _internal_set_effectid(int32_t value);
  public:

  // required float AuxBusVolume = 2;
  bool has_auxbusvolume() const;
  private:
  bool _internal_has_auxbusvolume() const;
  public:
  void clear_auxbusvolume();
  float auxbusvolume() const;
  void set_auxbusvolume(float value);
  private:
  float _internal_auxbusvolume() const;
  void _internal_set_auxbusvolume(float value);
  public:

  // required float OutputBusVolume = 3;
  bool has_outputbusvolume() const;
  private:
  bool _internal_has_outputbusvolume() const;
  public:
  void clear_outputbusvolume();
  float outputbusvolume() const;
  void set_outputbusvolume(float value);
  private:
  float _internal_outputbusvolume() const;
  void _internal_set_outputbusvolume(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FEnvironmentalEffectInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t effectid_;
    float auxbusvolume_;
    float outputbusvolume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FAttributeDefinitionDefault final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FAttributeDefinitionDefault) */ {
 public:
  inline FAttributeDefinitionDefault() : FAttributeDefinitionDefault(nullptr) {}
  ~FAttributeDefinitionDefault() override;
  explicit PROTOBUF_CONSTEXPR FAttributeDefinitionDefault(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAttributeDefinitionDefault(const FAttributeDefinitionDefault& from);
  FAttributeDefinitionDefault(FAttributeDefinitionDefault&& from) noexcept
    : FAttributeDefinitionDefault() {
    *this = ::std::move(from);
  }

  inline FAttributeDefinitionDefault& operator=(const FAttributeDefinitionDefault& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAttributeDefinitionDefault& operator=(FAttributeDefinitionDefault&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAttributeDefinitionDefault& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAttributeDefinitionDefault* internal_default_instance() {
    return reinterpret_cast<const FAttributeDefinitionDefault*>(
               &_FAttributeDefinitionDefault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FAttributeDefinitionDefault& a, FAttributeDefinitionDefault& b) {
    a.Swap(&b);
  }
  inline void Swap(FAttributeDefinitionDefault* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAttributeDefinitionDefault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FAttributeDefinitionDefault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FAttributeDefinitionDefault>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAttributeDefinitionDefault& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FAttributeDefinitionDefault& from) {
    FAttributeDefinitionDefault::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAttributeDefinitionDefault* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FAttributeDefinitionDefault";
  }
  protected:
  explicit FAttributeDefinitionDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kDefaultValueFieldNumber = 2,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference Attribute = 1;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::HederaDefinitions::NonReplicatedObjectReference& attribute() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_attribute();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_attribute();
  void set_allocated_attribute(::HederaDefinitions::NonReplicatedObjectReference* attribute);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_attribute() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::HederaDefinitions::NonReplicatedObjectReference* attribute);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_attribute();

  // required float DefaultValue = 2;
  bool has_defaultvalue() const;
  private:
  bool _internal_has_defaultvalue() const;
  public:
  void clear_defaultvalue();
  float defaultvalue() const;
  void set_defaultvalue(float value);
  private:
  float _internal_defaultvalue() const;
  void _internal_set_defaultvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FAttributeDefinitionDefault)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* attribute_;
    float defaultvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FAttributeScalarParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FAttributeScalarParam) */ {
 public:
  inline FAttributeScalarParam() : FAttributeScalarParam(nullptr) {}
  ~FAttributeScalarParam() override;
  explicit PROTOBUF_CONSTEXPR FAttributeScalarParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAttributeScalarParam(const FAttributeScalarParam& from);
  FAttributeScalarParam(FAttributeScalarParam&& from) noexcept
    : FAttributeScalarParam() {
    *this = ::std::move(from);
  }

  inline FAttributeScalarParam& operator=(const FAttributeScalarParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAttributeScalarParam& operator=(FAttributeScalarParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAttributeScalarParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAttributeScalarParam* internal_default_instance() {
    return reinterpret_cast<const FAttributeScalarParam*>(
               &_FAttributeScalarParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FAttributeScalarParam& a, FAttributeScalarParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FAttributeScalarParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAttributeScalarParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FAttributeScalarParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FAttributeScalarParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAttributeScalarParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FAttributeScalarParam& from) {
    FAttributeScalarParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAttributeScalarParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FAttributeScalarParam";
  }
  protected:
  explicit FAttributeScalarParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kInputFieldNumber = 4,
    kMinInputFieldNumber = 5,
    kMaxInputFieldNumber = 6,
    kMinOutputFieldNumber = 7,
    kMaxOutputFieldNumber = 8,
    kBVectorParamFieldNumber = 2,
    kBClampInputFieldNumber = 3,
    kScalarParamOperandFieldNumber = 9,
    kCurrentValueFieldNumber = 10,
  };
  // required .HederaDefinitions.FName ParamName = 1;
  bool has_paramname() const;
  private:
  bool _internal_has_paramname() const;
  public:
  void clear_paramname();
  const ::HederaDefinitions::FName& paramname() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_paramname();
  ::HederaDefinitions::FName* mutable_paramname();
  void set_allocated_paramname(::HederaDefinitions::FName* paramname);
  private:
  const ::HederaDefinitions::FName& _internal_paramname() const;
  ::HederaDefinitions::FName* _internal_mutable_paramname();
  public:
  void unsafe_arena_set_allocated_paramname(
      ::HederaDefinitions::FName* paramname);
  ::HederaDefinitions::FName* unsafe_arena_release_paramname();

  // required .HederaDefinitions.FAttributeDefinitionDefault Input = 4;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::HederaDefinitions::FAttributeDefinitionDefault& input() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAttributeDefinitionDefault* release_input();
  ::HederaDefinitions::FAttributeDefinitionDefault* mutable_input();
  void set_allocated_input(::HederaDefinitions::FAttributeDefinitionDefault* input);
  private:
  const ::HederaDefinitions::FAttributeDefinitionDefault& _internal_input() const;
  ::HederaDefinitions::FAttributeDefinitionDefault* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::HederaDefinitions::FAttributeDefinitionDefault* input);
  ::HederaDefinitions::FAttributeDefinitionDefault* unsafe_arena_release_input();

  // required .HederaDefinitions.FAttributeDefinitionDefault MinInput = 5;
  bool has_mininput() const;
  private:
  bool _internal_has_mininput() const;
  public:
  void clear_mininput();
  const ::HederaDefinitions::FAttributeDefinitionDefault& mininput() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAttributeDefinitionDefault* release_mininput();
  ::HederaDefinitions::FAttributeDefinitionDefault* mutable_mininput();
  void set_allocated_mininput(::HederaDefinitions::FAttributeDefinitionDefault* mininput);
  private:
  const ::HederaDefinitions::FAttributeDefinitionDefault& _internal_mininput() const;
  ::HederaDefinitions::FAttributeDefinitionDefault* _internal_mutable_mininput();
  public:
  void unsafe_arena_set_allocated_mininput(
      ::HederaDefinitions::FAttributeDefinitionDefault* mininput);
  ::HederaDefinitions::FAttributeDefinitionDefault* unsafe_arena_release_mininput();

  // required .HederaDefinitions.FAttributeDefinitionDefault MaxInput = 6;
  bool has_maxinput() const;
  private:
  bool _internal_has_maxinput() const;
  public:
  void clear_maxinput();
  const ::HederaDefinitions::FAttributeDefinitionDefault& maxinput() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAttributeDefinitionDefault* release_maxinput();
  ::HederaDefinitions::FAttributeDefinitionDefault* mutable_maxinput();
  void set_allocated_maxinput(::HederaDefinitions::FAttributeDefinitionDefault* maxinput);
  private:
  const ::HederaDefinitions::FAttributeDefinitionDefault& _internal_maxinput() const;
  ::HederaDefinitions::FAttributeDefinitionDefault* _internal_mutable_maxinput();
  public:
  void unsafe_arena_set_allocated_maxinput(
      ::HederaDefinitions::FAttributeDefinitionDefault* maxinput);
  ::HederaDefinitions::FAttributeDefinitionDefault* unsafe_arena_release_maxinput();

  // required .HederaDefinitions.FAttributeDefinitionDefault MinOutput = 7;
  bool has_minoutput() const;
  private:
  bool _internal_has_minoutput() const;
  public:
  void clear_minoutput();
  const ::HederaDefinitions::FAttributeDefinitionDefault& minoutput() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAttributeDefinitionDefault* release_minoutput();
  ::HederaDefinitions::FAttributeDefinitionDefault* mutable_minoutput();
  void set_allocated_minoutput(::HederaDefinitions::FAttributeDefinitionDefault* minoutput);
  private:
  const ::HederaDefinitions::FAttributeDefinitionDefault& _internal_minoutput() const;
  ::HederaDefinitions::FAttributeDefinitionDefault* _internal_mutable_minoutput();
  public:
  void unsafe_arena_set_allocated_minoutput(
      ::HederaDefinitions::FAttributeDefinitionDefault* minoutput);
  ::HederaDefinitions::FAttributeDefinitionDefault* unsafe_arena_release_minoutput();

  // required .HederaDefinitions.FAttributeDefinitionDefault MaxOutput = 8;
  bool has_maxoutput() const;
  private:
  bool _internal_has_maxoutput() const;
  public:
  void clear_maxoutput();
  const ::HederaDefinitions::FAttributeDefinitionDefault& maxoutput() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAttributeDefinitionDefault* release_maxoutput();
  ::HederaDefinitions::FAttributeDefinitionDefault* mutable_maxoutput();
  void set_allocated_maxoutput(::HederaDefinitions::FAttributeDefinitionDefault* maxoutput);
  private:
  const ::HederaDefinitions::FAttributeDefinitionDefault& _internal_maxoutput() const;
  ::HederaDefinitions::FAttributeDefinitionDefault* _internal_mutable_maxoutput();
  public:
  void unsafe_arena_set_allocated_maxoutput(
      ::HederaDefinitions::FAttributeDefinitionDefault* maxoutput);
  ::HederaDefinitions::FAttributeDefinitionDefault* unsafe_arena_release_maxoutput();

  // required bool bVectorParam = 2;
  bool has_bvectorparam() const;
  private:
  bool _internal_has_bvectorparam() const;
  public:
  void clear_bvectorparam();
  bool bvectorparam() const;
  void set_bvectorparam(bool value);
  private:
  bool _internal_bvectorparam() const;
  void _internal_set_bvectorparam(bool value);
  public:

  // required bool bClampInput = 3;
  bool has_bclampinput() const;
  private:
  bool _internal_has_bclampinput() const;
  public:
  void clear_bclampinput();
  bool bclampinput() const;
  void set_bclampinput(bool value);
  private:
  bool _internal_bclampinput() const;
  void _internal_set_bclampinput(bool value);
  public:

  // required int32 ScalarParamOperand = 9;
  bool has_scalarparamoperand() const;
  private:
  bool _internal_has_scalarparamoperand() const;
  public:
  void clear_scalarparamoperand();
  int32_t scalarparamoperand() const;
  void set_scalarparamoperand(int32_t value);
  private:
  int32_t _internal_scalarparamoperand() const;
  void _internal_set_scalarparamoperand(int32_t value);
  public:

  // required float CurrentValue = 10;
  bool has_currentvalue() const;
  private:
  bool _internal_has_currentvalue() const;
  public:
  void clear_currentvalue();
  float currentvalue() const;
  void set_currentvalue(float value);
  private:
  float _internal_currentvalue() const;
  void _internal_set_currentvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FAttributeScalarParam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::FName* paramname_;
    ::HederaDefinitions::FAttributeDefinitionDefault* input_;
    ::HederaDefinitions::FAttributeDefinitionDefault* mininput_;
    ::HederaDefinitions::FAttributeDefinitionDefault* maxinput_;
    ::HederaDefinitions::FAttributeDefinitionDefault* minoutput_;
    ::HederaDefinitions::FAttributeDefinitionDefault* maxoutput_;
    bool bvectorparam_;
    bool bclampinput_;
    int32_t scalarparamoperand_;
    float currentvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FScreenParticleModifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FScreenParticleModifier) */ {
 public:
  inline FScreenParticleModifier() : FScreenParticleModifier(nullptr) {}
  ~FScreenParticleModifier() override;
  explicit PROTOBUF_CONSTEXPR FScreenParticleModifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FScreenParticleModifier(const FScreenParticleModifier& from);
  FScreenParticleModifier(FScreenParticleModifier&& from) noexcept
    : FScreenParticleModifier() {
    *this = ::std::move(from);
  }

  inline FScreenParticleModifier& operator=(const FScreenParticleModifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline FScreenParticleModifier& operator=(FScreenParticleModifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FScreenParticleModifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const FScreenParticleModifier* internal_default_instance() {
    return reinterpret_cast<const FScreenParticleModifier*>(
               &_FScreenParticleModifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FScreenParticleModifier& a, FScreenParticleModifier& b) {
    a.Swap(&b);
  }
  inline void Swap(FScreenParticleModifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FScreenParticleModifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FScreenParticleModifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FScreenParticleModifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FScreenParticleModifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FScreenParticleModifier& from) {
    FScreenParticleModifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FScreenParticleModifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FScreenParticleModifier";
  }
  protected:
  explicit FScreenParticleModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarParamsFieldNumber = 1,
    kCachedValueFieldNumber = 2,
  };
  // repeated .HederaDefinitions.FAttributeScalarParam ScalarParams = 1;
  int scalarparams_size() const;
  private:
  int _internal_scalarparams_size() const;
  public:
  void clear_scalarparams();
  ::HederaDefinitions::FAttributeScalarParam* mutable_scalarparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAttributeScalarParam >*
      mutable_scalarparams();
  private:
  const ::HederaDefinitions::FAttributeScalarParam& _internal_scalarparams(int index) const;
  ::HederaDefinitions::FAttributeScalarParam* _internal_add_scalarparams();
  public:
  const ::HederaDefinitions::FAttributeScalarParam& scalarparams(int index) const;
  ::HederaDefinitions::FAttributeScalarParam* add_scalarparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAttributeScalarParam >&
      scalarparams() const;

  // required float CachedValue = 2;
  bool has_cachedvalue() const;
  private:
  bool _internal_has_cachedvalue() const;
  public:
  void clear_cachedvalue();
  float cachedvalue() const;
  void set_cachedvalue(float value);
  private:
  float _internal_cachedvalue() const;
  void _internal_set_cachedvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FScreenParticleModifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAttributeScalarParam > scalarparams_;
    float cachedvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FInteractionIconWithOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FInteractionIconWithOverrides) */ {
 public:
  inline FInteractionIconWithOverrides() : FInteractionIconWithOverrides(nullptr) {}
  ~FInteractionIconWithOverrides() override;
  explicit PROTOBUF_CONSTEXPR FInteractionIconWithOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FInteractionIconWithOverrides(const FInteractionIconWithOverrides& from);
  FInteractionIconWithOverrides(FInteractionIconWithOverrides&& from) noexcept
    : FInteractionIconWithOverrides() {
    *this = ::std::move(from);
  }

  inline FInteractionIconWithOverrides& operator=(const FInteractionIconWithOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline FInteractionIconWithOverrides& operator=(FInteractionIconWithOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FInteractionIconWithOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const FInteractionIconWithOverrides* internal_default_instance() {
    return reinterpret_cast<const FInteractionIconWithOverrides*>(
               &_FInteractionIconWithOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FInteractionIconWithOverrides& a, FInteractionIconWithOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(FInteractionIconWithOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FInteractionIconWithOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FInteractionIconWithOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FInteractionIconWithOverrides>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FInteractionIconWithOverrides& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FInteractionIconWithOverrides& from) {
    FInteractionIconWithOverrides::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FInteractionIconWithOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FInteractionIconWithOverrides";
  }
  protected:
  explicit FInteractionIconWithOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconDefFieldNumber = 1,
    kOverrideIconDefFieldNumber = 2,
    kBOverrideIconFieldNumber = 3,
    kBOverrideActionFieldNumber = 4,
    kBOverrideTextFieldNumber = 5,
    kBCostsToUseFieldNumber = 6,
    kCostsCurrencyTypeFieldNumber = 7,
    kCostsAmountFieldNumber = 8,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference IconDef = 1;
  bool has_icondef() const;
  private:
  bool _internal_has_icondef() const;
  public:
  void clear_icondef();
  const ::HederaDefinitions::NonReplicatedObjectReference& icondef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_icondef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_icondef();
  void set_allocated_icondef(::HederaDefinitions::NonReplicatedObjectReference* icondef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_icondef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_icondef();
  public:
  void unsafe_arena_set_allocated_icondef(
      ::HederaDefinitions::NonReplicatedObjectReference* icondef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_icondef();

  // required .HederaDefinitions.NonReplicatedObjectReference OverrideIconDef = 2;
  bool has_overrideicondef() const;
  private:
  bool _internal_has_overrideicondef() const;
  public:
  void clear_overrideicondef();
  const ::HederaDefinitions::NonReplicatedObjectReference& overrideicondef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_overrideicondef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_overrideicondef();
  void set_allocated_overrideicondef(::HederaDefinitions::NonReplicatedObjectReference* overrideicondef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_overrideicondef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_overrideicondef();
  public:
  void unsafe_arena_set_allocated_overrideicondef(
      ::HederaDefinitions::NonReplicatedObjectReference* overrideicondef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_overrideicondef();

  // required bool bOverrideIcon = 3;
  bool has_boverrideicon() const;
  private:
  bool _internal_has_boverrideicon() const;
  public:
  void clear_boverrideicon();
  bool boverrideicon() const;
  void set_boverrideicon(bool value);
  private:
  bool _internal_boverrideicon() const;
  void _internal_set_boverrideicon(bool value);
  public:

  // required bool bOverrideAction = 4;
  bool has_boverrideaction() const;
  private:
  bool _internal_has_boverrideaction() const;
  public:
  void clear_boverrideaction();
  bool boverrideaction() const;
  void set_boverrideaction(bool value);
  private:
  bool _internal_boverrideaction() const;
  void _internal_set_boverrideaction(bool value);
  public:

  // required bool bOverrideText = 5;
  bool has_boverridetext() const;
  private:
  bool _internal_has_boverridetext() const;
  public:
  void clear_boverridetext();
  bool boverridetext() const;
  void set_boverridetext(bool value);
  private:
  bool _internal_boverridetext() const;
  void _internal_set_boverridetext(bool value);
  public:

  // required bool bCostsToUse = 6;
  bool has_bcoststouse() const;
  private:
  bool _internal_has_bcoststouse() const;
  public:
  void clear_bcoststouse();
  bool bcoststouse() const;
  void set_bcoststouse(bool value);
  private:
  bool _internal_bcoststouse() const;
  void _internal_set_bcoststouse(bool value);
  public:

  // required int32 CostsCurrencyType = 7;
  bool has_costscurrencytype() const;
  private:
  bool _internal_has_costscurrencytype() const;
  public:
  void clear_costscurrencytype();
  int32_t costscurrencytype() const;
  void set_costscurrencytype(int32_t value);
  private:
  int32_t _internal_costscurrencytype() const;
  void _internal_set_costscurrencytype(int32_t value);
  public:

  // required int32 CostsAmount = 8;
  bool has_costsamount() const;
  private:
  bool _internal_has_costsamount() const;
  public:
  void clear_costsamount();
  int32_t costsamount() const;
  void set_costsamount(int32_t value);
  private:
  int32_t _internal_costsamount() const;
  void _internal_set_costsamount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FInteractionIconWithOverrides)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* icondef_;
    ::HederaDefinitions::NonReplicatedObjectReference* overrideicondef_;
    bool boverrideicon_;
    bool boverrideaction_;
    bool boverridetext_;
    bool bcoststouse_;
    int32_t costscurrencytype_;
    int32_t costsamount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FVector2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FVector2D) */ {
 public:
  inline FVector2D() : FVector2D(nullptr) {}
  ~FVector2D() override;
  explicit PROTOBUF_CONSTEXPR FVector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FVector2D(const FVector2D& from);
  FVector2D(FVector2D&& from) noexcept
    : FVector2D() {
    *this = ::std::move(from);
  }

  inline FVector2D& operator=(const FVector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVector2D& operator=(FVector2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FVector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const FVector2D* internal_default_instance() {
    return reinterpret_cast<const FVector2D*>(
               &_FVector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FVector2D& a, FVector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(FVector2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FVector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FVector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FVector2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FVector2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FVector2D& from) {
    FVector2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVector2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FVector2D";
  }
  protected:
  explicit FVector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float X = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float Y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FVector2D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FScreenParticleScalarParamOverTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FScreenParticleScalarParamOverTime) */ {
 public:
  inline FScreenParticleScalarParamOverTime() : FScreenParticleScalarParamOverTime(nullptr) {}
  ~FScreenParticleScalarParamOverTime() override;
  explicit PROTOBUF_CONSTEXPR FScreenParticleScalarParamOverTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FScreenParticleScalarParamOverTime(const FScreenParticleScalarParamOverTime& from);
  FScreenParticleScalarParamOverTime(FScreenParticleScalarParamOverTime&& from) noexcept
    : FScreenParticleScalarParamOverTime() {
    *this = ::std::move(from);
  }

  inline FScreenParticleScalarParamOverTime& operator=(const FScreenParticleScalarParamOverTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline FScreenParticleScalarParamOverTime& operator=(FScreenParticleScalarParamOverTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FScreenParticleScalarParamOverTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const FScreenParticleScalarParamOverTime* internal_default_instance() {
    return reinterpret_cast<const FScreenParticleScalarParamOverTime*>(
               &_FScreenParticleScalarParamOverTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FScreenParticleScalarParamOverTime& a, FScreenParticleScalarParamOverTime& b) {
    a.Swap(&b);
  }
  inline void Swap(FScreenParticleScalarParamOverTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FScreenParticleScalarParamOverTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FScreenParticleScalarParamOverTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FScreenParticleScalarParamOverTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FScreenParticleScalarParamOverTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FScreenParticleScalarParamOverTime& from) {
    FScreenParticleScalarParamOverTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FScreenParticleScalarParamOverTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FScreenParticleScalarParamOverTime";
  }
  protected:
  explicit FScreenParticleScalarParamOverTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterNameFieldNumber = 1,
    kTotalTimeFieldNumber = 2,
    kStartValueFieldNumber = 3,
    kEndValueFieldNumber = 4,
    kLastValueFieldNumber = 5,
  };
  // required .HederaDefinitions.FName ParameterName = 1;
  bool has_parametername() const;
  private:
  bool _internal_has_parametername() const;
  public:
  void clear_parametername();
  const ::HederaDefinitions::FName& parametername() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_parametername();
  ::HederaDefinitions::FName* mutable_parametername();
  void set_allocated_parametername(::HederaDefinitions::FName* parametername);
  private:
  const ::HederaDefinitions::FName& _internal_parametername() const;
  ::HederaDefinitions::FName* _internal_mutable_parametername();
  public:
  void unsafe_arena_set_allocated_parametername(
      ::HederaDefinitions::FName* parametername);
  ::HederaDefinitions::FName* unsafe_arena_release_parametername();

  // required float TotalTime = 2;
  bool has_totaltime() const;
  private:
  bool _internal_has_totaltime() const;
  public:
  void clear_totaltime();
  float totaltime() const;
  void set_totaltime(float value);
  private:
  float _internal_totaltime() const;
  void _internal_set_totaltime(float value);
  public:

  // required float StartValue = 3;
  bool has_startvalue() const;
  private:
  bool _internal_has_startvalue() const;
  public:
  void clear_startvalue();
  float startvalue() const;
  void set_startvalue(float value);
  private:
  float _internal_startvalue() const;
  void _internal_set_startvalue(float value);
  public:

  // required float EndValue = 4;
  bool has_endvalue() const;
  private:
  bool _internal_has_endvalue() const;
  public:
  void clear_endvalue();
  float endvalue() const;
  void set_endvalue(float value);
  private:
  float _internal_endvalue() const;
  void _internal_set_endvalue(float value);
  public:

  // required float LastValue = 5;
  bool has_lastvalue() const;
  private:
  bool _internal_has_lastvalue() const;
  public:
  void clear_lastvalue();
  float lastvalue() const;
  void set_lastvalue(float value);
  private:
  float _internal_lastvalue() const;
  void _internal_set_lastvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FScreenParticleScalarParamOverTime)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::FName* parametername_;
    float totaltime_;
    float startvalue_;
    float endvalue_;
    float lastvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FScreenParticleVectorParamOverTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FScreenParticleVectorParamOverTime) */ {
 public:
  inline FScreenParticleVectorParamOverTime() : FScreenParticleVectorParamOverTime(nullptr) {}
  ~FScreenParticleVectorParamOverTime() override;
  explicit PROTOBUF_CONSTEXPR FScreenParticleVectorParamOverTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FScreenParticleVectorParamOverTime(const FScreenParticleVectorParamOverTime& from);
  FScreenParticleVectorParamOverTime(FScreenParticleVectorParamOverTime&& from) noexcept
    : FScreenParticleVectorParamOverTime() {
    *this = ::std::move(from);
  }

  inline FScreenParticleVectorParamOverTime& operator=(const FScreenParticleVectorParamOverTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline FScreenParticleVectorParamOverTime& operator=(FScreenParticleVectorParamOverTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FScreenParticleVectorParamOverTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const FScreenParticleVectorParamOverTime* internal_default_instance() {
    return reinterpret_cast<const FScreenParticleVectorParamOverTime*>(
               &_FScreenParticleVectorParamOverTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FScreenParticleVectorParamOverTime& a, FScreenParticleVectorParamOverTime& b) {
    a.Swap(&b);
  }
  inline void Swap(FScreenParticleVectorParamOverTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FScreenParticleVectorParamOverTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FScreenParticleVectorParamOverTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FScreenParticleVectorParamOverTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FScreenParticleVectorParamOverTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FScreenParticleVectorParamOverTime& from) {
    FScreenParticleVectorParamOverTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FScreenParticleVectorParamOverTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FScreenParticleVectorParamOverTime";
  }
  protected:
  explicit FScreenParticleVectorParamOverTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterNameFieldNumber = 1,
    kVectorStartValueFieldNumber = 3,
    kVectorEndValueFieldNumber = 4,
    kLastValueFieldNumber = 5,
    kTotalTimeFieldNumber = 2,
  };
  // required .HederaDefinitions.FName ParameterName = 1;
  bool has_parametername() const;
  private:
  bool _internal_has_parametername() const;
  public:
  void clear_parametername();
  const ::HederaDefinitions::FName& parametername() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_parametername();
  ::HederaDefinitions::FName* mutable_parametername();
  void set_allocated_parametername(::HederaDefinitions::FName* parametername);
  private:
  const ::HederaDefinitions::FName& _internal_parametername() const;
  ::HederaDefinitions::FName* _internal_mutable_parametername();
  public:
  void unsafe_arena_set_allocated_parametername(
      ::HederaDefinitions::FName* parametername);
  ::HederaDefinitions::FName* unsafe_arena_release_parametername();

  // required .HederaDefinitions.FVector VectorStartValue = 3;
  bool has_vectorstartvalue() const;
  private:
  bool _internal_has_vectorstartvalue() const;
  public:
  void clear_vectorstartvalue();
  const ::HederaDefinitions::FVector& vectorstartvalue() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_vectorstartvalue();
  ::HederaDefinitions::FVector* mutable_vectorstartvalue();
  void set_allocated_vectorstartvalue(::HederaDefinitions::FVector* vectorstartvalue);
  private:
  const ::HederaDefinitions::FVector& _internal_vectorstartvalue() const;
  ::HederaDefinitions::FVector* _internal_mutable_vectorstartvalue();
  public:
  void unsafe_arena_set_allocated_vectorstartvalue(
      ::HederaDefinitions::FVector* vectorstartvalue);
  ::HederaDefinitions::FVector* unsafe_arena_release_vectorstartvalue();

  // required .HederaDefinitions.FVector VectorEndValue = 4;
  bool has_vectorendvalue() const;
  private:
  bool _internal_has_vectorendvalue() const;
  public:
  void clear_vectorendvalue();
  const ::HederaDefinitions::FVector& vectorendvalue() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_vectorendvalue();
  ::HederaDefinitions::FVector* mutable_vectorendvalue();
  void set_allocated_vectorendvalue(::HederaDefinitions::FVector* vectorendvalue);
  private:
  const ::HederaDefinitions::FVector& _internal_vectorendvalue() const;
  ::HederaDefinitions::FVector* _internal_mutable_vectorendvalue();
  public:
  void unsafe_arena_set_allocated_vectorendvalue(
      ::HederaDefinitions::FVector* vectorendvalue);
  ::HederaDefinitions::FVector* unsafe_arena_release_vectorendvalue();

  // required .HederaDefinitions.FVector LastValue = 5;
  bool has_lastvalue() const;
  private:
  bool _internal_has_lastvalue() const;
  public:
  void clear_lastvalue();
  const ::HederaDefinitions::FVector& lastvalue() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_lastvalue();
  ::HederaDefinitions::FVector* mutable_lastvalue();
  void set_allocated_lastvalue(::HederaDefinitions::FVector* lastvalue);
  private:
  const ::HederaDefinitions::FVector& _internal_lastvalue() const;
  ::HederaDefinitions::FVector* _internal_mutable_lastvalue();
  public:
  void unsafe_arena_set_allocated_lastvalue(
      ::HederaDefinitions::FVector* lastvalue);
  ::HederaDefinitions::FVector* unsafe_arena_release_lastvalue();

  // required float TotalTime = 2;
  bool has_totaltime() const;
  private:
  bool _internal_has_totaltime() const;
  public:
  void clear_totaltime();
  float totaltime() const;
  void set_totaltime(float value);
  private:
  float _internal_totaltime() const;
  void _internal_set_totaltime(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FScreenParticleVectorParamOverTime)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::FName* parametername_;
    ::HederaDefinitions::FVector* vectorstartvalue_;
    ::HederaDefinitions::FVector* vectorendvalue_;
    ::HederaDefinitions::FVector* lastvalue_;
    float totaltime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FScreenParticleParamOverTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FScreenParticleParamOverTime) */ {
 public:
  inline FScreenParticleParamOverTime() : FScreenParticleParamOverTime(nullptr) {}
  ~FScreenParticleParamOverTime() override;
  explicit PROTOBUF_CONSTEXPR FScreenParticleParamOverTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FScreenParticleParamOverTime(const FScreenParticleParamOverTime& from);
  FScreenParticleParamOverTime(FScreenParticleParamOverTime&& from) noexcept
    : FScreenParticleParamOverTime() {
    *this = ::std::move(from);
  }

  inline FScreenParticleParamOverTime& operator=(const FScreenParticleParamOverTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline FScreenParticleParamOverTime& operator=(FScreenParticleParamOverTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FScreenParticleParamOverTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const FScreenParticleParamOverTime* internal_default_instance() {
    return reinterpret_cast<const FScreenParticleParamOverTime*>(
               &_FScreenParticleParamOverTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FScreenParticleParamOverTime& a, FScreenParticleParamOverTime& b) {
    a.Swap(&b);
  }
  inline void Swap(FScreenParticleParamOverTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FScreenParticleParamOverTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FScreenParticleParamOverTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FScreenParticleParamOverTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FScreenParticleParamOverTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FScreenParticleParamOverTime& from) {
    FScreenParticleParamOverTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FScreenParticleParamOverTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FScreenParticleParamOverTime";
  }
  protected:
  explicit FScreenParticleParamOverTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarParamsFieldNumber = 1,
    kVectorParamsFieldNumber = 2,
  };
  // repeated .HederaDefinitions.FScreenParticleScalarParamOverTime ScalarParams = 1;
  int scalarparams_size() const;
  private:
  int _internal_scalarparams_size() const;
  public:
  void clear_scalarparams();
  ::HederaDefinitions::FScreenParticleScalarParamOverTime* mutable_scalarparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleScalarParamOverTime >*
      mutable_scalarparams();
  private:
  const ::HederaDefinitions::FScreenParticleScalarParamOverTime& _internal_scalarparams(int index) const;
  ::HederaDefinitions::FScreenParticleScalarParamOverTime* _internal_add_scalarparams();
  public:
  const ::HederaDefinitions::FScreenParticleScalarParamOverTime& scalarparams(int index) const;
  ::HederaDefinitions::FScreenParticleScalarParamOverTime* add_scalarparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleScalarParamOverTime >&
      scalarparams() const;

  // repeated .HederaDefinitions.FScreenParticleVectorParamOverTime VectorParams = 2;
  int vectorparams_size() const;
  private:
  int _internal_vectorparams_size() const;
  public:
  void clear_vectorparams();
  ::HederaDefinitions::FScreenParticleVectorParamOverTime* mutable_vectorparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleVectorParamOverTime >*
      mutable_vectorparams();
  private:
  const ::HederaDefinitions::FScreenParticleVectorParamOverTime& _internal_vectorparams(int index) const;
  ::HederaDefinitions::FScreenParticleVectorParamOverTime* _internal_add_vectorparams();
  public:
  const ::HederaDefinitions::FScreenParticleVectorParamOverTime& vectorparams(int index) const;
  ::HederaDefinitions::FScreenParticleVectorParamOverTime* add_vectorparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleVectorParamOverTime >&
      vectorparams() const;

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FScreenParticleParamOverTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleScalarParamOverTime > scalarparams_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleVectorParamOverTime > vectorparams_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FScreenParticleInitParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FScreenParticleInitParams) */ {
 public:
  inline FScreenParticleInitParams() : FScreenParticleInitParams(nullptr) {}
  ~FScreenParticleInitParams() override;
  explicit PROTOBUF_CONSTEXPR FScreenParticleInitParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FScreenParticleInitParams(const FScreenParticleInitParams& from);
  FScreenParticleInitParams(FScreenParticleInitParams&& from) noexcept
    : FScreenParticleInitParams() {
    *this = ::std::move(from);
  }

  inline FScreenParticleInitParams& operator=(const FScreenParticleInitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FScreenParticleInitParams& operator=(FScreenParticleInitParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FScreenParticleInitParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FScreenParticleInitParams* internal_default_instance() {
    return reinterpret_cast<const FScreenParticleInitParams*>(
               &_FScreenParticleInitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FScreenParticleInitParams& a, FScreenParticleInitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FScreenParticleInitParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FScreenParticleInitParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FScreenParticleInitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FScreenParticleInitParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FScreenParticleInitParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FScreenParticleInitParams& from) {
    FScreenParticleInitParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FScreenParticleInitParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FScreenParticleInitParams";
  }
  protected:
  explicit FScreenParticleInitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenParticleModifiersFieldNumber = 2,
    kTemplateFieldNumber = 1,
    kTemplateScreenParticleMaterialFieldNumber = 3,
    kMatParamNameFieldNumber = 4,
    kParticleTagFieldNumber = 6,
    kContentDimsFieldNumber = 7,
    kStopParamsOTFieldNumber = 10,
    kParticleDepthFieldNumber = 8,
    kScalingModeFieldNumber = 9,
    kBHideWhenFinishedFieldNumber = 5,
    kBOnlyOwnerSeeFieldNumber = 11,
    kBAlwaysVisibleFieldNumber = 13,
    kBUseDesignerAttributeParametersFieldNumber = 14,
    kEffectDepthPriorityGroupFieldNumber = 12,
  };
  // repeated .HederaDefinitions.FScreenParticleModifier ScreenParticleModifiers = 2;
  int screenparticlemodifiers_size() const;
  private:
  int _internal_screenparticlemodifiers_size() const;
  public:
  void clear_screenparticlemodifiers();
  ::HederaDefinitions::FScreenParticleModifier* mutable_screenparticlemodifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleModifier >*
      mutable_screenparticlemodifiers();
  private:
  const ::HederaDefinitions::FScreenParticleModifier& _internal_screenparticlemodifiers(int index) const;
  ::HederaDefinitions::FScreenParticleModifier* _internal_add_screenparticlemodifiers();
  public:
  const ::HederaDefinitions::FScreenParticleModifier& screenparticlemodifiers(int index) const;
  ::HederaDefinitions::FScreenParticleModifier* add_screenparticlemodifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleModifier >&
      screenparticlemodifiers() const;

  // required .HederaDefinitions.NonReplicatedObjectReference Template = 1;
  bool has_template_() const;
  private:
  bool _internal_has_template_() const;
  public:
  void clear_template_();
  const ::HederaDefinitions::NonReplicatedObjectReference& template_() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_template_();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_template_();
  void set_allocated_template_(::HederaDefinitions::NonReplicatedObjectReference* template_);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_template_() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_template_();
  public:
  void unsafe_arena_set_allocated_template_(
      ::HederaDefinitions::NonReplicatedObjectReference* template_);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_template_();

  // required .HederaDefinitions.NonReplicatedObjectReference TemplateScreenParticleMaterial = 3;
  bool has_templatescreenparticlematerial() const;
  private:
  bool _internal_has_templatescreenparticlematerial() const;
  public:
  void clear_templatescreenparticlematerial();
  const ::HederaDefinitions::NonReplicatedObjectReference& templatescreenparticlematerial() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_templatescreenparticlematerial();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_templatescreenparticlematerial();
  void set_allocated_templatescreenparticlematerial(::HederaDefinitions::NonReplicatedObjectReference* templatescreenparticlematerial);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_templatescreenparticlematerial() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_templatescreenparticlematerial();
  public:
  void unsafe_arena_set_allocated_templatescreenparticlematerial(
      ::HederaDefinitions::NonReplicatedObjectReference* templatescreenparticlematerial);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_templatescreenparticlematerial();

  // required .HederaDefinitions.FName MatParamName = 4;
  bool has_matparamname() const;
  private:
  bool _internal_has_matparamname() const;
  public:
  void clear_matparamname();
  const ::HederaDefinitions::FName& matparamname() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_matparamname();
  ::HederaDefinitions::FName* mutable_matparamname();
  void set_allocated_matparamname(::HederaDefinitions::FName* matparamname);
  private:
  const ::HederaDefinitions::FName& _internal_matparamname() const;
  ::HederaDefinitions::FName* _internal_mutable_matparamname();
  public:
  void unsafe_arena_set_allocated_matparamname(
      ::HederaDefinitions::FName* matparamname);
  ::HederaDefinitions::FName* unsafe_arena_release_matparamname();

  // required .HederaDefinitions.FName ParticleTag = 6;
  bool has_particletag() const;
  private:
  bool _internal_has_particletag() const;
  public:
  void clear_particletag();
  const ::HederaDefinitions::FName& particletag() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_particletag();
  ::HederaDefinitions::FName* mutable_particletag();
  void set_allocated_particletag(::HederaDefinitions::FName* particletag);
  private:
  const ::HederaDefinitions::FName& _internal_particletag() const;
  ::HederaDefinitions::FName* _internal_mutable_particletag();
  public:
  void unsafe_arena_set_allocated_particletag(
      ::HederaDefinitions::FName* particletag);
  ::HederaDefinitions::FName* unsafe_arena_release_particletag();

  // required .HederaDefinitions.FVector2D ContentDims = 7;
  bool has_contentdims() const;
  private:
  bool _internal_has_contentdims() const;
  public:
  void clear_contentdims();
  const ::HederaDefinitions::FVector2D& contentdims() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector2D* release_contentdims();
  ::HederaDefinitions::FVector2D* mutable_contentdims();
  void set_allocated_contentdims(::HederaDefinitions::FVector2D* contentdims);
  private:
  const ::HederaDefinitions::FVector2D& _internal_contentdims() const;
  ::HederaDefinitions::FVector2D* _internal_mutable_contentdims();
  public:
  void unsafe_arena_set_allocated_contentdims(
      ::HederaDefinitions::FVector2D* contentdims);
  ::HederaDefinitions::FVector2D* unsafe_arena_release_contentdims();

  // required .HederaDefinitions.FScreenParticleParamOverTime StopParamsOT = 10;
  bool has_stopparamsot() const;
  private:
  bool _internal_has_stopparamsot() const;
  public:
  void clear_stopparamsot();
  const ::HederaDefinitions::FScreenParticleParamOverTime& stopparamsot() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FScreenParticleParamOverTime* release_stopparamsot();
  ::HederaDefinitions::FScreenParticleParamOverTime* mutable_stopparamsot();
  void set_allocated_stopparamsot(::HederaDefinitions::FScreenParticleParamOverTime* stopparamsot);
  private:
  const ::HederaDefinitions::FScreenParticleParamOverTime& _internal_stopparamsot() const;
  ::HederaDefinitions::FScreenParticleParamOverTime* _internal_mutable_stopparamsot();
  public:
  void unsafe_arena_set_allocated_stopparamsot(
      ::HederaDefinitions::FScreenParticleParamOverTime* stopparamsot);
  ::HederaDefinitions::FScreenParticleParamOverTime* unsafe_arena_release_stopparamsot();

  // required float ParticleDepth = 8;
  bool has_particledepth() const;
  private:
  bool _internal_has_particledepth() const;
  public:
  void clear_particledepth();
  float particledepth() const;
  void set_particledepth(float value);
  private:
  float _internal_particledepth() const;
  void _internal_set_particledepth(float value);
  public:

  // required int32 ScalingMode = 9;
  bool has_scalingmode() const;
  private:
  bool _internal_has_scalingmode() const;
  public:
  void clear_scalingmode();
  int32_t scalingmode() const;
  void set_scalingmode(int32_t value);
  private:
  int32_t _internal_scalingmode() const;
  void _internal_set_scalingmode(int32_t value);
  public:

  // required bool bHideWhenFinished = 5;
  bool has_bhidewhenfinished() const;
  private:
  bool _internal_has_bhidewhenfinished() const;
  public:
  void clear_bhidewhenfinished();
  bool bhidewhenfinished() const;
  void set_bhidewhenfinished(bool value);
  private:
  bool _internal_bhidewhenfinished() const;
  void _internal_set_bhidewhenfinished(bool value);
  public:

  // required bool bOnlyOwnerSee = 11;
  bool has_bonlyownersee() const;
  private:
  bool _internal_has_bonlyownersee() const;
  public:
  void clear_bonlyownersee();
  bool bonlyownersee() const;
  void set_bonlyownersee(bool value);
  private:
  bool _internal_bonlyownersee() const;
  void _internal_set_bonlyownersee(bool value);
  public:

  // required bool bAlwaysVisible = 13;
  bool has_balwaysvisible() const;
  private:
  bool _internal_has_balwaysvisible() const;
  public:
  void clear_balwaysvisible();
  bool balwaysvisible() const;
  void set_balwaysvisible(bool value);
  private:
  bool _internal_balwaysvisible() const;
  void _internal_set_balwaysvisible(bool value);
  public:

  // required bool bUseDesignerAttributeParameters = 14;
  bool has_busedesignerattributeparameters() const;
  private:
  bool _internal_has_busedesignerattributeparameters() const;
  public:
  void clear_busedesignerattributeparameters();
  bool busedesignerattributeparameters() const;
  void set_busedesignerattributeparameters(bool value);
  private:
  bool _internal_busedesignerattributeparameters() const;
  void _internal_set_busedesignerattributeparameters(bool value);
  public:

  // required int32 EffectDepthPriorityGroup = 12;
  bool has_effectdepthprioritygroup() const;
  private:
  bool _internal_has_effectdepthprioritygroup() const;
  public:
  void clear_effectdepthprioritygroup();
  int32_t effectdepthprioritygroup() const;
  void set_effectdepthprioritygroup(int32_t value);
  private:
  int32_t _internal_effectdepthprioritygroup() const;
  void _internal_set_effectdepthprioritygroup(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FScreenParticleInitParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleModifier > screenparticlemodifiers_;
    ::HederaDefinitions::NonReplicatedObjectReference* template__;
    ::HederaDefinitions::NonReplicatedObjectReference* templatescreenparticlematerial_;
    ::HederaDefinitions::FName* matparamname_;
    ::HederaDefinitions::FName* particletag_;
    ::HederaDefinitions::FVector2D* contentdims_;
    ::HederaDefinitions::FScreenParticleParamOverTime* stopparamsot_;
    float particledepth_;
    int32_t scalingmode_;
    bool bhidewhenfinished_;
    bool bonlyownersee_;
    bool balwaysvisible_;
    bool busedesignerattributeparameters_;
    int32_t effectdepthprioritygroup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedDamageScreenParticle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedDamageScreenParticle) */ {
 public:
  inline FReplicatedDamageScreenParticle() : FReplicatedDamageScreenParticle(nullptr) {}
  ~FReplicatedDamageScreenParticle() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedDamageScreenParticle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedDamageScreenParticle(const FReplicatedDamageScreenParticle& from);
  FReplicatedDamageScreenParticle(FReplicatedDamageScreenParticle&& from) noexcept
    : FReplicatedDamageScreenParticle() {
    *this = ::std::move(from);
  }

  inline FReplicatedDamageScreenParticle& operator=(const FReplicatedDamageScreenParticle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedDamageScreenParticle& operator=(FReplicatedDamageScreenParticle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedDamageScreenParticle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedDamageScreenParticle* internal_default_instance() {
    return reinterpret_cast<const FReplicatedDamageScreenParticle*>(
               &_FReplicatedDamageScreenParticle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FReplicatedDamageScreenParticle& a, FReplicatedDamageScreenParticle& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedDamageScreenParticle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedDamageScreenParticle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedDamageScreenParticle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedDamageScreenParticle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedDamageScreenParticle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedDamageScreenParticle& from) {
    FReplicatedDamageScreenParticle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedDamageScreenParticle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedDamageScreenParticle";
  }
  protected:
  explicit FReplicatedDamageScreenParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
    kReferenceLoactionFieldNumber = 2,
    kGenericScaleFieldNumber = 3,
    kCounterFieldNumber = 4,
  };
  // required .HederaDefinitions.FScreenParticleInitParams Params = 1;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::HederaDefinitions::FScreenParticleInitParams& params() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FScreenParticleInitParams* release_params();
  ::HederaDefinitions::FScreenParticleInitParams* mutable_params();
  void set_allocated_params(::HederaDefinitions::FScreenParticleInitParams* params);
  private:
  const ::HederaDefinitions::FScreenParticleInitParams& _internal_params() const;
  ::HederaDefinitions::FScreenParticleInitParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::HederaDefinitions::FScreenParticleInitParams* params);
  ::HederaDefinitions::FScreenParticleInitParams* unsafe_arena_release_params();

  // required .HederaDefinitions.FVector ReferenceLoaction = 2;
  bool has_referenceloaction() const;
  private:
  bool _internal_has_referenceloaction() const;
  public:
  void clear_referenceloaction();
  const ::HederaDefinitions::FVector& referenceloaction() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_referenceloaction();
  ::HederaDefinitions::FVector* mutable_referenceloaction();
  void set_allocated_referenceloaction(::HederaDefinitions::FVector* referenceloaction);
  private:
  const ::HederaDefinitions::FVector& _internal_referenceloaction() const;
  ::HederaDefinitions::FVector* _internal_mutable_referenceloaction();
  public:
  void unsafe_arena_set_allocated_referenceloaction(
      ::HederaDefinitions::FVector* referenceloaction);
  ::HederaDefinitions::FVector* unsafe_arena_release_referenceloaction();

  // required float GenericScale = 3;
  bool has_genericscale() const;
  private:
  bool _internal_has_genericscale() const;
  public:
  void clear_genericscale();
  float genericscale() const;
  void set_genericscale(float value);
  private:
  float _internal_genericscale() const;
  void _internal_set_genericscale(float value);
  public:

  // required int32 Counter = 4;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  int32_t counter() const;
  void set_counter(int32_t value);
  private:
  int32_t _internal_counter() const;
  void _internal_set_counter(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedDamageScreenParticle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::FScreenParticleInitParams* params_;
    ::HederaDefinitions::FVector* referenceloaction_;
    float genericscale_;
    int32_t counter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedProgressBarData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedProgressBarData) */ {
 public:
  inline FReplicatedProgressBarData() : FReplicatedProgressBarData(nullptr) {}
  ~FReplicatedProgressBarData() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedProgressBarData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedProgressBarData(const FReplicatedProgressBarData& from);
  FReplicatedProgressBarData(FReplicatedProgressBarData&& from) noexcept
    : FReplicatedProgressBarData() {
    *this = ::std::move(from);
  }

  inline FReplicatedProgressBarData& operator=(const FReplicatedProgressBarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedProgressBarData& operator=(FReplicatedProgressBarData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedProgressBarData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedProgressBarData* internal_default_instance() {
    return reinterpret_cast<const FReplicatedProgressBarData*>(
               &_FReplicatedProgressBarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FReplicatedProgressBarData& a, FReplicatedProgressBarData& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedProgressBarData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedProgressBarData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedProgressBarData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedProgressBarData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedProgressBarData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedProgressBarData& from) {
    FReplicatedProgressBarData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedProgressBarData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedProgressBarData";
  }
  protected:
  explicit FReplicatedProgressBarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
    kRateFieldNumber = 2,
    kStartOffsetFieldNumber = 3,
  };
  // required float Duration = 1;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // required float Rate = 2;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // required float StartOffset = 3;
  bool has_startoffset() const;
  private:
  bool _internal_has_startoffset() const;
  public:
  void clear_startoffset();
  float startoffset() const;
  void set_startoffset(float value);
  private:
  float _internal_startoffset() const;
  void _internal_set_startoffset(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedProgressBarData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float duration_;
    float rate_;
    float startoffset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FCameraViewData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FCameraViewData) */ {
 public:
  inline FCameraViewData() : FCameraViewData(nullptr) {}
  ~FCameraViewData() override;
  explicit PROTOBUF_CONSTEXPR FCameraViewData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FCameraViewData(const FCameraViewData& from);
  FCameraViewData(FCameraViewData&& from) noexcept
    : FCameraViewData() {
    *this = ::std::move(from);
  }

  inline FCameraViewData& operator=(const FCameraViewData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCameraViewData& operator=(FCameraViewData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FCameraViewData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FCameraViewData* internal_default_instance() {
    return reinterpret_cast<const FCameraViewData*>(
               &_FCameraViewData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FCameraViewData& a, FCameraViewData& b) {
    a.Swap(&b);
  }
  inline void Swap(FCameraViewData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FCameraViewData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FCameraViewData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FCameraViewData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FCameraViewData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FCameraViewData& from) {
    FCameraViewData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FCameraViewData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FCameraViewData";
  }
  protected:
  explicit FCameraViewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTargetFieldNumber = 1,
    kModeNameFieldNumber = 2,
    kBlendTimeOverrideFieldNumber = 3,
    kBIsTeleportFieldNumber = 4,
    kDesiredDeathSpectatorStateFieldNumber = 5,
  };
  // required .HederaDefinitions.ReplicatedActorReference ViewTarget = 1;
  bool has_viewtarget() const;
  private:
  bool _internal_has_viewtarget() const;
  public:
  void clear_viewtarget();
  const ::HederaDefinitions::ReplicatedActorReference& viewtarget() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_viewtarget();
  ::HederaDefinitions::ReplicatedActorReference* mutable_viewtarget();
  void set_allocated_viewtarget(::HederaDefinitions::ReplicatedActorReference* viewtarget);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_viewtarget() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_viewtarget();
  public:
  void unsafe_arena_set_allocated_viewtarget(
      ::HederaDefinitions::ReplicatedActorReference* viewtarget);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_viewtarget();

  // required .HederaDefinitions.FName ModeName = 2;
  bool has_modename() const;
  private:
  bool _internal_has_modename() const;
  public:
  void clear_modename();
  const ::HederaDefinitions::FName& modename() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_modename();
  ::HederaDefinitions::FName* mutable_modename();
  void set_allocated_modename(::HederaDefinitions::FName* modename);
  private:
  const ::HederaDefinitions::FName& _internal_modename() const;
  ::HederaDefinitions::FName* _internal_mutable_modename();
  public:
  void unsafe_arena_set_allocated_modename(
      ::HederaDefinitions::FName* modename);
  ::HederaDefinitions::FName* unsafe_arena_release_modename();

  // required float BlendTimeOverride = 3;
  bool has_blendtimeoverride() const;
  private:
  bool _internal_has_blendtimeoverride() const;
  public:
  void clear_blendtimeoverride();
  float blendtimeoverride() const;
  void set_blendtimeoverride(float value);
  private:
  float _internal_blendtimeoverride() const;
  void _internal_set_blendtimeoverride(float value);
  public:

  // required bool bIsTeleport = 4;
  bool has_bisteleport() const;
  private:
  bool _internal_has_bisteleport() const;
  public:
  void clear_bisteleport();
  bool bisteleport() const;
  void set_bisteleport(bool value);
  private:
  bool _internal_bisteleport() const;
  void _internal_set_bisteleport(bool value);
  public:

  // required int32 DesiredDeathSpectatorState = 5;
  bool has_desireddeathspectatorstate() const;
  private:
  bool _internal_has_desireddeathspectatorstate() const;
  public:
  void clear_desireddeathspectatorstate();
  int32_t desireddeathspectatorstate() const;
  void set_desireddeathspectatorstate(int32_t value);
  private:
  int32_t _internal_desireddeathspectatorstate() const;
  void _internal_set_desireddeathspectatorstate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FCameraViewData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::ReplicatedActorReference* viewtarget_;
    ::HederaDefinitions::FName* modename_;
    float blendtimeoverride_;
    bool bisteleport_;
    int32_t desireddeathspectatorstate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FActorSelectionDataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FActorSelectionDataContainer) */ {
 public:
  inline FActorSelectionDataContainer() : FActorSelectionDataContainer(nullptr) {}
  ~FActorSelectionDataContainer() override;
  explicit PROTOBUF_CONSTEXPR FActorSelectionDataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FActorSelectionDataContainer(const FActorSelectionDataContainer& from);
  FActorSelectionDataContainer(FActorSelectionDataContainer&& from) noexcept
    : FActorSelectionDataContainer() {
    *this = ::std::move(from);
  }

  inline FActorSelectionDataContainer& operator=(const FActorSelectionDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FActorSelectionDataContainer& operator=(FActorSelectionDataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FActorSelectionDataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FActorSelectionDataContainer* internal_default_instance() {
    return reinterpret_cast<const FActorSelectionDataContainer*>(
               &_FActorSelectionDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FActorSelectionDataContainer& a, FActorSelectionDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(FActorSelectionDataContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FActorSelectionDataContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FActorSelectionDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FActorSelectionDataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FActorSelectionDataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FActorSelectionDataContainer& from) {
    FActorSelectionDataContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FActorSelectionDataContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FActorSelectionDataContainer";
  }
  protected:
  explicit FActorSelectionDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 18,
    kLocationFieldNumber = 12,
    kUnitTypeFieldNumber = 14,
    kPRIFieldNumber = 15,
    kNameIDFieldNumber = 17,
    kHealthFieldNumber = 1,
    kShieldFieldNumber = 3,
    kOvershieldFieldNumber = 5,
    kBDisplayHealthFieldNumber = 2,
    kBDisplayShieldFieldNumber = 4,
    kBDisplayOvershieldFieldNumber = 6,
    kBDisplayLevelFieldNumber = 8,
    kLevelFieldNumber = 7,
    kRespawnTimeFieldNumber = 9,
    kBDisplayRespawnTimeFieldNumber = 10,
    kBDisplayNameFieldNumber = 11,
    kBActiveFieldNumber = 13,
    kBInjuredFieldNumber = 16,
  };
  // required bytes Name = 18;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .HederaDefinitions.FVector Location = 12;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::HederaDefinitions::FVector& location() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_location();
  ::HederaDefinitions::FVector* mutable_location();
  void set_allocated_location(::HederaDefinitions::FVector* location);
  private:
  const ::HederaDefinitions::FVector& _internal_location() const;
  ::HederaDefinitions::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::HederaDefinitions::FVector* location);
  ::HederaDefinitions::FVector* unsafe_arena_release_location();

  // required .HederaDefinitions.NonReplicatedObjectReference UnitType = 14;
  bool has_unittype() const;
  private:
  bool _internal_has_unittype() const;
  public:
  void clear_unittype();
  const ::HederaDefinitions::NonReplicatedObjectReference& unittype() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_unittype();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_unittype();
  void set_allocated_unittype(::HederaDefinitions::NonReplicatedObjectReference* unittype);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_unittype() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_unittype();
  public:
  void unsafe_arena_set_allocated_unittype(
      ::HederaDefinitions::NonReplicatedObjectReference* unittype);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_unittype();

  // required .HederaDefinitions.ReplicatedActorReference PRI = 15;
  bool has_pri() const;
  private:
  bool _internal_has_pri() const;
  public:
  void clear_pri();
  const ::HederaDefinitions::ReplicatedActorReference& pri() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_pri();
  ::HederaDefinitions::ReplicatedActorReference* mutable_pri();
  void set_allocated_pri(::HederaDefinitions::ReplicatedActorReference* pri);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_pri() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_pri();
  public:
  void unsafe_arena_set_allocated_pri(
      ::HederaDefinitions::ReplicatedActorReference* pri);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_pri();

  // required .HederaDefinitions.NonReplicatedObjectReference NameID = 17;
  bool has_nameid() const;
  private:
  bool _internal_has_nameid() const;
  public:
  void clear_nameid();
  const ::HederaDefinitions::NonReplicatedObjectReference& nameid() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_nameid();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_nameid();
  void set_allocated_nameid(::HederaDefinitions::NonReplicatedObjectReference* nameid);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_nameid() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_nameid();
  public:
  void unsafe_arena_set_allocated_nameid(
      ::HederaDefinitions::NonReplicatedObjectReference* nameid);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_nameid();

  // required float Health = 1;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  float health() const;
  void set_health(float value);
  private:
  float _internal_health() const;
  void _internal_set_health(float value);
  public:

  // required float Shield = 3;
  bool has_shield() const;
  private:
  bool _internal_has_shield() const;
  public:
  void clear_shield();
  float shield() const;
  void set_shield(float value);
  private:
  float _internal_shield() const;
  void _internal_set_shield(float value);
  public:

  // required float Overshield = 5;
  bool has_overshield() const;
  private:
  bool _internal_has_overshield() const;
  public:
  void clear_overshield();
  float overshield() const;
  void set_overshield(float value);
  private:
  float _internal_overshield() const;
  void _internal_set_overshield(float value);
  public:

  // required bool bDisplayHealth = 2;
  bool has_bdisplayhealth() const;
  private:
  bool _internal_has_bdisplayhealth() const;
  public:
  void clear_bdisplayhealth();
  bool bdisplayhealth() const;
  void set_bdisplayhealth(bool value);
  private:
  bool _internal_bdisplayhealth() const;
  void _internal_set_bdisplayhealth(bool value);
  public:

  // required bool bDisplayShield = 4;
  bool has_bdisplayshield() const;
  private:
  bool _internal_has_bdisplayshield() const;
  public:
  void clear_bdisplayshield();
  bool bdisplayshield() const;
  void set_bdisplayshield(bool value);
  private:
  bool _internal_bdisplayshield() const;
  void _internal_set_bdisplayshield(bool value);
  public:

  // required bool bDisplayOvershield = 6;
  bool has_bdisplayovershield() const;
  private:
  bool _internal_has_bdisplayovershield() const;
  public:
  void clear_bdisplayovershield();
  bool bdisplayovershield() const;
  void set_bdisplayovershield(bool value);
  private:
  bool _internal_bdisplayovershield() const;
  void _internal_set_bdisplayovershield(bool value);
  public:

  // required bool bDisplayLevel = 8;
  bool has_bdisplaylevel() const;
  private:
  bool _internal_has_bdisplaylevel() const;
  public:
  void clear_bdisplaylevel();
  bool bdisplaylevel() const;
  void set_bdisplaylevel(bool value);
  private:
  bool _internal_bdisplaylevel() const;
  void _internal_set_bdisplaylevel(bool value);
  public:

  // required int32 Level = 7;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // required float RespawnTime = 9;
  bool has_respawntime() const;
  private:
  bool _internal_has_respawntime() const;
  public:
  void clear_respawntime();
  float respawntime() const;
  void set_respawntime(float value);
  private:
  float _internal_respawntime() const;
  void _internal_set_respawntime(float value);
  public:

  // required bool bDisplayRespawnTime = 10;
  bool has_bdisplayrespawntime() const;
  private:
  bool _internal_has_bdisplayrespawntime() const;
  public:
  void clear_bdisplayrespawntime();
  bool bdisplayrespawntime() const;
  void set_bdisplayrespawntime(bool value);
  private:
  bool _internal_bdisplayrespawntime() const;
  void _internal_set_bdisplayrespawntime(bool value);
  public:

  // required bool bDisplayName = 11;
  bool has_bdisplayname() const;
  private:
  bool _internal_has_bdisplayname() const;
  public:
  void clear_bdisplayname();
  bool bdisplayname() const;
  void set_bdisplayname(bool value);
  private:
  bool _internal_bdisplayname() const;
  void _internal_set_bdisplayname(bool value);
  public:

  // required bool bActive = 13;
  bool has_bactive() const;
  private:
  bool _internal_has_bactive() const;
  public:
  void clear_bactive();
  bool bactive() const;
  void set_bactive(bool value);
  private:
  bool _internal_bactive() const;
  void _internal_set_bactive(bool value);
  public:

  // required bool bInjured = 16;
  bool has_binjured() const;
  private:
  bool _internal_has_binjured() const;
  public:
  void clear_binjured();
  bool binjured() const;
  void set_binjured(bool value);
  private:
  bool _internal_binjured() const;
  void _internal_set_binjured(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FActorSelectionDataContainer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::HederaDefinitions::FVector* location_;
    ::HederaDefinitions::NonReplicatedObjectReference* unittype_;
    ::HederaDefinitions::ReplicatedActorReference* pri_;
    ::HederaDefinitions::NonReplicatedObjectReference* nameid_;
    float health_;
    float shield_;
    float overshield_;
    bool bdisplayhealth_;
    bool bdisplayshield_;
    bool bdisplayovershield_;
    bool bdisplaylevel_;
    int32_t level_;
    float respawntime_;
    bool bdisplayrespawntime_;
    bool bdisplayname_;
    bool bactive_;
    bool binjured_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class APoplarPlayerController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.APoplarPlayerController) */ {
 public:
  inline APoplarPlayerController() : APoplarPlayerController(nullptr) {}
  ~APoplarPlayerController() override;
  explicit PROTOBUF_CONSTEXPR APoplarPlayerController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APoplarPlayerController(const APoplarPlayerController& from);
  APoplarPlayerController(APoplarPlayerController&& from) noexcept
    : APoplarPlayerController() {
    *this = ::std::move(from);
  }

  inline APoplarPlayerController& operator=(const APoplarPlayerController& from) {
    CopyFrom(from);
    return *this;
  }
  inline APoplarPlayerController& operator=(APoplarPlayerController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APoplarPlayerController& default_instance() {
    return *internal_default_instance();
  }
  static inline const APoplarPlayerController* internal_default_instance() {
    return reinterpret_cast<const APoplarPlayerController*>(
               &_APoplarPlayerController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(APoplarPlayerController& a, APoplarPlayerController& b) {
    a.Swap(&b);
  }
  inline void Swap(APoplarPlayerController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APoplarPlayerController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  APoplarPlayerController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<APoplarPlayerController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const APoplarPlayerController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const APoplarPlayerController& from) {
    APoplarPlayerController::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APoplarPlayerController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.APoplarPlayerController";
  }
  protected:
  explicit APoplarPlayerController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentInteractionIconFieldNumber = 42,
    kMinimapActorSelectDataFieldNumber = 51,
    kLocationFieldNumber = 1,
    kRotationFieldNumber = 2,
    kOwnerFieldNumber = 9,
    kBaseFieldNumber = 10,
    kInstigatorFieldNumber = 19,
    kVelocityFieldNumber = 20,
    kBaseBoneNameFieldNumber = 21,
    kRelativeLocationFieldNumber = 22,
    kRelativeRotationFieldNumber = 23,
    kPawnFieldNumber = 24,
    kClientPendingPSIFieldNumber = 25,
    kClientPendingPRIFieldNumber = 26,
    kTargetViewRotationFieldNumber = 27,
    kActiveAudioEffectFieldNumber = 29,
    kMyWillowPawnFieldNumber = 39,
    kCurrentUsableObjectObjectFieldNumber = 40,
    kCurrentUsableObjectInterfaceFieldNumber = 41,
    kRecentDamageScreenParticleFieldNumber = 43,
    kUseProgressBarFieldNumber = 47,
    kReplicatedCameraViewDataFieldNumber = 49,
    kPipelineSummaryHistoryManagerFieldNumber = 50,
    kDrawScaleFieldNumber = 3,
    kCustomTimeDilationFieldNumber = 4,
    kPhysicsFieldNumber = 5,
    kRemoteRoleFieldNumber = 6,
    kRoleFieldNumber = 7,
    kReplicatedCollisionTypeFieldNumber = 8,
    kBHiddenFieldNumber = 11,
    kBTearOffFieldNumber = 12,
    kBHardAttachFieldNumber = 13,
    kBCollideActorsFieldNumber = 14,
    kBCollideWorldFieldNumber = 15,
    kBBlockActorsFieldNumber = 16,
    kBProjTargetFieldNumber = 17,
    kBNetOwnerFieldNumber = 18,
    kTargetEyeHeightFieldNumber = 28,
    kBHideAmmoOnHudFieldNumber = 30,
    kBHideCompassOnHUDFieldNumber = 31,
    kBHideSkillsOnHUDFieldNumber = 32,
    kBHideXPOnHUDFieldNumber = 33,
    kBConsoleControllerFieldNumber = 34,
    kBDisplayTradeIconFieldNumber = 35,
    kBDisplayTradeDisabledIconFieldNumber = 36,
    kBResurrectAllFieldNumber = 37,
    kBPlayingTeleporterSoundFieldNumber = 38,
    kFOVModifierSpeedFieldNumber = 44,
    kFOVModifierSpeedBaseValueFieldNumber = 45,
    kPostProcessDurationMultiplierFieldNumber = 46,
    kTargetedWarningSeverityFieldNumber = 48,
    kCurrentMinimapActorSelectionIndexFieldNumber = 52,
  };
  // repeated .HederaDefinitions.FInteractionIconWithOverrides CurrentInteractionIcon = 42;
  int currentinteractionicon_size() const;
  private:
  int _internal_currentinteractionicon_size() const;
  public:
  void clear_currentinteractionicon();
  ::HederaDefinitions::FInteractionIconWithOverrides* mutable_currentinteractionicon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FInteractionIconWithOverrides >*
      mutable_currentinteractionicon();
  private:
  const ::HederaDefinitions::FInteractionIconWithOverrides& _internal_currentinteractionicon(int index) const;
  ::HederaDefinitions::FInteractionIconWithOverrides* _internal_add_currentinteractionicon();
  public:
  const ::HederaDefinitions::FInteractionIconWithOverrides& currentinteractionicon(int index) const;
  ::HederaDefinitions::FInteractionIconWithOverrides* add_currentinteractionicon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FInteractionIconWithOverrides >&
      currentinteractionicon() const;

  // repeated .HederaDefinitions.FActorSelectionDataContainer MinimapActorSelectData = 51;
  int minimapactorselectdata_size() const;
  private:
  int _internal_minimapactorselectdata_size() const;
  public:
  void clear_minimapactorselectdata();
  ::HederaDefinitions::FActorSelectionDataContainer* mutable_minimapactorselectdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FActorSelectionDataContainer >*
      mutable_minimapactorselectdata();
  private:
  const ::HederaDefinitions::FActorSelectionDataContainer& _internal_minimapactorselectdata(int index) const;
  ::HederaDefinitions::FActorSelectionDataContainer* _internal_add_minimapactorselectdata();
  public:
  const ::HederaDefinitions::FActorSelectionDataContainer& minimapactorselectdata(int index) const;
  ::HederaDefinitions::FActorSelectionDataContainer* add_minimapactorselectdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FActorSelectionDataContainer >&
      minimapactorselectdata() const;

  // required .HederaDefinitions.FVector Location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::HederaDefinitions::FVector& location() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_location();
  ::HederaDefinitions::FVector* mutable_location();
  void set_allocated_location(::HederaDefinitions::FVector* location);
  private:
  const ::HederaDefinitions::FVector& _internal_location() const;
  ::HederaDefinitions::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::HederaDefinitions::FVector* location);
  ::HederaDefinitions::FVector* unsafe_arena_release_location();

  // required .HederaDefinitions.FRotator Rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::HederaDefinitions::FRotator& rotation() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FRotator* release_rotation();
  ::HederaDefinitions::FRotator* mutable_rotation();
  void set_allocated_rotation(::HederaDefinitions::FRotator* rotation);
  private:
  const ::HederaDefinitions::FRotator& _internal_rotation() const;
  ::HederaDefinitions::FRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::HederaDefinitions::FRotator* rotation);
  ::HederaDefinitions::FRotator* unsafe_arena_release_rotation();

  // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::HederaDefinitions::ReplicatedActorReference& owner() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_owner();
  ::HederaDefinitions::ReplicatedActorReference* mutable_owner();
  void set_allocated_owner(::HederaDefinitions::ReplicatedActorReference* owner);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_owner() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::HederaDefinitions::ReplicatedActorReference* owner);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_owner();

  // required .HederaDefinitions.ReplicatedActorReference Base = 10;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HederaDefinitions::ReplicatedActorReference& base() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_base();
  ::HederaDefinitions::ReplicatedActorReference* mutable_base();
  void set_allocated_base(::HederaDefinitions::ReplicatedActorReference* base);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_base() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HederaDefinitions::ReplicatedActorReference* base);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_base();

  // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
  bool has_instigator() const;
  private:
  bool _internal_has_instigator() const;
  public:
  void clear_instigator();
  const ::HederaDefinitions::ReplicatedActorReference& instigator() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_instigator();
  ::HederaDefinitions::ReplicatedActorReference* mutable_instigator();
  void set_allocated_instigator(::HederaDefinitions::ReplicatedActorReference* instigator);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_instigator() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_instigator();
  public:
  void unsafe_arena_set_allocated_instigator(
      ::HederaDefinitions::ReplicatedActorReference* instigator);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_instigator();

  // required .HederaDefinitions.FVector Velocity = 20;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::HederaDefinitions::FVector& velocity() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_velocity();
  ::HederaDefinitions::FVector* mutable_velocity();
  void set_allocated_velocity(::HederaDefinitions::FVector* velocity);
  private:
  const ::HederaDefinitions::FVector& _internal_velocity() const;
  ::HederaDefinitions::FVector* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::HederaDefinitions::FVector* velocity);
  ::HederaDefinitions::FVector* unsafe_arena_release_velocity();

  // required .HederaDefinitions.FName BaseBoneName = 21;
  bool has_basebonename() const;
  private:
  bool _internal_has_basebonename() const;
  public:
  void clear_basebonename();
  const ::HederaDefinitions::FName& basebonename() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_basebonename();
  ::HederaDefinitions::FName* mutable_basebonename();
  void set_allocated_basebonename(::HederaDefinitions::FName* basebonename);
  private:
  const ::HederaDefinitions::FName& _internal_basebonename() const;
  ::HederaDefinitions::FName* _internal_mutable_basebonename();
  public:
  void unsafe_arena_set_allocated_basebonename(
      ::HederaDefinitions::FName* basebonename);
  ::HederaDefinitions::FName* unsafe_arena_release_basebonename();

  // required .HederaDefinitions.FVector RelativeLocation = 22;
  bool has_relativelocation() const;
  private:
  bool _internal_has_relativelocation() const;
  public:
  void clear_relativelocation();
  const ::HederaDefinitions::FVector& relativelocation() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_relativelocation();
  ::HederaDefinitions::FVector* mutable_relativelocation();
  void set_allocated_relativelocation(::HederaDefinitions::FVector* relativelocation);
  private:
  const ::HederaDefinitions::FVector& _internal_relativelocation() const;
  ::HederaDefinitions::FVector* _internal_mutable_relativelocation();
  public:
  void unsafe_arena_set_allocated_relativelocation(
      ::HederaDefinitions::FVector* relativelocation);
  ::HederaDefinitions::FVector* unsafe_arena_release_relativelocation();

  // required .HederaDefinitions.FRotator RelativeRotation = 23;
  bool has_relativerotation() const;
  private:
  bool _internal_has_relativerotation() const;
  public:
  void clear_relativerotation();
  const ::HederaDefinitions::FRotator& relativerotation() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FRotator* release_relativerotation();
  ::HederaDefinitions::FRotator* mutable_relativerotation();
  void set_allocated_relativerotation(::HederaDefinitions::FRotator* relativerotation);
  private:
  const ::HederaDefinitions::FRotator& _internal_relativerotation() const;
  ::HederaDefinitions::FRotator* _internal_mutable_relativerotation();
  public:
  void unsafe_arena_set_allocated_relativerotation(
      ::HederaDefinitions::FRotator* relativerotation);
  ::HederaDefinitions::FRotator* unsafe_arena_release_relativerotation();

  // required .HederaDefinitions.ReplicatedActorReference Pawn = 24;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::HederaDefinitions::ReplicatedActorReference& pawn() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_pawn();
  ::HederaDefinitions::ReplicatedActorReference* mutable_pawn();
  void set_allocated_pawn(::HederaDefinitions::ReplicatedActorReference* pawn);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_pawn() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::HederaDefinitions::ReplicatedActorReference* pawn);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_pawn();

  // required .HederaDefinitions.ReplicatedActorReference ClientPendingPSI = 25;
  bool has_clientpendingpsi() const;
  private:
  bool _internal_has_clientpendingpsi() const;
  public:
  void clear_clientpendingpsi();
  const ::HederaDefinitions::ReplicatedActorReference& clientpendingpsi() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_clientpendingpsi();
  ::HederaDefinitions::ReplicatedActorReference* mutable_clientpendingpsi();
  void set_allocated_clientpendingpsi(::HederaDefinitions::ReplicatedActorReference* clientpendingpsi);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_clientpendingpsi() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_clientpendingpsi();
  public:
  void unsafe_arena_set_allocated_clientpendingpsi(
      ::HederaDefinitions::ReplicatedActorReference* clientpendingpsi);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_clientpendingpsi();

  // required .HederaDefinitions.ReplicatedActorReference ClientPendingPRI = 26;
  bool has_clientpendingpri() const;
  private:
  bool _internal_has_clientpendingpri() const;
  public:
  void clear_clientpendingpri();
  const ::HederaDefinitions::ReplicatedActorReference& clientpendingpri() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_clientpendingpri();
  ::HederaDefinitions::ReplicatedActorReference* mutable_clientpendingpri();
  void set_allocated_clientpendingpri(::HederaDefinitions::ReplicatedActorReference* clientpendingpri);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_clientpendingpri() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_clientpendingpri();
  public:
  void unsafe_arena_set_allocated_clientpendingpri(
      ::HederaDefinitions::ReplicatedActorReference* clientpendingpri);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_clientpendingpri();

  // required .HederaDefinitions.FRotator TargetViewRotation = 27;
  bool has_targetviewrotation() const;
  private:
  bool _internal_has_targetviewrotation() const;
  public:
  void clear_targetviewrotation();
  const ::HederaDefinitions::FRotator& targetviewrotation() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FRotator* release_targetviewrotation();
  ::HederaDefinitions::FRotator* mutable_targetviewrotation();
  void set_allocated_targetviewrotation(::HederaDefinitions::FRotator* targetviewrotation);
  private:
  const ::HederaDefinitions::FRotator& _internal_targetviewrotation() const;
  ::HederaDefinitions::FRotator* _internal_mutable_targetviewrotation();
  public:
  void unsafe_arena_set_allocated_targetviewrotation(
      ::HederaDefinitions::FRotator* targetviewrotation);
  ::HederaDefinitions::FRotator* unsafe_arena_release_targetviewrotation();

  // required .HederaDefinitions.FEnvironmentalEffectInfo ActiveAudioEffect = 29;
  bool has_activeaudioeffect() const;
  private:
  bool _internal_has_activeaudioeffect() const;
  public:
  void clear_activeaudioeffect();
  const ::HederaDefinitions::FEnvironmentalEffectInfo& activeaudioeffect() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FEnvironmentalEffectInfo* release_activeaudioeffect();
  ::HederaDefinitions::FEnvironmentalEffectInfo* mutable_activeaudioeffect();
  void set_allocated_activeaudioeffect(::HederaDefinitions::FEnvironmentalEffectInfo* activeaudioeffect);
  private:
  const ::HederaDefinitions::FEnvironmentalEffectInfo& _internal_activeaudioeffect() const;
  ::HederaDefinitions::FEnvironmentalEffectInfo* _internal_mutable_activeaudioeffect();
  public:
  void unsafe_arena_set_allocated_activeaudioeffect(
      ::HederaDefinitions::FEnvironmentalEffectInfo* activeaudioeffect);
  ::HederaDefinitions::FEnvironmentalEffectInfo* unsafe_arena_release_activeaudioeffect();

  // required .HederaDefinitions.ReplicatedActorReference MyWillowPawn = 39;
  bool has_mywillowpawn() const;
  private:
  bool _internal_has_mywillowpawn() const;
  public:
  void clear_mywillowpawn();
  const ::HederaDefinitions::ReplicatedActorReference& mywillowpawn() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_mywillowpawn();
  ::HederaDefinitions::ReplicatedActorReference* mutable_mywillowpawn();
  void set_allocated_mywillowpawn(::HederaDefinitions::ReplicatedActorReference* mywillowpawn);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_mywillowpawn() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_mywillowpawn();
  public:
  void unsafe_arena_set_allocated_mywillowpawn(
      ::HederaDefinitions::ReplicatedActorReference* mywillowpawn);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_mywillowpawn();

  // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Object = 40;
  bool has_currentusableobject_object() const;
  private:
  bool _internal_has_currentusableobject_object() const;
  public:
  void clear_currentusableobject_object();
  const ::HederaDefinitions::NonReplicatedObjectReference& currentusableobject_object() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_currentusableobject_object();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_currentusableobject_object();
  void set_allocated_currentusableobject_object(::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_object);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_currentusableobject_object() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_currentusableobject_object();
  public:
  void unsafe_arena_set_allocated_currentusableobject_object(
      ::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_object);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_currentusableobject_object();

  // required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Interface = 41;
  bool has_currentusableobject_interface() const;
  private:
  bool _internal_has_currentusableobject_interface() const;
  public:
  void clear_currentusableobject_interface();
  const ::HederaDefinitions::NonReplicatedObjectReference& currentusableobject_interface() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_currentusableobject_interface();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_currentusableobject_interface();
  void set_allocated_currentusableobject_interface(::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_interface);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_currentusableobject_interface() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_currentusableobject_interface();
  public:
  void unsafe_arena_set_allocated_currentusableobject_interface(
      ::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_interface);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_currentusableobject_interface();

  // required .HederaDefinitions.FReplicatedDamageScreenParticle RecentDamageScreenParticle = 43;
  bool has_recentdamagescreenparticle() const;
  private:
  bool _internal_has_recentdamagescreenparticle() const;
  public:
  void clear_recentdamagescreenparticle();
  const ::HederaDefinitions::FReplicatedDamageScreenParticle& recentdamagescreenparticle() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FReplicatedDamageScreenParticle* release_recentdamagescreenparticle();
  ::HederaDefinitions::FReplicatedDamageScreenParticle* mutable_recentdamagescreenparticle();
  void set_allocated_recentdamagescreenparticle(::HederaDefinitions::FReplicatedDamageScreenParticle* recentdamagescreenparticle);
  private:
  const ::HederaDefinitions::FReplicatedDamageScreenParticle& _internal_recentdamagescreenparticle() const;
  ::HederaDefinitions::FReplicatedDamageScreenParticle* _internal_mutable_recentdamagescreenparticle();
  public:
  void unsafe_arena_set_allocated_recentdamagescreenparticle(
      ::HederaDefinitions::FReplicatedDamageScreenParticle* recentdamagescreenparticle);
  ::HederaDefinitions::FReplicatedDamageScreenParticle* unsafe_arena_release_recentdamagescreenparticle();

  // required .HederaDefinitions.FReplicatedProgressBarData UseProgressBar = 47;
  bool has_useprogressbar() const;
  private:
  bool _internal_has_useprogressbar() const;
  public:
  void clear_useprogressbar();
  const ::HederaDefinitions::FReplicatedProgressBarData& useprogressbar() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FReplicatedProgressBarData* release_useprogressbar();
  ::HederaDefinitions::FReplicatedProgressBarData* mutable_useprogressbar();
  void set_allocated_useprogressbar(::HederaDefinitions::FReplicatedProgressBarData* useprogressbar);
  private:
  const ::HederaDefinitions::FReplicatedProgressBarData& _internal_useprogressbar() const;
  ::HederaDefinitions::FReplicatedProgressBarData* _internal_mutable_useprogressbar();
  public:
  void unsafe_arena_set_allocated_useprogressbar(
      ::HederaDefinitions::FReplicatedProgressBarData* useprogressbar);
  ::HederaDefinitions::FReplicatedProgressBarData* unsafe_arena_release_useprogressbar();

  // required .HederaDefinitions.FCameraViewData ReplicatedCameraViewData = 49;
  bool has_replicatedcameraviewdata() const;
  private:
  bool _internal_has_replicatedcameraviewdata() const;
  public:
  void clear_replicatedcameraviewdata();
  const ::HederaDefinitions::FCameraViewData& replicatedcameraviewdata() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FCameraViewData* release_replicatedcameraviewdata();
  ::HederaDefinitions::FCameraViewData* mutable_replicatedcameraviewdata();
  void set_allocated_replicatedcameraviewdata(::HederaDefinitions::FCameraViewData* replicatedcameraviewdata);
  private:
  const ::HederaDefinitions::FCameraViewData& _internal_replicatedcameraviewdata() const;
  ::HederaDefinitions::FCameraViewData* _internal_mutable_replicatedcameraviewdata();
  public:
  void unsafe_arena_set_allocated_replicatedcameraviewdata(
      ::HederaDefinitions::FCameraViewData* replicatedcameraviewdata);
  ::HederaDefinitions::FCameraViewData* unsafe_arena_release_replicatedcameraviewdata();

  // required .HederaDefinitions.ReplicatedActorReference PipelineSummaryHistoryManager = 50;
  bool has_pipelinesummaryhistorymanager() const;
  private:
  bool _internal_has_pipelinesummaryhistorymanager() const;
  public:
  void clear_pipelinesummaryhistorymanager();
  const ::HederaDefinitions::ReplicatedActorReference& pipelinesummaryhistorymanager() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_pipelinesummaryhistorymanager();
  ::HederaDefinitions::ReplicatedActorReference* mutable_pipelinesummaryhistorymanager();
  void set_allocated_pipelinesummaryhistorymanager(::HederaDefinitions::ReplicatedActorReference* pipelinesummaryhistorymanager);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_pipelinesummaryhistorymanager() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_pipelinesummaryhistorymanager();
  public:
  void unsafe_arena_set_allocated_pipelinesummaryhistorymanager(
      ::HederaDefinitions::ReplicatedActorReference* pipelinesummaryhistorymanager);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_pipelinesummaryhistorymanager();

  // required float DrawScale = 3;
  bool has_drawscale() const;
  private:
  bool _internal_has_drawscale() const;
  public:
  void clear_drawscale();
  float drawscale() const;
  void set_drawscale(float value);
  private:
  float _internal_drawscale() const;
  void _internal_set_drawscale(float value);
  public:

  // required float CustomTimeDilation = 4;
  bool has_customtimedilation() const;
  private:
  bool _internal_has_customtimedilation() const;
  public:
  void clear_customtimedilation();
  float customtimedilation() const;
  void set_customtimedilation(float value);
  private:
  float _internal_customtimedilation() const;
  void _internal_set_customtimedilation(float value);
  public:

  // required uint32 Physics = 5;
  bool has_physics() const;
  private:
  bool _internal_has_physics() const;
  public:
  void clear_physics();
  uint32_t physics() const;
  void set_physics(uint32_t value);
  private:
  uint32_t _internal_physics() const;
  void _internal_set_physics(uint32_t value);
  public:

  // required uint32 RemoteRole = 6;
  bool has_remoterole() const;
  private:
  bool _internal_has_remoterole() const;
  public:
  void clear_remoterole();
  uint32_t remoterole() const;
  void set_remoterole(uint32_t value);
  private:
  uint32_t _internal_remoterole() const;
  void _internal_set_remoterole(uint32_t value);
  public:

  // required uint32 Role = 7;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // required uint32 ReplicatedCollisionType = 8;
  bool has_replicatedcollisiontype() const;
  private:
  bool _internal_has_replicatedcollisiontype() const;
  public:
  void clear_replicatedcollisiontype();
  uint32_t replicatedcollisiontype() const;
  void set_replicatedcollisiontype(uint32_t value);
  private:
  uint32_t _internal_replicatedcollisiontype() const;
  void _internal_set_replicatedcollisiontype(uint32_t value);
  public:

  // required bool bHidden = 11;
  bool has_bhidden() const;
  private:
  bool _internal_has_bhidden() const;
  public:
  void clear_bhidden();
  bool bhidden() const;
  void set_bhidden(bool value);
  private:
  bool _internal_bhidden() const;
  void _internal_set_bhidden(bool value);
  public:

  // required bool bTearOff = 12;
  bool has_btearoff() const;
  private:
  bool _internal_has_btearoff() const;
  public:
  void clear_btearoff();
  bool btearoff() const;
  void set_btearoff(bool value);
  private:
  bool _internal_btearoff() const;
  void _internal_set_btearoff(bool value);
  public:

  // required bool bHardAttach = 13;
  bool has_bhardattach() const;
  private:
  bool _internal_has_bhardattach() const;
  public:
  void clear_bhardattach();
  bool bhardattach() const;
  void set_bhardattach(bool value);
  private:
  bool _internal_bhardattach() const;
  void _internal_set_bhardattach(bool value);
  public:

  // required bool bCollideActors = 14;
  bool has_bcollideactors() const;
  private:
  bool _internal_has_bcollideactors() const;
  public:
  void clear_bcollideactors();
  bool bcollideactors() const;
  void set_bcollideactors(bool value);
  private:
  bool _internal_bcollideactors() const;
  void _internal_set_bcollideactors(bool value);
  public:

  // required bool bCollideWorld = 15;
  bool has_bcollideworld() const;
  private:
  bool _internal_has_bcollideworld() const;
  public:
  void clear_bcollideworld();
  bool bcollideworld() const;
  void set_bcollideworld(bool value);
  private:
  bool _internal_bcollideworld() const;
  void _internal_set_bcollideworld(bool value);
  public:

  // required bool bBlockActors = 16;
  bool has_bblockactors() const;
  private:
  bool _internal_has_bblockactors() const;
  public:
  void clear_bblockactors();
  bool bblockactors() const;
  void set_bblockactors(bool value);
  private:
  bool _internal_bblockactors() const;
  void _internal_set_bblockactors(bool value);
  public:

  // required bool bProjTarget = 17;
  bool has_bprojtarget() const;
  private:
  bool _internal_has_bprojtarget() const;
  public:
  void clear_bprojtarget();
  bool bprojtarget() const;
  void set_bprojtarget(bool value);
  private:
  bool _internal_bprojtarget() const;
  void _internal_set_bprojtarget(bool value);
  public:

  // required bool bNetOwner = 18;
  bool has_bnetowner() const;
  private:
  bool _internal_has_bnetowner() const;
  public:
  void clear_bnetowner();
  bool bnetowner() const;
  void set_bnetowner(bool value);
  private:
  bool _internal_bnetowner() const;
  void _internal_set_bnetowner(bool value);
  public:

  // required float TargetEyeHeight = 28;
  bool has_targeteyeheight() const;
  private:
  bool _internal_has_targeteyeheight() const;
  public:
  void clear_targeteyeheight();
  float targeteyeheight() const;
  void set_targeteyeheight(float value);
  private:
  float _internal_targeteyeheight() const;
  void _internal_set_targeteyeheight(float value);
  public:

  // required bool bHideAmmoOnHud = 30;
  bool has_bhideammoonhud() const;
  private:
  bool _internal_has_bhideammoonhud() const;
  public:
  void clear_bhideammoonhud();
  bool bhideammoonhud() const;
  void set_bhideammoonhud(bool value);
  private:
  bool _internal_bhideammoonhud() const;
  void _internal_set_bhideammoonhud(bool value);
  public:

  // required bool bHideCompassOnHUD = 31;
  bool has_bhidecompassonhud() const;
  private:
  bool _internal_has_bhidecompassonhud() const;
  public:
  void clear_bhidecompassonhud();
  bool bhidecompassonhud() const;
  void set_bhidecompassonhud(bool value);
  private:
  bool _internal_bhidecompassonhud() const;
  void _internal_set_bhidecompassonhud(bool value);
  public:

  // required bool bHideSkillsOnHUD = 32;
  bool has_bhideskillsonhud() const;
  private:
  bool _internal_has_bhideskillsonhud() const;
  public:
  void clear_bhideskillsonhud();
  bool bhideskillsonhud() const;
  void set_bhideskillsonhud(bool value);
  private:
  bool _internal_bhideskillsonhud() const;
  void _internal_set_bhideskillsonhud(bool value);
  public:

  // required bool bHideXPOnHUD = 33;
  bool has_bhidexponhud() const;
  private:
  bool _internal_has_bhidexponhud() const;
  public:
  void clear_bhidexponhud();
  bool bhidexponhud() const;
  void set_bhidexponhud(bool value);
  private:
  bool _internal_bhidexponhud() const;
  void _internal_set_bhidexponhud(bool value);
  public:

  // required bool bConsoleController = 34;
  bool has_bconsolecontroller() const;
  private:
  bool _internal_has_bconsolecontroller() const;
  public:
  void clear_bconsolecontroller();
  bool bconsolecontroller() const;
  void set_bconsolecontroller(bool value);
  private:
  bool _internal_bconsolecontroller() const;
  void _internal_set_bconsolecontroller(bool value);
  public:

  // required bool bDisplayTradeIcon = 35;
  bool has_bdisplaytradeicon() const;
  private:
  bool _internal_has_bdisplaytradeicon() const;
  public:
  void clear_bdisplaytradeicon();
  bool bdisplaytradeicon() const;
  void set_bdisplaytradeicon(bool value);
  private:
  bool _internal_bdisplaytradeicon() const;
  void _internal_set_bdisplaytradeicon(bool value);
  public:

  // required bool bDisplayTradeDisabledIcon = 36;
  bool has_bdisplaytradedisabledicon() const;
  private:
  bool _internal_has_bdisplaytradedisabledicon() const;
  public:
  void clear_bdisplaytradedisabledicon();
  bool bdisplaytradedisabledicon() const;
  void set_bdisplaytradedisabledicon(bool value);
  private:
  bool _internal_bdisplaytradedisabledicon() const;
  void _internal_set_bdisplaytradedisabledicon(bool value);
  public:

  // required bool bResurrectAll = 37;
  bool has_bresurrectall() const;
  private:
  bool _internal_has_bresurrectall() const;
  public:
  void clear_bresurrectall();
  bool bresurrectall() const;
  void set_bresurrectall(bool value);
  private:
  bool _internal_bresurrectall() const;
  void _internal_set_bresurrectall(bool value);
  public:

  // required bool bPlayingTeleporterSound = 38;
  bool has_bplayingteleportersound() const;
  private:
  bool _internal_has_bplayingteleportersound() const;
  public:
  void clear_bplayingteleportersound();
  bool bplayingteleportersound() const;
  void set_bplayingteleportersound(bool value);
  private:
  bool _internal_bplayingteleportersound() const;
  void _internal_set_bplayingteleportersound(bool value);
  public:

  // required float FOVModifierSpeed = 44;
  bool has_fovmodifierspeed() const;
  private:
  bool _internal_has_fovmodifierspeed() const;
  public:
  void clear_fovmodifierspeed();
  float fovmodifierspeed() const;
  void set_fovmodifierspeed(float value);
  private:
  float _internal_fovmodifierspeed() const;
  void _internal_set_fovmodifierspeed(float value);
  public:

  // required float FOVModifierSpeedBaseValue = 45;
  bool has_fovmodifierspeedbasevalue() const;
  private:
  bool _internal_has_fovmodifierspeedbasevalue() const;
  public:
  void clear_fovmodifierspeedbasevalue();
  float fovmodifierspeedbasevalue() const;
  void set_fovmodifierspeedbasevalue(float value);
  private:
  float _internal_fovmodifierspeedbasevalue() const;
  void _internal_set_fovmodifierspeedbasevalue(float value);
  public:

  // required float PostProcessDurationMultiplier = 46;
  bool has_postprocessdurationmultiplier() const;
  private:
  bool _internal_has_postprocessdurationmultiplier() const;
  public:
  void clear_postprocessdurationmultiplier();
  float postprocessdurationmultiplier() const;
  void set_postprocessdurationmultiplier(float value);
  private:
  float _internal_postprocessdurationmultiplier() const;
  void _internal_set_postprocessdurationmultiplier(float value);
  public:

  // required int32 TargetedWarningSeverity = 48;
  bool has_targetedwarningseverity() const;
  private:
  bool _internal_has_targetedwarningseverity() const;
  public:
  void clear_targetedwarningseverity();
  int32_t targetedwarningseverity() const;
  void set_targetedwarningseverity(int32_t value);
  private:
  int32_t _internal_targetedwarningseverity() const;
  void _internal_set_targetedwarningseverity(int32_t value);
  public:

  // required int32 CurrentMinimapActorSelectionIndex = 52;
  bool has_currentminimapactorselectionindex() const;
  private:
  bool _internal_has_currentminimapactorselectionindex() const;
  public:
  void clear_currentminimapactorselectionindex();
  int32_t currentminimapactorselectionindex() const;
  void set_currentminimapactorselectionindex(int32_t value);
  private:
  int32_t _internal_currentminimapactorselectionindex() const;
  void _internal_set_currentminimapactorselectionindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.APoplarPlayerController)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FInteractionIconWithOverrides > currentinteractionicon_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FActorSelectionDataContainer > minimapactorselectdata_;
    ::HederaDefinitions::FVector* location_;
    ::HederaDefinitions::FRotator* rotation_;
    ::HederaDefinitions::ReplicatedActorReference* owner_;
    ::HederaDefinitions::ReplicatedActorReference* base_;
    ::HederaDefinitions::ReplicatedActorReference* instigator_;
    ::HederaDefinitions::FVector* velocity_;
    ::HederaDefinitions::FName* basebonename_;
    ::HederaDefinitions::FVector* relativelocation_;
    ::HederaDefinitions::FRotator* relativerotation_;
    ::HederaDefinitions::ReplicatedActorReference* pawn_;
    ::HederaDefinitions::ReplicatedActorReference* clientpendingpsi_;
    ::HederaDefinitions::ReplicatedActorReference* clientpendingpri_;
    ::HederaDefinitions::FRotator* targetviewrotation_;
    ::HederaDefinitions::FEnvironmentalEffectInfo* activeaudioeffect_;
    ::HederaDefinitions::ReplicatedActorReference* mywillowpawn_;
    ::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_object_;
    ::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_interface_;
    ::HederaDefinitions::FReplicatedDamageScreenParticle* recentdamagescreenparticle_;
    ::HederaDefinitions::FReplicatedProgressBarData* useprogressbar_;
    ::HederaDefinitions::FCameraViewData* replicatedcameraviewdata_;
    ::HederaDefinitions::ReplicatedActorReference* pipelinesummaryhistorymanager_;
    float drawscale_;
    float customtimedilation_;
    uint32_t physics_;
    uint32_t remoterole_;
    uint32_t role_;
    uint32_t replicatedcollisiontype_;
    bool bhidden_;
    bool btearoff_;
    bool bhardattach_;
    bool bcollideactors_;
    bool bcollideworld_;
    bool bblockactors_;
    bool bprojtarget_;
    bool bnetowner_;
    float targeteyeheight_;
    bool bhideammoonhud_;
    bool bhidecompassonhud_;
    bool bhideskillsonhud_;
    bool bhidexponhud_;
    bool bconsolecontroller_;
    bool bdisplaytradeicon_;
    bool bdisplaytradedisabledicon_;
    bool bresurrectall_;
    bool bplayingteleportersound_;
    float fovmodifierspeed_;
    float fovmodifierspeedbasevalue_;
    float postprocessdurationmultiplier_;
    int32_t targetedwarningseverity_;
    int32_t currentminimapactorselectionindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FUniqueID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FUniqueID) */ {
 public:
  inline FUniqueID() : FUniqueID(nullptr) {}
  ~FUniqueID() override;
  explicit PROTOBUF_CONSTEXPR FUniqueID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FUniqueID(const FUniqueID& from);
  FUniqueID(FUniqueID&& from) noexcept
    : FUniqueID() {
    *this = ::std::move(from);
  }

  inline FUniqueID& operator=(const FUniqueID& from) {
    CopyFrom(from);
    return *this;
  }
  inline FUniqueID& operator=(FUniqueID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FUniqueID& default_instance() {
    return *internal_default_instance();
  }
  static inline const FUniqueID* internal_default_instance() {
    return reinterpret_cast<const FUniqueID*>(
               &_FUniqueID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FUniqueID& a, FUniqueID& b) {
    a.Swap(&b);
  }
  inline void Swap(FUniqueID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FUniqueID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FUniqueID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FUniqueID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FUniqueID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FUniqueID& from) {
    FUniqueID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FUniqueID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FUniqueID";
  }
  protected:
  explicit FUniqueID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawIDFieldNumber = 1,
    kBHasValueFieldNumber = 2,
  };
  // repeated int32 RawID = 1;
  int rawid_size() const;
  private:
  int _internal_rawid_size() const;
  public:
  void clear_rawid();
  private:
  int32_t _internal_rawid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rawid() const;
  void _internal_add_rawid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rawid();
  public:
  int32_t rawid(int index) const;
  void set_rawid(int index, int32_t value);
  void add_rawid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rawid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rawid();

  // required bool bHasValue = 2;
  bool has_bhasvalue() const;
  private:
  bool _internal_has_bhasvalue() const;
  public:
  void clear_bhasvalue();
  bool bhasvalue() const;
  void set_bhasvalue(bool value);
  private:
  bool _internal_bhasvalue() const;
  void _internal_set_bhasvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FUniqueID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rawid_;
    bool bhasvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FCurrencyState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FCurrencyState) */ {
 public:
  inline FCurrencyState() : FCurrencyState(nullptr) {}
  ~FCurrencyState() override;
  explicit PROTOBUF_CONSTEXPR FCurrencyState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FCurrencyState(const FCurrencyState& from);
  FCurrencyState(FCurrencyState&& from) noexcept
    : FCurrencyState() {
    *this = ::std::move(from);
  }

  inline FCurrencyState& operator=(const FCurrencyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCurrencyState& operator=(FCurrencyState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FCurrencyState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FCurrencyState* internal_default_instance() {
    return reinterpret_cast<const FCurrencyState*>(
               &_FCurrencyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FCurrencyState& a, FCurrencyState& b) {
    a.Swap(&b);
  }
  inline void Swap(FCurrencyState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FCurrencyState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FCurrencyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FCurrencyState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FCurrencyState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FCurrencyState& from) {
    FCurrencyState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FCurrencyState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FCurrencyState";
  }
  protected:
  explicit FCurrencyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCurrentAmountFieldNumber = 2,
    kLastKnownAmountFieldNumber = 3,
  };
  // required int32 Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // required float CurrentAmount = 2;
  bool has_currentamount() const;
  private:
  bool _internal_has_currentamount() const;
  public:
  void clear_currentamount();
  float currentamount() const;
  void set_currentamount(float value);
  private:
  float _internal_currentamount() const;
  void _internal_set_currentamount(float value);
  public:

  // required float LastKnownAmount = 3;
  bool has_lastknownamount() const;
  private:
  bool _internal_has_lastknownamount() const;
  public:
  void clear_lastknownamount();
  float lastknownamount() const;
  void set_lastknownamount(float value);
  private:
  float _internal_lastknownamount() const;
  void _internal_set_lastknownamount(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FCurrencyState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t type_;
    float currentamount_;
    float lastknownamount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FResourcePoolReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FResourcePoolReference) */ {
 public:
  inline FResourcePoolReference() : FResourcePoolReference(nullptr) {}
  ~FResourcePoolReference() override;
  explicit PROTOBUF_CONSTEXPR FResourcePoolReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FResourcePoolReference(const FResourcePoolReference& from);
  FResourcePoolReference(FResourcePoolReference&& from) noexcept
    : FResourcePoolReference() {
    *this = ::std::move(from);
  }

  inline FResourcePoolReference& operator=(const FResourcePoolReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline FResourcePoolReference& operator=(FResourcePoolReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FResourcePoolReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const FResourcePoolReference* internal_default_instance() {
    return reinterpret_cast<const FResourcePoolReference*>(
               &_FResourcePoolReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FResourcePoolReference& a, FResourcePoolReference& b) {
    a.Swap(&b);
  }
  inline void Swap(FResourcePoolReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FResourcePoolReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FResourcePoolReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FResourcePoolReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FResourcePoolReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FResourcePoolReference& from) {
    FResourcePoolReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FResourcePoolReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FResourcePoolReference";
  }
  protected:
  explicit FResourcePoolReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolManagerFieldNumber = 1,
    kDataFieldNumber = 4,
    kPoolIndexInManagerFieldNumber = 2,
    kPoolGUIDFieldNumber = 3,
  };
  // required .HederaDefinitions.ReplicatedActorReference PoolManager = 1;
  bool has_poolmanager() const;
  private:
  bool _internal_has_poolmanager() const;
  public:
  void clear_poolmanager();
  const ::HederaDefinitions::ReplicatedActorReference& poolmanager() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_poolmanager();
  ::HederaDefinitions::ReplicatedActorReference* mutable_poolmanager();
  void set_allocated_poolmanager(::HederaDefinitions::ReplicatedActorReference* poolmanager);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_poolmanager() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_poolmanager();
  public:
  void unsafe_arena_set_allocated_poolmanager(
      ::HederaDefinitions::ReplicatedActorReference* poolmanager);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_poolmanager();

  // required .HederaDefinitions.NonReplicatedObjectReference Data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::HederaDefinitions::NonReplicatedObjectReference& data() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_data();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_data();
  void set_allocated_data(::HederaDefinitions::NonReplicatedObjectReference* data);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_data() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::HederaDefinitions::NonReplicatedObjectReference* data);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_data();

  // required int32 PoolIndexInManager = 2;
  bool has_poolindexinmanager() const;
  private:
  bool _internal_has_poolindexinmanager() const;
  public:
  void clear_poolindexinmanager();
  int32_t poolindexinmanager() const;
  void set_poolindexinmanager(int32_t value);
  private:
  int32_t _internal_poolindexinmanager() const;
  void _internal_set_poolindexinmanager(int32_t value);
  public:

  // required int32 PoolGUID = 3;
  bool has_poolguid() const;
  private:
  bool _internal_has_poolguid() const;
  public:
  void clear_poolguid();
  int32_t poolguid() const;
  void set_poolguid(int32_t value);
  private:
  int32_t _internal_poolguid() const;
  void _internal_set_poolguid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FResourcePoolReference)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::ReplicatedActorReference* poolmanager_;
    ::HederaDefinitions::NonReplicatedObjectReference* data_;
    int32_t poolindexinmanager_;
    int32_t poolguid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedNounAttributeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedNounAttributeState) */ {
 public:
  inline FReplicatedNounAttributeState() : FReplicatedNounAttributeState(nullptr) {}
  ~FReplicatedNounAttributeState() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedNounAttributeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedNounAttributeState(const FReplicatedNounAttributeState& from);
  FReplicatedNounAttributeState(FReplicatedNounAttributeState&& from) noexcept
    : FReplicatedNounAttributeState() {
    *this = ::std::move(from);
  }

  inline FReplicatedNounAttributeState& operator=(const FReplicatedNounAttributeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedNounAttributeState& operator=(FReplicatedNounAttributeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedNounAttributeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedNounAttributeState* internal_default_instance() {
    return reinterpret_cast<const FReplicatedNounAttributeState*>(
               &_FReplicatedNounAttributeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FReplicatedNounAttributeState& a, FReplicatedNounAttributeState& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedNounAttributeState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedNounAttributeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedNounAttributeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedNounAttributeState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedNounAttributeState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedNounAttributeState& from) {
    FReplicatedNounAttributeState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedNounAttributeState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedNounAttributeState";
  }
  protected:
  explicit FReplicatedNounAttributeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNounNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kBOnlyRelevantToOwnerFieldNumber = 3,
  };
  // required .HederaDefinitions.FName NounName = 1;
  bool has_nounname() const;
  private:
  bool _internal_has_nounname() const;
  public:
  void clear_nounname();
  const ::HederaDefinitions::FName& nounname() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FName* release_nounname();
  ::HederaDefinitions::FName* mutable_nounname();
  void set_allocated_nounname(::HederaDefinitions::FName* nounname);
  private:
  const ::HederaDefinitions::FName& _internal_nounname() const;
  ::HederaDefinitions::FName* _internal_mutable_nounname();
  public:
  void unsafe_arena_set_allocated_nounname(
      ::HederaDefinitions::FName* nounname);
  ::HederaDefinitions::FName* unsafe_arena_release_nounname();

  // required float Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // required bool bOnlyRelevantToOwner = 3;
  bool has_bonlyrelevanttoowner() const;
  private:
  bool _internal_has_bonlyrelevanttoowner() const;
  public:
  void clear_bonlyrelevanttoowner();
  bool bonlyrelevanttoowner() const;
  void set_bonlyrelevanttoowner(bool value);
  private:
  bool _internal_bonlyrelevanttoowner() const;
  void _internal_set_bonlyrelevanttoowner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedNounAttributeState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::FName* nounname_;
    float value_;
    bool bonlyrelevanttoowner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FWeaponDefinitionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FWeaponDefinitionData) */ {
 public:
  inline FWeaponDefinitionData() : FWeaponDefinitionData(nullptr) {}
  ~FWeaponDefinitionData() override;
  explicit PROTOBUF_CONSTEXPR FWeaponDefinitionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FWeaponDefinitionData(const FWeaponDefinitionData& from);
  FWeaponDefinitionData(FWeaponDefinitionData&& from) noexcept
    : FWeaponDefinitionData() {
    *this = ::std::move(from);
  }

  inline FWeaponDefinitionData& operator=(const FWeaponDefinitionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FWeaponDefinitionData& operator=(FWeaponDefinitionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FWeaponDefinitionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FWeaponDefinitionData* internal_default_instance() {
    return reinterpret_cast<const FWeaponDefinitionData*>(
               &_FWeaponDefinitionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FWeaponDefinitionData& a, FWeaponDefinitionData& b) {
    a.Swap(&b);
  }
  inline void Swap(FWeaponDefinitionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FWeaponDefinitionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FWeaponDefinitionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FWeaponDefinitionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FWeaponDefinitionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FWeaponDefinitionData& from) {
    FWeaponDefinitionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FWeaponDefinitionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FWeaponDefinitionData";
  }
  protected:
  explicit FWeaponDefinitionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponTypeDefinitionFieldNumber = 1,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference WeaponTypeDefinition = 1;
  bool has_weapontypedefinition() const;
  private:
  bool _internal_has_weapontypedefinition() const;
  public:
  void clear_weapontypedefinition();
  const ::HederaDefinitions::NonReplicatedObjectReference& weapontypedefinition() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_weapontypedefinition();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_weapontypedefinition();
  void set_allocated_weapontypedefinition(::HederaDefinitions::NonReplicatedObjectReference* weapontypedefinition);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_weapontypedefinition() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_weapontypedefinition();
  public:
  void unsafe_arena_set_allocated_weapontypedefinition(
      ::HederaDefinitions::NonReplicatedObjectReference* weapontypedefinition);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_weapontypedefinition();

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FWeaponDefinitionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* weapontypedefinition_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedStandInGear final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedStandInGear) */ {
 public:
  inline FReplicatedStandInGear() : FReplicatedStandInGear(nullptr) {}
  ~FReplicatedStandInGear() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedStandInGear(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedStandInGear(const FReplicatedStandInGear& from);
  FReplicatedStandInGear(FReplicatedStandInGear&& from) noexcept
    : FReplicatedStandInGear() {
    *this = ::std::move(from);
  }

  inline FReplicatedStandInGear& operator=(const FReplicatedStandInGear& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedStandInGear& operator=(FReplicatedStandInGear&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedStandInGear& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedStandInGear* internal_default_instance() {
    return reinterpret_cast<const FReplicatedStandInGear*>(
               &_FReplicatedStandInGear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FReplicatedStandInGear& a, FReplicatedStandInGear& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedStandInGear* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedStandInGear* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedStandInGear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedStandInGear>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedStandInGear& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedStandInGear& from) {
    FReplicatedStandInGear::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedStandInGear* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedStandInGear";
  }
  protected:
  explicit FReplicatedStandInGear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeapon1DataFieldNumber = 1,
    kWeapon2DataFieldNumber = 2,
  };
  // required .HederaDefinitions.FWeaponDefinitionData Weapon1Data = 1;
  bool has_weapon1data() const;
  private:
  bool _internal_has_weapon1data() const;
  public:
  void clear_weapon1data();
  const ::HederaDefinitions::FWeaponDefinitionData& weapon1data() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FWeaponDefinitionData* release_weapon1data();
  ::HederaDefinitions::FWeaponDefinitionData* mutable_weapon1data();
  void set_allocated_weapon1data(::HederaDefinitions::FWeaponDefinitionData* weapon1data);
  private:
  const ::HederaDefinitions::FWeaponDefinitionData& _internal_weapon1data() const;
  ::HederaDefinitions::FWeaponDefinitionData* _internal_mutable_weapon1data();
  public:
  void unsafe_arena_set_allocated_weapon1data(
      ::HederaDefinitions::FWeaponDefinitionData* weapon1data);
  ::HederaDefinitions::FWeaponDefinitionData* unsafe_arena_release_weapon1data();

  // required .HederaDefinitions.FWeaponDefinitionData Weapon2Data = 2;
  bool has_weapon2data() const;
  private:
  bool _internal_has_weapon2data() const;
  public:
  void clear_weapon2data();
  const ::HederaDefinitions::FWeaponDefinitionData& weapon2data() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FWeaponDefinitionData* release_weapon2data();
  ::HederaDefinitions::FWeaponDefinitionData* mutable_weapon2data();
  void set_allocated_weapon2data(::HederaDefinitions::FWeaponDefinitionData* weapon2data);
  private:
  const ::HederaDefinitions::FWeaponDefinitionData& _internal_weapon2data() const;
  ::HederaDefinitions::FWeaponDefinitionData* _internal_mutable_weapon2data();
  public:
  void unsafe_arena_set_allocated_weapon2data(
      ::HederaDefinitions::FWeaponDefinitionData* weapon2data);
  ::HederaDefinitions::FWeaponDefinitionData* unsafe_arena_release_weapon2data();

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedStandInGear)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::FWeaponDefinitionData* weapon1data_;
    ::HederaDefinitions::FWeaponDefinitionData* weapon2data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FTrackedSkillState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FTrackedSkillState) */ {
 public:
  inline FTrackedSkillState() : FTrackedSkillState(nullptr) {}
  ~FTrackedSkillState() override;
  explicit PROTOBUF_CONSTEXPR FTrackedSkillState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FTrackedSkillState(const FTrackedSkillState& from);
  FTrackedSkillState(FTrackedSkillState&& from) noexcept
    : FTrackedSkillState() {
    *this = ::std::move(from);
  }

  inline FTrackedSkillState& operator=(const FTrackedSkillState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTrackedSkillState& operator=(FTrackedSkillState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTrackedSkillState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTrackedSkillState* internal_default_instance() {
    return reinterpret_cast<const FTrackedSkillState*>(
               &_FTrackedSkillState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FTrackedSkillState& a, FTrackedSkillState& b) {
    a.Swap(&b);
  }
  inline void Swap(FTrackedSkillState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTrackedSkillState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FTrackedSkillState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FTrackedSkillState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FTrackedSkillState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FTrackedSkillState& from) {
    FTrackedSkillState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTrackedSkillState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FTrackedSkillState";
  }
  protected:
  explicit FTrackedSkillState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillDefFieldNumber = 1,
    kPackedStackCountAndPercentCompleteFieldNumber = 2,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference SkillDef = 1;
  bool has_skilldef() const;
  private:
  bool _internal_has_skilldef() const;
  public:
  void clear_skilldef();
  const ::HederaDefinitions::NonReplicatedObjectReference& skilldef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_skilldef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_skilldef();
  void set_allocated_skilldef(::HederaDefinitions::NonReplicatedObjectReference* skilldef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_skilldef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_skilldef();
  public:
  void unsafe_arena_set_allocated_skilldef(
      ::HederaDefinitions::NonReplicatedObjectReference* skilldef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_skilldef();

  // required int32 PackedStackCountAndPercentComplete = 2;
  bool has_packedstackcountandpercentcomplete() const;
  private:
  bool _internal_has_packedstackcountandpercentcomplete() const;
  public:
  void clear_packedstackcountandpercentcomplete();
  int32_t packedstackcountandpercentcomplete() const;
  void set_packedstackcountandpercentcomplete(int32_t value);
  private:
  int32_t _internal_packedstackcountandpercentcomplete() const;
  void _internal_set_packedstackcountandpercentcomplete(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FTrackedSkillState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* skilldef_;
    int32_t packedstackcountandpercentcomplete_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FManagedActorCountData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FManagedActorCountData) */ {
 public:
  inline FManagedActorCountData() : FManagedActorCountData(nullptr) {}
  ~FManagedActorCountData() override;
  explicit PROTOBUF_CONSTEXPR FManagedActorCountData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FManagedActorCountData(const FManagedActorCountData& from);
  FManagedActorCountData(FManagedActorCountData&& from) noexcept
    : FManagedActorCountData() {
    *this = ::std::move(from);
  }

  inline FManagedActorCountData& operator=(const FManagedActorCountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FManagedActorCountData& operator=(FManagedActorCountData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FManagedActorCountData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FManagedActorCountData* internal_default_instance() {
    return reinterpret_cast<const FManagedActorCountData*>(
               &_FManagedActorCountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FManagedActorCountData& a, FManagedActorCountData& b) {
    a.Swap(&b);
  }
  inline void Swap(FManagedActorCountData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FManagedActorCountData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FManagedActorCountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FManagedActorCountData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FManagedActorCountData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FManagedActorCountData& from) {
    FManagedActorCountData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FManagedActorCountData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FManagedActorCountData";
  }
  protected:
  explicit FManagedActorCountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::HederaDefinitions::NonReplicatedObjectReference& type() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_type();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_type();
  void set_allocated_type(::HederaDefinitions::NonReplicatedObjectReference* type);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_type() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::HederaDefinitions::NonReplicatedObjectReference* type);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_type();

  // required int32 Count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FManagedActorCountData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* type_;
    int32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedPerkItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedPerkItem) */ {
 public:
  inline FReplicatedPerkItem() : FReplicatedPerkItem(nullptr) {}
  ~FReplicatedPerkItem() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedPerkItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedPerkItem(const FReplicatedPerkItem& from);
  FReplicatedPerkItem(FReplicatedPerkItem&& from) noexcept
    : FReplicatedPerkItem() {
    *this = ::std::move(from);
  }

  inline FReplicatedPerkItem& operator=(const FReplicatedPerkItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedPerkItem& operator=(FReplicatedPerkItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedPerkItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedPerkItem* internal_default_instance() {
    return reinterpret_cast<const FReplicatedPerkItem*>(
               &_FReplicatedPerkItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FReplicatedPerkItem& a, FReplicatedPerkItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedPerkItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedPerkItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedPerkItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedPerkItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedPerkItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedPerkItem& from) {
    FReplicatedPerkItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedPerkItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedPerkItem";
  }
  protected:
  explicit FReplicatedPerkItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaIDFieldNumber = 1,
    kAssetKeyFieldNumber = 2,
    kApolloJSONFieldNumber = 7,
    kPlayerIDFieldNumber = 6,
    kPerkFunctionFieldNumber = 10,
    kWearableFieldNumber = 11,
    kItemLevelFieldNumber = 4,
    kRarityFieldNumber = 5,
    kBCanUseFieldNumber = 3,
    kBActiveFieldNumber = 9,
    kEntitlementIndexFieldNumber = 8,
  };
  // required string MetaID = 1;
  bool has_metaid() const;
  private:
  bool _internal_has_metaid() const;
  public:
  void clear_metaid();
  const std::string& metaid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metaid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metaid();
  PROTOBUF_NODISCARD std::string* release_metaid();
  void set_allocated_metaid(std::string* metaid);
  private:
  const std::string& _internal_metaid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metaid(const std::string& value);
  std::string* _internal_mutable_metaid();
  public:

  // required string AssetKey = 2;
  bool has_assetkey() const;
  private:
  bool _internal_has_assetkey() const;
  public:
  void clear_assetkey();
  const std::string& assetkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assetkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assetkey();
  PROTOBUF_NODISCARD std::string* release_assetkey();
  void set_allocated_assetkey(std::string* assetkey);
  private:
  const std::string& _internal_assetkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assetkey(const std::string& value);
  std::string* _internal_mutable_assetkey();
  public:

  // required string ApolloJSON = 7;
  bool has_apollojson() const;
  private:
  bool _internal_has_apollojson() const;
  public:
  void clear_apollojson();
  const std::string& apollojson() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apollojson(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apollojson();
  PROTOBUF_NODISCARD std::string* release_apollojson();
  void set_allocated_apollojson(std::string* apollojson);
  private:
  const std::string& _internal_apollojson() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apollojson(const std::string& value);
  std::string* _internal_mutable_apollojson();
  public:

  // required .HederaDefinitions.FUniqueID PlayerID = 6;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const ::HederaDefinitions::FUniqueID& playerid() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FUniqueID* release_playerid();
  ::HederaDefinitions::FUniqueID* mutable_playerid();
  void set_allocated_playerid(::HederaDefinitions::FUniqueID* playerid);
  private:
  const ::HederaDefinitions::FUniqueID& _internal_playerid() const;
  ::HederaDefinitions::FUniqueID* _internal_mutable_playerid();
  public:
  void unsafe_arena_set_allocated_playerid(
      ::HederaDefinitions::FUniqueID* playerid);
  ::HederaDefinitions::FUniqueID* unsafe_arena_release_playerid();

  // required .HederaDefinitions.NonReplicatedObjectReference PerkFunction = 10;
  bool has_perkfunction() const;
  private:
  bool _internal_has_perkfunction() const;
  public:
  void clear_perkfunction();
  const ::HederaDefinitions::NonReplicatedObjectReference& perkfunction() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_perkfunction();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_perkfunction();
  void set_allocated_perkfunction(::HederaDefinitions::NonReplicatedObjectReference* perkfunction);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_perkfunction() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_perkfunction();
  public:
  void unsafe_arena_set_allocated_perkfunction(
      ::HederaDefinitions::NonReplicatedObjectReference* perkfunction);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_perkfunction();

  // required .HederaDefinitions.NonReplicatedObjectReference Wearable = 11;
  bool has_wearable() const;
  private:
  bool _internal_has_wearable() const;
  public:
  void clear_wearable();
  const ::HederaDefinitions::NonReplicatedObjectReference& wearable() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_wearable();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_wearable();
  void set_allocated_wearable(::HederaDefinitions::NonReplicatedObjectReference* wearable);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_wearable() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_wearable();
  public:
  void unsafe_arena_set_allocated_wearable(
      ::HederaDefinitions::NonReplicatedObjectReference* wearable);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_wearable();

  // required int32 ItemLevel = 4;
  bool has_itemlevel() const;
  private:
  bool _internal_has_itemlevel() const;
  public:
  void clear_itemlevel();
  int32_t itemlevel() const;
  void set_itemlevel(int32_t value);
  private:
  int32_t _internal_itemlevel() const;
  void _internal_set_itemlevel(int32_t value);
  public:

  // required int32 Rarity = 5;
  bool has_rarity() const;
  private:
  bool _internal_has_rarity() const;
  public:
  void clear_rarity();
  int32_t rarity() const;
  void set_rarity(int32_t value);
  private:
  int32_t _internal_rarity() const;
  void _internal_set_rarity(int32_t value);
  public:

  // required bool bCanUse = 3;
  bool has_bcanuse() const;
  private:
  bool _internal_has_bcanuse() const;
  public:
  void clear_bcanuse();
  bool bcanuse() const;
  void set_bcanuse(bool value);
  private:
  bool _internal_bcanuse() const;
  void _internal_set_bcanuse(bool value);
  public:

  // required bool bActive = 9;
  bool has_bactive() const;
  private:
  bool _internal_has_bactive() const;
  public:
  void clear_bactive();
  bool bactive() const;
  void set_bactive(bool value);
  private:
  bool _internal_bactive() const;
  void _internal_set_bactive(bool value);
  public:

  // required int32 EntitlementIndex = 8;
  bool has_entitlementindex() const;
  private:
  bool _internal_has_entitlementindex() const;
  public:
  void clear_entitlementindex();
  int32_t entitlementindex() const;
  void set_entitlementindex(int32_t value);
  private:
  int32_t _internal_entitlementindex() const;
  void _internal_set_entitlementindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedPerkItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apollojson_;
    ::HederaDefinitions::FUniqueID* playerid_;
    ::HederaDefinitions::NonReplicatedObjectReference* perkfunction_;
    ::HederaDefinitions::NonReplicatedObjectReference* wearable_;
    int32_t itemlevel_;
    int32_t rarity_;
    bool bcanuse_;
    bool bactive_;
    int32_t entitlementindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FAugInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FAugInstance) */ {
 public:
  inline FAugInstance() : FAugInstance(nullptr) {}
  ~FAugInstance() override;
  explicit PROTOBUF_CONSTEXPR FAugInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAugInstance(const FAugInstance& from);
  FAugInstance(FAugInstance&& from) noexcept
    : FAugInstance() {
    *this = ::std::move(from);
  }

  inline FAugInstance& operator=(const FAugInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAugInstance& operator=(FAugInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAugInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAugInstance* internal_default_instance() {
    return reinterpret_cast<const FAugInstance*>(
               &_FAugInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FAugInstance& a, FAugInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(FAugInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAugInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FAugInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FAugInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAugInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FAugInstance& from) {
    FAugInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAugInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FAugInstance";
  }
  protected:
  explicit FAugInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAugDefFieldNumber = 1,
    kCurrentTierFieldNumber = 2,
    kClientPurchaseStatusFieldNumber = 3,
    kPreselectedFieldNumber = 4,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference AugDef = 1;
  bool has_augdef() const;
  private:
  bool _internal_has_augdef() const;
  public:
  void clear_augdef();
  const ::HederaDefinitions::NonReplicatedObjectReference& augdef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_augdef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_augdef();
  void set_allocated_augdef(::HederaDefinitions::NonReplicatedObjectReference* augdef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_augdef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_augdef();
  public:
  void unsafe_arena_set_allocated_augdef(
      ::HederaDefinitions::NonReplicatedObjectReference* augdef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_augdef();

  // required int32 CurrentTier = 2;
  bool has_currenttier() const;
  private:
  bool _internal_has_currenttier() const;
  public:
  void clear_currenttier();
  int32_t currenttier() const;
  void set_currenttier(int32_t value);
  private:
  int32_t _internal_currenttier() const;
  void _internal_set_currenttier(int32_t value);
  public:

  // required int32 ClientPurchaseStatus = 3;
  bool has_clientpurchasestatus() const;
  private:
  bool _internal_has_clientpurchasestatus() const;
  public:
  void clear_clientpurchasestatus();
  int32_t clientpurchasestatus() const;
  void set_clientpurchasestatus(int32_t value);
  private:
  int32_t _internal_clientpurchasestatus() const;
  void _internal_set_clientpurchasestatus(int32_t value);
  public:

  // required bool Preselected = 4;
  bool has_preselected() const;
  private:
  bool _internal_has_preselected() const;
  public:
  void clear_preselected();
  bool preselected() const;
  void set_preselected(bool value);
  private:
  bool _internal_preselected() const;
  void _internal_set_preselected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FAugInstance)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* augdef_;
    int32_t currenttier_;
    int32_t clientpurchasestatus_;
    bool preselected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FAugCategoryInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FAugCategoryInstance) */ {
 public:
  inline FAugCategoryInstance() : FAugCategoryInstance(nullptr) {}
  ~FAugCategoryInstance() override;
  explicit PROTOBUF_CONSTEXPR FAugCategoryInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAugCategoryInstance(const FAugCategoryInstance& from);
  FAugCategoryInstance(FAugCategoryInstance&& from) noexcept
    : FAugCategoryInstance() {
    *this = ::std::move(from);
  }

  inline FAugCategoryInstance& operator=(const FAugCategoryInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAugCategoryInstance& operator=(FAugCategoryInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAugCategoryInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAugCategoryInstance* internal_default_instance() {
    return reinterpret_cast<const FAugCategoryInstance*>(
               &_FAugCategoryInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FAugCategoryInstance& a, FAugCategoryInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(FAugCategoryInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAugCategoryInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FAugCategoryInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FAugCategoryInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAugCategoryInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FAugCategoryInstance& from) {
    FAugCategoryInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAugCategoryInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FAugCategoryInstance";
  }
  protected:
  explicit FAugCategoryInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAugsFieldNumber = 2,
    kCategoryDefFieldNumber = 1,
    kMutationFieldNumber = 3,
    kCategoryIsUnlockedFieldNumber = 4,
  };
  // repeated .HederaDefinitions.FAugInstance Augs = 2;
  int augs_size() const;
  private:
  int _internal_augs_size() const;
  public:
  void clear_augs();
  ::HederaDefinitions::FAugInstance* mutable_augs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugInstance >*
      mutable_augs();
  private:
  const ::HederaDefinitions::FAugInstance& _internal_augs(int index) const;
  ::HederaDefinitions::FAugInstance* _internal_add_augs();
  public:
  const ::HederaDefinitions::FAugInstance& augs(int index) const;
  ::HederaDefinitions::FAugInstance* add_augs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugInstance >&
      augs() const;

  // required .HederaDefinitions.NonReplicatedObjectReference CategoryDef = 1;
  bool has_categorydef() const;
  private:
  bool _internal_has_categorydef() const;
  public:
  void clear_categorydef();
  const ::HederaDefinitions::NonReplicatedObjectReference& categorydef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_categorydef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_categorydef();
  void set_allocated_categorydef(::HederaDefinitions::NonReplicatedObjectReference* categorydef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_categorydef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_categorydef();
  public:
  void unsafe_arena_set_allocated_categorydef(
      ::HederaDefinitions::NonReplicatedObjectReference* categorydef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_categorydef();

  // required .HederaDefinitions.FAugInstance Mutation = 3;
  bool has_mutation() const;
  private:
  bool _internal_has_mutation() const;
  public:
  void clear_mutation();
  const ::HederaDefinitions::FAugInstance& mutation() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAugInstance* release_mutation();
  ::HederaDefinitions::FAugInstance* mutable_mutation();
  void set_allocated_mutation(::HederaDefinitions::FAugInstance* mutation);
  private:
  const ::HederaDefinitions::FAugInstance& _internal_mutation() const;
  ::HederaDefinitions::FAugInstance* _internal_mutable_mutation();
  public:
  void unsafe_arena_set_allocated_mutation(
      ::HederaDefinitions::FAugInstance* mutation);
  ::HederaDefinitions::FAugInstance* unsafe_arena_release_mutation();

  // required bool CategoryIsUnlocked = 4;
  bool has_categoryisunlocked() const;
  private:
  bool _internal_has_categoryisunlocked() const;
  public:
  void clear_categoryisunlocked();
  bool categoryisunlocked() const;
  void set_categoryisunlocked(bool value);
  private:
  bool _internal_categoryisunlocked() const;
  void _internal_set_categoryisunlocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FAugCategoryInstance)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugInstance > augs_;
    ::HederaDefinitions::NonReplicatedObjectReference* categorydef_;
    ::HederaDefinitions::FAugInstance* mutation_;
    bool categoryisunlocked_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FAugSetInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FAugSetInstance) */ {
 public:
  inline FAugSetInstance() : FAugSetInstance(nullptr) {}
  ~FAugSetInstance() override;
  explicit PROTOBUF_CONSTEXPR FAugSetInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAugSetInstance(const FAugSetInstance& from);
  FAugSetInstance(FAugSetInstance&& from) noexcept
    : FAugSetInstance() {
    *this = ::std::move(from);
  }

  inline FAugSetInstance& operator=(const FAugSetInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAugSetInstance& operator=(FAugSetInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAugSetInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAugSetInstance* internal_default_instance() {
    return reinterpret_cast<const FAugSetInstance*>(
               &_FAugSetInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FAugSetInstance& a, FAugSetInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(FAugSetInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAugSetInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FAugSetInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FAugSetInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAugSetInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FAugSetInstance& from) {
    FAugSetInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAugSetInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FAugSetInstance";
  }
  protected:
  explicit FAugSetInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllCategoriesFieldNumber = 2,
    kAugSetDefFieldNumber = 1,
  };
  // repeated .HederaDefinitions.FAugCategoryInstance AllCategories = 2;
  int allcategories_size() const;
  private:
  int _internal_allcategories_size() const;
  public:
  void clear_allcategories();
  ::HederaDefinitions::FAugCategoryInstance* mutable_allcategories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugCategoryInstance >*
      mutable_allcategories();
  private:
  const ::HederaDefinitions::FAugCategoryInstance& _internal_allcategories(int index) const;
  ::HederaDefinitions::FAugCategoryInstance* _internal_add_allcategories();
  public:
  const ::HederaDefinitions::FAugCategoryInstance& allcategories(int index) const;
  ::HederaDefinitions::FAugCategoryInstance* add_allcategories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugCategoryInstance >&
      allcategories() const;

  // required .HederaDefinitions.NonReplicatedObjectReference AugSetDef = 1;
  bool has_augsetdef() const;
  private:
  bool _internal_has_augsetdef() const;
  public:
  void clear_augsetdef();
  const ::HederaDefinitions::NonReplicatedObjectReference& augsetdef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_augsetdef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_augsetdef();
  void set_allocated_augsetdef(::HederaDefinitions::NonReplicatedObjectReference* augsetdef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_augsetdef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_augsetdef();
  public:
  void unsafe_arena_set_allocated_augsetdef(
      ::HederaDefinitions::NonReplicatedObjectReference* augsetdef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_augsetdef();

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FAugSetInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugCategoryInstance > allcategories_;
    ::HederaDefinitions::NonReplicatedObjectReference* augsetdef_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedBehaviorConsumerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedBehaviorConsumerState) */ {
 public:
  inline FReplicatedBehaviorConsumerState() : FReplicatedBehaviorConsumerState(nullptr) {}
  ~FReplicatedBehaviorConsumerState() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedBehaviorConsumerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedBehaviorConsumerState(const FReplicatedBehaviorConsumerState& from);
  FReplicatedBehaviorConsumerState(FReplicatedBehaviorConsumerState&& from) noexcept
    : FReplicatedBehaviorConsumerState() {
    *this = ::std::move(from);
  }

  inline FReplicatedBehaviorConsumerState& operator=(const FReplicatedBehaviorConsumerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedBehaviorConsumerState& operator=(FReplicatedBehaviorConsumerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedBehaviorConsumerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedBehaviorConsumerState* internal_default_instance() {
    return reinterpret_cast<const FReplicatedBehaviorConsumerState*>(
               &_FReplicatedBehaviorConsumerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FReplicatedBehaviorConsumerState& a, FReplicatedBehaviorConsumerState& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedBehaviorConsumerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedBehaviorConsumerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedBehaviorConsumerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedBehaviorConsumerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedBehaviorConsumerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedBehaviorConsumerState& from) {
    FReplicatedBehaviorConsumerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedBehaviorConsumerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedBehaviorConsumerState";
  }
  protected:
  explicit FReplicatedBehaviorConsumerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviorSequenceEnabledFlagsFieldNumber = 2,
    kBIsProcessSuspendedFieldNumber = 1,
    kBNeedToApplyThisStateFieldNumber = 3,
  };
  // required int32 BehaviorSequenceEnabledFlags = 2;
  bool has_behaviorsequenceenabledflags() const;
  private:
  bool _internal_has_behaviorsequenceenabledflags() const;
  public:
  void clear_behaviorsequenceenabledflags();
  int32_t behaviorsequenceenabledflags() const;
  void set_behaviorsequenceenabledflags(int32_t value);
  private:
  int32_t _internal_behaviorsequenceenabledflags() const;
  void _internal_set_behaviorsequenceenabledflags(int32_t value);
  public:

  // required bool bIsProcessSuspended = 1;
  bool has_bisprocesssuspended() const;
  private:
  bool _internal_has_bisprocesssuspended() const;
  public:
  void clear_bisprocesssuspended();
  bool bisprocesssuspended() const;
  void set_bisprocesssuspended(bool value);
  private:
  bool _internal_bisprocesssuspended() const;
  void _internal_set_bisprocesssuspended(bool value);
  public:

  // required bool bNeedToApplyThisState = 3;
  bool has_bneedtoapplythisstate() const;
  private:
  bool _internal_has_bneedtoapplythisstate() const;
  public:
  void clear_bneedtoapplythisstate();
  bool bneedtoapplythisstate() const;
  void set_bneedtoapplythisstate(bool value);
  private:
  bool _internal_bneedtoapplythisstate() const;
  void _internal_set_bneedtoapplythisstate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedBehaviorConsumerState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t behaviorsequenceenabledflags_;
    bool bisprocesssuspended_;
    bool bneedtoapplythisstate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FReplicatedBehaviorEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FReplicatedBehaviorEvent) */ {
 public:
  inline FReplicatedBehaviorEvent() : FReplicatedBehaviorEvent(nullptr) {}
  ~FReplicatedBehaviorEvent() override;
  explicit PROTOBUF_CONSTEXPR FReplicatedBehaviorEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FReplicatedBehaviorEvent(const FReplicatedBehaviorEvent& from);
  FReplicatedBehaviorEvent(FReplicatedBehaviorEvent&& from) noexcept
    : FReplicatedBehaviorEvent() {
    *this = ::std::move(from);
  }

  inline FReplicatedBehaviorEvent& operator=(const FReplicatedBehaviorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FReplicatedBehaviorEvent& operator=(FReplicatedBehaviorEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FReplicatedBehaviorEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FReplicatedBehaviorEvent* internal_default_instance() {
    return reinterpret_cast<const FReplicatedBehaviorEvent*>(
               &_FReplicatedBehaviorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FReplicatedBehaviorEvent& a, FReplicatedBehaviorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FReplicatedBehaviorEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FReplicatedBehaviorEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FReplicatedBehaviorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FReplicatedBehaviorEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FReplicatedBehaviorEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FReplicatedBehaviorEvent& from) {
    FReplicatedBehaviorEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FReplicatedBehaviorEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FReplicatedBehaviorEvent";
  }
  protected:
  explicit FReplicatedBehaviorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstigatorFieldNumber = 5,
    kSequenceIndexFieldNumber = 1,
    kEventCounterFieldNumber = 2,
    kEventIndexFieldNumber = 3,
    kEventOutputFieldNumber = 4,
  };
  // required .HederaDefinitions.NonReplicatedObjectReference Instigator = 5;
  bool has_instigator() const;
  private:
  bool _internal_has_instigator() const;
  public:
  void clear_instigator();
  const ::HederaDefinitions::NonReplicatedObjectReference& instigator() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_instigator();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_instigator();
  void set_allocated_instigator(::HederaDefinitions::NonReplicatedObjectReference* instigator);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_instigator() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_instigator();
  public:
  void unsafe_arena_set_allocated_instigator(
      ::HederaDefinitions::NonReplicatedObjectReference* instigator);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_instigator();

  // required int32 SequenceIndex = 1;
  bool has_sequenceindex() const;
  private:
  bool _internal_has_sequenceindex() const;
  public:
  void clear_sequenceindex();
  int32_t sequenceindex() const;
  void set_sequenceindex(int32_t value);
  private:
  int32_t _internal_sequenceindex() const;
  void _internal_set_sequenceindex(int32_t value);
  public:

  // required int32 EventCounter = 2;
  bool has_eventcounter() const;
  private:
  bool _internal_has_eventcounter() const;
  public:
  void clear_eventcounter();
  int32_t eventcounter() const;
  void set_eventcounter(int32_t value);
  private:
  int32_t _internal_eventcounter() const;
  void _internal_set_eventcounter(int32_t value);
  public:

  // required int32 EventIndex = 3;
  bool has_eventindex() const;
  private:
  bool _internal_has_eventindex() const;
  public:
  void clear_eventindex();
  int32_t eventindex() const;
  void set_eventindex(int32_t value);
  private:
  int32_t _internal_eventindex() const;
  void _internal_set_eventindex(int32_t value);
  public:

  // required int32 EventOutput = 4;
  bool has_eventoutput() const;
  private:
  bool _internal_has_eventoutput() const;
  public:
  void clear_eventoutput();
  int32_t eventoutput() const;
  void set_eventoutput(int32_t value);
  private:
  int32_t _internal_eventoutput() const;
  void _internal_set_eventoutput(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FReplicatedBehaviorEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HederaDefinitions::NonReplicatedObjectReference* instigator_;
    int32_t sequenceindex_;
    int32_t eventcounter_;
    int32_t eventindex_;
    int32_t eventoutput_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class FCinematicModeOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.FCinematicModeOptions) */ {
 public:
  inline FCinematicModeOptions() : FCinematicModeOptions(nullptr) {}
  ~FCinematicModeOptions() override;
  explicit PROTOBUF_CONSTEXPR FCinematicModeOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FCinematicModeOptions(const FCinematicModeOptions& from);
  FCinematicModeOptions(FCinematicModeOptions&& from) noexcept
    : FCinematicModeOptions() {
    *this = ::std::move(from);
  }

  inline FCinematicModeOptions& operator=(const FCinematicModeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCinematicModeOptions& operator=(FCinematicModeOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FCinematicModeOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FCinematicModeOptions* internal_default_instance() {
    return reinterpret_cast<const FCinematicModeOptions*>(
               &_FCinematicModeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FCinematicModeOptions& a, FCinematicModeOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FCinematicModeOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FCinematicModeOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FCinematicModeOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FCinematicModeOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FCinematicModeOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FCinematicModeOptions& from) {
    FCinematicModeOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FCinematicModeOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.FCinematicModeOptions";
  }
  protected:
  explicit FCinematicModeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBCinematicModeFieldNumber = 1,
    kBHidePlayerFieldNumber = 2,
    kBAffectsHUDFieldNumber = 3,
    kBAffectsMovementFieldNumber = 4,
    kBAffectsTurningFieldNumber = 5,
    kBAffectsButtonsFieldNumber = 6,
    kBAffectsGodModeFieldNumber = 7,
    kBAffectsNoTargetFieldNumber = 8,
    kBAllowCinematicSplitScreenFieldNumber = 9,
    kBAffectsAudioFieldNumber = 10,
    kBKismetSetCinematicModeFieldNumber = 11,
    kBHideOutlinesFieldNumber = 12,
    kBAffectsSkillsFieldNumber = 13,
    kBHideScreenParticlesFieldNumber = 14,
    kApplicationModeFieldNumber = 15,
    kModeTokenFieldNumber = 16,
  };
  // required bool bCinematicMode = 1;
  bool has_bcinematicmode() const;
  private:
  bool _internal_has_bcinematicmode() const;
  public:
  void clear_bcinematicmode();
  bool bcinematicmode() const;
  void set_bcinematicmode(bool value);
  private:
  bool _internal_bcinematicmode() const;
  void _internal_set_bcinematicmode(bool value);
  public:

  // required bool bHidePlayer = 2;
  bool has_bhideplayer() const;
  private:
  bool _internal_has_bhideplayer() const;
  public:
  void clear_bhideplayer();
  bool bhideplayer() const;
  void set_bhideplayer(bool value);
  private:
  bool _internal_bhideplayer() const;
  void _internal_set_bhideplayer(bool value);
  public:

  // required bool bAffectsHUD = 3;
  bool has_baffectshud() const;
  private:
  bool _internal_has_baffectshud() const;
  public:
  void clear_baffectshud();
  bool baffectshud() const;
  void set_baffectshud(bool value);
  private:
  bool _internal_baffectshud() const;
  void _internal_set_baffectshud(bool value);
  public:

  // required bool bAffectsMovement = 4;
  bool has_baffectsmovement() const;
  private:
  bool _internal_has_baffectsmovement() const;
  public:
  void clear_baffectsmovement();
  bool baffectsmovement() const;
  void set_baffectsmovement(bool value);
  private:
  bool _internal_baffectsmovement() const;
  void _internal_set_baffectsmovement(bool value);
  public:

  // required bool bAffectsTurning = 5;
  bool has_baffectsturning() const;
  private:
  bool _internal_has_baffectsturning() const;
  public:
  void clear_baffectsturning();
  bool baffectsturning() const;
  void set_baffectsturning(bool value);
  private:
  bool _internal_baffectsturning() const;
  void _internal_set_baffectsturning(bool value);
  public:

  // required bool bAffectsButtons = 6;
  bool has_baffectsbuttons() const;
  private:
  bool _internal_has_baffectsbuttons() const;
  public:
  void clear_baffectsbuttons();
  bool baffectsbuttons() const;
  void set_baffectsbuttons(bool value);
  private:
  bool _internal_baffectsbuttons() const;
  void _internal_set_baffectsbuttons(bool value);
  public:

  // required bool bAffectsGodMode = 7;
  bool has_baffectsgodmode() const;
  private:
  bool _internal_has_baffectsgodmode() const;
  public:
  void clear_baffectsgodmode();
  bool baffectsgodmode() const;
  void set_baffectsgodmode(bool value);
  private:
  bool _internal_baffectsgodmode() const;
  void _internal_set_baffectsgodmode(bool value);
  public:

  // required bool bAffectsNoTarget = 8;
  bool has_baffectsnotarget() const;
  private:
  bool _internal_has_baffectsnotarget() const;
  public:
  void clear_baffectsnotarget();
  bool baffectsnotarget() const;
  void set_baffectsnotarget(bool value);
  private:
  bool _internal_baffectsnotarget() const;
  void _internal_set_baffectsnotarget(bool value);
  public:

  // required bool bAllowCinematicSplitScreen = 9;
  bool has_ballowcinematicsplitscreen() const;
  private:
  bool _internal_has_ballowcinematicsplitscreen() const;
  public:
  void clear_ballowcinematicsplitscreen();
  bool ballowcinematicsplitscreen() const;
  void set_ballowcinematicsplitscreen(bool value);
  private:
  bool _internal_ballowcinematicsplitscreen() const;
  void _internal_set_ballowcinematicsplitscreen(bool value);
  public:

  // required bool bAffectsAudio = 10;
  bool has_baffectsaudio() const;
  private:
  bool _internal_has_baffectsaudio() const;
  public:
  void clear_baffectsaudio();
  bool baffectsaudio() const;
  void set_baffectsaudio(bool value);
  private:
  bool _internal_baffectsaudio() const;
  void _internal_set_baffectsaudio(bool value);
  public:

  // required bool bKismetSetCinematicMode = 11;
  bool has_bkismetsetcinematicmode() const;
  private:
  bool _internal_has_bkismetsetcinematicmode() const;
  public:
  void clear_bkismetsetcinematicmode();
  bool bkismetsetcinematicmode() const;
  void set_bkismetsetcinematicmode(bool value);
  private:
  bool _internal_bkismetsetcinematicmode() const;
  void _internal_set_bkismetsetcinematicmode(bool value);
  public:

  // required bool bHideOutlines = 12;
  bool has_bhideoutlines() const;
  private:
  bool _internal_has_bhideoutlines() const;
  public:
  void clear_bhideoutlines();
  bool bhideoutlines() const;
  void set_bhideoutlines(bool value);
  private:
  bool _internal_bhideoutlines() const;
  void _internal_set_bhideoutlines(bool value);
  public:

  // required bool bAffectsSkills = 13;
  bool has_baffectsskills() const;
  private:
  bool _internal_has_baffectsskills() const;
  public:
  void clear_baffectsskills();
  bool baffectsskills() const;
  void set_baffectsskills(bool value);
  private:
  bool _internal_baffectsskills() const;
  void _internal_set_baffectsskills(bool value);
  public:

  // required bool bHideScreenParticles = 14;
  bool has_bhidescreenparticles() const;
  private:
  bool _internal_has_bhidescreenparticles() const;
  public:
  void clear_bhidescreenparticles();
  bool bhidescreenparticles() const;
  void set_bhidescreenparticles(bool value);
  private:
  bool _internal_bhidescreenparticles() const;
  void _internal_set_bhidescreenparticles(bool value);
  public:

  // required int32 ApplicationMode = 15;
  bool has_applicationmode() const;
  private:
  bool _internal_has_applicationmode() const;
  public:
  void clear_applicationmode();
  int32_t applicationmode() const;
  void set_applicationmode(int32_t value);
  private:
  int32_t _internal_applicationmode() const;
  void _internal_set_applicationmode(int32_t value);
  public:

  // required int32 ModeToken = 16;
  bool has_modetoken() const;
  private:
  bool _internal_has_modetoken() const;
  public:
  void clear_modetoken();
  int32_t modetoken() const;
  void set_modetoken(int32_t value);
  private:
  int32_t _internal_modetoken() const;
  void _internal_set_modetoken(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.FCinematicModeOptions)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bcinematicmode_;
    bool bhideplayer_;
    bool baffectshud_;
    bool baffectsmovement_;
    bool baffectsturning_;
    bool baffectsbuttons_;
    bool baffectsgodmode_;
    bool baffectsnotarget_;
    bool ballowcinematicsplitscreen_;
    bool baffectsaudio_;
    bool bkismetsetcinematicmode_;
    bool bhideoutlines_;
    bool baffectsskills_;
    bool bhidescreenparticles_;
    int32_t applicationmode_;
    int32_t modetoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class APoplarPlayerReplicationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.APoplarPlayerReplicationInfo) */ {
 public:
  inline APoplarPlayerReplicationInfo() : APoplarPlayerReplicationInfo(nullptr) {}
  ~APoplarPlayerReplicationInfo() override;
  explicit PROTOBUF_CONSTEXPR APoplarPlayerReplicationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APoplarPlayerReplicationInfo(const APoplarPlayerReplicationInfo& from);
  APoplarPlayerReplicationInfo(APoplarPlayerReplicationInfo&& from) noexcept
    : APoplarPlayerReplicationInfo() {
    *this = ::std::move(from);
  }

  inline APoplarPlayerReplicationInfo& operator=(const APoplarPlayerReplicationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline APoplarPlayerReplicationInfo& operator=(APoplarPlayerReplicationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APoplarPlayerReplicationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const APoplarPlayerReplicationInfo* internal_default_instance() {
    return reinterpret_cast<const APoplarPlayerReplicationInfo*>(
               &_APoplarPlayerReplicationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(APoplarPlayerReplicationInfo& a, APoplarPlayerReplicationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(APoplarPlayerReplicationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APoplarPlayerReplicationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  APoplarPlayerReplicationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<APoplarPlayerReplicationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const APoplarPlayerReplicationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const APoplarPlayerReplicationInfo& from) {
    APoplarPlayerReplicationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APoplarPlayerReplicationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.APoplarPlayerReplicationInfo";
  }
  protected:
  explicit APoplarPlayerReplicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 44,
    kReplicatedNounsFieldNumber = 53,
    kTrackedSkillsFieldNumber = 55,
    kNemesisPRIArrayFieldNumber = 68,
    kManagedActorCountsFieldNumber = 69,
    kActivatedPerkFlagsFieldNumber = 72,
    kPerksFieldNumber = 73,
    kCurrentWearableDefinitionsFieldNumber = 83,
    kPlayerNameFieldNumber = 23,
    kLocationFieldNumber = 1,
    kRotationFieldNumber = 2,
    kOwnerFieldNumber = 9,
    kBaseFieldNumber = 10,
    kInstigatorFieldNumber = 19,
    kVelocityFieldNumber = 20,
    kTeamFieldNumber = 32,
    kHealthPoolFieldNumber = 45,
    kShieldArmorFieldNumber = 46,
    kPawnAllegianceFieldNumber = 47,
    kCharacterNameIdDefFieldNumber = 48,
    kStandInGearFieldNumber = 54,
    kPoplarPSIFieldNumber = 56,
    kBotOwnerPRIFieldNumber = 62,
    kMyAlertPointFieldNumber = 64,
    kEnergyPoolFieldNumber = 65,
    kUnitTypeDefinitionFieldNumber = 66,
    kStatReplicationInfoFieldNumber = 67,
    kBrowseCharacterNameIdDefFieldNumber = 76,
    kBrowseSkinIdDefFieldNumber = 77,
    kSkinIdDefFieldNumber = 78,
    kAugsFieldNumber = 79,
    kReplicatedBehaviorConsumerStateFieldNumber = 80,
    kReplicatedBehaviorEventFieldNumber = 81,
    kReplicatedCinematicModeOptionsFieldNumber = 82,
    kUniqueIDFieldNumber = 84,
    kDrawScaleFieldNumber = 3,
    kCustomTimeDilationFieldNumber = 4,
    kPhysicsFieldNumber = 5,
    kRemoteRoleFieldNumber = 6,
    kRoleFieldNumber = 7,
    kReplicatedCollisionTypeFieldNumber = 8,
    kBHiddenFieldNumber = 11,
    kBTearOffFieldNumber = 12,
    kBHardAttachFieldNumber = 13,
    kBCollideActorsFieldNumber = 14,
    kBCollideWorldFieldNumber = 15,
    kBBlockActorsFieldNumber = 16,
    kBProjTargetFieldNumber = 17,
    kBNetOwnerFieldNumber = 18,
    kDeathsFieldNumber = 21,
    kPingFieldNumber = 22,
    kBAdminFieldNumber = 24,
    kBIsSpectatorFieldNumber = 25,
    kBOnlySpectatorFieldNumber = 26,
    kBOutOfLivesFieldNumber = 27,
    kPlayerIDFieldNumber = 31,
    kBBotFieldNumber = 28,
    kBFromPreviousLevelFieldNumber = 29,
    kBPlayerAFKFieldNumber = 30,
    kBIsDeadFieldNumber = 38,
    kStartTimeFieldNumber = 33,
    kKillsFieldNumber = 34,
    kExpLevelFieldNumber = 35,
    kExpPointsNextLevelAtFieldNumber = 36,
    kExpPointsNextLevelAtBaseValueFieldNumber = 37,
    kGeneralSkillPointsFieldNumber = 40,
    kSpecialistSkillPointsFieldNumber = 41,
    kCurrentInstantHitCriticalHitBonusFieldNumber = 42,
    kCurrentInstantHitCriticalHitBonusBaseValueFieldNumber = 43,
    kNumTrackedSkillSlotsInUseFieldNumber = 50,
    kBHideOnHUDIfEnemyFieldNumber = 39,
    kBGFxMenuOpenFieldNumber = 49,
    kBNPCFieldNumber = 57,
    kBDigitalDeluxFieldNumber = 58,
    kHighestCompletedPlayThroughFieldNumber = 51,
    kNumReplicatedNounsFieldNumber = 52,
    kBPlayBrowsingTauntFieldNumber = 59,
    kBIsPvEMatchFieldNumber = 60,
    kBNeedsToCastSurrenderVoteFieldNumber = 61,
    kBotDifficultyFieldNumber = 63,
    kReplicatedRespawnTimeRemainingFieldNumber = 70,
    kCharacterSelectionStateFieldNumber = 71,
    kOvershieldStrengthFieldNumber = 74,
    kMaxOvershieldValueFieldNumber = 75,
  };
  // repeated .HederaDefinitions.FCurrencyState Currency = 44;
  int currency_size() const;
  private:
  int _internal_currency_size() const;
  public:
  void clear_currency();
  ::HederaDefinitions::FCurrencyState* mutable_currency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FCurrencyState >*
      mutable_currency();
  private:
  const ::HederaDefinitions::FCurrencyState& _internal_currency(int index) const;
  ::HederaDefinitions::FCurrencyState* _internal_add_currency();
  public:
  const ::HederaDefinitions::FCurrencyState& currency(int index) const;
  ::HederaDefinitions::FCurrencyState* add_currency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FCurrencyState >&
      currency() const;

  // repeated .HederaDefinitions.FReplicatedNounAttributeState ReplicatedNouns = 53;
  int replicatednouns_size() const;
  private:
  int _internal_replicatednouns_size() const;
  public:
  void clear_replicatednouns();
  ::HederaDefinitions::FReplicatedNounAttributeState* mutable_replicatednouns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedNounAttributeState >*
      mutable_replicatednouns();
  private:
  const ::HederaDefinitions::FReplicatedNounAttributeState& _internal_replicatednouns(int index) const;
  ::HederaDefinitions::FReplicatedNounAttributeState* _internal_add_replicatednouns();
  public:
  const ::HederaDefinitions::FReplicatedNounAttributeState& replicatednouns(int index) const;
  ::HederaDefinitions::FReplicatedNounAttributeState* add_replicatednouns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedNounAttributeState >&
      replicatednouns() const;

  // repeated .HederaDefinitions.FTrackedSkillState TrackedSkills = 55;
  int trackedskills_size() const;
  private:
  int _internal_trackedskills_size() const;
  public:
  void clear_trackedskills();
  ::HederaDefinitions::FTrackedSkillState* mutable_trackedskills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FTrackedSkillState >*
      mutable_trackedskills();
  private:
  const ::HederaDefinitions::FTrackedSkillState& _internal_trackedskills(int index) const;
  ::HederaDefinitions::FTrackedSkillState* _internal_add_trackedskills();
  public:
  const ::HederaDefinitions::FTrackedSkillState& trackedskills(int index) const;
  ::HederaDefinitions::FTrackedSkillState* add_trackedskills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FTrackedSkillState >&
      trackedskills() const;

  // repeated .HederaDefinitions.ReplicatedActorReference NemesisPRIArray = 68;
  int nemesispriarray_size() const;
  private:
  int _internal_nemesispriarray_size() const;
  public:
  void clear_nemesispriarray();
  ::HederaDefinitions::ReplicatedActorReference* mutable_nemesispriarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ReplicatedActorReference >*
      mutable_nemesispriarray();
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_nemesispriarray(int index) const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_add_nemesispriarray();
  public:
  const ::HederaDefinitions::ReplicatedActorReference& nemesispriarray(int index) const;
  ::HederaDefinitions::ReplicatedActorReference* add_nemesispriarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ReplicatedActorReference >&
      nemesispriarray() const;

  // repeated .HederaDefinitions.FManagedActorCountData ManagedActorCounts = 69;
  int managedactorcounts_size() const;
  private:
  int _internal_managedactorcounts_size() const;
  public:
  void clear_managedactorcounts();
  ::HederaDefinitions::FManagedActorCountData* mutable_managedactorcounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FManagedActorCountData >*
      mutable_managedactorcounts();
  private:
  const ::HederaDefinitions::FManagedActorCountData& _internal_managedactorcounts(int index) const;
  ::HederaDefinitions::FManagedActorCountData* _internal_add_managedactorcounts();
  public:
  const ::HederaDefinitions::FManagedActorCountData& managedactorcounts(int index) const;
  ::HederaDefinitions::FManagedActorCountData* add_managedactorcounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FManagedActorCountData >&
      managedactorcounts() const;

  // repeated int32 ActivatedPerkFlags = 72;
  int activatedperkflags_size() const;
  private:
  int _internal_activatedperkflags_size() const;
  public:
  void clear_activatedperkflags();
  private:
  int32_t _internal_activatedperkflags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_activatedperkflags() const;
  void _internal_add_activatedperkflags(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_activatedperkflags();
  public:
  int32_t activatedperkflags(int index) const;
  void set_activatedperkflags(int index, int32_t value);
  void add_activatedperkflags(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      activatedperkflags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_activatedperkflags();

  // repeated .HederaDefinitions.FReplicatedPerkItem Perks = 73;
  int perks_size() const;
  private:
  int _internal_perks_size() const;
  public:
  void clear_perks();
  ::HederaDefinitions::FReplicatedPerkItem* mutable_perks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedPerkItem >*
      mutable_perks();
  private:
  const ::HederaDefinitions::FReplicatedPerkItem& _internal_perks(int index) const;
  ::HederaDefinitions::FReplicatedPerkItem* _internal_add_perks();
  public:
  const ::HederaDefinitions::FReplicatedPerkItem& perks(int index) const;
  ::HederaDefinitions::FReplicatedPerkItem* add_perks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedPerkItem >&
      perks() const;

  // repeated .HederaDefinitions.NonReplicatedObjectReference CurrentWearableDefinitions = 83;
  int currentwearabledefinitions_size() const;
  private:
  int _internal_currentwearabledefinitions_size() const;
  public:
  void clear_currentwearabledefinitions();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_currentwearabledefinitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::NonReplicatedObjectReference >*
      mutable_currentwearabledefinitions();
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_currentwearabledefinitions(int index) const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_add_currentwearabledefinitions();
  public:
  const ::HederaDefinitions::NonReplicatedObjectReference& currentwearabledefinitions(int index) const;
  ::HederaDefinitions::NonReplicatedObjectReference* add_currentwearabledefinitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::NonReplicatedObjectReference >&
      currentwearabledefinitions() const;

  // required string PlayerName = 23;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // required .HederaDefinitions.FVector Location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::HederaDefinitions::FVector& location() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_location();
  ::HederaDefinitions::FVector* mutable_location();
  void set_allocated_location(::HederaDefinitions::FVector* location);
  private:
  const ::HederaDefinitions::FVector& _internal_location() const;
  ::HederaDefinitions::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::HederaDefinitions::FVector* location);
  ::HederaDefinitions::FVector* unsafe_arena_release_location();

  // required .HederaDefinitions.FRotator Rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::HederaDefinitions::FRotator& rotation() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FRotator* release_rotation();
  ::HederaDefinitions::FRotator* mutable_rotation();
  void set_allocated_rotation(::HederaDefinitions::FRotator* rotation);
  private:
  const ::HederaDefinitions::FRotator& _internal_rotation() const;
  ::HederaDefinitions::FRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::HederaDefinitions::FRotator* rotation);
  ::HederaDefinitions::FRotator* unsafe_arena_release_rotation();

  // required .HederaDefinitions.ReplicatedActorReference Owner = 9;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::HederaDefinitions::ReplicatedActorReference& owner() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_owner();
  ::HederaDefinitions::ReplicatedActorReference* mutable_owner();
  void set_allocated_owner(::HederaDefinitions::ReplicatedActorReference* owner);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_owner() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::HederaDefinitions::ReplicatedActorReference* owner);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_owner();

  // required .HederaDefinitions.ReplicatedActorReference Base = 10;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HederaDefinitions::ReplicatedActorReference& base() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_base();
  ::HederaDefinitions::ReplicatedActorReference* mutable_base();
  void set_allocated_base(::HederaDefinitions::ReplicatedActorReference* base);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_base() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HederaDefinitions::ReplicatedActorReference* base);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_base();

  // required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
  bool has_instigator() const;
  private:
  bool _internal_has_instigator() const;
  public:
  void clear_instigator();
  const ::HederaDefinitions::ReplicatedActorReference& instigator() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_instigator();
  ::HederaDefinitions::ReplicatedActorReference* mutable_instigator();
  void set_allocated_instigator(::HederaDefinitions::ReplicatedActorReference* instigator);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_instigator() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_instigator();
  public:
  void unsafe_arena_set_allocated_instigator(
      ::HederaDefinitions::ReplicatedActorReference* instigator);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_instigator();

  // required .HederaDefinitions.FVector Velocity = 20;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::HederaDefinitions::FVector& velocity() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FVector* release_velocity();
  ::HederaDefinitions::FVector* mutable_velocity();
  void set_allocated_velocity(::HederaDefinitions::FVector* velocity);
  private:
  const ::HederaDefinitions::FVector& _internal_velocity() const;
  ::HederaDefinitions::FVector* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::HederaDefinitions::FVector* velocity);
  ::HederaDefinitions::FVector* unsafe_arena_release_velocity();

  // required .HederaDefinitions.ReplicatedActorReference Team = 32;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const ::HederaDefinitions::ReplicatedActorReference& team() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_team();
  ::HederaDefinitions::ReplicatedActorReference* mutable_team();
  void set_allocated_team(::HederaDefinitions::ReplicatedActorReference* team);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_team() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_team();
  public:
  void unsafe_arena_set_allocated_team(
      ::HederaDefinitions::ReplicatedActorReference* team);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_team();

  // required .HederaDefinitions.FResourcePoolReference HealthPool = 45;
  bool has_healthpool() const;
  private:
  bool _internal_has_healthpool() const;
  public:
  void clear_healthpool();
  const ::HederaDefinitions::FResourcePoolReference& healthpool() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FResourcePoolReference* release_healthpool();
  ::HederaDefinitions::FResourcePoolReference* mutable_healthpool();
  void set_allocated_healthpool(::HederaDefinitions::FResourcePoolReference* healthpool);
  private:
  const ::HederaDefinitions::FResourcePoolReference& _internal_healthpool() const;
  ::HederaDefinitions::FResourcePoolReference* _internal_mutable_healthpool();
  public:
  void unsafe_arena_set_allocated_healthpool(
      ::HederaDefinitions::FResourcePoolReference* healthpool);
  ::HederaDefinitions::FResourcePoolReference* unsafe_arena_release_healthpool();

  // required .HederaDefinitions.FResourcePoolReference ShieldArmor = 46;
  bool has_shieldarmor() const;
  private:
  bool _internal_has_shieldarmor() const;
  public:
  void clear_shieldarmor();
  const ::HederaDefinitions::FResourcePoolReference& shieldarmor() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FResourcePoolReference* release_shieldarmor();
  ::HederaDefinitions::FResourcePoolReference* mutable_shieldarmor();
  void set_allocated_shieldarmor(::HederaDefinitions::FResourcePoolReference* shieldarmor);
  private:
  const ::HederaDefinitions::FResourcePoolReference& _internal_shieldarmor() const;
  ::HederaDefinitions::FResourcePoolReference* _internal_mutable_shieldarmor();
  public:
  void unsafe_arena_set_allocated_shieldarmor(
      ::HederaDefinitions::FResourcePoolReference* shieldarmor);
  ::HederaDefinitions::FResourcePoolReference* unsafe_arena_release_shieldarmor();

  // required .HederaDefinitions.NonReplicatedObjectReference PawnAllegiance = 47;
  bool has_pawnallegiance() const;
  private:
  bool _internal_has_pawnallegiance() const;
  public:
  void clear_pawnallegiance();
  const ::HederaDefinitions::NonReplicatedObjectReference& pawnallegiance() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_pawnallegiance();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_pawnallegiance();
  void set_allocated_pawnallegiance(::HederaDefinitions::NonReplicatedObjectReference* pawnallegiance);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_pawnallegiance() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_pawnallegiance();
  public:
  void unsafe_arena_set_allocated_pawnallegiance(
      ::HederaDefinitions::NonReplicatedObjectReference* pawnallegiance);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_pawnallegiance();

  // required .HederaDefinitions.NonReplicatedObjectReference CharacterNameIdDef = 48;
  bool has_characternameiddef() const;
  private:
  bool _internal_has_characternameiddef() const;
  public:
  void clear_characternameiddef();
  const ::HederaDefinitions::NonReplicatedObjectReference& characternameiddef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_characternameiddef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_characternameiddef();
  void set_allocated_characternameiddef(::HederaDefinitions::NonReplicatedObjectReference* characternameiddef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_characternameiddef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_characternameiddef();
  public:
  void unsafe_arena_set_allocated_characternameiddef(
      ::HederaDefinitions::NonReplicatedObjectReference* characternameiddef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_characternameiddef();

  // required .HederaDefinitions.FReplicatedStandInGear StandInGear = 54;
  bool has_standingear() const;
  private:
  bool _internal_has_standingear() const;
  public:
  void clear_standingear();
  const ::HederaDefinitions::FReplicatedStandInGear& standingear() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FReplicatedStandInGear* release_standingear();
  ::HederaDefinitions::FReplicatedStandInGear* mutable_standingear();
  void set_allocated_standingear(::HederaDefinitions::FReplicatedStandInGear* standingear);
  private:
  const ::HederaDefinitions::FReplicatedStandInGear& _internal_standingear() const;
  ::HederaDefinitions::FReplicatedStandInGear* _internal_mutable_standingear();
  public:
  void unsafe_arena_set_allocated_standingear(
      ::HederaDefinitions::FReplicatedStandInGear* standingear);
  ::HederaDefinitions::FReplicatedStandInGear* unsafe_arena_release_standingear();

  // required .HederaDefinitions.ReplicatedActorReference PoplarPSI = 56;
  bool has_poplarpsi() const;
  private:
  bool _internal_has_poplarpsi() const;
  public:
  void clear_poplarpsi();
  const ::HederaDefinitions::ReplicatedActorReference& poplarpsi() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_poplarpsi();
  ::HederaDefinitions::ReplicatedActorReference* mutable_poplarpsi();
  void set_allocated_poplarpsi(::HederaDefinitions::ReplicatedActorReference* poplarpsi);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_poplarpsi() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_poplarpsi();
  public:
  void unsafe_arena_set_allocated_poplarpsi(
      ::HederaDefinitions::ReplicatedActorReference* poplarpsi);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_poplarpsi();

  // required .HederaDefinitions.ReplicatedActorReference BotOwnerPRI = 62;
  bool has_botownerpri() const;
  private:
  bool _internal_has_botownerpri() const;
  public:
  void clear_botownerpri();
  const ::HederaDefinitions::ReplicatedActorReference& botownerpri() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_botownerpri();
  ::HederaDefinitions::ReplicatedActorReference* mutable_botownerpri();
  void set_allocated_botownerpri(::HederaDefinitions::ReplicatedActorReference* botownerpri);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_botownerpri() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_botownerpri();
  public:
  void unsafe_arena_set_allocated_botownerpri(
      ::HederaDefinitions::ReplicatedActorReference* botownerpri);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_botownerpri();

  // required .HederaDefinitions.ReplicatedActorReference MyAlertPoint = 64;
  bool has_myalertpoint() const;
  private:
  bool _internal_has_myalertpoint() const;
  public:
  void clear_myalertpoint();
  const ::HederaDefinitions::ReplicatedActorReference& myalertpoint() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_myalertpoint();
  ::HederaDefinitions::ReplicatedActorReference* mutable_myalertpoint();
  void set_allocated_myalertpoint(::HederaDefinitions::ReplicatedActorReference* myalertpoint);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_myalertpoint() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_myalertpoint();
  public:
  void unsafe_arena_set_allocated_myalertpoint(
      ::HederaDefinitions::ReplicatedActorReference* myalertpoint);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_myalertpoint();

  // required .HederaDefinitions.FResourcePoolReference EnergyPool = 65;
  bool has_energypool() const;
  private:
  bool _internal_has_energypool() const;
  public:
  void clear_energypool();
  const ::HederaDefinitions::FResourcePoolReference& energypool() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FResourcePoolReference* release_energypool();
  ::HederaDefinitions::FResourcePoolReference* mutable_energypool();
  void set_allocated_energypool(::HederaDefinitions::FResourcePoolReference* energypool);
  private:
  const ::HederaDefinitions::FResourcePoolReference& _internal_energypool() const;
  ::HederaDefinitions::FResourcePoolReference* _internal_mutable_energypool();
  public:
  void unsafe_arena_set_allocated_energypool(
      ::HederaDefinitions::FResourcePoolReference* energypool);
  ::HederaDefinitions::FResourcePoolReference* unsafe_arena_release_energypool();

  // required .HederaDefinitions.NonReplicatedObjectReference UnitTypeDefinition = 66;
  bool has_unittypedefinition() const;
  private:
  bool _internal_has_unittypedefinition() const;
  public:
  void clear_unittypedefinition();
  const ::HederaDefinitions::NonReplicatedObjectReference& unittypedefinition() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_unittypedefinition();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_unittypedefinition();
  void set_allocated_unittypedefinition(::HederaDefinitions::NonReplicatedObjectReference* unittypedefinition);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_unittypedefinition() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_unittypedefinition();
  public:
  void unsafe_arena_set_allocated_unittypedefinition(
      ::HederaDefinitions::NonReplicatedObjectReference* unittypedefinition);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_unittypedefinition();

  // required .HederaDefinitions.ReplicatedActorReference StatReplicationInfo = 67;
  bool has_statreplicationinfo() const;
  private:
  bool _internal_has_statreplicationinfo() const;
  public:
  void clear_statreplicationinfo();
  const ::HederaDefinitions::ReplicatedActorReference& statreplicationinfo() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::ReplicatedActorReference* release_statreplicationinfo();
  ::HederaDefinitions::ReplicatedActorReference* mutable_statreplicationinfo();
  void set_allocated_statreplicationinfo(::HederaDefinitions::ReplicatedActorReference* statreplicationinfo);
  private:
  const ::HederaDefinitions::ReplicatedActorReference& _internal_statreplicationinfo() const;
  ::HederaDefinitions::ReplicatedActorReference* _internal_mutable_statreplicationinfo();
  public:
  void unsafe_arena_set_allocated_statreplicationinfo(
      ::HederaDefinitions::ReplicatedActorReference* statreplicationinfo);
  ::HederaDefinitions::ReplicatedActorReference* unsafe_arena_release_statreplicationinfo();

  // required .HederaDefinitions.NonReplicatedObjectReference BrowseCharacterNameIdDef = 76;
  bool has_browsecharacternameiddef() const;
  private:
  bool _internal_has_browsecharacternameiddef() const;
  public:
  void clear_browsecharacternameiddef();
  const ::HederaDefinitions::NonReplicatedObjectReference& browsecharacternameiddef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_browsecharacternameiddef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_browsecharacternameiddef();
  void set_allocated_browsecharacternameiddef(::HederaDefinitions::NonReplicatedObjectReference* browsecharacternameiddef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_browsecharacternameiddef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_browsecharacternameiddef();
  public:
  void unsafe_arena_set_allocated_browsecharacternameiddef(
      ::HederaDefinitions::NonReplicatedObjectReference* browsecharacternameiddef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_browsecharacternameiddef();

  // required .HederaDefinitions.NonReplicatedObjectReference BrowseSkinIdDef = 77;
  bool has_browseskiniddef() const;
  private:
  bool _internal_has_browseskiniddef() const;
  public:
  void clear_browseskiniddef();
  const ::HederaDefinitions::NonReplicatedObjectReference& browseskiniddef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_browseskiniddef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_browseskiniddef();
  void set_allocated_browseskiniddef(::HederaDefinitions::NonReplicatedObjectReference* browseskiniddef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_browseskiniddef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_browseskiniddef();
  public:
  void unsafe_arena_set_allocated_browseskiniddef(
      ::HederaDefinitions::NonReplicatedObjectReference* browseskiniddef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_browseskiniddef();

  // required .HederaDefinitions.NonReplicatedObjectReference SkinIdDef = 78;
  bool has_skiniddef() const;
  private:
  bool _internal_has_skiniddef() const;
  public:
  void clear_skiniddef();
  const ::HederaDefinitions::NonReplicatedObjectReference& skiniddef() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::NonReplicatedObjectReference* release_skiniddef();
  ::HederaDefinitions::NonReplicatedObjectReference* mutable_skiniddef();
  void set_allocated_skiniddef(::HederaDefinitions::NonReplicatedObjectReference* skiniddef);
  private:
  const ::HederaDefinitions::NonReplicatedObjectReference& _internal_skiniddef() const;
  ::HederaDefinitions::NonReplicatedObjectReference* _internal_mutable_skiniddef();
  public:
  void unsafe_arena_set_allocated_skiniddef(
      ::HederaDefinitions::NonReplicatedObjectReference* skiniddef);
  ::HederaDefinitions::NonReplicatedObjectReference* unsafe_arena_release_skiniddef();

  // required .HederaDefinitions.FAugSetInstance Augs = 79;
  bool has_augs() const;
  private:
  bool _internal_has_augs() const;
  public:
  void clear_augs();
  const ::HederaDefinitions::FAugSetInstance& augs() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FAugSetInstance* release_augs();
  ::HederaDefinitions::FAugSetInstance* mutable_augs();
  void set_allocated_augs(::HederaDefinitions::FAugSetInstance* augs);
  private:
  const ::HederaDefinitions::FAugSetInstance& _internal_augs() const;
  ::HederaDefinitions::FAugSetInstance* _internal_mutable_augs();
  public:
  void unsafe_arena_set_allocated_augs(
      ::HederaDefinitions::FAugSetInstance* augs);
  ::HederaDefinitions::FAugSetInstance* unsafe_arena_release_augs();

  // required .HederaDefinitions.FReplicatedBehaviorConsumerState ReplicatedBehaviorConsumerState = 80;
  bool has_replicatedbehaviorconsumerstate() const;
  private:
  bool _internal_has_replicatedbehaviorconsumerstate() const;
  public:
  void clear_replicatedbehaviorconsumerstate();
  const ::HederaDefinitions::FReplicatedBehaviorConsumerState& replicatedbehaviorconsumerstate() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FReplicatedBehaviorConsumerState* release_replicatedbehaviorconsumerstate();
  ::HederaDefinitions::FReplicatedBehaviorConsumerState* mutable_replicatedbehaviorconsumerstate();
  void set_allocated_replicatedbehaviorconsumerstate(::HederaDefinitions::FReplicatedBehaviorConsumerState* replicatedbehaviorconsumerstate);
  private:
  const ::HederaDefinitions::FReplicatedBehaviorConsumerState& _internal_replicatedbehaviorconsumerstate() const;
  ::HederaDefinitions::FReplicatedBehaviorConsumerState* _internal_mutable_replicatedbehaviorconsumerstate();
  public:
  void unsafe_arena_set_allocated_replicatedbehaviorconsumerstate(
      ::HederaDefinitions::FReplicatedBehaviorConsumerState* replicatedbehaviorconsumerstate);
  ::HederaDefinitions::FReplicatedBehaviorConsumerState* unsafe_arena_release_replicatedbehaviorconsumerstate();

  // required .HederaDefinitions.FReplicatedBehaviorEvent ReplicatedBehaviorEvent = 81;
  bool has_replicatedbehaviorevent() const;
  private:
  bool _internal_has_replicatedbehaviorevent() const;
  public:
  void clear_replicatedbehaviorevent();
  const ::HederaDefinitions::FReplicatedBehaviorEvent& replicatedbehaviorevent() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FReplicatedBehaviorEvent* release_replicatedbehaviorevent();
  ::HederaDefinitions::FReplicatedBehaviorEvent* mutable_replicatedbehaviorevent();
  void set_allocated_replicatedbehaviorevent(::HederaDefinitions::FReplicatedBehaviorEvent* replicatedbehaviorevent);
  private:
  const ::HederaDefinitions::FReplicatedBehaviorEvent& _internal_replicatedbehaviorevent() const;
  ::HederaDefinitions::FReplicatedBehaviorEvent* _internal_mutable_replicatedbehaviorevent();
  public:
  void unsafe_arena_set_allocated_replicatedbehaviorevent(
      ::HederaDefinitions::FReplicatedBehaviorEvent* replicatedbehaviorevent);
  ::HederaDefinitions::FReplicatedBehaviorEvent* unsafe_arena_release_replicatedbehaviorevent();

  // required .HederaDefinitions.FCinematicModeOptions ReplicatedCinematicModeOptions = 82;
  bool has_replicatedcinematicmodeoptions() const;
  private:
  bool _internal_has_replicatedcinematicmodeoptions() const;
  public:
  void clear_replicatedcinematicmodeoptions();
  const ::HederaDefinitions::FCinematicModeOptions& replicatedcinematicmodeoptions() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FCinematicModeOptions* release_replicatedcinematicmodeoptions();
  ::HederaDefinitions::FCinematicModeOptions* mutable_replicatedcinematicmodeoptions();
  void set_allocated_replicatedcinematicmodeoptions(::HederaDefinitions::FCinematicModeOptions* replicatedcinematicmodeoptions);
  private:
  const ::HederaDefinitions::FCinematicModeOptions& _internal_replicatedcinematicmodeoptions() const;
  ::HederaDefinitions::FCinematicModeOptions* _internal_mutable_replicatedcinematicmodeoptions();
  public:
  void unsafe_arena_set_allocated_replicatedcinematicmodeoptions(
      ::HederaDefinitions::FCinematicModeOptions* replicatedcinematicmodeoptions);
  ::HederaDefinitions::FCinematicModeOptions* unsafe_arena_release_replicatedcinematicmodeoptions();

  // required .HederaDefinitions.FUniqueID UniqueID = 84;
  bool has_uniqueid() const;
  private:
  bool _internal_has_uniqueid() const;
  public:
  void clear_uniqueid();
  const ::HederaDefinitions::FUniqueID& uniqueid() const;
  PROTOBUF_NODISCARD ::HederaDefinitions::FUniqueID* release_uniqueid();
  ::HederaDefinitions::FUniqueID* mutable_uniqueid();
  void set_allocated_uniqueid(::HederaDefinitions::FUniqueID* uniqueid);
  private:
  const ::HederaDefinitions::FUniqueID& _internal_uniqueid() const;
  ::HederaDefinitions::FUniqueID* _internal_mutable_uniqueid();
  public:
  void unsafe_arena_set_allocated_uniqueid(
      ::HederaDefinitions::FUniqueID* uniqueid);
  ::HederaDefinitions::FUniqueID* unsafe_arena_release_uniqueid();

  // required float DrawScale = 3;
  bool has_drawscale() const;
  private:
  bool _internal_has_drawscale() const;
  public:
  void clear_drawscale();
  float drawscale() const;
  void set_drawscale(float value);
  private:
  float _internal_drawscale() const;
  void _internal_set_drawscale(float value);
  public:

  // required float CustomTimeDilation = 4;
  bool has_customtimedilation() const;
  private:
  bool _internal_has_customtimedilation() const;
  public:
  void clear_customtimedilation();
  float customtimedilation() const;
  void set_customtimedilation(float value);
  private:
  float _internal_customtimedilation() const;
  void _internal_set_customtimedilation(float value);
  public:

  // required uint32 Physics = 5;
  bool has_physics() const;
  private:
  bool _internal_has_physics() const;
  public:
  void clear_physics();
  uint32_t physics() const;
  void set_physics(uint32_t value);
  private:
  uint32_t _internal_physics() const;
  void _internal_set_physics(uint32_t value);
  public:

  // required uint32 RemoteRole = 6;
  bool has_remoterole() const;
  private:
  bool _internal_has_remoterole() const;
  public:
  void clear_remoterole();
  uint32_t remoterole() const;
  void set_remoterole(uint32_t value);
  private:
  uint32_t _internal_remoterole() const;
  void _internal_set_remoterole(uint32_t value);
  public:

  // required uint32 Role = 7;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // required uint32 ReplicatedCollisionType = 8;
  bool has_replicatedcollisiontype() const;
  private:
  bool _internal_has_replicatedcollisiontype() const;
  public:
  void clear_replicatedcollisiontype();
  uint32_t replicatedcollisiontype() const;
  void set_replicatedcollisiontype(uint32_t value);
  private:
  uint32_t _internal_replicatedcollisiontype() const;
  void _internal_set_replicatedcollisiontype(uint32_t value);
  public:

  // required bool bHidden = 11;
  bool has_bhidden() const;
  private:
  bool _internal_has_bhidden() const;
  public:
  void clear_bhidden();
  bool bhidden() const;
  void set_bhidden(bool value);
  private:
  bool _internal_bhidden() const;
  void _internal_set_bhidden(bool value);
  public:

  // required bool bTearOff = 12;
  bool has_btearoff() const;
  private:
  bool _internal_has_btearoff() const;
  public:
  void clear_btearoff();
  bool btearoff() const;
  void set_btearoff(bool value);
  private:
  bool _internal_btearoff() const;
  void _internal_set_btearoff(bool value);
  public:

  // required bool bHardAttach = 13;
  bool has_bhardattach() const;
  private:
  bool _internal_has_bhardattach() const;
  public:
  void clear_bhardattach();
  bool bhardattach() const;
  void set_bhardattach(bool value);
  private:
  bool _internal_bhardattach() const;
  void _internal_set_bhardattach(bool value);
  public:

  // required bool bCollideActors = 14;
  bool has_bcollideactors() const;
  private:
  bool _internal_has_bcollideactors() const;
  public:
  void clear_bcollideactors();
  bool bcollideactors() const;
  void set_bcollideactors(bool value);
  private:
  bool _internal_bcollideactors() const;
  void _internal_set_bcollideactors(bool value);
  public:

  // required bool bCollideWorld = 15;
  bool has_bcollideworld() const;
  private:
  bool _internal_has_bcollideworld() const;
  public:
  void clear_bcollideworld();
  bool bcollideworld() const;
  void set_bcollideworld(bool value);
  private:
  bool _internal_bcollideworld() const;
  void _internal_set_bcollideworld(bool value);
  public:

  // required bool bBlockActors = 16;
  bool has_bblockactors() const;
  private:
  bool _internal_has_bblockactors() const;
  public:
  void clear_bblockactors();
  bool bblockactors() const;
  void set_bblockactors(bool value);
  private:
  bool _internal_bblockactors() const;
  void _internal_set_bblockactors(bool value);
  public:

  // required bool bProjTarget = 17;
  bool has_bprojtarget() const;
  private:
  bool _internal_has_bprojtarget() const;
  public:
  void clear_bprojtarget();
  bool bprojtarget() const;
  void set_bprojtarget(bool value);
  private:
  bool _internal_bprojtarget() const;
  void _internal_set_bprojtarget(bool value);
  public:

  // required bool bNetOwner = 18;
  bool has_bnetowner() const;
  private:
  bool _internal_has_bnetowner() const;
  public:
  void clear_bnetowner();
  bool bnetowner() const;
  void set_bnetowner(bool value);
  private:
  bool _internal_bnetowner() const;
  void _internal_set_bnetowner(bool value);
  public:

  // required int32 Deaths = 21;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  int32_t deaths() const;
  void set_deaths(int32_t value);
  private:
  int32_t _internal_deaths() const;
  void _internal_set_deaths(int32_t value);
  public:

  // required int32 Ping = 22;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  int32_t ping() const;
  void set_ping(int32_t value);
  private:
  int32_t _internal_ping() const;
  void _internal_set_ping(int32_t value);
  public:

  // required bool bAdmin = 24;
  bool has_badmin() const;
  private:
  bool _internal_has_badmin() const;
  public:
  void clear_badmin();
  bool badmin() const;
  void set_badmin(bool value);
  private:
  bool _internal_badmin() const;
  void _internal_set_badmin(bool value);
  public:

  // required bool bIsSpectator = 25;
  bool has_bisspectator() const;
  private:
  bool _internal_has_bisspectator() const;
  public:
  void clear_bisspectator();
  bool bisspectator() const;
  void set_bisspectator(bool value);
  private:
  bool _internal_bisspectator() const;
  void _internal_set_bisspectator(bool value);
  public:

  // required bool bOnlySpectator = 26;
  bool has_bonlyspectator() const;
  private:
  bool _internal_has_bonlyspectator() const;
  public:
  void clear_bonlyspectator();
  bool bonlyspectator() const;
  void set_bonlyspectator(bool value);
  private:
  bool _internal_bonlyspectator() const;
  void _internal_set_bonlyspectator(bool value);
  public:

  // required bool bOutOfLives = 27;
  bool has_boutoflives() const;
  private:
  bool _internal_has_boutoflives() const;
  public:
  void clear_boutoflives();
  bool boutoflives() const;
  void set_boutoflives(bool value);
  private:
  bool _internal_boutoflives() const;
  void _internal_set_boutoflives(bool value);
  public:

  // required int32 PlayerID = 31;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // required bool bBot = 28;
  bool has_bbot() const;
  private:
  bool _internal_has_bbot() const;
  public:
  void clear_bbot();
  bool bbot() const;
  void set_bbot(bool value);
  private:
  bool _internal_bbot() const;
  void _internal_set_bbot(bool value);
  public:

  // required bool bFromPreviousLevel = 29;
  bool has_bfrompreviouslevel() const;
  private:
  bool _internal_has_bfrompreviouslevel() const;
  public:
  void clear_bfrompreviouslevel();
  bool bfrompreviouslevel() const;
  void set_bfrompreviouslevel(bool value);
  private:
  bool _internal_bfrompreviouslevel() const;
  void _internal_set_bfrompreviouslevel(bool value);
  public:

  // required bool bPlayerAFK = 30;
  bool has_bplayerafk() const;
  private:
  bool _internal_has_bplayerafk() const;
  public:
  void clear_bplayerafk();
  bool bplayerafk() const;
  void set_bplayerafk(bool value);
  private:
  bool _internal_bplayerafk() const;
  void _internal_set_bplayerafk(bool value);
  public:

  // required bool bIsDead = 38;
  bool has_bisdead() const;
  private:
  bool _internal_has_bisdead() const;
  public:
  void clear_bisdead();
  bool bisdead() const;
  void set_bisdead(bool value);
  private:
  bool _internal_bisdead() const;
  void _internal_set_bisdead(bool value);
  public:

  // required int32 StartTime = 33;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  int32_t starttime() const;
  void set_starttime(int32_t value);
  private:
  int32_t _internal_starttime() const;
  void _internal_set_starttime(int32_t value);
  public:

  // required int32 Kills = 34;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  int32_t kills() const;
  void set_kills(int32_t value);
  private:
  int32_t _internal_kills() const;
  void _internal_set_kills(int32_t value);
  public:

  // required int32 ExpLevel = 35;
  bool has_explevel() const;
  private:
  bool _internal_has_explevel() const;
  public:
  void clear_explevel();
  int32_t explevel() const;
  void set_explevel(int32_t value);
  private:
  int32_t _internal_explevel() const;
  void _internal_set_explevel(int32_t value);
  public:

  // required int32 ExpPointsNextLevelAt = 36;
  bool has_exppointsnextlevelat() const;
  private:
  bool _internal_has_exppointsnextlevelat() const;
  public:
  void clear_exppointsnextlevelat();
  int32_t exppointsnextlevelat() const;
  void set_exppointsnextlevelat(int32_t value);
  private:
  int32_t _internal_exppointsnextlevelat() const;
  void _internal_set_exppointsnextlevelat(int32_t value);
  public:

  // required int32 ExpPointsNextLevelAtBaseValue = 37;
  bool has_exppointsnextlevelatbasevalue() const;
  private:
  bool _internal_has_exppointsnextlevelatbasevalue() const;
  public:
  void clear_exppointsnextlevelatbasevalue();
  int32_t exppointsnextlevelatbasevalue() const;
  void set_exppointsnextlevelatbasevalue(int32_t value);
  private:
  int32_t _internal_exppointsnextlevelatbasevalue() const;
  void _internal_set_exppointsnextlevelatbasevalue(int32_t value);
  public:

  // required int32 GeneralSkillPoints = 40;
  bool has_generalskillpoints() const;
  private:
  bool _internal_has_generalskillpoints() const;
  public:
  void clear_generalskillpoints();
  int32_t generalskillpoints() const;
  void set_generalskillpoints(int32_t value);
  private:
  int32_t _internal_generalskillpoints() const;
  void _internal_set_generalskillpoints(int32_t value);
  public:

  // required int32 SpecialistSkillPoints = 41;
  bool has_specialistskillpoints() const;
  private:
  bool _internal_has_specialistskillpoints() const;
  public:
  void clear_specialistskillpoints();
  int32_t specialistskillpoints() const;
  void set_specialistskillpoints(int32_t value);
  private:
  int32_t _internal_specialistskillpoints() const;
  void _internal_set_specialistskillpoints(int32_t value);
  public:

  // required float CurrentInstantHitCriticalHitBonus = 42;
  bool has_currentinstanthitcriticalhitbonus() const;
  private:
  bool _internal_has_currentinstanthitcriticalhitbonus() const;
  public:
  void clear_currentinstanthitcriticalhitbonus();
  float currentinstanthitcriticalhitbonus() const;
  void set_currentinstanthitcriticalhitbonus(float value);
  private:
  float _internal_currentinstanthitcriticalhitbonus() const;
  void _internal_set_currentinstanthitcriticalhitbonus(float value);
  public:

  // required float CurrentInstantHitCriticalHitBonusBaseValue = 43;
  bool has_currentinstanthitcriticalhitbonusbasevalue() const;
  private:
  bool _internal_has_currentinstanthitcriticalhitbonusbasevalue() const;
  public:
  void clear_currentinstanthitcriticalhitbonusbasevalue();
  float currentinstanthitcriticalhitbonusbasevalue() const;
  void set_currentinstanthitcriticalhitbonusbasevalue(float value);
  private:
  float _internal_currentinstanthitcriticalhitbonusbasevalue() const;
  void _internal_set_currentinstanthitcriticalhitbonusbasevalue(float value);
  public:

  // required int32 NumTrackedSkillSlotsInUse = 50;
  bool has_numtrackedskillslotsinuse() const;
  private:
  bool _internal_has_numtrackedskillslotsinuse() const;
  public:
  void clear_numtrackedskillslotsinuse();
  int32_t numtrackedskillslotsinuse() const;
  void set_numtrackedskillslotsinuse(int32_t value);
  private:
  int32_t _internal_numtrackedskillslotsinuse() const;
  void _internal_set_numtrackedskillslotsinuse(int32_t value);
  public:

  // required bool bHideOnHUDIfEnemy = 39;
  bool has_bhideonhudifenemy() const;
  private:
  bool _internal_has_bhideonhudifenemy() const;
  public:
  void clear_bhideonhudifenemy();
  bool bhideonhudifenemy() const;
  void set_bhideonhudifenemy(bool value);
  private:
  bool _internal_bhideonhudifenemy() const;
  void _internal_set_bhideonhudifenemy(bool value);
  public:

  // required bool bGFxMenuOpen = 49;
  bool has_bgfxmenuopen() const;
  private:
  bool _internal_has_bgfxmenuopen() const;
  public:
  void clear_bgfxmenuopen();
  bool bgfxmenuopen() const;
  void set_bgfxmenuopen(bool value);
  private:
  bool _internal_bgfxmenuopen() const;
  void _internal_set_bgfxmenuopen(bool value);
  public:

  // required bool bNPC = 57;
  bool has_bnpc() const;
  private:
  bool _internal_has_bnpc() const;
  public:
  void clear_bnpc();
  bool bnpc() const;
  void set_bnpc(bool value);
  private:
  bool _internal_bnpc() const;
  void _internal_set_bnpc(bool value);
  public:

  // required bool bDigitalDelux = 58;
  bool has_bdigitaldelux() const;
  private:
  bool _internal_has_bdigitaldelux() const;
  public:
  void clear_bdigitaldelux();
  bool bdigitaldelux() const;
  void set_bdigitaldelux(bool value);
  private:
  bool _internal_bdigitaldelux() const;
  void _internal_set_bdigitaldelux(bool value);
  public:

  // required int32 HighestCompletedPlayThrough = 51;
  bool has_highestcompletedplaythrough() const;
  private:
  bool _internal_has_highestcompletedplaythrough() const;
  public:
  void clear_highestcompletedplaythrough();
  int32_t highestcompletedplaythrough() const;
  void set_highestcompletedplaythrough(int32_t value);
  private:
  int32_t _internal_highestcompletedplaythrough() const;
  void _internal_set_highestcompletedplaythrough(int32_t value);
  public:

  // required int32 NumReplicatedNouns = 52;
  bool has_numreplicatednouns() const;
  private:
  bool _internal_has_numreplicatednouns() const;
  public:
  void clear_numreplicatednouns();
  int32_t numreplicatednouns() const;
  void set_numreplicatednouns(int32_t value);
  private:
  int32_t _internal_numreplicatednouns() const;
  void _internal_set_numreplicatednouns(int32_t value);
  public:

  // required bool bPlayBrowsingTaunt = 59;
  bool has_bplaybrowsingtaunt() const;
  private:
  bool _internal_has_bplaybrowsingtaunt() const;
  public:
  void clear_bplaybrowsingtaunt();
  bool bplaybrowsingtaunt() const;
  void set_bplaybrowsingtaunt(bool value);
  private:
  bool _internal_bplaybrowsingtaunt() const;
  void _internal_set_bplaybrowsingtaunt(bool value);
  public:

  // required bool bIsPvEMatch = 60;
  bool has_bispvematch() const;
  private:
  bool _internal_has_bispvematch() const;
  public:
  void clear_bispvematch();
  bool bispvematch() const;
  void set_bispvematch(bool value);
  private:
  bool _internal_bispvematch() const;
  void _internal_set_bispvematch(bool value);
  public:

  // required bool bNeedsToCastSurrenderVote = 61;
  bool has_bneedstocastsurrendervote() const;
  private:
  bool _internal_has_bneedstocastsurrendervote() const;
  public:
  void clear_bneedstocastsurrendervote();
  bool bneedstocastsurrendervote() const;
  void set_bneedstocastsurrendervote(bool value);
  private:
  bool _internal_bneedstocastsurrendervote() const;
  void _internal_set_bneedstocastsurrendervote(bool value);
  public:

  // required int32 BotDifficulty = 63;
  bool has_botdifficulty() const;
  private:
  bool _internal_has_botdifficulty() const;
  public:
  void clear_botdifficulty();
  int32_t botdifficulty() const;
  void set_botdifficulty(int32_t value);
  private:
  int32_t _internal_botdifficulty() const;
  void _internal_set_botdifficulty(int32_t value);
  public:

  // required uint32 ReplicatedRespawnTimeRemaining = 70;
  bool has_replicatedrespawntimeremaining() const;
  private:
  bool _internal_has_replicatedrespawntimeremaining() const;
  public:
  void clear_replicatedrespawntimeremaining();
  uint32_t replicatedrespawntimeremaining() const;
  void set_replicatedrespawntimeremaining(uint32_t value);
  private:
  uint32_t _internal_replicatedrespawntimeremaining() const;
  void _internal_set_replicatedrespawntimeremaining(uint32_t value);
  public:

  // required uint32 CharacterSelectionState = 71;
  bool has_characterselectionstate() const;
  private:
  bool _internal_has_characterselectionstate() const;
  public:
  void clear_characterselectionstate();
  uint32_t characterselectionstate() const;
  void set_characterselectionstate(uint32_t value);
  private:
  uint32_t _internal_characterselectionstate() const;
  void _internal_set_characterselectionstate(uint32_t value);
  public:

  // required float OvershieldStrength = 74;
  bool has_overshieldstrength() const;
  private:
  bool _internal_has_overshieldstrength() const;
  public:
  void clear_overshieldstrength();
  float overshieldstrength() const;
  void set_overshieldstrength(float value);
  private:
  float _internal_overshieldstrength() const;
  void _internal_set_overshieldstrength(float value);
  public:

  // required float MaxOvershieldValue = 75;
  bool has_maxovershieldvalue() const;
  private:
  bool _internal_has_maxovershieldvalue() const;
  public:
  void clear_maxovershieldvalue();
  float maxovershieldvalue() const;
  void set_maxovershieldvalue(float value);
  private:
  float _internal_maxovershieldvalue() const;
  void _internal_set_maxovershieldvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.APoplarPlayerReplicationInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FCurrencyState > currency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedNounAttributeState > replicatednouns_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FTrackedSkillState > trackedskills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ReplicatedActorReference > nemesispriarray_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FManagedActorCountData > managedactorcounts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > activatedperkflags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedPerkItem > perks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::NonReplicatedObjectReference > currentwearabledefinitions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    ::HederaDefinitions::FVector* location_;
    ::HederaDefinitions::FRotator* rotation_;
    ::HederaDefinitions::ReplicatedActorReference* owner_;
    ::HederaDefinitions::ReplicatedActorReference* base_;
    ::HederaDefinitions::ReplicatedActorReference* instigator_;
    ::HederaDefinitions::FVector* velocity_;
    ::HederaDefinitions::ReplicatedActorReference* team_;
    ::HederaDefinitions::FResourcePoolReference* healthpool_;
    ::HederaDefinitions::FResourcePoolReference* shieldarmor_;
    ::HederaDefinitions::NonReplicatedObjectReference* pawnallegiance_;
    ::HederaDefinitions::NonReplicatedObjectReference* characternameiddef_;
    ::HederaDefinitions::FReplicatedStandInGear* standingear_;
    ::HederaDefinitions::ReplicatedActorReference* poplarpsi_;
    ::HederaDefinitions::ReplicatedActorReference* botownerpri_;
    ::HederaDefinitions::ReplicatedActorReference* myalertpoint_;
    ::HederaDefinitions::FResourcePoolReference* energypool_;
    ::HederaDefinitions::NonReplicatedObjectReference* unittypedefinition_;
    ::HederaDefinitions::ReplicatedActorReference* statreplicationinfo_;
    ::HederaDefinitions::NonReplicatedObjectReference* browsecharacternameiddef_;
    ::HederaDefinitions::NonReplicatedObjectReference* browseskiniddef_;
    ::HederaDefinitions::NonReplicatedObjectReference* skiniddef_;
    ::HederaDefinitions::FAugSetInstance* augs_;
    ::HederaDefinitions::FReplicatedBehaviorConsumerState* replicatedbehaviorconsumerstate_;
    ::HederaDefinitions::FReplicatedBehaviorEvent* replicatedbehaviorevent_;
    ::HederaDefinitions::FCinematicModeOptions* replicatedcinematicmodeoptions_;
    ::HederaDefinitions::FUniqueID* uniqueid_;
    float drawscale_;
    float customtimedilation_;
    uint32_t physics_;
    uint32_t remoterole_;
    uint32_t role_;
    uint32_t replicatedcollisiontype_;
    bool bhidden_;
    bool btearoff_;
    bool bhardattach_;
    bool bcollideactors_;
    bool bcollideworld_;
    bool bblockactors_;
    bool bprojtarget_;
    bool bnetowner_;
    int32_t deaths_;
    int32_t ping_;
    bool badmin_;
    bool bisspectator_;
    bool bonlyspectator_;
    bool boutoflives_;
    int32_t playerid_;
    bool bbot_;
    bool bfrompreviouslevel_;
    bool bplayerafk_;
    bool bisdead_;
    int32_t starttime_;
    int32_t kills_;
    int32_t explevel_;
    int32_t exppointsnextlevelat_;
    int32_t exppointsnextlevelatbasevalue_;
    int32_t generalskillpoints_;
    int32_t specialistskillpoints_;
    float currentinstanthitcriticalhitbonus_;
    float currentinstanthitcriticalhitbonusbasevalue_;
    int32_t numtrackedskillslotsinuse_;
    bool bhideonhudifenemy_;
    bool bgfxmenuopen_;
    bool bnpc_;
    bool bdigitaldelux_;
    int32_t highestcompletedplaythrough_;
    int32_t numreplicatednouns_;
    bool bplaybrowsingtaunt_;
    bool bispvematch_;
    bool bneedstocastsurrendervote_;
    int32_t botdifficulty_;
    uint32_t replicatedrespawntimeremaining_;
    uint32_t characterselectionstate_;
    float overshieldstrength_;
    float maxovershieldvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class ActorReplicationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.ActorReplicationMessage) */ {
 public:
  inline ActorReplicationMessage() : ActorReplicationMessage(nullptr) {}
  ~ActorReplicationMessage() override;
  explicit PROTOBUF_CONSTEXPR ActorReplicationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorReplicationMessage(const ActorReplicationMessage& from);
  ActorReplicationMessage(ActorReplicationMessage&& from) noexcept
    : ActorReplicationMessage() {
    *this = ::std::move(from);
  }

  inline ActorReplicationMessage& operator=(const ActorReplicationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorReplicationMessage& operator=(ActorReplicationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorReplicationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorReplicationMessage* internal_default_instance() {
    return reinterpret_cast<const ActorReplicationMessage*>(
               &_ActorReplicationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ActorReplicationMessage& a, ActorReplicationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorReplicationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorReplicationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorReplicationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorReplicationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorReplicationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorReplicationMessage& from) {
    ActorReplicationMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorReplicationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.ActorReplicationMessage";
  }
  protected:
  explicit ActorReplicationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActorReplicationMessage_ActorType ActorType;
  static constexpr ActorType ACTOR_TYPE_ERR =
    ActorReplicationMessage_ActorType_ACTOR_TYPE_ERR;
  static constexpr ActorType ACTOR_TYPE_POPLAR_PLAYER_CONTROLLER =
    ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_CONTROLLER;
  static constexpr ActorType ACTOR_TYPE_POPLAR_PLAYER_STATE_INFO =
    ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_STATE_INFO;
  static constexpr ActorType ACTOR_TYPE_POPLAR_PLAYER_REPLICATION_INFO =
    ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_REPLICATION_INFO;
  static constexpr ActorType ACTOR_TYPE_POPLAR_GAME_REPLICATION_INFO =
    ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_GAME_REPLICATION_INFO;
  static constexpr ActorType ACTOR_TYPE_POPLAR_PLAYER_PAWN =
    ActorReplicationMessage_ActorType_ACTOR_TYPE_POPLAR_PLAYER_PAWN;
  static inline bool ActorType_IsValid(int value) {
    return ActorReplicationMessage_ActorType_IsValid(value);
  }
  static constexpr ActorType ActorType_MIN =
    ActorReplicationMessage_ActorType_ActorType_MIN;
  static constexpr ActorType ActorType_MAX =
    ActorReplicationMessage_ActorType_ActorType_MAX;
  static constexpr int ActorType_ARRAYSIZE =
    ActorReplicationMessage_ActorType_ActorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActorType_descriptor() {
    return ActorReplicationMessage_ActorType_descriptor();
  }
  template<typename T>
  static inline const std::string& ActorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActorType_Name.");
    return ActorReplicationMessage_ActorType_Name(enum_t_value);
  }
  static inline bool ActorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActorType* value) {
    return ActorReplicationMessage_ActorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReplicationMessageFieldNumber = 4,
    kActorTypeFieldNumber = 1,
    kIsInitialFieldNumber = 2,
    kActorIDFieldNumber = 3,
  };
  // required bytes replicationMessage = 4;
  bool has_replicationmessage() const;
  private:
  bool _internal_has_replicationmessage() const;
  public:
  void clear_replicationmessage();
  const std::string& replicationmessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_replicationmessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_replicationmessage();
  PROTOBUF_NODISCARD std::string* release_replicationmessage();
  void set_allocated_replicationmessage(std::string* replicationmessage);
  private:
  const std::string& _internal_replicationmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replicationmessage(const std::string& value);
  std::string* _internal_mutable_replicationmessage();
  public:

  // required .HederaDefinitions.ActorReplicationMessage.ActorType actorType = 1;
  bool has_actortype() const;
  private:
  bool _internal_has_actortype() const;
  public:
  void clear_actortype();
  ::HederaDefinitions::ActorReplicationMessage_ActorType actortype() const;
  void set_actortype(::HederaDefinitions::ActorReplicationMessage_ActorType value);
  private:
  ::HederaDefinitions::ActorReplicationMessage_ActorType _internal_actortype() const;
  void _internal_set_actortype(::HederaDefinitions::ActorReplicationMessage_ActorType value);
  public:

  // required bool isInitial = 2;
  bool has_isinitial() const;
  private:
  bool _internal_has_isinitial() const;
  public:
  void clear_isinitial();
  bool isinitial() const;
  void set_isinitial(bool value);
  private:
  bool _internal_isinitial() const;
  void _internal_set_isinitial(bool value);
  public:

  // required uint32 actorID = 3;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  uint32_t actorid() const;
  void set_actorid(uint32_t value);
  private:
  uint32_t _internal_actorid() const;
  void _internal_set_actorid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HederaDefinitions.ActorReplicationMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replicationmessage_;
    int actortype_;
    bool isinitial_;
    uint32_t actorid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// -------------------------------------------------------------------

class ReplicationFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HederaDefinitions.ReplicationFrame) */ {
 public:
  inline ReplicationFrame() : ReplicationFrame(nullptr) {}
  ~ReplicationFrame() override;
  explicit PROTOBUF_CONSTEXPR ReplicationFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicationFrame(const ReplicationFrame& from);
  ReplicationFrame(ReplicationFrame&& from) noexcept
    : ReplicationFrame() {
    *this = ::std::move(from);
  }

  inline ReplicationFrame& operator=(const ReplicationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicationFrame& operator=(ReplicationFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicationFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicationFrame* internal_default_instance() {
    return reinterpret_cast<const ReplicationFrame*>(
               &_ReplicationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ReplicationFrame& a, ReplicationFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicationFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicationFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicationFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicationFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicationFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicationFrame& from) {
    ReplicationFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicationFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HederaDefinitions.ReplicationFrame";
  }
  protected:
  explicit ReplicationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorReplicationMessagesFieldNumber = 1,
  };
  // repeated .HederaDefinitions.ActorReplicationMessage actorReplicationMessages = 1;
  int actorreplicationmessages_size() const;
  private:
  int _internal_actorreplicationmessages_size() const;
  public:
  void clear_actorreplicationmessages();
  ::HederaDefinitions::ActorReplicationMessage* mutable_actorreplicationmessages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ActorReplicationMessage >*
      mutable_actorreplicationmessages();
  private:
  const ::HederaDefinitions::ActorReplicationMessage& _internal_actorreplicationmessages(int index) const;
  ::HederaDefinitions::ActorReplicationMessage* _internal_add_actorreplicationmessages();
  public:
  const ::HederaDefinitions::ActorReplicationMessage& actorreplicationmessages(int index) const;
  ::HederaDefinitions::ActorReplicationMessage* add_actorreplicationmessages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ActorReplicationMessage >&
      actorreplicationmessages() const;

  // @@protoc_insertion_point(class_scope:HederaDefinitions.ReplicationFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ActorReplicationMessage > actorreplicationmessages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_definitions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FRotator

// required int32 Pitch = 1;
inline bool FRotator::_internal_has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FRotator::has_pitch() const {
  return _internal_has_pitch();
}
inline void FRotator::clear_pitch() {
  _impl_.pitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FRotator::_internal_pitch() const {
  return _impl_.pitch_;
}
inline int32_t FRotator::pitch() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FRotator.Pitch)
  return _internal_pitch();
}
inline void FRotator::_internal_set_pitch(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pitch_ = value;
}
inline void FRotator::set_pitch(int32_t value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FRotator.Pitch)
}

// required int32 Yaw = 2;
inline bool FRotator::_internal_has_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FRotator::has_yaw() const {
  return _internal_has_yaw();
}
inline void FRotator::clear_yaw() {
  _impl_.yaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FRotator::_internal_yaw() const {
  return _impl_.yaw_;
}
inline int32_t FRotator::yaw() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FRotator.Yaw)
  return _internal_yaw();
}
inline void FRotator::_internal_set_yaw(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.yaw_ = value;
}
inline void FRotator::set_yaw(int32_t value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FRotator.Yaw)
}

// required int32 Roll = 3;
inline bool FRotator::_internal_has_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FRotator::has_roll() const {
  return _internal_has_roll();
}
inline void FRotator::clear_roll() {
  _impl_.roll_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FRotator::_internal_roll() const {
  return _impl_.roll_;
}
inline int32_t FRotator::roll() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FRotator.Roll)
  return _internal_roll();
}
inline void FRotator::_internal_set_roll(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.roll_ = value;
}
inline void FRotator::set_roll(int32_t value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FRotator.Roll)
}

// -------------------------------------------------------------------

// FVector

// required float X = 1;
inline bool FVector::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FVector::has_x() const {
  return _internal_has_x();
}
inline void FVector::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FVector::_internal_x() const {
  return _impl_.x_;
}
inline float FVector::x() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FVector.X)
  return _internal_x();
}
inline void FVector::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void FVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FVector.X)
}

// required float Y = 2;
inline bool FVector::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FVector::has_y() const {
  return _internal_has_y();
}
inline void FVector::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FVector::_internal_y() const {
  return _impl_.y_;
}
inline float FVector::y() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FVector.Y)
  return _internal_y();
}
inline void FVector::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void FVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FVector.Y)
}

// required float Z = 3;
inline bool FVector::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FVector::has_z() const {
  return _internal_has_z();
}
inline void FVector::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FVector::_internal_z() const {
  return _impl_.z_;
}
inline float FVector::z() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FVector.Z)
  return _internal_z();
}
inline void FVector::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void FVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FVector.Z)
}

// -------------------------------------------------------------------

// ReplicatedActorReference

// required uint32 actorID = 1;
inline bool ReplicatedActorReference::_internal_has_actorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReplicatedActorReference::has_actorid() const {
  return _internal_has_actorid();
}
inline void ReplicatedActorReference::clear_actorid() {
  _impl_.actorid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ReplicatedActorReference::_internal_actorid() const {
  return _impl_.actorid_;
}
inline uint32_t ReplicatedActorReference::actorid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.ReplicatedActorReference.actorID)
  return _internal_actorid();
}
inline void ReplicatedActorReference::_internal_set_actorid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.actorid_ = value;
}
inline void ReplicatedActorReference::set_actorid(uint32_t value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.ReplicatedActorReference.actorID)
}

// -------------------------------------------------------------------

// NonReplicatedObjectReference

// required string fullNameLookup = 1;
inline bool NonReplicatedObjectReference::_internal_has_fullnamelookup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NonReplicatedObjectReference::has_fullnamelookup() const {
  return _internal_has_fullnamelookup();
}
inline void NonReplicatedObjectReference::clear_fullnamelookup() {
  _impl_.fullnamelookup_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NonReplicatedObjectReference::fullnamelookup() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.NonReplicatedObjectReference.fullNameLookup)
  return _internal_fullnamelookup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonReplicatedObjectReference::set_fullnamelookup(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.fullnamelookup_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.NonReplicatedObjectReference.fullNameLookup)
}
inline std::string* NonReplicatedObjectReference::mutable_fullnamelookup() {
  std::string* _s = _internal_mutable_fullnamelookup();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.NonReplicatedObjectReference.fullNameLookup)
  return _s;
}
inline const std::string& NonReplicatedObjectReference::_internal_fullnamelookup() const {
  return _impl_.fullnamelookup_.Get();
}
inline void NonReplicatedObjectReference::_internal_set_fullnamelookup(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fullnamelookup_.Set(value, GetArenaForAllocation());
}
inline std::string* NonReplicatedObjectReference::_internal_mutable_fullnamelookup() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.fullnamelookup_.Mutable(GetArenaForAllocation());
}
inline std::string* NonReplicatedObjectReference::release_fullnamelookup() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.NonReplicatedObjectReference.fullNameLookup)
  if (!_internal_has_fullnamelookup()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.fullnamelookup_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fullnamelookup_.IsDefault()) {
    _impl_.fullnamelookup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NonReplicatedObjectReference::set_allocated_fullnamelookup(std::string* fullnamelookup) {
  if (fullnamelookup != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fullnamelookup_.SetAllocated(fullnamelookup, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fullnamelookup_.IsDefault()) {
    _impl_.fullnamelookup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.NonReplicatedObjectReference.fullNameLookup)
}

// -------------------------------------------------------------------

// FName

// required int32 FNameEntryId = 1;
inline bool FName::_internal_has_fnameentryid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FName::has_fnameentryid() const {
  return _internal_has_fnameentryid();
}
inline void FName::clear_fnameentryid() {
  _impl_.fnameentryid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FName::_internal_fnameentryid() const {
  return _impl_.fnameentryid_;
}
inline int32_t FName::fnameentryid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FName.FNameEntryId)
  return _internal_fnameentryid();
}
inline void FName::_internal_set_fnameentryid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fnameentryid_ = value;
}
inline void FName::set_fnameentryid(int32_t value) {
  _internal_set_fnameentryid(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FName.FNameEntryId)
}

// required int32 InstanceNumber = 2;
inline bool FName::_internal_has_instancenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FName::has_instancenumber() const {
  return _internal_has_instancenumber();
}
inline void FName::clear_instancenumber() {
  _impl_.instancenumber_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FName::_internal_instancenumber() const {
  return _impl_.instancenumber_;
}
inline int32_t FName::instancenumber() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FName.InstanceNumber)
  return _internal_instancenumber();
}
inline void FName::_internal_set_instancenumber(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instancenumber_ = value;
}
inline void FName::set_instancenumber(int32_t value) {
  _internal_set_instancenumber(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FName.InstanceNumber)
}

// -------------------------------------------------------------------

// FEnvironmentalEffectInfo

// required int32 EffectID = 1;
inline bool FEnvironmentalEffectInfo::_internal_has_effectid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FEnvironmentalEffectInfo::has_effectid() const {
  return _internal_has_effectid();
}
inline void FEnvironmentalEffectInfo::clear_effectid() {
  _impl_.effectid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FEnvironmentalEffectInfo::_internal_effectid() const {
  return _impl_.effectid_;
}
inline int32_t FEnvironmentalEffectInfo::effectid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FEnvironmentalEffectInfo.EffectID)
  return _internal_effectid();
}
inline void FEnvironmentalEffectInfo::_internal_set_effectid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.effectid_ = value;
}
inline void FEnvironmentalEffectInfo::set_effectid(int32_t value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FEnvironmentalEffectInfo.EffectID)
}

// required float AuxBusVolume = 2;
inline bool FEnvironmentalEffectInfo::_internal_has_auxbusvolume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FEnvironmentalEffectInfo::has_auxbusvolume() const {
  return _internal_has_auxbusvolume();
}
inline void FEnvironmentalEffectInfo::clear_auxbusvolume() {
  _impl_.auxbusvolume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FEnvironmentalEffectInfo::_internal_auxbusvolume() const {
  return _impl_.auxbusvolume_;
}
inline float FEnvironmentalEffectInfo::auxbusvolume() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FEnvironmentalEffectInfo.AuxBusVolume)
  return _internal_auxbusvolume();
}
inline void FEnvironmentalEffectInfo::_internal_set_auxbusvolume(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auxbusvolume_ = value;
}
inline void FEnvironmentalEffectInfo::set_auxbusvolume(float value) {
  _internal_set_auxbusvolume(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FEnvironmentalEffectInfo.AuxBusVolume)
}

// required float OutputBusVolume = 3;
inline bool FEnvironmentalEffectInfo::_internal_has_outputbusvolume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FEnvironmentalEffectInfo::has_outputbusvolume() const {
  return _internal_has_outputbusvolume();
}
inline void FEnvironmentalEffectInfo::clear_outputbusvolume() {
  _impl_.outputbusvolume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FEnvironmentalEffectInfo::_internal_outputbusvolume() const {
  return _impl_.outputbusvolume_;
}
inline float FEnvironmentalEffectInfo::outputbusvolume() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FEnvironmentalEffectInfo.OutputBusVolume)
  return _internal_outputbusvolume();
}
inline void FEnvironmentalEffectInfo::_internal_set_outputbusvolume(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.outputbusvolume_ = value;
}
inline void FEnvironmentalEffectInfo::set_outputbusvolume(float value) {
  _internal_set_outputbusvolume(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FEnvironmentalEffectInfo.OutputBusVolume)
}

// -------------------------------------------------------------------

// FAttributeDefinitionDefault

// required .HederaDefinitions.NonReplicatedObjectReference Attribute = 1;
inline bool FAttributeDefinitionDefault::_internal_has_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attribute_ != nullptr);
  return value;
}
inline bool FAttributeDefinitionDefault::has_attribute() const {
  return _internal_has_attribute();
}
inline void FAttributeDefinitionDefault::clear_attribute() {
  if (_impl_.attribute_ != nullptr) _impl_.attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAttributeDefinitionDefault::_internal_attribute() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAttributeDefinitionDefault::attribute() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeDefinitionDefault.Attribute)
  return _internal_attribute();
}
inline void FAttributeDefinitionDefault::unsafe_arena_set_allocated_attribute(
    ::HederaDefinitions::NonReplicatedObjectReference* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribute_);
  }
  _impl_.attribute_ = attribute;
  if (attribute) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeDefinitionDefault.Attribute)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAttributeDefinitionDefault::release_attribute() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAttributeDefinitionDefault::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeDefinitionDefault.Attribute)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAttributeDefinitionDefault::_internal_mutable_attribute() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.attribute_ = p;
  }
  return _impl_.attribute_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAttributeDefinitionDefault::mutable_attribute() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeDefinitionDefault.Attribute)
  return _msg;
}
inline void FAttributeDefinitionDefault::set_allocated_attribute(::HederaDefinitions::NonReplicatedObjectReference* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeDefinitionDefault.Attribute)
}

// required float DefaultValue = 2;
inline bool FAttributeDefinitionDefault::_internal_has_defaultvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FAttributeDefinitionDefault::has_defaultvalue() const {
  return _internal_has_defaultvalue();
}
inline void FAttributeDefinitionDefault::clear_defaultvalue() {
  _impl_.defaultvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FAttributeDefinitionDefault::_internal_defaultvalue() const {
  return _impl_.defaultvalue_;
}
inline float FAttributeDefinitionDefault::defaultvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeDefinitionDefault.DefaultValue)
  return _internal_defaultvalue();
}
inline void FAttributeDefinitionDefault::_internal_set_defaultvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.defaultvalue_ = value;
}
inline void FAttributeDefinitionDefault::set_defaultvalue(float value) {
  _internal_set_defaultvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAttributeDefinitionDefault.DefaultValue)
}

// -------------------------------------------------------------------

// FAttributeScalarParam

// required .HederaDefinitions.FName ParamName = 1;
inline bool FAttributeScalarParam::_internal_has_paramname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paramname_ != nullptr);
  return value;
}
inline bool FAttributeScalarParam::has_paramname() const {
  return _internal_has_paramname();
}
inline void FAttributeScalarParam::clear_paramname() {
  if (_impl_.paramname_ != nullptr) _impl_.paramname_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FName& FAttributeScalarParam::_internal_paramname() const {
  const ::HederaDefinitions::FName* p = _impl_.paramname_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FAttributeScalarParam::paramname() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.ParamName)
  return _internal_paramname();
}
inline void FAttributeScalarParam::unsafe_arena_set_allocated_paramname(
    ::HederaDefinitions::FName* paramname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.paramname_);
  }
  _impl_.paramname_ = paramname;
  if (paramname) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeScalarParam.ParamName)
}
inline ::HederaDefinitions::FName* FAttributeScalarParam::release_paramname() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.paramname_;
  _impl_.paramname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FAttributeScalarParam::unsafe_arena_release_paramname() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeScalarParam.ParamName)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.paramname_;
  _impl_.paramname_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FAttributeScalarParam::_internal_mutable_paramname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.paramname_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.paramname_ = p;
  }
  return _impl_.paramname_;
}
inline ::HederaDefinitions::FName* FAttributeScalarParam::mutable_paramname() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_paramname();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeScalarParam.ParamName)
  return _msg;
}
inline void FAttributeScalarParam::set_allocated_paramname(::HederaDefinitions::FName* paramname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.paramname_;
  }
  if (paramname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(paramname);
    if (message_arena != submessage_arena) {
      paramname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paramname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.paramname_ = paramname;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeScalarParam.ParamName)
}

// required bool bVectorParam = 2;
inline bool FAttributeScalarParam::_internal_has_bvectorparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FAttributeScalarParam::has_bvectorparam() const {
  return _internal_has_bvectorparam();
}
inline void FAttributeScalarParam::clear_bvectorparam() {
  _impl_.bvectorparam_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FAttributeScalarParam::_internal_bvectorparam() const {
  return _impl_.bvectorparam_;
}
inline bool FAttributeScalarParam::bvectorparam() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.bVectorParam)
  return _internal_bvectorparam();
}
inline void FAttributeScalarParam::_internal_set_bvectorparam(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bvectorparam_ = value;
}
inline void FAttributeScalarParam::set_bvectorparam(bool value) {
  _internal_set_bvectorparam(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAttributeScalarParam.bVectorParam)
}

// required bool bClampInput = 3;
inline bool FAttributeScalarParam::_internal_has_bclampinput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FAttributeScalarParam::has_bclampinput() const {
  return _internal_has_bclampinput();
}
inline void FAttributeScalarParam::clear_bclampinput() {
  _impl_.bclampinput_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FAttributeScalarParam::_internal_bclampinput() const {
  return _impl_.bclampinput_;
}
inline bool FAttributeScalarParam::bclampinput() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.bClampInput)
  return _internal_bclampinput();
}
inline void FAttributeScalarParam::_internal_set_bclampinput(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bclampinput_ = value;
}
inline void FAttributeScalarParam::set_bclampinput(bool value) {
  _internal_set_bclampinput(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAttributeScalarParam.bClampInput)
}

// required .HederaDefinitions.FAttributeDefinitionDefault Input = 4;
inline bool FAttributeScalarParam::_internal_has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline bool FAttributeScalarParam::has_input() const {
  return _internal_has_input();
}
inline void FAttributeScalarParam::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::_internal_input() const {
  const ::HederaDefinitions::FAttributeDefinitionDefault* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAttributeDefinitionDefault&>(
      ::HederaDefinitions::_FAttributeDefinitionDefault_default_instance_);
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::input() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.Input)
  return _internal_input();
}
inline void FAttributeScalarParam::unsafe_arena_set_allocated_input(
    ::HederaDefinitions::FAttributeDefinitionDefault* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeScalarParam.Input)
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeScalarParam.Input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAttributeDefinitionDefault>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::mutable_input() {
  ::HederaDefinitions::FAttributeDefinitionDefault* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeScalarParam.Input)
  return _msg;
}
inline void FAttributeScalarParam::set_allocated_input(::HederaDefinitions::FAttributeDefinitionDefault* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeScalarParam.Input)
}

// required .HederaDefinitions.FAttributeDefinitionDefault MinInput = 5;
inline bool FAttributeScalarParam::_internal_has_mininput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mininput_ != nullptr);
  return value;
}
inline bool FAttributeScalarParam::has_mininput() const {
  return _internal_has_mininput();
}
inline void FAttributeScalarParam::clear_mininput() {
  if (_impl_.mininput_ != nullptr) _impl_.mininput_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::_internal_mininput() const {
  const ::HederaDefinitions::FAttributeDefinitionDefault* p = _impl_.mininput_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAttributeDefinitionDefault&>(
      ::HederaDefinitions::_FAttributeDefinitionDefault_default_instance_);
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::mininput() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.MinInput)
  return _internal_mininput();
}
inline void FAttributeScalarParam::unsafe_arena_set_allocated_mininput(
    ::HederaDefinitions::FAttributeDefinitionDefault* mininput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mininput_);
  }
  _impl_.mininput_ = mininput;
  if (mininput) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeScalarParam.MinInput)
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::release_mininput() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.mininput_;
  _impl_.mininput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::unsafe_arena_release_mininput() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeScalarParam.MinInput)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.mininput_;
  _impl_.mininput_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::_internal_mutable_mininput() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.mininput_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAttributeDefinitionDefault>(GetArenaForAllocation());
    _impl_.mininput_ = p;
  }
  return _impl_.mininput_;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::mutable_mininput() {
  ::HederaDefinitions::FAttributeDefinitionDefault* _msg = _internal_mutable_mininput();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeScalarParam.MinInput)
  return _msg;
}
inline void FAttributeScalarParam::set_allocated_mininput(::HederaDefinitions::FAttributeDefinitionDefault* mininput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mininput_;
  }
  if (mininput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mininput);
    if (message_arena != submessage_arena) {
      mininput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mininput, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mininput_ = mininput;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeScalarParam.MinInput)
}

// required .HederaDefinitions.FAttributeDefinitionDefault MaxInput = 6;
inline bool FAttributeScalarParam::_internal_has_maxinput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maxinput_ != nullptr);
  return value;
}
inline bool FAttributeScalarParam::has_maxinput() const {
  return _internal_has_maxinput();
}
inline void FAttributeScalarParam::clear_maxinput() {
  if (_impl_.maxinput_ != nullptr) _impl_.maxinput_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::_internal_maxinput() const {
  const ::HederaDefinitions::FAttributeDefinitionDefault* p = _impl_.maxinput_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAttributeDefinitionDefault&>(
      ::HederaDefinitions::_FAttributeDefinitionDefault_default_instance_);
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::maxinput() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.MaxInput)
  return _internal_maxinput();
}
inline void FAttributeScalarParam::unsafe_arena_set_allocated_maxinput(
    ::HederaDefinitions::FAttributeDefinitionDefault* maxinput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maxinput_);
  }
  _impl_.maxinput_ = maxinput;
  if (maxinput) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeScalarParam.MaxInput)
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::release_maxinput() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.maxinput_;
  _impl_.maxinput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::unsafe_arena_release_maxinput() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeScalarParam.MaxInput)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.maxinput_;
  _impl_.maxinput_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::_internal_mutable_maxinput() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.maxinput_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAttributeDefinitionDefault>(GetArenaForAllocation());
    _impl_.maxinput_ = p;
  }
  return _impl_.maxinput_;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::mutable_maxinput() {
  ::HederaDefinitions::FAttributeDefinitionDefault* _msg = _internal_mutable_maxinput();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeScalarParam.MaxInput)
  return _msg;
}
inline void FAttributeScalarParam::set_allocated_maxinput(::HederaDefinitions::FAttributeDefinitionDefault* maxinput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.maxinput_;
  }
  if (maxinput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(maxinput);
    if (message_arena != submessage_arena) {
      maxinput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxinput, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.maxinput_ = maxinput;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeScalarParam.MaxInput)
}

// required .HederaDefinitions.FAttributeDefinitionDefault MinOutput = 7;
inline bool FAttributeScalarParam::_internal_has_minoutput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.minoutput_ != nullptr);
  return value;
}
inline bool FAttributeScalarParam::has_minoutput() const {
  return _internal_has_minoutput();
}
inline void FAttributeScalarParam::clear_minoutput() {
  if (_impl_.minoutput_ != nullptr) _impl_.minoutput_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::_internal_minoutput() const {
  const ::HederaDefinitions::FAttributeDefinitionDefault* p = _impl_.minoutput_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAttributeDefinitionDefault&>(
      ::HederaDefinitions::_FAttributeDefinitionDefault_default_instance_);
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::minoutput() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.MinOutput)
  return _internal_minoutput();
}
inline void FAttributeScalarParam::unsafe_arena_set_allocated_minoutput(
    ::HederaDefinitions::FAttributeDefinitionDefault* minoutput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minoutput_);
  }
  _impl_.minoutput_ = minoutput;
  if (minoutput) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeScalarParam.MinOutput)
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::release_minoutput() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.minoutput_;
  _impl_.minoutput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::unsafe_arena_release_minoutput() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeScalarParam.MinOutput)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.minoutput_;
  _impl_.minoutput_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::_internal_mutable_minoutput() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.minoutput_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAttributeDefinitionDefault>(GetArenaForAllocation());
    _impl_.minoutput_ = p;
  }
  return _impl_.minoutput_;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::mutable_minoutput() {
  ::HederaDefinitions::FAttributeDefinitionDefault* _msg = _internal_mutable_minoutput();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeScalarParam.MinOutput)
  return _msg;
}
inline void FAttributeScalarParam::set_allocated_minoutput(::HederaDefinitions::FAttributeDefinitionDefault* minoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.minoutput_;
  }
  if (minoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(minoutput);
    if (message_arena != submessage_arena) {
      minoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minoutput, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.minoutput_ = minoutput;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeScalarParam.MinOutput)
}

// required .HederaDefinitions.FAttributeDefinitionDefault MaxOutput = 8;
inline bool FAttributeScalarParam::_internal_has_maxoutput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maxoutput_ != nullptr);
  return value;
}
inline bool FAttributeScalarParam::has_maxoutput() const {
  return _internal_has_maxoutput();
}
inline void FAttributeScalarParam::clear_maxoutput() {
  if (_impl_.maxoutput_ != nullptr) _impl_.maxoutput_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::_internal_maxoutput() const {
  const ::HederaDefinitions::FAttributeDefinitionDefault* p = _impl_.maxoutput_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAttributeDefinitionDefault&>(
      ::HederaDefinitions::_FAttributeDefinitionDefault_default_instance_);
}
inline const ::HederaDefinitions::FAttributeDefinitionDefault& FAttributeScalarParam::maxoutput() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.MaxOutput)
  return _internal_maxoutput();
}
inline void FAttributeScalarParam::unsafe_arena_set_allocated_maxoutput(
    ::HederaDefinitions::FAttributeDefinitionDefault* maxoutput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maxoutput_);
  }
  _impl_.maxoutput_ = maxoutput;
  if (maxoutput) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAttributeScalarParam.MaxOutput)
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::release_maxoutput() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.maxoutput_;
  _impl_.maxoutput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::unsafe_arena_release_maxoutput() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAttributeScalarParam.MaxOutput)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::FAttributeDefinitionDefault* temp = _impl_.maxoutput_;
  _impl_.maxoutput_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::_internal_mutable_maxoutput() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.maxoutput_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAttributeDefinitionDefault>(GetArenaForAllocation());
    _impl_.maxoutput_ = p;
  }
  return _impl_.maxoutput_;
}
inline ::HederaDefinitions::FAttributeDefinitionDefault* FAttributeScalarParam::mutable_maxoutput() {
  ::HederaDefinitions::FAttributeDefinitionDefault* _msg = _internal_mutable_maxoutput();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAttributeScalarParam.MaxOutput)
  return _msg;
}
inline void FAttributeScalarParam::set_allocated_maxoutput(::HederaDefinitions::FAttributeDefinitionDefault* maxoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.maxoutput_;
  }
  if (maxoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(maxoutput);
    if (message_arena != submessage_arena) {
      maxoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxoutput, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.maxoutput_ = maxoutput;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAttributeScalarParam.MaxOutput)
}

// required int32 ScalarParamOperand = 9;
inline bool FAttributeScalarParam::_internal_has_scalarparamoperand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FAttributeScalarParam::has_scalarparamoperand() const {
  return _internal_has_scalarparamoperand();
}
inline void FAttributeScalarParam::clear_scalarparamoperand() {
  _impl_.scalarparamoperand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t FAttributeScalarParam::_internal_scalarparamoperand() const {
  return _impl_.scalarparamoperand_;
}
inline int32_t FAttributeScalarParam::scalarparamoperand() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.ScalarParamOperand)
  return _internal_scalarparamoperand();
}
inline void FAttributeScalarParam::_internal_set_scalarparamoperand(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scalarparamoperand_ = value;
}
inline void FAttributeScalarParam::set_scalarparamoperand(int32_t value) {
  _internal_set_scalarparamoperand(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAttributeScalarParam.ScalarParamOperand)
}

// required float CurrentValue = 10;
inline bool FAttributeScalarParam::_internal_has_currentvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FAttributeScalarParam::has_currentvalue() const {
  return _internal_has_currentvalue();
}
inline void FAttributeScalarParam::clear_currentvalue() {
  _impl_.currentvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float FAttributeScalarParam::_internal_currentvalue() const {
  return _impl_.currentvalue_;
}
inline float FAttributeScalarParam::currentvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAttributeScalarParam.CurrentValue)
  return _internal_currentvalue();
}
inline void FAttributeScalarParam::_internal_set_currentvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.currentvalue_ = value;
}
inline void FAttributeScalarParam::set_currentvalue(float value) {
  _internal_set_currentvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAttributeScalarParam.CurrentValue)
}

// -------------------------------------------------------------------

// FScreenParticleModifier

// repeated .HederaDefinitions.FAttributeScalarParam ScalarParams = 1;
inline int FScreenParticleModifier::_internal_scalarparams_size() const {
  return _impl_.scalarparams_.size();
}
inline int FScreenParticleModifier::scalarparams_size() const {
  return _internal_scalarparams_size();
}
inline void FScreenParticleModifier::clear_scalarparams() {
  _impl_.scalarparams_.Clear();
}
inline ::HederaDefinitions::FAttributeScalarParam* FScreenParticleModifier::mutable_scalarparams(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleModifier.ScalarParams)
  return _impl_.scalarparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAttributeScalarParam >*
FScreenParticleModifier::mutable_scalarparams() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FScreenParticleModifier.ScalarParams)
  return &_impl_.scalarparams_;
}
inline const ::HederaDefinitions::FAttributeScalarParam& FScreenParticleModifier::_internal_scalarparams(int index) const {
  return _impl_.scalarparams_.Get(index);
}
inline const ::HederaDefinitions::FAttributeScalarParam& FScreenParticleModifier::scalarparams(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleModifier.ScalarParams)
  return _internal_scalarparams(index);
}
inline ::HederaDefinitions::FAttributeScalarParam* FScreenParticleModifier::_internal_add_scalarparams() {
  return _impl_.scalarparams_.Add();
}
inline ::HederaDefinitions::FAttributeScalarParam* FScreenParticleModifier::add_scalarparams() {
  ::HederaDefinitions::FAttributeScalarParam* _add = _internal_add_scalarparams();
  // @@protoc_insertion_point(field_add:HederaDefinitions.FScreenParticleModifier.ScalarParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAttributeScalarParam >&
FScreenParticleModifier::scalarparams() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FScreenParticleModifier.ScalarParams)
  return _impl_.scalarparams_;
}

// required float CachedValue = 2;
inline bool FScreenParticleModifier::_internal_has_cachedvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FScreenParticleModifier::has_cachedvalue() const {
  return _internal_has_cachedvalue();
}
inline void FScreenParticleModifier::clear_cachedvalue() {
  _impl_.cachedvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FScreenParticleModifier::_internal_cachedvalue() const {
  return _impl_.cachedvalue_;
}
inline float FScreenParticleModifier::cachedvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleModifier.CachedValue)
  return _internal_cachedvalue();
}
inline void FScreenParticleModifier::_internal_set_cachedvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cachedvalue_ = value;
}
inline void FScreenParticleModifier::set_cachedvalue(float value) {
  _internal_set_cachedvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleModifier.CachedValue)
}

// -------------------------------------------------------------------

// FInteractionIconWithOverrides

// required .HederaDefinitions.NonReplicatedObjectReference IconDef = 1;
inline bool FInteractionIconWithOverrides::_internal_has_icondef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.icondef_ != nullptr);
  return value;
}
inline bool FInteractionIconWithOverrides::has_icondef() const {
  return _internal_has_icondef();
}
inline void FInteractionIconWithOverrides::clear_icondef() {
  if (_impl_.icondef_ != nullptr) _impl_.icondef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FInteractionIconWithOverrides::_internal_icondef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.icondef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FInteractionIconWithOverrides::icondef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.IconDef)
  return _internal_icondef();
}
inline void FInteractionIconWithOverrides::unsafe_arena_set_allocated_icondef(
    ::HederaDefinitions::NonReplicatedObjectReference* icondef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.icondef_);
  }
  _impl_.icondef_ = icondef;
  if (icondef) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FInteractionIconWithOverrides.IconDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::release_icondef() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.icondef_;
  _impl_.icondef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::unsafe_arena_release_icondef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FInteractionIconWithOverrides.IconDef)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.icondef_;
  _impl_.icondef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::_internal_mutable_icondef() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.icondef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.icondef_ = p;
  }
  return _impl_.icondef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::mutable_icondef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_icondef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FInteractionIconWithOverrides.IconDef)
  return _msg;
}
inline void FInteractionIconWithOverrides::set_allocated_icondef(::HederaDefinitions::NonReplicatedObjectReference* icondef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.icondef_;
  }
  if (icondef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(icondef);
    if (message_arena != submessage_arena) {
      icondef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icondef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.icondef_ = icondef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FInteractionIconWithOverrides.IconDef)
}

// required .HederaDefinitions.NonReplicatedObjectReference OverrideIconDef = 2;
inline bool FInteractionIconWithOverrides::_internal_has_overrideicondef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.overrideicondef_ != nullptr);
  return value;
}
inline bool FInteractionIconWithOverrides::has_overrideicondef() const {
  return _internal_has_overrideicondef();
}
inline void FInteractionIconWithOverrides::clear_overrideicondef() {
  if (_impl_.overrideicondef_ != nullptr) _impl_.overrideicondef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FInteractionIconWithOverrides::_internal_overrideicondef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.overrideicondef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FInteractionIconWithOverrides::overrideicondef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.OverrideIconDef)
  return _internal_overrideicondef();
}
inline void FInteractionIconWithOverrides::unsafe_arena_set_allocated_overrideicondef(
    ::HederaDefinitions::NonReplicatedObjectReference* overrideicondef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overrideicondef_);
  }
  _impl_.overrideicondef_ = overrideicondef;
  if (overrideicondef) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FInteractionIconWithOverrides.OverrideIconDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::release_overrideicondef() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.overrideicondef_;
  _impl_.overrideicondef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::unsafe_arena_release_overrideicondef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FInteractionIconWithOverrides.OverrideIconDef)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.overrideicondef_;
  _impl_.overrideicondef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::_internal_mutable_overrideicondef() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.overrideicondef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.overrideicondef_ = p;
  }
  return _impl_.overrideicondef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FInteractionIconWithOverrides::mutable_overrideicondef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_overrideicondef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FInteractionIconWithOverrides.OverrideIconDef)
  return _msg;
}
inline void FInteractionIconWithOverrides::set_allocated_overrideicondef(::HederaDefinitions::NonReplicatedObjectReference* overrideicondef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.overrideicondef_;
  }
  if (overrideicondef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overrideicondef);
    if (message_arena != submessage_arena) {
      overrideicondef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrideicondef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.overrideicondef_ = overrideicondef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FInteractionIconWithOverrides.OverrideIconDef)
}

// required bool bOverrideIcon = 3;
inline bool FInteractionIconWithOverrides::_internal_has_boverrideicon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FInteractionIconWithOverrides::has_boverrideicon() const {
  return _internal_has_boverrideicon();
}
inline void FInteractionIconWithOverrides::clear_boverrideicon() {
  _impl_.boverrideicon_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FInteractionIconWithOverrides::_internal_boverrideicon() const {
  return _impl_.boverrideicon_;
}
inline bool FInteractionIconWithOverrides::boverrideicon() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.bOverrideIcon)
  return _internal_boverrideicon();
}
inline void FInteractionIconWithOverrides::_internal_set_boverrideicon(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.boverrideicon_ = value;
}
inline void FInteractionIconWithOverrides::set_boverrideicon(bool value) {
  _internal_set_boverrideicon(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FInteractionIconWithOverrides.bOverrideIcon)
}

// required bool bOverrideAction = 4;
inline bool FInteractionIconWithOverrides::_internal_has_boverrideaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FInteractionIconWithOverrides::has_boverrideaction() const {
  return _internal_has_boverrideaction();
}
inline void FInteractionIconWithOverrides::clear_boverrideaction() {
  _impl_.boverrideaction_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FInteractionIconWithOverrides::_internal_boverrideaction() const {
  return _impl_.boverrideaction_;
}
inline bool FInteractionIconWithOverrides::boverrideaction() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.bOverrideAction)
  return _internal_boverrideaction();
}
inline void FInteractionIconWithOverrides::_internal_set_boverrideaction(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.boverrideaction_ = value;
}
inline void FInteractionIconWithOverrides::set_boverrideaction(bool value) {
  _internal_set_boverrideaction(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FInteractionIconWithOverrides.bOverrideAction)
}

// required bool bOverrideText = 5;
inline bool FInteractionIconWithOverrides::_internal_has_boverridetext() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FInteractionIconWithOverrides::has_boverridetext() const {
  return _internal_has_boverridetext();
}
inline void FInteractionIconWithOverrides::clear_boverridetext() {
  _impl_.boverridetext_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FInteractionIconWithOverrides::_internal_boverridetext() const {
  return _impl_.boverridetext_;
}
inline bool FInteractionIconWithOverrides::boverridetext() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.bOverrideText)
  return _internal_boverridetext();
}
inline void FInteractionIconWithOverrides::_internal_set_boverridetext(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.boverridetext_ = value;
}
inline void FInteractionIconWithOverrides::set_boverridetext(bool value) {
  _internal_set_boverridetext(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FInteractionIconWithOverrides.bOverrideText)
}

// required bool bCostsToUse = 6;
inline bool FInteractionIconWithOverrides::_internal_has_bcoststouse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FInteractionIconWithOverrides::has_bcoststouse() const {
  return _internal_has_bcoststouse();
}
inline void FInteractionIconWithOverrides::clear_bcoststouse() {
  _impl_.bcoststouse_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FInteractionIconWithOverrides::_internal_bcoststouse() const {
  return _impl_.bcoststouse_;
}
inline bool FInteractionIconWithOverrides::bcoststouse() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.bCostsToUse)
  return _internal_bcoststouse();
}
inline void FInteractionIconWithOverrides::_internal_set_bcoststouse(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bcoststouse_ = value;
}
inline void FInteractionIconWithOverrides::set_bcoststouse(bool value) {
  _internal_set_bcoststouse(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FInteractionIconWithOverrides.bCostsToUse)
}

// required int32 CostsCurrencyType = 7;
inline bool FInteractionIconWithOverrides::_internal_has_costscurrencytype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FInteractionIconWithOverrides::has_costscurrencytype() const {
  return _internal_has_costscurrencytype();
}
inline void FInteractionIconWithOverrides::clear_costscurrencytype() {
  _impl_.costscurrencytype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t FInteractionIconWithOverrides::_internal_costscurrencytype() const {
  return _impl_.costscurrencytype_;
}
inline int32_t FInteractionIconWithOverrides::costscurrencytype() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.CostsCurrencyType)
  return _internal_costscurrencytype();
}
inline void FInteractionIconWithOverrides::_internal_set_costscurrencytype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.costscurrencytype_ = value;
}
inline void FInteractionIconWithOverrides::set_costscurrencytype(int32_t value) {
  _internal_set_costscurrencytype(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FInteractionIconWithOverrides.CostsCurrencyType)
}

// required int32 CostsAmount = 8;
inline bool FInteractionIconWithOverrides::_internal_has_costsamount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FInteractionIconWithOverrides::has_costsamount() const {
  return _internal_has_costsamount();
}
inline void FInteractionIconWithOverrides::clear_costsamount() {
  _impl_.costsamount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t FInteractionIconWithOverrides::_internal_costsamount() const {
  return _impl_.costsamount_;
}
inline int32_t FInteractionIconWithOverrides::costsamount() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FInteractionIconWithOverrides.CostsAmount)
  return _internal_costsamount();
}
inline void FInteractionIconWithOverrides::_internal_set_costsamount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.costsamount_ = value;
}
inline void FInteractionIconWithOverrides::set_costsamount(int32_t value) {
  _internal_set_costsamount(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FInteractionIconWithOverrides.CostsAmount)
}

// -------------------------------------------------------------------

// FVector2D

// required float X = 1;
inline bool FVector2D::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FVector2D::has_x() const {
  return _internal_has_x();
}
inline void FVector2D::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FVector2D::_internal_x() const {
  return _impl_.x_;
}
inline float FVector2D::x() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FVector2D.X)
  return _internal_x();
}
inline void FVector2D::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void FVector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FVector2D.X)
}

// required float Y = 2;
inline bool FVector2D::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FVector2D::has_y() const {
  return _internal_has_y();
}
inline void FVector2D::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FVector2D::_internal_y() const {
  return _impl_.y_;
}
inline float FVector2D::y() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FVector2D.Y)
  return _internal_y();
}
inline void FVector2D::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void FVector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FVector2D.Y)
}

// -------------------------------------------------------------------

// FScreenParticleScalarParamOverTime

// required .HederaDefinitions.FName ParameterName = 1;
inline bool FScreenParticleScalarParamOverTime::_internal_has_parametername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parametername_ != nullptr);
  return value;
}
inline bool FScreenParticleScalarParamOverTime::has_parametername() const {
  return _internal_has_parametername();
}
inline void FScreenParticleScalarParamOverTime::clear_parametername() {
  if (_impl_.parametername_ != nullptr) _impl_.parametername_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FName& FScreenParticleScalarParamOverTime::_internal_parametername() const {
  const ::HederaDefinitions::FName* p = _impl_.parametername_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FScreenParticleScalarParamOverTime::parametername() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleScalarParamOverTime.ParameterName)
  return _internal_parametername();
}
inline void FScreenParticleScalarParamOverTime::unsafe_arena_set_allocated_parametername(
    ::HederaDefinitions::FName* parametername) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametername_);
  }
  _impl_.parametername_ = parametername;
  if (parametername) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleScalarParamOverTime.ParameterName)
}
inline ::HederaDefinitions::FName* FScreenParticleScalarParamOverTime::release_parametername() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.parametername_;
  _impl_.parametername_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleScalarParamOverTime::unsafe_arena_release_parametername() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleScalarParamOverTime.ParameterName)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.parametername_;
  _impl_.parametername_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleScalarParamOverTime::_internal_mutable_parametername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.parametername_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.parametername_ = p;
  }
  return _impl_.parametername_;
}
inline ::HederaDefinitions::FName* FScreenParticleScalarParamOverTime::mutable_parametername() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_parametername();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleScalarParamOverTime.ParameterName)
  return _msg;
}
inline void FScreenParticleScalarParamOverTime::set_allocated_parametername(::HederaDefinitions::FName* parametername) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parametername_;
  }
  if (parametername) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parametername);
    if (message_arena != submessage_arena) {
      parametername = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parametername, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.parametername_ = parametername;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleScalarParamOverTime.ParameterName)
}

// required float TotalTime = 2;
inline bool FScreenParticleScalarParamOverTime::_internal_has_totaltime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FScreenParticleScalarParamOverTime::has_totaltime() const {
  return _internal_has_totaltime();
}
inline void FScreenParticleScalarParamOverTime::clear_totaltime() {
  _impl_.totaltime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FScreenParticleScalarParamOverTime::_internal_totaltime() const {
  return _impl_.totaltime_;
}
inline float FScreenParticleScalarParamOverTime::totaltime() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleScalarParamOverTime.TotalTime)
  return _internal_totaltime();
}
inline void FScreenParticleScalarParamOverTime::_internal_set_totaltime(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.totaltime_ = value;
}
inline void FScreenParticleScalarParamOverTime::set_totaltime(float value) {
  _internal_set_totaltime(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleScalarParamOverTime.TotalTime)
}

// required float StartValue = 3;
inline bool FScreenParticleScalarParamOverTime::_internal_has_startvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FScreenParticleScalarParamOverTime::has_startvalue() const {
  return _internal_has_startvalue();
}
inline void FScreenParticleScalarParamOverTime::clear_startvalue() {
  _impl_.startvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FScreenParticleScalarParamOverTime::_internal_startvalue() const {
  return _impl_.startvalue_;
}
inline float FScreenParticleScalarParamOverTime::startvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleScalarParamOverTime.StartValue)
  return _internal_startvalue();
}
inline void FScreenParticleScalarParamOverTime::_internal_set_startvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.startvalue_ = value;
}
inline void FScreenParticleScalarParamOverTime::set_startvalue(float value) {
  _internal_set_startvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleScalarParamOverTime.StartValue)
}

// required float EndValue = 4;
inline bool FScreenParticleScalarParamOverTime::_internal_has_endvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FScreenParticleScalarParamOverTime::has_endvalue() const {
  return _internal_has_endvalue();
}
inline void FScreenParticleScalarParamOverTime::clear_endvalue() {
  _impl_.endvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float FScreenParticleScalarParamOverTime::_internal_endvalue() const {
  return _impl_.endvalue_;
}
inline float FScreenParticleScalarParamOverTime::endvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleScalarParamOverTime.EndValue)
  return _internal_endvalue();
}
inline void FScreenParticleScalarParamOverTime::_internal_set_endvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.endvalue_ = value;
}
inline void FScreenParticleScalarParamOverTime::set_endvalue(float value) {
  _internal_set_endvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleScalarParamOverTime.EndValue)
}

// required float LastValue = 5;
inline bool FScreenParticleScalarParamOverTime::_internal_has_lastvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FScreenParticleScalarParamOverTime::has_lastvalue() const {
  return _internal_has_lastvalue();
}
inline void FScreenParticleScalarParamOverTime::clear_lastvalue() {
  _impl_.lastvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float FScreenParticleScalarParamOverTime::_internal_lastvalue() const {
  return _impl_.lastvalue_;
}
inline float FScreenParticleScalarParamOverTime::lastvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleScalarParamOverTime.LastValue)
  return _internal_lastvalue();
}
inline void FScreenParticleScalarParamOverTime::_internal_set_lastvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lastvalue_ = value;
}
inline void FScreenParticleScalarParamOverTime::set_lastvalue(float value) {
  _internal_set_lastvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleScalarParamOverTime.LastValue)
}

// -------------------------------------------------------------------

// FScreenParticleVectorParamOverTime

// required .HederaDefinitions.FName ParameterName = 1;
inline bool FScreenParticleVectorParamOverTime::_internal_has_parametername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parametername_ != nullptr);
  return value;
}
inline bool FScreenParticleVectorParamOverTime::has_parametername() const {
  return _internal_has_parametername();
}
inline void FScreenParticleVectorParamOverTime::clear_parametername() {
  if (_impl_.parametername_ != nullptr) _impl_.parametername_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FName& FScreenParticleVectorParamOverTime::_internal_parametername() const {
  const ::HederaDefinitions::FName* p = _impl_.parametername_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FScreenParticleVectorParamOverTime::parametername() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleVectorParamOverTime.ParameterName)
  return _internal_parametername();
}
inline void FScreenParticleVectorParamOverTime::unsafe_arena_set_allocated_parametername(
    ::HederaDefinitions::FName* parametername) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametername_);
  }
  _impl_.parametername_ = parametername;
  if (parametername) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.ParameterName)
}
inline ::HederaDefinitions::FName* FScreenParticleVectorParamOverTime::release_parametername() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.parametername_;
  _impl_.parametername_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleVectorParamOverTime::unsafe_arena_release_parametername() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleVectorParamOverTime.ParameterName)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.parametername_;
  _impl_.parametername_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleVectorParamOverTime::_internal_mutable_parametername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.parametername_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.parametername_ = p;
  }
  return _impl_.parametername_;
}
inline ::HederaDefinitions::FName* FScreenParticleVectorParamOverTime::mutable_parametername() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_parametername();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleVectorParamOverTime.ParameterName)
  return _msg;
}
inline void FScreenParticleVectorParamOverTime::set_allocated_parametername(::HederaDefinitions::FName* parametername) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parametername_;
  }
  if (parametername) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parametername);
    if (message_arena != submessage_arena) {
      parametername = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parametername, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.parametername_ = parametername;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.ParameterName)
}

// required float TotalTime = 2;
inline bool FScreenParticleVectorParamOverTime::_internal_has_totaltime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FScreenParticleVectorParamOverTime::has_totaltime() const {
  return _internal_has_totaltime();
}
inline void FScreenParticleVectorParamOverTime::clear_totaltime() {
  _impl_.totaltime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float FScreenParticleVectorParamOverTime::_internal_totaltime() const {
  return _impl_.totaltime_;
}
inline float FScreenParticleVectorParamOverTime::totaltime() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleVectorParamOverTime.TotalTime)
  return _internal_totaltime();
}
inline void FScreenParticleVectorParamOverTime::_internal_set_totaltime(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.totaltime_ = value;
}
inline void FScreenParticleVectorParamOverTime::set_totaltime(float value) {
  _internal_set_totaltime(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleVectorParamOverTime.TotalTime)
}

// required .HederaDefinitions.FVector VectorStartValue = 3;
inline bool FScreenParticleVectorParamOverTime::_internal_has_vectorstartvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vectorstartvalue_ != nullptr);
  return value;
}
inline bool FScreenParticleVectorParamOverTime::has_vectorstartvalue() const {
  return _internal_has_vectorstartvalue();
}
inline void FScreenParticleVectorParamOverTime::clear_vectorstartvalue() {
  if (_impl_.vectorstartvalue_ != nullptr) _impl_.vectorstartvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FVector& FScreenParticleVectorParamOverTime::_internal_vectorstartvalue() const {
  const ::HederaDefinitions::FVector* p = _impl_.vectorstartvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& FScreenParticleVectorParamOverTime::vectorstartvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorStartValue)
  return _internal_vectorstartvalue();
}
inline void FScreenParticleVectorParamOverTime::unsafe_arena_set_allocated_vectorstartvalue(
    ::HederaDefinitions::FVector* vectorstartvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vectorstartvalue_);
  }
  _impl_.vectorstartvalue_ = vectorstartvalue;
  if (vectorstartvalue) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorStartValue)
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::release_vectorstartvalue() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.vectorstartvalue_;
  _impl_.vectorstartvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::unsafe_arena_release_vectorstartvalue() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorStartValue)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.vectorstartvalue_;
  _impl_.vectorstartvalue_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::_internal_mutable_vectorstartvalue() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vectorstartvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.vectorstartvalue_ = p;
  }
  return _impl_.vectorstartvalue_;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::mutable_vectorstartvalue() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_vectorstartvalue();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorStartValue)
  return _msg;
}
inline void FScreenParticleVectorParamOverTime::set_allocated_vectorstartvalue(::HederaDefinitions::FVector* vectorstartvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vectorstartvalue_;
  }
  if (vectorstartvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vectorstartvalue);
    if (message_arena != submessage_arena) {
      vectorstartvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vectorstartvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vectorstartvalue_ = vectorstartvalue;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorStartValue)
}

// required .HederaDefinitions.FVector VectorEndValue = 4;
inline bool FScreenParticleVectorParamOverTime::_internal_has_vectorendvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vectorendvalue_ != nullptr);
  return value;
}
inline bool FScreenParticleVectorParamOverTime::has_vectorendvalue() const {
  return _internal_has_vectorendvalue();
}
inline void FScreenParticleVectorParamOverTime::clear_vectorendvalue() {
  if (_impl_.vectorendvalue_ != nullptr) _impl_.vectorendvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HederaDefinitions::FVector& FScreenParticleVectorParamOverTime::_internal_vectorendvalue() const {
  const ::HederaDefinitions::FVector* p = _impl_.vectorendvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& FScreenParticleVectorParamOverTime::vectorendvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorEndValue)
  return _internal_vectorendvalue();
}
inline void FScreenParticleVectorParamOverTime::unsafe_arena_set_allocated_vectorendvalue(
    ::HederaDefinitions::FVector* vectorendvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vectorendvalue_);
  }
  _impl_.vectorendvalue_ = vectorendvalue;
  if (vectorendvalue) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorEndValue)
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::release_vectorendvalue() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FVector* temp = _impl_.vectorendvalue_;
  _impl_.vectorendvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::unsafe_arena_release_vectorendvalue() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorEndValue)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FVector* temp = _impl_.vectorendvalue_;
  _impl_.vectorendvalue_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::_internal_mutable_vectorendvalue() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vectorendvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.vectorendvalue_ = p;
  }
  return _impl_.vectorendvalue_;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::mutable_vectorendvalue() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_vectorendvalue();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorEndValue)
  return _msg;
}
inline void FScreenParticleVectorParamOverTime::set_allocated_vectorendvalue(::HederaDefinitions::FVector* vectorendvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vectorendvalue_;
  }
  if (vectorendvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vectorendvalue);
    if (message_arena != submessage_arena) {
      vectorendvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vectorendvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vectorendvalue_ = vectorendvalue;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.VectorEndValue)
}

// required .HederaDefinitions.FVector LastValue = 5;
inline bool FScreenParticleVectorParamOverTime::_internal_has_lastvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lastvalue_ != nullptr);
  return value;
}
inline bool FScreenParticleVectorParamOverTime::has_lastvalue() const {
  return _internal_has_lastvalue();
}
inline void FScreenParticleVectorParamOverTime::clear_lastvalue() {
  if (_impl_.lastvalue_ != nullptr) _impl_.lastvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::FVector& FScreenParticleVectorParamOverTime::_internal_lastvalue() const {
  const ::HederaDefinitions::FVector* p = _impl_.lastvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& FScreenParticleVectorParamOverTime::lastvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleVectorParamOverTime.LastValue)
  return _internal_lastvalue();
}
inline void FScreenParticleVectorParamOverTime::unsafe_arena_set_allocated_lastvalue(
    ::HederaDefinitions::FVector* lastvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastvalue_);
  }
  _impl_.lastvalue_ = lastvalue;
  if (lastvalue) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.LastValue)
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::release_lastvalue() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FVector* temp = _impl_.lastvalue_;
  _impl_.lastvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::unsafe_arena_release_lastvalue() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleVectorParamOverTime.LastValue)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FVector* temp = _impl_.lastvalue_;
  _impl_.lastvalue_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::_internal_mutable_lastvalue() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.lastvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.lastvalue_ = p;
  }
  return _impl_.lastvalue_;
}
inline ::HederaDefinitions::FVector* FScreenParticleVectorParamOverTime::mutable_lastvalue() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_lastvalue();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleVectorParamOverTime.LastValue)
  return _msg;
}
inline void FScreenParticleVectorParamOverTime::set_allocated_lastvalue(::HederaDefinitions::FVector* lastvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lastvalue_;
  }
  if (lastvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lastvalue);
    if (message_arena != submessage_arena) {
      lastvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.lastvalue_ = lastvalue;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleVectorParamOverTime.LastValue)
}

// -------------------------------------------------------------------

// FScreenParticleParamOverTime

// repeated .HederaDefinitions.FScreenParticleScalarParamOverTime ScalarParams = 1;
inline int FScreenParticleParamOverTime::_internal_scalarparams_size() const {
  return _impl_.scalarparams_.size();
}
inline int FScreenParticleParamOverTime::scalarparams_size() const {
  return _internal_scalarparams_size();
}
inline void FScreenParticleParamOverTime::clear_scalarparams() {
  _impl_.scalarparams_.Clear();
}
inline ::HederaDefinitions::FScreenParticleScalarParamOverTime* FScreenParticleParamOverTime::mutable_scalarparams(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleParamOverTime.ScalarParams)
  return _impl_.scalarparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleScalarParamOverTime >*
FScreenParticleParamOverTime::mutable_scalarparams() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FScreenParticleParamOverTime.ScalarParams)
  return &_impl_.scalarparams_;
}
inline const ::HederaDefinitions::FScreenParticleScalarParamOverTime& FScreenParticleParamOverTime::_internal_scalarparams(int index) const {
  return _impl_.scalarparams_.Get(index);
}
inline const ::HederaDefinitions::FScreenParticleScalarParamOverTime& FScreenParticleParamOverTime::scalarparams(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleParamOverTime.ScalarParams)
  return _internal_scalarparams(index);
}
inline ::HederaDefinitions::FScreenParticleScalarParamOverTime* FScreenParticleParamOverTime::_internal_add_scalarparams() {
  return _impl_.scalarparams_.Add();
}
inline ::HederaDefinitions::FScreenParticleScalarParamOverTime* FScreenParticleParamOverTime::add_scalarparams() {
  ::HederaDefinitions::FScreenParticleScalarParamOverTime* _add = _internal_add_scalarparams();
  // @@protoc_insertion_point(field_add:HederaDefinitions.FScreenParticleParamOverTime.ScalarParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleScalarParamOverTime >&
FScreenParticleParamOverTime::scalarparams() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FScreenParticleParamOverTime.ScalarParams)
  return _impl_.scalarparams_;
}

// repeated .HederaDefinitions.FScreenParticleVectorParamOverTime VectorParams = 2;
inline int FScreenParticleParamOverTime::_internal_vectorparams_size() const {
  return _impl_.vectorparams_.size();
}
inline int FScreenParticleParamOverTime::vectorparams_size() const {
  return _internal_vectorparams_size();
}
inline void FScreenParticleParamOverTime::clear_vectorparams() {
  _impl_.vectorparams_.Clear();
}
inline ::HederaDefinitions::FScreenParticleVectorParamOverTime* FScreenParticleParamOverTime::mutable_vectorparams(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleParamOverTime.VectorParams)
  return _impl_.vectorparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleVectorParamOverTime >*
FScreenParticleParamOverTime::mutable_vectorparams() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FScreenParticleParamOverTime.VectorParams)
  return &_impl_.vectorparams_;
}
inline const ::HederaDefinitions::FScreenParticleVectorParamOverTime& FScreenParticleParamOverTime::_internal_vectorparams(int index) const {
  return _impl_.vectorparams_.Get(index);
}
inline const ::HederaDefinitions::FScreenParticleVectorParamOverTime& FScreenParticleParamOverTime::vectorparams(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleParamOverTime.VectorParams)
  return _internal_vectorparams(index);
}
inline ::HederaDefinitions::FScreenParticleVectorParamOverTime* FScreenParticleParamOverTime::_internal_add_vectorparams() {
  return _impl_.vectorparams_.Add();
}
inline ::HederaDefinitions::FScreenParticleVectorParamOverTime* FScreenParticleParamOverTime::add_vectorparams() {
  ::HederaDefinitions::FScreenParticleVectorParamOverTime* _add = _internal_add_vectorparams();
  // @@protoc_insertion_point(field_add:HederaDefinitions.FScreenParticleParamOverTime.VectorParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleVectorParamOverTime >&
FScreenParticleParamOverTime::vectorparams() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FScreenParticleParamOverTime.VectorParams)
  return _impl_.vectorparams_;
}

// -------------------------------------------------------------------

// FScreenParticleInitParams

// required .HederaDefinitions.NonReplicatedObjectReference Template = 1;
inline bool FScreenParticleInitParams::_internal_has_template_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.template__ != nullptr);
  return value;
}
inline bool FScreenParticleInitParams::has_template_() const {
  return _internal_has_template_();
}
inline void FScreenParticleInitParams::clear_template_() {
  if (_impl_.template__ != nullptr) _impl_.template__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FScreenParticleInitParams::_internal_template_() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.template__;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FScreenParticleInitParams::template_() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.Template)
  return _internal_template_();
}
inline void FScreenParticleInitParams::unsafe_arena_set_allocated_template_(
    ::HederaDefinitions::NonReplicatedObjectReference* template_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.template__);
  }
  _impl_.template__ = template_;
  if (template_) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleInitParams.Template)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::release_template_() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.template__;
  _impl_.template__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::unsafe_arena_release_template_() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleInitParams.Template)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.template__;
  _impl_.template__ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::_internal_mutable_template_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.template__ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.template__ = p;
  }
  return _impl_.template__;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::mutable_template_() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.Template)
  return _msg;
}
inline void FScreenParticleInitParams::set_allocated_template_(::HederaDefinitions::NonReplicatedObjectReference* template_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.template__;
  }
  if (template_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(template_);
    if (message_arena != submessage_arena) {
      template_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleInitParams.Template)
}

// repeated .HederaDefinitions.FScreenParticleModifier ScreenParticleModifiers = 2;
inline int FScreenParticleInitParams::_internal_screenparticlemodifiers_size() const {
  return _impl_.screenparticlemodifiers_.size();
}
inline int FScreenParticleInitParams::screenparticlemodifiers_size() const {
  return _internal_screenparticlemodifiers_size();
}
inline void FScreenParticleInitParams::clear_screenparticlemodifiers() {
  _impl_.screenparticlemodifiers_.Clear();
}
inline ::HederaDefinitions::FScreenParticleModifier* FScreenParticleInitParams::mutable_screenparticlemodifiers(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.ScreenParticleModifiers)
  return _impl_.screenparticlemodifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleModifier >*
FScreenParticleInitParams::mutable_screenparticlemodifiers() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FScreenParticleInitParams.ScreenParticleModifiers)
  return &_impl_.screenparticlemodifiers_;
}
inline const ::HederaDefinitions::FScreenParticleModifier& FScreenParticleInitParams::_internal_screenparticlemodifiers(int index) const {
  return _impl_.screenparticlemodifiers_.Get(index);
}
inline const ::HederaDefinitions::FScreenParticleModifier& FScreenParticleInitParams::screenparticlemodifiers(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.ScreenParticleModifiers)
  return _internal_screenparticlemodifiers(index);
}
inline ::HederaDefinitions::FScreenParticleModifier* FScreenParticleInitParams::_internal_add_screenparticlemodifiers() {
  return _impl_.screenparticlemodifiers_.Add();
}
inline ::HederaDefinitions::FScreenParticleModifier* FScreenParticleInitParams::add_screenparticlemodifiers() {
  ::HederaDefinitions::FScreenParticleModifier* _add = _internal_add_screenparticlemodifiers();
  // @@protoc_insertion_point(field_add:HederaDefinitions.FScreenParticleInitParams.ScreenParticleModifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FScreenParticleModifier >&
FScreenParticleInitParams::screenparticlemodifiers() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FScreenParticleInitParams.ScreenParticleModifiers)
  return _impl_.screenparticlemodifiers_;
}

// required .HederaDefinitions.NonReplicatedObjectReference TemplateScreenParticleMaterial = 3;
inline bool FScreenParticleInitParams::_internal_has_templatescreenparticlematerial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.templatescreenparticlematerial_ != nullptr);
  return value;
}
inline bool FScreenParticleInitParams::has_templatescreenparticlematerial() const {
  return _internal_has_templatescreenparticlematerial();
}
inline void FScreenParticleInitParams::clear_templatescreenparticlematerial() {
  if (_impl_.templatescreenparticlematerial_ != nullptr) _impl_.templatescreenparticlematerial_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FScreenParticleInitParams::_internal_templatescreenparticlematerial() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.templatescreenparticlematerial_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FScreenParticleInitParams::templatescreenparticlematerial() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.TemplateScreenParticleMaterial)
  return _internal_templatescreenparticlematerial();
}
inline void FScreenParticleInitParams::unsafe_arena_set_allocated_templatescreenparticlematerial(
    ::HederaDefinitions::NonReplicatedObjectReference* templatescreenparticlematerial) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.templatescreenparticlematerial_);
  }
  _impl_.templatescreenparticlematerial_ = templatescreenparticlematerial;
  if (templatescreenparticlematerial) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleInitParams.TemplateScreenParticleMaterial)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::release_templatescreenparticlematerial() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.templatescreenparticlematerial_;
  _impl_.templatescreenparticlematerial_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::unsafe_arena_release_templatescreenparticlematerial() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleInitParams.TemplateScreenParticleMaterial)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.templatescreenparticlematerial_;
  _impl_.templatescreenparticlematerial_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::_internal_mutable_templatescreenparticlematerial() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.templatescreenparticlematerial_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.templatescreenparticlematerial_ = p;
  }
  return _impl_.templatescreenparticlematerial_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FScreenParticleInitParams::mutable_templatescreenparticlematerial() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_templatescreenparticlematerial();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.TemplateScreenParticleMaterial)
  return _msg;
}
inline void FScreenParticleInitParams::set_allocated_templatescreenparticlematerial(::HederaDefinitions::NonReplicatedObjectReference* templatescreenparticlematerial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.templatescreenparticlematerial_;
  }
  if (templatescreenparticlematerial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(templatescreenparticlematerial);
    if (message_arena != submessage_arena) {
      templatescreenparticlematerial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, templatescreenparticlematerial, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.templatescreenparticlematerial_ = templatescreenparticlematerial;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleInitParams.TemplateScreenParticleMaterial)
}

// required .HederaDefinitions.FName MatParamName = 4;
inline bool FScreenParticleInitParams::_internal_has_matparamname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matparamname_ != nullptr);
  return value;
}
inline bool FScreenParticleInitParams::has_matparamname() const {
  return _internal_has_matparamname();
}
inline void FScreenParticleInitParams::clear_matparamname() {
  if (_impl_.matparamname_ != nullptr) _impl_.matparamname_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HederaDefinitions::FName& FScreenParticleInitParams::_internal_matparamname() const {
  const ::HederaDefinitions::FName* p = _impl_.matparamname_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FScreenParticleInitParams::matparamname() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.MatParamName)
  return _internal_matparamname();
}
inline void FScreenParticleInitParams::unsafe_arena_set_allocated_matparamname(
    ::HederaDefinitions::FName* matparamname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matparamname_);
  }
  _impl_.matparamname_ = matparamname;
  if (matparamname) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleInitParams.MatParamName)
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::release_matparamname() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FName* temp = _impl_.matparamname_;
  _impl_.matparamname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::unsafe_arena_release_matparamname() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleInitParams.MatParamName)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FName* temp = _impl_.matparamname_;
  _impl_.matparamname_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::_internal_mutable_matparamname() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.matparamname_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.matparamname_ = p;
  }
  return _impl_.matparamname_;
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::mutable_matparamname() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_matparamname();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.MatParamName)
  return _msg;
}
inline void FScreenParticleInitParams::set_allocated_matparamname(::HederaDefinitions::FName* matparamname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.matparamname_;
  }
  if (matparamname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(matparamname);
    if (message_arena != submessage_arena) {
      matparamname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matparamname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.matparamname_ = matparamname;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleInitParams.MatParamName)
}

// required bool bHideWhenFinished = 5;
inline bool FScreenParticleInitParams::_internal_has_bhidewhenfinished() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_bhidewhenfinished() const {
  return _internal_has_bhidewhenfinished();
}
inline void FScreenParticleInitParams::clear_bhidewhenfinished() {
  _impl_.bhidewhenfinished_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FScreenParticleInitParams::_internal_bhidewhenfinished() const {
  return _impl_.bhidewhenfinished_;
}
inline bool FScreenParticleInitParams::bhidewhenfinished() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.bHideWhenFinished)
  return _internal_bhidewhenfinished();
}
inline void FScreenParticleInitParams::_internal_set_bhidewhenfinished(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bhidewhenfinished_ = value;
}
inline void FScreenParticleInitParams::set_bhidewhenfinished(bool value) {
  _internal_set_bhidewhenfinished(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.bHideWhenFinished)
}

// required .HederaDefinitions.FName ParticleTag = 6;
inline bool FScreenParticleInitParams::_internal_has_particletag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.particletag_ != nullptr);
  return value;
}
inline bool FScreenParticleInitParams::has_particletag() const {
  return _internal_has_particletag();
}
inline void FScreenParticleInitParams::clear_particletag() {
  if (_impl_.particletag_ != nullptr) _impl_.particletag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::FName& FScreenParticleInitParams::_internal_particletag() const {
  const ::HederaDefinitions::FName* p = _impl_.particletag_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FScreenParticleInitParams::particletag() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.ParticleTag)
  return _internal_particletag();
}
inline void FScreenParticleInitParams::unsafe_arena_set_allocated_particletag(
    ::HederaDefinitions::FName* particletag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.particletag_);
  }
  _impl_.particletag_ = particletag;
  if (particletag) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleInitParams.ParticleTag)
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::release_particletag() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FName* temp = _impl_.particletag_;
  _impl_.particletag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::unsafe_arena_release_particletag() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleInitParams.ParticleTag)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FName* temp = _impl_.particletag_;
  _impl_.particletag_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::_internal_mutable_particletag() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.particletag_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.particletag_ = p;
  }
  return _impl_.particletag_;
}
inline ::HederaDefinitions::FName* FScreenParticleInitParams::mutable_particletag() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_particletag();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.ParticleTag)
  return _msg;
}
inline void FScreenParticleInitParams::set_allocated_particletag(::HederaDefinitions::FName* particletag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.particletag_;
  }
  if (particletag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(particletag);
    if (message_arena != submessage_arena) {
      particletag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, particletag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.particletag_ = particletag;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleInitParams.ParticleTag)
}

// required .HederaDefinitions.FVector2D ContentDims = 7;
inline bool FScreenParticleInitParams::_internal_has_contentdims() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contentdims_ != nullptr);
  return value;
}
inline bool FScreenParticleInitParams::has_contentdims() const {
  return _internal_has_contentdims();
}
inline void FScreenParticleInitParams::clear_contentdims() {
  if (_impl_.contentdims_ != nullptr) _impl_.contentdims_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HederaDefinitions::FVector2D& FScreenParticleInitParams::_internal_contentdims() const {
  const ::HederaDefinitions::FVector2D* p = _impl_.contentdims_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector2D&>(
      ::HederaDefinitions::_FVector2D_default_instance_);
}
inline const ::HederaDefinitions::FVector2D& FScreenParticleInitParams::contentdims() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.ContentDims)
  return _internal_contentdims();
}
inline void FScreenParticleInitParams::unsafe_arena_set_allocated_contentdims(
    ::HederaDefinitions::FVector2D* contentdims) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentdims_);
  }
  _impl_.contentdims_ = contentdims;
  if (contentdims) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleInitParams.ContentDims)
}
inline ::HederaDefinitions::FVector2D* FScreenParticleInitParams::release_contentdims() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::FVector2D* temp = _impl_.contentdims_;
  _impl_.contentdims_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector2D* FScreenParticleInitParams::unsafe_arena_release_contentdims() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleInitParams.ContentDims)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::FVector2D* temp = _impl_.contentdims_;
  _impl_.contentdims_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector2D* FScreenParticleInitParams::_internal_mutable_contentdims() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.contentdims_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector2D>(GetArenaForAllocation());
    _impl_.contentdims_ = p;
  }
  return _impl_.contentdims_;
}
inline ::HederaDefinitions::FVector2D* FScreenParticleInitParams::mutable_contentdims() {
  ::HederaDefinitions::FVector2D* _msg = _internal_mutable_contentdims();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.ContentDims)
  return _msg;
}
inline void FScreenParticleInitParams::set_allocated_contentdims(::HederaDefinitions::FVector2D* contentdims) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contentdims_;
  }
  if (contentdims) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contentdims);
    if (message_arena != submessage_arena) {
      contentdims = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contentdims, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.contentdims_ = contentdims;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleInitParams.ContentDims)
}

// required float ParticleDepth = 8;
inline bool FScreenParticleInitParams::_internal_has_particledepth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_particledepth() const {
  return _internal_has_particledepth();
}
inline void FScreenParticleInitParams::clear_particledepth() {
  _impl_.particledepth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float FScreenParticleInitParams::_internal_particledepth() const {
  return _impl_.particledepth_;
}
inline float FScreenParticleInitParams::particledepth() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.ParticleDepth)
  return _internal_particledepth();
}
inline void FScreenParticleInitParams::_internal_set_particledepth(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.particledepth_ = value;
}
inline void FScreenParticleInitParams::set_particledepth(float value) {
  _internal_set_particledepth(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.ParticleDepth)
}

// required int32 ScalingMode = 9;
inline bool FScreenParticleInitParams::_internal_has_scalingmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_scalingmode() const {
  return _internal_has_scalingmode();
}
inline void FScreenParticleInitParams::clear_scalingmode() {
  _impl_.scalingmode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t FScreenParticleInitParams::_internal_scalingmode() const {
  return _impl_.scalingmode_;
}
inline int32_t FScreenParticleInitParams::scalingmode() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.ScalingMode)
  return _internal_scalingmode();
}
inline void FScreenParticleInitParams::_internal_set_scalingmode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.scalingmode_ = value;
}
inline void FScreenParticleInitParams::set_scalingmode(int32_t value) {
  _internal_set_scalingmode(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.ScalingMode)
}

// required .HederaDefinitions.FScreenParticleParamOverTime StopParamsOT = 10;
inline bool FScreenParticleInitParams::_internal_has_stopparamsot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stopparamsot_ != nullptr);
  return value;
}
inline bool FScreenParticleInitParams::has_stopparamsot() const {
  return _internal_has_stopparamsot();
}
inline void FScreenParticleInitParams::clear_stopparamsot() {
  if (_impl_.stopparamsot_ != nullptr) _impl_.stopparamsot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HederaDefinitions::FScreenParticleParamOverTime& FScreenParticleInitParams::_internal_stopparamsot() const {
  const ::HederaDefinitions::FScreenParticleParamOverTime* p = _impl_.stopparamsot_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FScreenParticleParamOverTime&>(
      ::HederaDefinitions::_FScreenParticleParamOverTime_default_instance_);
}
inline const ::HederaDefinitions::FScreenParticleParamOverTime& FScreenParticleInitParams::stopparamsot() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.StopParamsOT)
  return _internal_stopparamsot();
}
inline void FScreenParticleInitParams::unsafe_arena_set_allocated_stopparamsot(
    ::HederaDefinitions::FScreenParticleParamOverTime* stopparamsot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stopparamsot_);
  }
  _impl_.stopparamsot_ = stopparamsot;
  if (stopparamsot) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FScreenParticleInitParams.StopParamsOT)
}
inline ::HederaDefinitions::FScreenParticleParamOverTime* FScreenParticleInitParams::release_stopparamsot() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::FScreenParticleParamOverTime* temp = _impl_.stopparamsot_;
  _impl_.stopparamsot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FScreenParticleParamOverTime* FScreenParticleInitParams::unsafe_arena_release_stopparamsot() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FScreenParticleInitParams.StopParamsOT)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::FScreenParticleParamOverTime* temp = _impl_.stopparamsot_;
  _impl_.stopparamsot_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FScreenParticleParamOverTime* FScreenParticleInitParams::_internal_mutable_stopparamsot() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.stopparamsot_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FScreenParticleParamOverTime>(GetArenaForAllocation());
    _impl_.stopparamsot_ = p;
  }
  return _impl_.stopparamsot_;
}
inline ::HederaDefinitions::FScreenParticleParamOverTime* FScreenParticleInitParams::mutable_stopparamsot() {
  ::HederaDefinitions::FScreenParticleParamOverTime* _msg = _internal_mutable_stopparamsot();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FScreenParticleInitParams.StopParamsOT)
  return _msg;
}
inline void FScreenParticleInitParams::set_allocated_stopparamsot(::HederaDefinitions::FScreenParticleParamOverTime* stopparamsot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stopparamsot_;
  }
  if (stopparamsot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stopparamsot);
    if (message_arena != submessage_arena) {
      stopparamsot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopparamsot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.stopparamsot_ = stopparamsot;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FScreenParticleInitParams.StopParamsOT)
}

// required bool bOnlyOwnerSee = 11;
inline bool FScreenParticleInitParams::_internal_has_bonlyownersee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_bonlyownersee() const {
  return _internal_has_bonlyownersee();
}
inline void FScreenParticleInitParams::clear_bonlyownersee() {
  _impl_.bonlyownersee_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FScreenParticleInitParams::_internal_bonlyownersee() const {
  return _impl_.bonlyownersee_;
}
inline bool FScreenParticleInitParams::bonlyownersee() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.bOnlyOwnerSee)
  return _internal_bonlyownersee();
}
inline void FScreenParticleInitParams::_internal_set_bonlyownersee(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bonlyownersee_ = value;
}
inline void FScreenParticleInitParams::set_bonlyownersee(bool value) {
  _internal_set_bonlyownersee(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.bOnlyOwnerSee)
}

// required int32 EffectDepthPriorityGroup = 12;
inline bool FScreenParticleInitParams::_internal_has_effectdepthprioritygroup() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_effectdepthprioritygroup() const {
  return _internal_has_effectdepthprioritygroup();
}
inline void FScreenParticleInitParams::clear_effectdepthprioritygroup() {
  _impl_.effectdepthprioritygroup_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t FScreenParticleInitParams::_internal_effectdepthprioritygroup() const {
  return _impl_.effectdepthprioritygroup_;
}
inline int32_t FScreenParticleInitParams::effectdepthprioritygroup() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.EffectDepthPriorityGroup)
  return _internal_effectdepthprioritygroup();
}
inline void FScreenParticleInitParams::_internal_set_effectdepthprioritygroup(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.effectdepthprioritygroup_ = value;
}
inline void FScreenParticleInitParams::set_effectdepthprioritygroup(int32_t value) {
  _internal_set_effectdepthprioritygroup(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.EffectDepthPriorityGroup)
}

// required bool bAlwaysVisible = 13;
inline bool FScreenParticleInitParams::_internal_has_balwaysvisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_balwaysvisible() const {
  return _internal_has_balwaysvisible();
}
inline void FScreenParticleInitParams::clear_balwaysvisible() {
  _impl_.balwaysvisible_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FScreenParticleInitParams::_internal_balwaysvisible() const {
  return _impl_.balwaysvisible_;
}
inline bool FScreenParticleInitParams::balwaysvisible() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.bAlwaysVisible)
  return _internal_balwaysvisible();
}
inline void FScreenParticleInitParams::_internal_set_balwaysvisible(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.balwaysvisible_ = value;
}
inline void FScreenParticleInitParams::set_balwaysvisible(bool value) {
  _internal_set_balwaysvisible(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.bAlwaysVisible)
}

// required bool bUseDesignerAttributeParameters = 14;
inline bool FScreenParticleInitParams::_internal_has_busedesignerattributeparameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FScreenParticleInitParams::has_busedesignerattributeparameters() const {
  return _internal_has_busedesignerattributeparameters();
}
inline void FScreenParticleInitParams::clear_busedesignerattributeparameters() {
  _impl_.busedesignerattributeparameters_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FScreenParticleInitParams::_internal_busedesignerattributeparameters() const {
  return _impl_.busedesignerattributeparameters_;
}
inline bool FScreenParticleInitParams::busedesignerattributeparameters() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FScreenParticleInitParams.bUseDesignerAttributeParameters)
  return _internal_busedesignerattributeparameters();
}
inline void FScreenParticleInitParams::_internal_set_busedesignerattributeparameters(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.busedesignerattributeparameters_ = value;
}
inline void FScreenParticleInitParams::set_busedesignerattributeparameters(bool value) {
  _internal_set_busedesignerattributeparameters(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FScreenParticleInitParams.bUseDesignerAttributeParameters)
}

// -------------------------------------------------------------------

// FReplicatedDamageScreenParticle

// required .HederaDefinitions.FScreenParticleInitParams Params = 1;
inline bool FReplicatedDamageScreenParticle::_internal_has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline bool FReplicatedDamageScreenParticle::has_params() const {
  return _internal_has_params();
}
inline void FReplicatedDamageScreenParticle::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FScreenParticleInitParams& FReplicatedDamageScreenParticle::_internal_params() const {
  const ::HederaDefinitions::FScreenParticleInitParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FScreenParticleInitParams&>(
      ::HederaDefinitions::_FScreenParticleInitParams_default_instance_);
}
inline const ::HederaDefinitions::FScreenParticleInitParams& FReplicatedDamageScreenParticle::params() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedDamageScreenParticle.Params)
  return _internal_params();
}
inline void FReplicatedDamageScreenParticle::unsafe_arena_set_allocated_params(
    ::HederaDefinitions::FScreenParticleInitParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedDamageScreenParticle.Params)
}
inline ::HederaDefinitions::FScreenParticleInitParams* FReplicatedDamageScreenParticle::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FScreenParticleInitParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FScreenParticleInitParams* FReplicatedDamageScreenParticle::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedDamageScreenParticle.Params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FScreenParticleInitParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FScreenParticleInitParams* FReplicatedDamageScreenParticle::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FScreenParticleInitParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::HederaDefinitions::FScreenParticleInitParams* FReplicatedDamageScreenParticle::mutable_params() {
  ::HederaDefinitions::FScreenParticleInitParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedDamageScreenParticle.Params)
  return _msg;
}
inline void FReplicatedDamageScreenParticle::set_allocated_params(::HederaDefinitions::FScreenParticleInitParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedDamageScreenParticle.Params)
}

// required .HederaDefinitions.FVector ReferenceLoaction = 2;
inline bool FReplicatedDamageScreenParticle::_internal_has_referenceloaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.referenceloaction_ != nullptr);
  return value;
}
inline bool FReplicatedDamageScreenParticle::has_referenceloaction() const {
  return _internal_has_referenceloaction();
}
inline void FReplicatedDamageScreenParticle::clear_referenceloaction() {
  if (_impl_.referenceloaction_ != nullptr) _impl_.referenceloaction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FVector& FReplicatedDamageScreenParticle::_internal_referenceloaction() const {
  const ::HederaDefinitions::FVector* p = _impl_.referenceloaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& FReplicatedDamageScreenParticle::referenceloaction() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedDamageScreenParticle.ReferenceLoaction)
  return _internal_referenceloaction();
}
inline void FReplicatedDamageScreenParticle::unsafe_arena_set_allocated_referenceloaction(
    ::HederaDefinitions::FVector* referenceloaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.referenceloaction_);
  }
  _impl_.referenceloaction_ = referenceloaction;
  if (referenceloaction) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedDamageScreenParticle.ReferenceLoaction)
}
inline ::HederaDefinitions::FVector* FReplicatedDamageScreenParticle::release_referenceloaction() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.referenceloaction_;
  _impl_.referenceloaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* FReplicatedDamageScreenParticle::unsafe_arena_release_referenceloaction() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedDamageScreenParticle.ReferenceLoaction)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.referenceloaction_;
  _impl_.referenceloaction_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* FReplicatedDamageScreenParticle::_internal_mutable_referenceloaction() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.referenceloaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.referenceloaction_ = p;
  }
  return _impl_.referenceloaction_;
}
inline ::HederaDefinitions::FVector* FReplicatedDamageScreenParticle::mutable_referenceloaction() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_referenceloaction();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedDamageScreenParticle.ReferenceLoaction)
  return _msg;
}
inline void FReplicatedDamageScreenParticle::set_allocated_referenceloaction(::HederaDefinitions::FVector* referenceloaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.referenceloaction_;
  }
  if (referenceloaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(referenceloaction);
    if (message_arena != submessage_arena) {
      referenceloaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referenceloaction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.referenceloaction_ = referenceloaction;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedDamageScreenParticle.ReferenceLoaction)
}

// required float GenericScale = 3;
inline bool FReplicatedDamageScreenParticle::_internal_has_genericscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FReplicatedDamageScreenParticle::has_genericscale() const {
  return _internal_has_genericscale();
}
inline void FReplicatedDamageScreenParticle::clear_genericscale() {
  _impl_.genericscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FReplicatedDamageScreenParticle::_internal_genericscale() const {
  return _impl_.genericscale_;
}
inline float FReplicatedDamageScreenParticle::genericscale() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedDamageScreenParticle.GenericScale)
  return _internal_genericscale();
}
inline void FReplicatedDamageScreenParticle::_internal_set_genericscale(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.genericscale_ = value;
}
inline void FReplicatedDamageScreenParticle::set_genericscale(float value) {
  _internal_set_genericscale(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedDamageScreenParticle.GenericScale)
}

// required int32 Counter = 4;
inline bool FReplicatedDamageScreenParticle::_internal_has_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FReplicatedDamageScreenParticle::has_counter() const {
  return _internal_has_counter();
}
inline void FReplicatedDamageScreenParticle::clear_counter() {
  _impl_.counter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t FReplicatedDamageScreenParticle::_internal_counter() const {
  return _impl_.counter_;
}
inline int32_t FReplicatedDamageScreenParticle::counter() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedDamageScreenParticle.Counter)
  return _internal_counter();
}
inline void FReplicatedDamageScreenParticle::_internal_set_counter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.counter_ = value;
}
inline void FReplicatedDamageScreenParticle::set_counter(int32_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedDamageScreenParticle.Counter)
}

// -------------------------------------------------------------------

// FReplicatedProgressBarData

// required float Duration = 1;
inline bool FReplicatedProgressBarData::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FReplicatedProgressBarData::has_duration() const {
  return _internal_has_duration();
}
inline void FReplicatedProgressBarData::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FReplicatedProgressBarData::_internal_duration() const {
  return _impl_.duration_;
}
inline float FReplicatedProgressBarData::duration() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedProgressBarData.Duration)
  return _internal_duration();
}
inline void FReplicatedProgressBarData::_internal_set_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.duration_ = value;
}
inline void FReplicatedProgressBarData::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedProgressBarData.Duration)
}

// required float Rate = 2;
inline bool FReplicatedProgressBarData::_internal_has_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FReplicatedProgressBarData::has_rate() const {
  return _internal_has_rate();
}
inline void FReplicatedProgressBarData::clear_rate() {
  _impl_.rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FReplicatedProgressBarData::_internal_rate() const {
  return _impl_.rate_;
}
inline float FReplicatedProgressBarData::rate() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedProgressBarData.Rate)
  return _internal_rate();
}
inline void FReplicatedProgressBarData::_internal_set_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rate_ = value;
}
inline void FReplicatedProgressBarData::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedProgressBarData.Rate)
}

// required float StartOffset = 3;
inline bool FReplicatedProgressBarData::_internal_has_startoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FReplicatedProgressBarData::has_startoffset() const {
  return _internal_has_startoffset();
}
inline void FReplicatedProgressBarData::clear_startoffset() {
  _impl_.startoffset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FReplicatedProgressBarData::_internal_startoffset() const {
  return _impl_.startoffset_;
}
inline float FReplicatedProgressBarData::startoffset() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedProgressBarData.StartOffset)
  return _internal_startoffset();
}
inline void FReplicatedProgressBarData::_internal_set_startoffset(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.startoffset_ = value;
}
inline void FReplicatedProgressBarData::set_startoffset(float value) {
  _internal_set_startoffset(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedProgressBarData.StartOffset)
}

// -------------------------------------------------------------------

// FCameraViewData

// required .HederaDefinitions.ReplicatedActorReference ViewTarget = 1;
inline bool FCameraViewData::_internal_has_viewtarget() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewtarget_ != nullptr);
  return value;
}
inline bool FCameraViewData::has_viewtarget() const {
  return _internal_has_viewtarget();
}
inline void FCameraViewData::clear_viewtarget() {
  if (_impl_.viewtarget_ != nullptr) _impl_.viewtarget_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& FCameraViewData::_internal_viewtarget() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.viewtarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& FCameraViewData::viewtarget() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCameraViewData.ViewTarget)
  return _internal_viewtarget();
}
inline void FCameraViewData::unsafe_arena_set_allocated_viewtarget(
    ::HederaDefinitions::ReplicatedActorReference* viewtarget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewtarget_);
  }
  _impl_.viewtarget_ = viewtarget;
  if (viewtarget) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FCameraViewData.ViewTarget)
}
inline ::HederaDefinitions::ReplicatedActorReference* FCameraViewData::release_viewtarget() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.viewtarget_;
  _impl_.viewtarget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* FCameraViewData::unsafe_arena_release_viewtarget() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FCameraViewData.ViewTarget)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.viewtarget_;
  _impl_.viewtarget_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* FCameraViewData::_internal_mutable_viewtarget() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewtarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.viewtarget_ = p;
  }
  return _impl_.viewtarget_;
}
inline ::HederaDefinitions::ReplicatedActorReference* FCameraViewData::mutable_viewtarget() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_viewtarget();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FCameraViewData.ViewTarget)
  return _msg;
}
inline void FCameraViewData::set_allocated_viewtarget(::HederaDefinitions::ReplicatedActorReference* viewtarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.viewtarget_;
  }
  if (viewtarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(viewtarget);
    if (message_arena != submessage_arena) {
      viewtarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewtarget, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewtarget_ = viewtarget;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FCameraViewData.ViewTarget)
}

// required .HederaDefinitions.FName ModeName = 2;
inline bool FCameraViewData::_internal_has_modename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.modename_ != nullptr);
  return value;
}
inline bool FCameraViewData::has_modename() const {
  return _internal_has_modename();
}
inline void FCameraViewData::clear_modename() {
  if (_impl_.modename_ != nullptr) _impl_.modename_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FName& FCameraViewData::_internal_modename() const {
  const ::HederaDefinitions::FName* p = _impl_.modename_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FCameraViewData::modename() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCameraViewData.ModeName)
  return _internal_modename();
}
inline void FCameraViewData::unsafe_arena_set_allocated_modename(
    ::HederaDefinitions::FName* modename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modename_);
  }
  _impl_.modename_ = modename;
  if (modename) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FCameraViewData.ModeName)
}
inline ::HederaDefinitions::FName* FCameraViewData::release_modename() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FName* temp = _impl_.modename_;
  _impl_.modename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FCameraViewData::unsafe_arena_release_modename() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FCameraViewData.ModeName)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FName* temp = _impl_.modename_;
  _impl_.modename_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FCameraViewData::_internal_mutable_modename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.modename_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.modename_ = p;
  }
  return _impl_.modename_;
}
inline ::HederaDefinitions::FName* FCameraViewData::mutable_modename() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_modename();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FCameraViewData.ModeName)
  return _msg;
}
inline void FCameraViewData::set_allocated_modename(::HederaDefinitions::FName* modename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.modename_;
  }
  if (modename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modename);
    if (message_arena != submessage_arena) {
      modename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modename, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.modename_ = modename;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FCameraViewData.ModeName)
}

// required float BlendTimeOverride = 3;
inline bool FCameraViewData::_internal_has_blendtimeoverride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FCameraViewData::has_blendtimeoverride() const {
  return _internal_has_blendtimeoverride();
}
inline void FCameraViewData::clear_blendtimeoverride() {
  _impl_.blendtimeoverride_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FCameraViewData::_internal_blendtimeoverride() const {
  return _impl_.blendtimeoverride_;
}
inline float FCameraViewData::blendtimeoverride() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCameraViewData.BlendTimeOverride)
  return _internal_blendtimeoverride();
}
inline void FCameraViewData::_internal_set_blendtimeoverride(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blendtimeoverride_ = value;
}
inline void FCameraViewData::set_blendtimeoverride(float value) {
  _internal_set_blendtimeoverride(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCameraViewData.BlendTimeOverride)
}

// required bool bIsTeleport = 4;
inline bool FCameraViewData::_internal_has_bisteleport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FCameraViewData::has_bisteleport() const {
  return _internal_has_bisteleport();
}
inline void FCameraViewData::clear_bisteleport() {
  _impl_.bisteleport_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FCameraViewData::_internal_bisteleport() const {
  return _impl_.bisteleport_;
}
inline bool FCameraViewData::bisteleport() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCameraViewData.bIsTeleport)
  return _internal_bisteleport();
}
inline void FCameraViewData::_internal_set_bisteleport(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bisteleport_ = value;
}
inline void FCameraViewData::set_bisteleport(bool value) {
  _internal_set_bisteleport(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCameraViewData.bIsTeleport)
}

// required int32 DesiredDeathSpectatorState = 5;
inline bool FCameraViewData::_internal_has_desireddeathspectatorstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FCameraViewData::has_desireddeathspectatorstate() const {
  return _internal_has_desireddeathspectatorstate();
}
inline void FCameraViewData::clear_desireddeathspectatorstate() {
  _impl_.desireddeathspectatorstate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t FCameraViewData::_internal_desireddeathspectatorstate() const {
  return _impl_.desireddeathspectatorstate_;
}
inline int32_t FCameraViewData::desireddeathspectatorstate() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCameraViewData.DesiredDeathSpectatorState)
  return _internal_desireddeathspectatorstate();
}
inline void FCameraViewData::_internal_set_desireddeathspectatorstate(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.desireddeathspectatorstate_ = value;
}
inline void FCameraViewData::set_desireddeathspectatorstate(int32_t value) {
  _internal_set_desireddeathspectatorstate(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCameraViewData.DesiredDeathSpectatorState)
}

// -------------------------------------------------------------------

// FActorSelectionDataContainer

// required float Health = 1;
inline bool FActorSelectionDataContainer::_internal_has_health() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_health() const {
  return _internal_has_health();
}
inline void FActorSelectionDataContainer::clear_health() {
  _impl_.health_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float FActorSelectionDataContainer::_internal_health() const {
  return _impl_.health_;
}
inline float FActorSelectionDataContainer::health() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.Health)
  return _internal_health();
}
inline void FActorSelectionDataContainer::_internal_set_health(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.health_ = value;
}
inline void FActorSelectionDataContainer::set_health(float value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.Health)
}

// required bool bDisplayHealth = 2;
inline bool FActorSelectionDataContainer::_internal_has_bdisplayhealth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bdisplayhealth() const {
  return _internal_has_bdisplayhealth();
}
inline void FActorSelectionDataContainer::clear_bdisplayhealth() {
  _impl_.bdisplayhealth_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FActorSelectionDataContainer::_internal_bdisplayhealth() const {
  return _impl_.bdisplayhealth_;
}
inline bool FActorSelectionDataContainer::bdisplayhealth() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bDisplayHealth)
  return _internal_bdisplayhealth();
}
inline void FActorSelectionDataContainer::_internal_set_bdisplayhealth(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bdisplayhealth_ = value;
}
inline void FActorSelectionDataContainer::set_bdisplayhealth(bool value) {
  _internal_set_bdisplayhealth(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bDisplayHealth)
}

// required float Shield = 3;
inline bool FActorSelectionDataContainer::_internal_has_shield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_shield() const {
  return _internal_has_shield();
}
inline void FActorSelectionDataContainer::clear_shield() {
  _impl_.shield_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float FActorSelectionDataContainer::_internal_shield() const {
  return _impl_.shield_;
}
inline float FActorSelectionDataContainer::shield() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.Shield)
  return _internal_shield();
}
inline void FActorSelectionDataContainer::_internal_set_shield(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.shield_ = value;
}
inline void FActorSelectionDataContainer::set_shield(float value) {
  _internal_set_shield(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.Shield)
}

// required bool bDisplayShield = 4;
inline bool FActorSelectionDataContainer::_internal_has_bdisplayshield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bdisplayshield() const {
  return _internal_has_bdisplayshield();
}
inline void FActorSelectionDataContainer::clear_bdisplayshield() {
  _impl_.bdisplayshield_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FActorSelectionDataContainer::_internal_bdisplayshield() const {
  return _impl_.bdisplayshield_;
}
inline bool FActorSelectionDataContainer::bdisplayshield() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bDisplayShield)
  return _internal_bdisplayshield();
}
inline void FActorSelectionDataContainer::_internal_set_bdisplayshield(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bdisplayshield_ = value;
}
inline void FActorSelectionDataContainer::set_bdisplayshield(bool value) {
  _internal_set_bdisplayshield(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bDisplayShield)
}

// required float Overshield = 5;
inline bool FActorSelectionDataContainer::_internal_has_overshield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_overshield() const {
  return _internal_has_overshield();
}
inline void FActorSelectionDataContainer::clear_overshield() {
  _impl_.overshield_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float FActorSelectionDataContainer::_internal_overshield() const {
  return _impl_.overshield_;
}
inline float FActorSelectionDataContainer::overshield() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.Overshield)
  return _internal_overshield();
}
inline void FActorSelectionDataContainer::_internal_set_overshield(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.overshield_ = value;
}
inline void FActorSelectionDataContainer::set_overshield(float value) {
  _internal_set_overshield(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.Overshield)
}

// required bool bDisplayOvershield = 6;
inline bool FActorSelectionDataContainer::_internal_has_bdisplayovershield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bdisplayovershield() const {
  return _internal_has_bdisplayovershield();
}
inline void FActorSelectionDataContainer::clear_bdisplayovershield() {
  _impl_.bdisplayovershield_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FActorSelectionDataContainer::_internal_bdisplayovershield() const {
  return _impl_.bdisplayovershield_;
}
inline bool FActorSelectionDataContainer::bdisplayovershield() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bDisplayOvershield)
  return _internal_bdisplayovershield();
}
inline void FActorSelectionDataContainer::_internal_set_bdisplayovershield(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bdisplayovershield_ = value;
}
inline void FActorSelectionDataContainer::set_bdisplayovershield(bool value) {
  _internal_set_bdisplayovershield(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bDisplayOvershield)
}

// required int32 Level = 7;
inline bool FActorSelectionDataContainer::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_level() const {
  return _internal_has_level();
}
inline void FActorSelectionDataContainer::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t FActorSelectionDataContainer::_internal_level() const {
  return _impl_.level_;
}
inline int32_t FActorSelectionDataContainer::level() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.Level)
  return _internal_level();
}
inline void FActorSelectionDataContainer::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.level_ = value;
}
inline void FActorSelectionDataContainer::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.Level)
}

// required bool bDisplayLevel = 8;
inline bool FActorSelectionDataContainer::_internal_has_bdisplaylevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bdisplaylevel() const {
  return _internal_has_bdisplaylevel();
}
inline void FActorSelectionDataContainer::clear_bdisplaylevel() {
  _impl_.bdisplaylevel_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FActorSelectionDataContainer::_internal_bdisplaylevel() const {
  return _impl_.bdisplaylevel_;
}
inline bool FActorSelectionDataContainer::bdisplaylevel() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bDisplayLevel)
  return _internal_bdisplaylevel();
}
inline void FActorSelectionDataContainer::_internal_set_bdisplaylevel(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bdisplaylevel_ = value;
}
inline void FActorSelectionDataContainer::set_bdisplaylevel(bool value) {
  _internal_set_bdisplaylevel(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bDisplayLevel)
}

// required float RespawnTime = 9;
inline bool FActorSelectionDataContainer::_internal_has_respawntime() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_respawntime() const {
  return _internal_has_respawntime();
}
inline void FActorSelectionDataContainer::clear_respawntime() {
  _impl_.respawntime_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float FActorSelectionDataContainer::_internal_respawntime() const {
  return _impl_.respawntime_;
}
inline float FActorSelectionDataContainer::respawntime() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.RespawnTime)
  return _internal_respawntime();
}
inline void FActorSelectionDataContainer::_internal_set_respawntime(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.respawntime_ = value;
}
inline void FActorSelectionDataContainer::set_respawntime(float value) {
  _internal_set_respawntime(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.RespawnTime)
}

// required bool bDisplayRespawnTime = 10;
inline bool FActorSelectionDataContainer::_internal_has_bdisplayrespawntime() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bdisplayrespawntime() const {
  return _internal_has_bdisplayrespawntime();
}
inline void FActorSelectionDataContainer::clear_bdisplayrespawntime() {
  _impl_.bdisplayrespawntime_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool FActorSelectionDataContainer::_internal_bdisplayrespawntime() const {
  return _impl_.bdisplayrespawntime_;
}
inline bool FActorSelectionDataContainer::bdisplayrespawntime() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bDisplayRespawnTime)
  return _internal_bdisplayrespawntime();
}
inline void FActorSelectionDataContainer::_internal_set_bdisplayrespawntime(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.bdisplayrespawntime_ = value;
}
inline void FActorSelectionDataContainer::set_bdisplayrespawntime(bool value) {
  _internal_set_bdisplayrespawntime(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bDisplayRespawnTime)
}

// required bool bDisplayName = 11;
inline bool FActorSelectionDataContainer::_internal_has_bdisplayname() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bdisplayname() const {
  return _internal_has_bdisplayname();
}
inline void FActorSelectionDataContainer::clear_bdisplayname() {
  _impl_.bdisplayname_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool FActorSelectionDataContainer::_internal_bdisplayname() const {
  return _impl_.bdisplayname_;
}
inline bool FActorSelectionDataContainer::bdisplayname() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bDisplayName)
  return _internal_bdisplayname();
}
inline void FActorSelectionDataContainer::_internal_set_bdisplayname(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.bdisplayname_ = value;
}
inline void FActorSelectionDataContainer::set_bdisplayname(bool value) {
  _internal_set_bdisplayname(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bDisplayName)
}

// required .HederaDefinitions.FVector Location = 12;
inline bool FActorSelectionDataContainer::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool FActorSelectionDataContainer::has_location() const {
  return _internal_has_location();
}
inline void FActorSelectionDataContainer::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FVector& FActorSelectionDataContainer::_internal_location() const {
  const ::HederaDefinitions::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& FActorSelectionDataContainer::location() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.Location)
  return _internal_location();
}
inline void FActorSelectionDataContainer::unsafe_arena_set_allocated_location(
    ::HederaDefinitions::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FActorSelectionDataContainer.Location)
}
inline ::HederaDefinitions::FVector* FActorSelectionDataContainer::release_location() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* FActorSelectionDataContainer::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FActorSelectionDataContainer.Location)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* FActorSelectionDataContainer::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::HederaDefinitions::FVector* FActorSelectionDataContainer::mutable_location() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FActorSelectionDataContainer.Location)
  return _msg;
}
inline void FActorSelectionDataContainer::set_allocated_location(::HederaDefinitions::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FActorSelectionDataContainer.Location)
}

// required bool bActive = 13;
inline bool FActorSelectionDataContainer::_internal_has_bactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_bactive() const {
  return _internal_has_bactive();
}
inline void FActorSelectionDataContainer::clear_bactive() {
  _impl_.bactive_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool FActorSelectionDataContainer::_internal_bactive() const {
  return _impl_.bactive_;
}
inline bool FActorSelectionDataContainer::bactive() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bActive)
  return _internal_bactive();
}
inline void FActorSelectionDataContainer::_internal_set_bactive(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.bactive_ = value;
}
inline void FActorSelectionDataContainer::set_bactive(bool value) {
  _internal_set_bactive(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bActive)
}

// required .HederaDefinitions.NonReplicatedObjectReference UnitType = 14;
inline bool FActorSelectionDataContainer::_internal_has_unittype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unittype_ != nullptr);
  return value;
}
inline bool FActorSelectionDataContainer::has_unittype() const {
  return _internal_has_unittype();
}
inline void FActorSelectionDataContainer::clear_unittype() {
  if (_impl_.unittype_ != nullptr) _impl_.unittype_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FActorSelectionDataContainer::_internal_unittype() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.unittype_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FActorSelectionDataContainer::unittype() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.UnitType)
  return _internal_unittype();
}
inline void FActorSelectionDataContainer::unsafe_arena_set_allocated_unittype(
    ::HederaDefinitions::NonReplicatedObjectReference* unittype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unittype_);
  }
  _impl_.unittype_ = unittype;
  if (unittype) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FActorSelectionDataContainer.UnitType)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::release_unittype() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.unittype_;
  _impl_.unittype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::unsafe_arena_release_unittype() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FActorSelectionDataContainer.UnitType)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.unittype_;
  _impl_.unittype_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::_internal_mutable_unittype() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.unittype_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.unittype_ = p;
  }
  return _impl_.unittype_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::mutable_unittype() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_unittype();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FActorSelectionDataContainer.UnitType)
  return _msg;
}
inline void FActorSelectionDataContainer::set_allocated_unittype(::HederaDefinitions::NonReplicatedObjectReference* unittype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unittype_;
  }
  if (unittype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unittype);
    if (message_arena != submessage_arena) {
      unittype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unittype, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unittype_ = unittype;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FActorSelectionDataContainer.UnitType)
}

// required .HederaDefinitions.ReplicatedActorReference PRI = 15;
inline bool FActorSelectionDataContainer::_internal_has_pri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pri_ != nullptr);
  return value;
}
inline bool FActorSelectionDataContainer::has_pri() const {
  return _internal_has_pri();
}
inline void FActorSelectionDataContainer::clear_pri() {
  if (_impl_.pri_ != nullptr) _impl_.pri_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& FActorSelectionDataContainer::_internal_pri() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.pri_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& FActorSelectionDataContainer::pri() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.PRI)
  return _internal_pri();
}
inline void FActorSelectionDataContainer::unsafe_arena_set_allocated_pri(
    ::HederaDefinitions::ReplicatedActorReference* pri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pri_);
  }
  _impl_.pri_ = pri;
  if (pri) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FActorSelectionDataContainer.PRI)
}
inline ::HederaDefinitions::ReplicatedActorReference* FActorSelectionDataContainer::release_pri() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.pri_;
  _impl_.pri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* FActorSelectionDataContainer::unsafe_arena_release_pri() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FActorSelectionDataContainer.PRI)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.pri_;
  _impl_.pri_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* FActorSelectionDataContainer::_internal_mutable_pri() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.pri_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.pri_ = p;
  }
  return _impl_.pri_;
}
inline ::HederaDefinitions::ReplicatedActorReference* FActorSelectionDataContainer::mutable_pri() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_pri();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FActorSelectionDataContainer.PRI)
  return _msg;
}
inline void FActorSelectionDataContainer::set_allocated_pri(::HederaDefinitions::ReplicatedActorReference* pri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pri_;
  }
  if (pri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pri);
    if (message_arena != submessage_arena) {
      pri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pri, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.pri_ = pri;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FActorSelectionDataContainer.PRI)
}

// required bool bInjured = 16;
inline bool FActorSelectionDataContainer::_internal_has_binjured() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_binjured() const {
  return _internal_has_binjured();
}
inline void FActorSelectionDataContainer::clear_binjured() {
  _impl_.binjured_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool FActorSelectionDataContainer::_internal_binjured() const {
  return _impl_.binjured_;
}
inline bool FActorSelectionDataContainer::binjured() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.bInjured)
  return _internal_binjured();
}
inline void FActorSelectionDataContainer::_internal_set_binjured(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.binjured_ = value;
}
inline void FActorSelectionDataContainer::set_binjured(bool value) {
  _internal_set_binjured(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.bInjured)
}

// required .HederaDefinitions.NonReplicatedObjectReference NameID = 17;
inline bool FActorSelectionDataContainer::_internal_has_nameid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nameid_ != nullptr);
  return value;
}
inline bool FActorSelectionDataContainer::has_nameid() const {
  return _internal_has_nameid();
}
inline void FActorSelectionDataContainer::clear_nameid() {
  if (_impl_.nameid_ != nullptr) _impl_.nameid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FActorSelectionDataContainer::_internal_nameid() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.nameid_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FActorSelectionDataContainer::nameid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.NameID)
  return _internal_nameid();
}
inline void FActorSelectionDataContainer::unsafe_arena_set_allocated_nameid(
    ::HederaDefinitions::NonReplicatedObjectReference* nameid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nameid_);
  }
  _impl_.nameid_ = nameid;
  if (nameid) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FActorSelectionDataContainer.NameID)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::release_nameid() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.nameid_;
  _impl_.nameid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::unsafe_arena_release_nameid() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FActorSelectionDataContainer.NameID)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.nameid_;
  _impl_.nameid_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::_internal_mutable_nameid() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.nameid_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.nameid_ = p;
  }
  return _impl_.nameid_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FActorSelectionDataContainer::mutable_nameid() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_nameid();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FActorSelectionDataContainer.NameID)
  return _msg;
}
inline void FActorSelectionDataContainer::set_allocated_nameid(::HederaDefinitions::NonReplicatedObjectReference* nameid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nameid_;
  }
  if (nameid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nameid);
    if (message_arena != submessage_arena) {
      nameid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nameid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.nameid_ = nameid;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FActorSelectionDataContainer.NameID)
}

// required bytes Name = 18;
inline bool FActorSelectionDataContainer::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FActorSelectionDataContainer::has_name() const {
  return _internal_has_name();
}
inline void FActorSelectionDataContainer::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FActorSelectionDataContainer::name() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FActorSelectionDataContainer.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FActorSelectionDataContainer::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.FActorSelectionDataContainer.Name)
}
inline std::string* FActorSelectionDataContainer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FActorSelectionDataContainer.Name)
  return _s;
}
inline const std::string& FActorSelectionDataContainer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FActorSelectionDataContainer::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FActorSelectionDataContainer::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FActorSelectionDataContainer::release_name() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FActorSelectionDataContainer.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FActorSelectionDataContainer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FActorSelectionDataContainer.Name)
}

// -------------------------------------------------------------------

// APoplarPlayerController

// required .HederaDefinitions.FVector Location = 1;
inline bool APoplarPlayerController::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_location() const {
  return _internal_has_location();
}
inline void APoplarPlayerController::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FVector& APoplarPlayerController::_internal_location() const {
  const ::HederaDefinitions::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& APoplarPlayerController::location() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Location)
  return _internal_location();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_location(
    ::HederaDefinitions::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Location)
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::mutable_location() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Location)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_location(::HederaDefinitions::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Location)
}

// required .HederaDefinitions.FRotator Rotation = 2;
inline bool APoplarPlayerController::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_rotation() const {
  return _internal_has_rotation();
}
inline void APoplarPlayerController::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerController::_internal_rotation() const {
  const ::HederaDefinitions::FRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FRotator&>(
      ::HederaDefinitions::_FRotator_default_instance_);
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerController::rotation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Rotation)
  return _internal_rotation();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_rotation(
    ::HederaDefinitions::FRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Rotation)
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Rotation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::mutable_rotation() {
  ::HederaDefinitions::FRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Rotation)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_rotation(::HederaDefinitions::FRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Rotation)
}

// required float DrawScale = 3;
inline bool APoplarPlayerController::_internal_has_drawscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_drawscale() const {
  return _internal_has_drawscale();
}
inline void APoplarPlayerController::clear_drawscale() {
  _impl_.drawscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float APoplarPlayerController::_internal_drawscale() const {
  return _impl_.drawscale_;
}
inline float APoplarPlayerController::drawscale() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.DrawScale)
  return _internal_drawscale();
}
inline void APoplarPlayerController::_internal_set_drawscale(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.drawscale_ = value;
}
inline void APoplarPlayerController::set_drawscale(float value) {
  _internal_set_drawscale(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.DrawScale)
}

// required float CustomTimeDilation = 4;
inline bool APoplarPlayerController::_internal_has_customtimedilation() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_customtimedilation() const {
  return _internal_has_customtimedilation();
}
inline void APoplarPlayerController::clear_customtimedilation() {
  _impl_.customtimedilation_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float APoplarPlayerController::_internal_customtimedilation() const {
  return _impl_.customtimedilation_;
}
inline float APoplarPlayerController::customtimedilation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.CustomTimeDilation)
  return _internal_customtimedilation();
}
inline void APoplarPlayerController::_internal_set_customtimedilation(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.customtimedilation_ = value;
}
inline void APoplarPlayerController::set_customtimedilation(float value) {
  _internal_set_customtimedilation(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.CustomTimeDilation)
}

// required uint32 Physics = 5;
inline bool APoplarPlayerController::_internal_has_physics() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_physics() const {
  return _internal_has_physics();
}
inline void APoplarPlayerController::clear_physics() {
  _impl_.physics_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t APoplarPlayerController::_internal_physics() const {
  return _impl_.physics_;
}
inline uint32_t APoplarPlayerController::physics() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Physics)
  return _internal_physics();
}
inline void APoplarPlayerController::_internal_set_physics(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.physics_ = value;
}
inline void APoplarPlayerController::set_physics(uint32_t value) {
  _internal_set_physics(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.Physics)
}

// required uint32 RemoteRole = 6;
inline bool APoplarPlayerController::_internal_has_remoterole() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_remoterole() const {
  return _internal_has_remoterole();
}
inline void APoplarPlayerController::clear_remoterole() {
  _impl_.remoterole_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t APoplarPlayerController::_internal_remoterole() const {
  return _impl_.remoterole_;
}
inline uint32_t APoplarPlayerController::remoterole() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.RemoteRole)
  return _internal_remoterole();
}
inline void APoplarPlayerController::_internal_set_remoterole(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.remoterole_ = value;
}
inline void APoplarPlayerController::set_remoterole(uint32_t value) {
  _internal_set_remoterole(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.RemoteRole)
}

// required uint32 Role = 7;
inline bool APoplarPlayerController::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_role() const {
  return _internal_has_role();
}
inline void APoplarPlayerController::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t APoplarPlayerController::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t APoplarPlayerController::role() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Role)
  return _internal_role();
}
inline void APoplarPlayerController::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.role_ = value;
}
inline void APoplarPlayerController::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.Role)
}

// required uint32 ReplicatedCollisionType = 8;
inline bool APoplarPlayerController::_internal_has_replicatedcollisiontype() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_replicatedcollisiontype() const {
  return _internal_has_replicatedcollisiontype();
}
inline void APoplarPlayerController::clear_replicatedcollisiontype() {
  _impl_.replicatedcollisiontype_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t APoplarPlayerController::_internal_replicatedcollisiontype() const {
  return _impl_.replicatedcollisiontype_;
}
inline uint32_t APoplarPlayerController::replicatedcollisiontype() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.ReplicatedCollisionType)
  return _internal_replicatedcollisiontype();
}
inline void APoplarPlayerController::_internal_set_replicatedcollisiontype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.replicatedcollisiontype_ = value;
}
inline void APoplarPlayerController::set_replicatedcollisiontype(uint32_t value) {
  _internal_set_replicatedcollisiontype(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.ReplicatedCollisionType)
}

// required .HederaDefinitions.ReplicatedActorReference Owner = 9;
inline bool APoplarPlayerController::_internal_has_owner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_owner() const {
  return _internal_has_owner();
}
inline void APoplarPlayerController::clear_owner() {
  if (_impl_.owner_ != nullptr) _impl_.owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_owner() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::owner() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Owner)
  return _internal_owner();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_owner(
    ::HederaDefinitions::ReplicatedActorReference* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Owner)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_owner() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Owner)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_owner() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_owner() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Owner)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_owner(::HederaDefinitions::ReplicatedActorReference* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Owner)
}

// required .HederaDefinitions.ReplicatedActorReference Base = 10;
inline bool APoplarPlayerController::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_base() const {
  return _internal_has_base();
}
inline void APoplarPlayerController::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_base() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::base() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Base)
  return _internal_base();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_base(
    ::HederaDefinitions::ReplicatedActorReference* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Base)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_base() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Base)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_base() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Base)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_base(::HederaDefinitions::ReplicatedActorReference* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Base)
}

// required bool bHidden = 11;
inline bool APoplarPlayerController::_internal_has_bhidden() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bhidden() const {
  return _internal_has_bhidden();
}
inline void APoplarPlayerController::clear_bhidden() {
  _impl_.bhidden_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool APoplarPlayerController::_internal_bhidden() const {
  return _impl_.bhidden_;
}
inline bool APoplarPlayerController::bhidden() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bHidden)
  return _internal_bhidden();
}
inline void APoplarPlayerController::_internal_set_bhidden(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.bhidden_ = value;
}
inline void APoplarPlayerController::set_bhidden(bool value) {
  _internal_set_bhidden(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bHidden)
}

// required bool bTearOff = 12;
inline bool APoplarPlayerController::_internal_has_btearoff() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_btearoff() const {
  return _internal_has_btearoff();
}
inline void APoplarPlayerController::clear_btearoff() {
  _impl_.btearoff_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool APoplarPlayerController::_internal_btearoff() const {
  return _impl_.btearoff_;
}
inline bool APoplarPlayerController::btearoff() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bTearOff)
  return _internal_btearoff();
}
inline void APoplarPlayerController::_internal_set_btearoff(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.btearoff_ = value;
}
inline void APoplarPlayerController::set_btearoff(bool value) {
  _internal_set_btearoff(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bTearOff)
}

// required bool bHardAttach = 13;
inline bool APoplarPlayerController::_internal_has_bhardattach() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bhardattach() const {
  return _internal_has_bhardattach();
}
inline void APoplarPlayerController::clear_bhardattach() {
  _impl_.bhardattach_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool APoplarPlayerController::_internal_bhardattach() const {
  return _impl_.bhardattach_;
}
inline bool APoplarPlayerController::bhardattach() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bHardAttach)
  return _internal_bhardattach();
}
inline void APoplarPlayerController::_internal_set_bhardattach(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.bhardattach_ = value;
}
inline void APoplarPlayerController::set_bhardattach(bool value) {
  _internal_set_bhardattach(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bHardAttach)
}

// required bool bCollideActors = 14;
inline bool APoplarPlayerController::_internal_has_bcollideactors() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bcollideactors() const {
  return _internal_has_bcollideactors();
}
inline void APoplarPlayerController::clear_bcollideactors() {
  _impl_.bcollideactors_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool APoplarPlayerController::_internal_bcollideactors() const {
  return _impl_.bcollideactors_;
}
inline bool APoplarPlayerController::bcollideactors() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bCollideActors)
  return _internal_bcollideactors();
}
inline void APoplarPlayerController::_internal_set_bcollideactors(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.bcollideactors_ = value;
}
inline void APoplarPlayerController::set_bcollideactors(bool value) {
  _internal_set_bcollideactors(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bCollideActors)
}

// required bool bCollideWorld = 15;
inline bool APoplarPlayerController::_internal_has_bcollideworld() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bcollideworld() const {
  return _internal_has_bcollideworld();
}
inline void APoplarPlayerController::clear_bcollideworld() {
  _impl_.bcollideworld_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool APoplarPlayerController::_internal_bcollideworld() const {
  return _impl_.bcollideworld_;
}
inline bool APoplarPlayerController::bcollideworld() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bCollideWorld)
  return _internal_bcollideworld();
}
inline void APoplarPlayerController::_internal_set_bcollideworld(bool value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.bcollideworld_ = value;
}
inline void APoplarPlayerController::set_bcollideworld(bool value) {
  _internal_set_bcollideworld(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bCollideWorld)
}

// required bool bBlockActors = 16;
inline bool APoplarPlayerController::_internal_has_bblockactors() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bblockactors() const {
  return _internal_has_bblockactors();
}
inline void APoplarPlayerController::clear_bblockactors() {
  _impl_.bblockactors_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool APoplarPlayerController::_internal_bblockactors() const {
  return _impl_.bblockactors_;
}
inline bool APoplarPlayerController::bblockactors() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bBlockActors)
  return _internal_bblockactors();
}
inline void APoplarPlayerController::_internal_set_bblockactors(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.bblockactors_ = value;
}
inline void APoplarPlayerController::set_bblockactors(bool value) {
  _internal_set_bblockactors(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bBlockActors)
}

// required bool bProjTarget = 17;
inline bool APoplarPlayerController::_internal_has_bprojtarget() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bprojtarget() const {
  return _internal_has_bprojtarget();
}
inline void APoplarPlayerController::clear_bprojtarget() {
  _impl_.bprojtarget_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool APoplarPlayerController::_internal_bprojtarget() const {
  return _impl_.bprojtarget_;
}
inline bool APoplarPlayerController::bprojtarget() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bProjTarget)
  return _internal_bprojtarget();
}
inline void APoplarPlayerController::_internal_set_bprojtarget(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.bprojtarget_ = value;
}
inline void APoplarPlayerController::set_bprojtarget(bool value) {
  _internal_set_bprojtarget(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bProjTarget)
}

// required bool bNetOwner = 18;
inline bool APoplarPlayerController::_internal_has_bnetowner() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bnetowner() const {
  return _internal_has_bnetowner();
}
inline void APoplarPlayerController::clear_bnetowner() {
  _impl_.bnetowner_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool APoplarPlayerController::_internal_bnetowner() const {
  return _impl_.bnetowner_;
}
inline bool APoplarPlayerController::bnetowner() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bNetOwner)
  return _internal_bnetowner();
}
inline void APoplarPlayerController::_internal_set_bnetowner(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.bnetowner_ = value;
}
inline void APoplarPlayerController::set_bnetowner(bool value) {
  _internal_set_bnetowner(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bNetOwner)
}

// required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
inline bool APoplarPlayerController::_internal_has_instigator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instigator_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_instigator() const {
  return _internal_has_instigator();
}
inline void APoplarPlayerController::clear_instigator() {
  if (_impl_.instigator_ != nullptr) _impl_.instigator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_instigator() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.instigator_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::instigator() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Instigator)
  return _internal_instigator();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_instigator(
    ::HederaDefinitions::ReplicatedActorReference* instigator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instigator_);
  }
  _impl_.instigator_ = instigator;
  if (instigator) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Instigator)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_instigator() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_instigator() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Instigator)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_instigator() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.instigator_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.instigator_ = p;
  }
  return _impl_.instigator_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_instigator() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_instigator();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Instigator)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_instigator(::HederaDefinitions::ReplicatedActorReference* instigator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.instigator_;
  }
  if (instigator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(instigator);
    if (message_arena != submessage_arena) {
      instigator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instigator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.instigator_ = instigator;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Instigator)
}

// required .HederaDefinitions.FVector Velocity = 20;
inline bool APoplarPlayerController::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_velocity() const {
  return _internal_has_velocity();
}
inline void APoplarPlayerController::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HederaDefinitions::FVector& APoplarPlayerController::_internal_velocity() const {
  const ::HederaDefinitions::FVector* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& APoplarPlayerController::velocity() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Velocity)
  return _internal_velocity();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_velocity(
    ::HederaDefinitions::FVector* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Velocity)
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::FVector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Velocity)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::FVector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::mutable_velocity() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Velocity)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_velocity(::HederaDefinitions::FVector* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Velocity)
}

// required .HederaDefinitions.FName BaseBoneName = 21;
inline bool APoplarPlayerController::_internal_has_basebonename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basebonename_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_basebonename() const {
  return _internal_has_basebonename();
}
inline void APoplarPlayerController::clear_basebonename() {
  if (_impl_.basebonename_ != nullptr) _impl_.basebonename_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HederaDefinitions::FName& APoplarPlayerController::_internal_basebonename() const {
  const ::HederaDefinitions::FName* p = _impl_.basebonename_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& APoplarPlayerController::basebonename() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.BaseBoneName)
  return _internal_basebonename();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_basebonename(
    ::HederaDefinitions::FName* basebonename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basebonename_);
  }
  _impl_.basebonename_ = basebonename;
  if (basebonename) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.BaseBoneName)
}
inline ::HederaDefinitions::FName* APoplarPlayerController::release_basebonename() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HederaDefinitions::FName* temp = _impl_.basebonename_;
  _impl_.basebonename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* APoplarPlayerController::unsafe_arena_release_basebonename() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.BaseBoneName)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HederaDefinitions::FName* temp = _impl_.basebonename_;
  _impl_.basebonename_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* APoplarPlayerController::_internal_mutable_basebonename() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.basebonename_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.basebonename_ = p;
  }
  return _impl_.basebonename_;
}
inline ::HederaDefinitions::FName* APoplarPlayerController::mutable_basebonename() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_basebonename();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.BaseBoneName)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_basebonename(::HederaDefinitions::FName* basebonename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basebonename_;
  }
  if (basebonename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basebonename);
    if (message_arena != submessage_arena) {
      basebonename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basebonename, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.basebonename_ = basebonename;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.BaseBoneName)
}

// required .HederaDefinitions.FVector RelativeLocation = 22;
inline bool APoplarPlayerController::_internal_has_relativelocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativelocation_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_relativelocation() const {
  return _internal_has_relativelocation();
}
inline void APoplarPlayerController::clear_relativelocation() {
  if (_impl_.relativelocation_ != nullptr) _impl_.relativelocation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::HederaDefinitions::FVector& APoplarPlayerController::_internal_relativelocation() const {
  const ::HederaDefinitions::FVector* p = _impl_.relativelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& APoplarPlayerController::relativelocation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.RelativeLocation)
  return _internal_relativelocation();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_relativelocation(
    ::HederaDefinitions::FVector* relativelocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativelocation_);
  }
  _impl_.relativelocation_ = relativelocation;
  if (relativelocation) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.RelativeLocation)
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::release_relativelocation() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HederaDefinitions::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::unsafe_arena_release_relativelocation() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.RelativeLocation)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HederaDefinitions::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::_internal_mutable_relativelocation() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.relativelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.relativelocation_ = p;
  }
  return _impl_.relativelocation_;
}
inline ::HederaDefinitions::FVector* APoplarPlayerController::mutable_relativelocation() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_relativelocation();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.RelativeLocation)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_relativelocation(::HederaDefinitions::FVector* relativelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativelocation_;
  }
  if (relativelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativelocation);
    if (message_arena != submessage_arena) {
      relativelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativelocation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.relativelocation_ = relativelocation;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.RelativeLocation)
}

// required .HederaDefinitions.FRotator RelativeRotation = 23;
inline bool APoplarPlayerController::_internal_has_relativerotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativerotation_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_relativerotation() const {
  return _internal_has_relativerotation();
}
inline void APoplarPlayerController::clear_relativerotation() {
  if (_impl_.relativerotation_ != nullptr) _impl_.relativerotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerController::_internal_relativerotation() const {
  const ::HederaDefinitions::FRotator* p = _impl_.relativerotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FRotator&>(
      ::HederaDefinitions::_FRotator_default_instance_);
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerController::relativerotation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.RelativeRotation)
  return _internal_relativerotation();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_relativerotation(
    ::HederaDefinitions::FRotator* relativerotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativerotation_);
  }
  _impl_.relativerotation_ = relativerotation;
  if (relativerotation) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.RelativeRotation)
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::release_relativerotation() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HederaDefinitions::FRotator* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::unsafe_arena_release_relativerotation() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.RelativeRotation)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HederaDefinitions::FRotator* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::_internal_mutable_relativerotation() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.relativerotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FRotator>(GetArenaForAllocation());
    _impl_.relativerotation_ = p;
  }
  return _impl_.relativerotation_;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::mutable_relativerotation() {
  ::HederaDefinitions::FRotator* _msg = _internal_mutable_relativerotation();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.RelativeRotation)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_relativerotation(::HederaDefinitions::FRotator* relativerotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativerotation_;
  }
  if (relativerotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativerotation);
    if (message_arena != submessage_arena) {
      relativerotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativerotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.relativerotation_ = relativerotation;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.RelativeRotation)
}

// required .HederaDefinitions.ReplicatedActorReference Pawn = 24;
inline bool APoplarPlayerController::_internal_has_pawn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pawn_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_pawn() const {
  return _internal_has_pawn();
}
inline void APoplarPlayerController::clear_pawn() {
  if (_impl_.pawn_ != nullptr) _impl_.pawn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_pawn() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::pawn() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.Pawn)
  return _internal_pawn();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_pawn(
    ::HederaDefinitions::ReplicatedActorReference* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.Pawn)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_pawn() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.Pawn)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_pawn() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_pawn() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.Pawn)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_pawn(::HederaDefinitions::ReplicatedActorReference* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.Pawn)
}

// required .HederaDefinitions.ReplicatedActorReference ClientPendingPSI = 25;
inline bool APoplarPlayerController::_internal_has_clientpendingpsi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clientpendingpsi_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_clientpendingpsi() const {
  return _internal_has_clientpendingpsi();
}
inline void APoplarPlayerController::clear_clientpendingpsi() {
  if (_impl_.clientpendingpsi_ != nullptr) _impl_.clientpendingpsi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_clientpendingpsi() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.clientpendingpsi_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::clientpendingpsi() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.ClientPendingPSI)
  return _internal_clientpendingpsi();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_clientpendingpsi(
    ::HederaDefinitions::ReplicatedActorReference* clientpendingpsi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientpendingpsi_);
  }
  _impl_.clientpendingpsi_ = clientpendingpsi;
  if (clientpendingpsi) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.ClientPendingPSI)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_clientpendingpsi() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.clientpendingpsi_;
  _impl_.clientpendingpsi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_clientpendingpsi() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.ClientPendingPSI)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.clientpendingpsi_;
  _impl_.clientpendingpsi_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_clientpendingpsi() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.clientpendingpsi_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.clientpendingpsi_ = p;
  }
  return _impl_.clientpendingpsi_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_clientpendingpsi() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_clientpendingpsi();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.ClientPendingPSI)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_clientpendingpsi(::HederaDefinitions::ReplicatedActorReference* clientpendingpsi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.clientpendingpsi_;
  }
  if (clientpendingpsi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clientpendingpsi);
    if (message_arena != submessage_arena) {
      clientpendingpsi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientpendingpsi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.clientpendingpsi_ = clientpendingpsi;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.ClientPendingPSI)
}

// required .HederaDefinitions.ReplicatedActorReference ClientPendingPRI = 26;
inline bool APoplarPlayerController::_internal_has_clientpendingpri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clientpendingpri_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_clientpendingpri() const {
  return _internal_has_clientpendingpri();
}
inline void APoplarPlayerController::clear_clientpendingpri() {
  if (_impl_.clientpendingpri_ != nullptr) _impl_.clientpendingpri_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_clientpendingpri() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.clientpendingpri_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::clientpendingpri() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.ClientPendingPRI)
  return _internal_clientpendingpri();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_clientpendingpri(
    ::HederaDefinitions::ReplicatedActorReference* clientpendingpri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientpendingpri_);
  }
  _impl_.clientpendingpri_ = clientpendingpri;
  if (clientpendingpri) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.ClientPendingPRI)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_clientpendingpri() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.clientpendingpri_;
  _impl_.clientpendingpri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_clientpendingpri() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.ClientPendingPRI)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.clientpendingpri_;
  _impl_.clientpendingpri_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_clientpendingpri() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.clientpendingpri_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.clientpendingpri_ = p;
  }
  return _impl_.clientpendingpri_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_clientpendingpri() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_clientpendingpri();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.ClientPendingPRI)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_clientpendingpri(::HederaDefinitions::ReplicatedActorReference* clientpendingpri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.clientpendingpri_;
  }
  if (clientpendingpri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clientpendingpri);
    if (message_arena != submessage_arena) {
      clientpendingpri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientpendingpri, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.clientpendingpri_ = clientpendingpri;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.ClientPendingPRI)
}

// required .HederaDefinitions.FRotator TargetViewRotation = 27;
inline bool APoplarPlayerController::_internal_has_targetviewrotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetviewrotation_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_targetviewrotation() const {
  return _internal_has_targetviewrotation();
}
inline void APoplarPlayerController::clear_targetviewrotation() {
  if (_impl_.targetviewrotation_ != nullptr) _impl_.targetviewrotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerController::_internal_targetviewrotation() const {
  const ::HederaDefinitions::FRotator* p = _impl_.targetviewrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FRotator&>(
      ::HederaDefinitions::_FRotator_default_instance_);
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerController::targetviewrotation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.TargetViewRotation)
  return _internal_targetviewrotation();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_targetviewrotation(
    ::HederaDefinitions::FRotator* targetviewrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetviewrotation_);
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  if (targetviewrotation) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.TargetViewRotation)
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::release_targetviewrotation() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HederaDefinitions::FRotator* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::unsafe_arena_release_targetviewrotation() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.TargetViewRotation)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HederaDefinitions::FRotator* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::_internal_mutable_targetviewrotation() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.targetviewrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FRotator>(GetArenaForAllocation());
    _impl_.targetviewrotation_ = p;
  }
  return _impl_.targetviewrotation_;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerController::mutable_targetviewrotation() {
  ::HederaDefinitions::FRotator* _msg = _internal_mutable_targetviewrotation();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.TargetViewRotation)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_targetviewrotation(::HederaDefinitions::FRotator* targetviewrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetviewrotation_;
  }
  if (targetviewrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetviewrotation);
    if (message_arena != submessage_arena) {
      targetviewrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetviewrotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.TargetViewRotation)
}

// required float TargetEyeHeight = 28;
inline bool APoplarPlayerController::_internal_has_targeteyeheight() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_targeteyeheight() const {
  return _internal_has_targeteyeheight();
}
inline void APoplarPlayerController::clear_targeteyeheight() {
  _impl_.targeteyeheight_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline float APoplarPlayerController::_internal_targeteyeheight() const {
  return _impl_.targeteyeheight_;
}
inline float APoplarPlayerController::targeteyeheight() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.TargetEyeHeight)
  return _internal_targeteyeheight();
}
inline void APoplarPlayerController::_internal_set_targeteyeheight(float value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.targeteyeheight_ = value;
}
inline void APoplarPlayerController::set_targeteyeheight(float value) {
  _internal_set_targeteyeheight(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.TargetEyeHeight)
}

// required .HederaDefinitions.FEnvironmentalEffectInfo ActiveAudioEffect = 29;
inline bool APoplarPlayerController::_internal_has_activeaudioeffect() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.activeaudioeffect_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_activeaudioeffect() const {
  return _internal_has_activeaudioeffect();
}
inline void APoplarPlayerController::clear_activeaudioeffect() {
  if (_impl_.activeaudioeffect_ != nullptr) _impl_.activeaudioeffect_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::HederaDefinitions::FEnvironmentalEffectInfo& APoplarPlayerController::_internal_activeaudioeffect() const {
  const ::HederaDefinitions::FEnvironmentalEffectInfo* p = _impl_.activeaudioeffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FEnvironmentalEffectInfo&>(
      ::HederaDefinitions::_FEnvironmentalEffectInfo_default_instance_);
}
inline const ::HederaDefinitions::FEnvironmentalEffectInfo& APoplarPlayerController::activeaudioeffect() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.ActiveAudioEffect)
  return _internal_activeaudioeffect();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_activeaudioeffect(
    ::HederaDefinitions::FEnvironmentalEffectInfo* activeaudioeffect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activeaudioeffect_);
  }
  _impl_.activeaudioeffect_ = activeaudioeffect;
  if (activeaudioeffect) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.ActiveAudioEffect)
}
inline ::HederaDefinitions::FEnvironmentalEffectInfo* APoplarPlayerController::release_activeaudioeffect() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::HederaDefinitions::FEnvironmentalEffectInfo* temp = _impl_.activeaudioeffect_;
  _impl_.activeaudioeffect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FEnvironmentalEffectInfo* APoplarPlayerController::unsafe_arena_release_activeaudioeffect() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.ActiveAudioEffect)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::HederaDefinitions::FEnvironmentalEffectInfo* temp = _impl_.activeaudioeffect_;
  _impl_.activeaudioeffect_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FEnvironmentalEffectInfo* APoplarPlayerController::_internal_mutable_activeaudioeffect() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.activeaudioeffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FEnvironmentalEffectInfo>(GetArenaForAllocation());
    _impl_.activeaudioeffect_ = p;
  }
  return _impl_.activeaudioeffect_;
}
inline ::HederaDefinitions::FEnvironmentalEffectInfo* APoplarPlayerController::mutable_activeaudioeffect() {
  ::HederaDefinitions::FEnvironmentalEffectInfo* _msg = _internal_mutable_activeaudioeffect();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.ActiveAudioEffect)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_activeaudioeffect(::HederaDefinitions::FEnvironmentalEffectInfo* activeaudioeffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.activeaudioeffect_;
  }
  if (activeaudioeffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(activeaudioeffect);
    if (message_arena != submessage_arena) {
      activeaudioeffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activeaudioeffect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.activeaudioeffect_ = activeaudioeffect;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.ActiveAudioEffect)
}

// required bool bHideAmmoOnHud = 30;
inline bool APoplarPlayerController::_internal_has_bhideammoonhud() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bhideammoonhud() const {
  return _internal_has_bhideammoonhud();
}
inline void APoplarPlayerController::clear_bhideammoonhud() {
  _impl_.bhideammoonhud_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool APoplarPlayerController::_internal_bhideammoonhud() const {
  return _impl_.bhideammoonhud_;
}
inline bool APoplarPlayerController::bhideammoonhud() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bHideAmmoOnHud)
  return _internal_bhideammoonhud();
}
inline void APoplarPlayerController::_internal_set_bhideammoonhud(bool value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.bhideammoonhud_ = value;
}
inline void APoplarPlayerController::set_bhideammoonhud(bool value) {
  _internal_set_bhideammoonhud(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bHideAmmoOnHud)
}

// required bool bHideCompassOnHUD = 31;
inline bool APoplarPlayerController::_internal_has_bhidecompassonhud() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bhidecompassonhud() const {
  return _internal_has_bhidecompassonhud();
}
inline void APoplarPlayerController::clear_bhidecompassonhud() {
  _impl_.bhidecompassonhud_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool APoplarPlayerController::_internal_bhidecompassonhud() const {
  return _impl_.bhidecompassonhud_;
}
inline bool APoplarPlayerController::bhidecompassonhud() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bHideCompassOnHUD)
  return _internal_bhidecompassonhud();
}
inline void APoplarPlayerController::_internal_set_bhidecompassonhud(bool value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.bhidecompassonhud_ = value;
}
inline void APoplarPlayerController::set_bhidecompassonhud(bool value) {
  _internal_set_bhidecompassonhud(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bHideCompassOnHUD)
}

// required bool bHideSkillsOnHUD = 32;
inline bool APoplarPlayerController::_internal_has_bhideskillsonhud() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bhideskillsonhud() const {
  return _internal_has_bhideskillsonhud();
}
inline void APoplarPlayerController::clear_bhideskillsonhud() {
  _impl_.bhideskillsonhud_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool APoplarPlayerController::_internal_bhideskillsonhud() const {
  return _impl_.bhideskillsonhud_;
}
inline bool APoplarPlayerController::bhideskillsonhud() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bHideSkillsOnHUD)
  return _internal_bhideskillsonhud();
}
inline void APoplarPlayerController::_internal_set_bhideskillsonhud(bool value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.bhideskillsonhud_ = value;
}
inline void APoplarPlayerController::set_bhideskillsonhud(bool value) {
  _internal_set_bhideskillsonhud(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bHideSkillsOnHUD)
}

// required bool bHideXPOnHUD = 33;
inline bool APoplarPlayerController::_internal_has_bhidexponhud() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bhidexponhud() const {
  return _internal_has_bhidexponhud();
}
inline void APoplarPlayerController::clear_bhidexponhud() {
  _impl_.bhidexponhud_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool APoplarPlayerController::_internal_bhidexponhud() const {
  return _impl_.bhidexponhud_;
}
inline bool APoplarPlayerController::bhidexponhud() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bHideXPOnHUD)
  return _internal_bhidexponhud();
}
inline void APoplarPlayerController::_internal_set_bhidexponhud(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.bhidexponhud_ = value;
}
inline void APoplarPlayerController::set_bhidexponhud(bool value) {
  _internal_set_bhidexponhud(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bHideXPOnHUD)
}

// required bool bConsoleController = 34;
inline bool APoplarPlayerController::_internal_has_bconsolecontroller() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bconsolecontroller() const {
  return _internal_has_bconsolecontroller();
}
inline void APoplarPlayerController::clear_bconsolecontroller() {
  _impl_.bconsolecontroller_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool APoplarPlayerController::_internal_bconsolecontroller() const {
  return _impl_.bconsolecontroller_;
}
inline bool APoplarPlayerController::bconsolecontroller() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bConsoleController)
  return _internal_bconsolecontroller();
}
inline void APoplarPlayerController::_internal_set_bconsolecontroller(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.bconsolecontroller_ = value;
}
inline void APoplarPlayerController::set_bconsolecontroller(bool value) {
  _internal_set_bconsolecontroller(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bConsoleController)
}

// required bool bDisplayTradeIcon = 35;
inline bool APoplarPlayerController::_internal_has_bdisplaytradeicon() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bdisplaytradeicon() const {
  return _internal_has_bdisplaytradeicon();
}
inline void APoplarPlayerController::clear_bdisplaytradeicon() {
  _impl_.bdisplaytradeicon_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool APoplarPlayerController::_internal_bdisplaytradeicon() const {
  return _impl_.bdisplaytradeicon_;
}
inline bool APoplarPlayerController::bdisplaytradeicon() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bDisplayTradeIcon)
  return _internal_bdisplaytradeicon();
}
inline void APoplarPlayerController::_internal_set_bdisplaytradeicon(bool value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.bdisplaytradeicon_ = value;
}
inline void APoplarPlayerController::set_bdisplaytradeicon(bool value) {
  _internal_set_bdisplaytradeicon(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bDisplayTradeIcon)
}

// required bool bDisplayTradeDisabledIcon = 36;
inline bool APoplarPlayerController::_internal_has_bdisplaytradedisabledicon() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bdisplaytradedisabledicon() const {
  return _internal_has_bdisplaytradedisabledicon();
}
inline void APoplarPlayerController::clear_bdisplaytradedisabledicon() {
  _impl_.bdisplaytradedisabledicon_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool APoplarPlayerController::_internal_bdisplaytradedisabledicon() const {
  return _impl_.bdisplaytradedisabledicon_;
}
inline bool APoplarPlayerController::bdisplaytradedisabledicon() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bDisplayTradeDisabledIcon)
  return _internal_bdisplaytradedisabledicon();
}
inline void APoplarPlayerController::_internal_set_bdisplaytradedisabledicon(bool value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.bdisplaytradedisabledicon_ = value;
}
inline void APoplarPlayerController::set_bdisplaytradedisabledicon(bool value) {
  _internal_set_bdisplaytradedisabledicon(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bDisplayTradeDisabledIcon)
}

// required bool bResurrectAll = 37;
inline bool APoplarPlayerController::_internal_has_bresurrectall() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bresurrectall() const {
  return _internal_has_bresurrectall();
}
inline void APoplarPlayerController::clear_bresurrectall() {
  _impl_.bresurrectall_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool APoplarPlayerController::_internal_bresurrectall() const {
  return _impl_.bresurrectall_;
}
inline bool APoplarPlayerController::bresurrectall() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bResurrectAll)
  return _internal_bresurrectall();
}
inline void APoplarPlayerController::_internal_set_bresurrectall(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.bresurrectall_ = value;
}
inline void APoplarPlayerController::set_bresurrectall(bool value) {
  _internal_set_bresurrectall(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bResurrectAll)
}

// required bool bPlayingTeleporterSound = 38;
inline bool APoplarPlayerController::_internal_has_bplayingteleportersound() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_bplayingteleportersound() const {
  return _internal_has_bplayingteleportersound();
}
inline void APoplarPlayerController::clear_bplayingteleportersound() {
  _impl_.bplayingteleportersound_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool APoplarPlayerController::_internal_bplayingteleportersound() const {
  return _impl_.bplayingteleportersound_;
}
inline bool APoplarPlayerController::bplayingteleportersound() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.bPlayingTeleporterSound)
  return _internal_bplayingteleportersound();
}
inline void APoplarPlayerController::_internal_set_bplayingteleportersound(bool value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.bplayingteleportersound_ = value;
}
inline void APoplarPlayerController::set_bplayingteleportersound(bool value) {
  _internal_set_bplayingteleportersound(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.bPlayingTeleporterSound)
}

// required .HederaDefinitions.ReplicatedActorReference MyWillowPawn = 39;
inline bool APoplarPlayerController::_internal_has_mywillowpawn() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mywillowpawn_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_mywillowpawn() const {
  return _internal_has_mywillowpawn();
}
inline void APoplarPlayerController::clear_mywillowpawn() {
  if (_impl_.mywillowpawn_ != nullptr) _impl_.mywillowpawn_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_mywillowpawn() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.mywillowpawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::mywillowpawn() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.MyWillowPawn)
  return _internal_mywillowpawn();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_mywillowpawn(
    ::HederaDefinitions::ReplicatedActorReference* mywillowpawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mywillowpawn_);
  }
  _impl_.mywillowpawn_ = mywillowpawn;
  if (mywillowpawn) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.MyWillowPawn)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_mywillowpawn() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.mywillowpawn_;
  _impl_.mywillowpawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_mywillowpawn() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.MyWillowPawn)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.mywillowpawn_;
  _impl_.mywillowpawn_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_mywillowpawn() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.mywillowpawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.mywillowpawn_ = p;
  }
  return _impl_.mywillowpawn_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_mywillowpawn() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_mywillowpawn();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.MyWillowPawn)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_mywillowpawn(::HederaDefinitions::ReplicatedActorReference* mywillowpawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mywillowpawn_;
  }
  if (mywillowpawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mywillowpawn);
    if (message_arena != submessage_arena) {
      mywillowpawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mywillowpawn, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.mywillowpawn_ = mywillowpawn;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.MyWillowPawn)
}

// required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Object = 40;
inline bool APoplarPlayerController::_internal_has_currentusableobject_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.currentusableobject_object_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_currentusableobject_object() const {
  return _internal_has_currentusableobject_object();
}
inline void APoplarPlayerController::clear_currentusableobject_object() {
  if (_impl_.currentusableobject_object_ != nullptr) _impl_.currentusableobject_object_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerController::_internal_currentusableobject_object() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.currentusableobject_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerController::currentusableobject_object() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Object)
  return _internal_currentusableobject_object();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_currentusableobject_object(
    ::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.currentusableobject_object_);
  }
  _impl_.currentusableobject_object_ = currentusableobject_object;
  if (currentusableobject_object) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Object)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::release_currentusableobject_object() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.currentusableobject_object_;
  _impl_.currentusableobject_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::unsafe_arena_release_currentusableobject_object() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Object)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.currentusableobject_object_;
  _impl_.currentusableobject_object_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::_internal_mutable_currentusableobject_object() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.currentusableobject_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.currentusableobject_object_ = p;
  }
  return _impl_.currentusableobject_object_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::mutable_currentusableobject_object() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_currentusableobject_object();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Object)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_currentusableobject_object(::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.currentusableobject_object_;
  }
  if (currentusableobject_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currentusableobject_object);
    if (message_arena != submessage_arena) {
      currentusableobject_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentusableobject_object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.currentusableobject_object_ = currentusableobject_object;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Object)
}

// required .HederaDefinitions.NonReplicatedObjectReference CurrentUsableObject_Interface = 41;
inline bool APoplarPlayerController::_internal_has_currentusableobject_interface() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.currentusableobject_interface_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_currentusableobject_interface() const {
  return _internal_has_currentusableobject_interface();
}
inline void APoplarPlayerController::clear_currentusableobject_interface() {
  if (_impl_.currentusableobject_interface_ != nullptr) _impl_.currentusableobject_interface_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerController::_internal_currentusableobject_interface() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.currentusableobject_interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerController::currentusableobject_interface() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Interface)
  return _internal_currentusableobject_interface();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_currentusableobject_interface(
    ::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.currentusableobject_interface_);
  }
  _impl_.currentusableobject_interface_ = currentusableobject_interface;
  if (currentusableobject_interface) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Interface)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::release_currentusableobject_interface() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.currentusableobject_interface_;
  _impl_.currentusableobject_interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::unsafe_arena_release_currentusableobject_interface() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Interface)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.currentusableobject_interface_;
  _impl_.currentusableobject_interface_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::_internal_mutable_currentusableobject_interface() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.currentusableobject_interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.currentusableobject_interface_ = p;
  }
  return _impl_.currentusableobject_interface_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerController::mutable_currentusableobject_interface() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_currentusableobject_interface();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Interface)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_currentusableobject_interface(::HederaDefinitions::NonReplicatedObjectReference* currentusableobject_interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.currentusableobject_interface_;
  }
  if (currentusableobject_interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currentusableobject_interface);
    if (message_arena != submessage_arena) {
      currentusableobject_interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentusableobject_interface, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.currentusableobject_interface_ = currentusableobject_interface;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.CurrentUsableObject_Interface)
}

// repeated .HederaDefinitions.FInteractionIconWithOverrides CurrentInteractionIcon = 42;
inline int APoplarPlayerController::_internal_currentinteractionicon_size() const {
  return _impl_.currentinteractionicon_.size();
}
inline int APoplarPlayerController::currentinteractionicon_size() const {
  return _internal_currentinteractionicon_size();
}
inline void APoplarPlayerController::clear_currentinteractionicon() {
  _impl_.currentinteractionicon_.Clear();
}
inline ::HederaDefinitions::FInteractionIconWithOverrides* APoplarPlayerController::mutable_currentinteractionicon(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.CurrentInteractionIcon)
  return _impl_.currentinteractionicon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FInteractionIconWithOverrides >*
APoplarPlayerController::mutable_currentinteractionicon() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerController.CurrentInteractionIcon)
  return &_impl_.currentinteractionicon_;
}
inline const ::HederaDefinitions::FInteractionIconWithOverrides& APoplarPlayerController::_internal_currentinteractionicon(int index) const {
  return _impl_.currentinteractionicon_.Get(index);
}
inline const ::HederaDefinitions::FInteractionIconWithOverrides& APoplarPlayerController::currentinteractionicon(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.CurrentInteractionIcon)
  return _internal_currentinteractionicon(index);
}
inline ::HederaDefinitions::FInteractionIconWithOverrides* APoplarPlayerController::_internal_add_currentinteractionicon() {
  return _impl_.currentinteractionicon_.Add();
}
inline ::HederaDefinitions::FInteractionIconWithOverrides* APoplarPlayerController::add_currentinteractionicon() {
  ::HederaDefinitions::FInteractionIconWithOverrides* _add = _internal_add_currentinteractionicon();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerController.CurrentInteractionIcon)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FInteractionIconWithOverrides >&
APoplarPlayerController::currentinteractionicon() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerController.CurrentInteractionIcon)
  return _impl_.currentinteractionicon_;
}

// required .HederaDefinitions.FReplicatedDamageScreenParticle RecentDamageScreenParticle = 43;
inline bool APoplarPlayerController::_internal_has_recentdamagescreenparticle() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recentdamagescreenparticle_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_recentdamagescreenparticle() const {
  return _internal_has_recentdamagescreenparticle();
}
inline void APoplarPlayerController::clear_recentdamagescreenparticle() {
  if (_impl_.recentdamagescreenparticle_ != nullptr) _impl_.recentdamagescreenparticle_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::HederaDefinitions::FReplicatedDamageScreenParticle& APoplarPlayerController::_internal_recentdamagescreenparticle() const {
  const ::HederaDefinitions::FReplicatedDamageScreenParticle* p = _impl_.recentdamagescreenparticle_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FReplicatedDamageScreenParticle&>(
      ::HederaDefinitions::_FReplicatedDamageScreenParticle_default_instance_);
}
inline const ::HederaDefinitions::FReplicatedDamageScreenParticle& APoplarPlayerController::recentdamagescreenparticle() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.RecentDamageScreenParticle)
  return _internal_recentdamagescreenparticle();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_recentdamagescreenparticle(
    ::HederaDefinitions::FReplicatedDamageScreenParticle* recentdamagescreenparticle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recentdamagescreenparticle_);
  }
  _impl_.recentdamagescreenparticle_ = recentdamagescreenparticle;
  if (recentdamagescreenparticle) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.RecentDamageScreenParticle)
}
inline ::HederaDefinitions::FReplicatedDamageScreenParticle* APoplarPlayerController::release_recentdamagescreenparticle() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::HederaDefinitions::FReplicatedDamageScreenParticle* temp = _impl_.recentdamagescreenparticle_;
  _impl_.recentdamagescreenparticle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FReplicatedDamageScreenParticle* APoplarPlayerController::unsafe_arena_release_recentdamagescreenparticle() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.RecentDamageScreenParticle)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::HederaDefinitions::FReplicatedDamageScreenParticle* temp = _impl_.recentdamagescreenparticle_;
  _impl_.recentdamagescreenparticle_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FReplicatedDamageScreenParticle* APoplarPlayerController::_internal_mutable_recentdamagescreenparticle() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.recentdamagescreenparticle_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FReplicatedDamageScreenParticle>(GetArenaForAllocation());
    _impl_.recentdamagescreenparticle_ = p;
  }
  return _impl_.recentdamagescreenparticle_;
}
inline ::HederaDefinitions::FReplicatedDamageScreenParticle* APoplarPlayerController::mutable_recentdamagescreenparticle() {
  ::HederaDefinitions::FReplicatedDamageScreenParticle* _msg = _internal_mutable_recentdamagescreenparticle();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.RecentDamageScreenParticle)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_recentdamagescreenparticle(::HederaDefinitions::FReplicatedDamageScreenParticle* recentdamagescreenparticle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recentdamagescreenparticle_;
  }
  if (recentdamagescreenparticle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recentdamagescreenparticle);
    if (message_arena != submessage_arena) {
      recentdamagescreenparticle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recentdamagescreenparticle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.recentdamagescreenparticle_ = recentdamagescreenparticle;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.RecentDamageScreenParticle)
}

// required float FOVModifierSpeed = 44;
inline bool APoplarPlayerController::_internal_has_fovmodifierspeed() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_fovmodifierspeed() const {
  return _internal_has_fovmodifierspeed();
}
inline void APoplarPlayerController::clear_fovmodifierspeed() {
  _impl_.fovmodifierspeed_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline float APoplarPlayerController::_internal_fovmodifierspeed() const {
  return _impl_.fovmodifierspeed_;
}
inline float APoplarPlayerController::fovmodifierspeed() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.FOVModifierSpeed)
  return _internal_fovmodifierspeed();
}
inline void APoplarPlayerController::_internal_set_fovmodifierspeed(float value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.fovmodifierspeed_ = value;
}
inline void APoplarPlayerController::set_fovmodifierspeed(float value) {
  _internal_set_fovmodifierspeed(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.FOVModifierSpeed)
}

// required float FOVModifierSpeedBaseValue = 45;
inline bool APoplarPlayerController::_internal_has_fovmodifierspeedbasevalue() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_fovmodifierspeedbasevalue() const {
  return _internal_has_fovmodifierspeedbasevalue();
}
inline void APoplarPlayerController::clear_fovmodifierspeedbasevalue() {
  _impl_.fovmodifierspeedbasevalue_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline float APoplarPlayerController::_internal_fovmodifierspeedbasevalue() const {
  return _impl_.fovmodifierspeedbasevalue_;
}
inline float APoplarPlayerController::fovmodifierspeedbasevalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.FOVModifierSpeedBaseValue)
  return _internal_fovmodifierspeedbasevalue();
}
inline void APoplarPlayerController::_internal_set_fovmodifierspeedbasevalue(float value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.fovmodifierspeedbasevalue_ = value;
}
inline void APoplarPlayerController::set_fovmodifierspeedbasevalue(float value) {
  _internal_set_fovmodifierspeedbasevalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.FOVModifierSpeedBaseValue)
}

// required float PostProcessDurationMultiplier = 46;
inline bool APoplarPlayerController::_internal_has_postprocessdurationmultiplier() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_postprocessdurationmultiplier() const {
  return _internal_has_postprocessdurationmultiplier();
}
inline void APoplarPlayerController::clear_postprocessdurationmultiplier() {
  _impl_.postprocessdurationmultiplier_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline float APoplarPlayerController::_internal_postprocessdurationmultiplier() const {
  return _impl_.postprocessdurationmultiplier_;
}
inline float APoplarPlayerController::postprocessdurationmultiplier() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.PostProcessDurationMultiplier)
  return _internal_postprocessdurationmultiplier();
}
inline void APoplarPlayerController::_internal_set_postprocessdurationmultiplier(float value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.postprocessdurationmultiplier_ = value;
}
inline void APoplarPlayerController::set_postprocessdurationmultiplier(float value) {
  _internal_set_postprocessdurationmultiplier(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.PostProcessDurationMultiplier)
}

// required .HederaDefinitions.FReplicatedProgressBarData UseProgressBar = 47;
inline bool APoplarPlayerController::_internal_has_useprogressbar() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.useprogressbar_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_useprogressbar() const {
  return _internal_has_useprogressbar();
}
inline void APoplarPlayerController::clear_useprogressbar() {
  if (_impl_.useprogressbar_ != nullptr) _impl_.useprogressbar_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::HederaDefinitions::FReplicatedProgressBarData& APoplarPlayerController::_internal_useprogressbar() const {
  const ::HederaDefinitions::FReplicatedProgressBarData* p = _impl_.useprogressbar_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FReplicatedProgressBarData&>(
      ::HederaDefinitions::_FReplicatedProgressBarData_default_instance_);
}
inline const ::HederaDefinitions::FReplicatedProgressBarData& APoplarPlayerController::useprogressbar() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.UseProgressBar)
  return _internal_useprogressbar();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_useprogressbar(
    ::HederaDefinitions::FReplicatedProgressBarData* useprogressbar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useprogressbar_);
  }
  _impl_.useprogressbar_ = useprogressbar;
  if (useprogressbar) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.UseProgressBar)
}
inline ::HederaDefinitions::FReplicatedProgressBarData* APoplarPlayerController::release_useprogressbar() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::HederaDefinitions::FReplicatedProgressBarData* temp = _impl_.useprogressbar_;
  _impl_.useprogressbar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FReplicatedProgressBarData* APoplarPlayerController::unsafe_arena_release_useprogressbar() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.UseProgressBar)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::HederaDefinitions::FReplicatedProgressBarData* temp = _impl_.useprogressbar_;
  _impl_.useprogressbar_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FReplicatedProgressBarData* APoplarPlayerController::_internal_mutable_useprogressbar() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.useprogressbar_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FReplicatedProgressBarData>(GetArenaForAllocation());
    _impl_.useprogressbar_ = p;
  }
  return _impl_.useprogressbar_;
}
inline ::HederaDefinitions::FReplicatedProgressBarData* APoplarPlayerController::mutable_useprogressbar() {
  ::HederaDefinitions::FReplicatedProgressBarData* _msg = _internal_mutable_useprogressbar();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.UseProgressBar)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_useprogressbar(::HederaDefinitions::FReplicatedProgressBarData* useprogressbar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.useprogressbar_;
  }
  if (useprogressbar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(useprogressbar);
    if (message_arena != submessage_arena) {
      useprogressbar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useprogressbar, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.useprogressbar_ = useprogressbar;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.UseProgressBar)
}

// required int32 TargetedWarningSeverity = 48;
inline bool APoplarPlayerController::_internal_has_targetedwarningseverity() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_targetedwarningseverity() const {
  return _internal_has_targetedwarningseverity();
}
inline void APoplarPlayerController::clear_targetedwarningseverity() {
  _impl_.targetedwarningseverity_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline int32_t APoplarPlayerController::_internal_targetedwarningseverity() const {
  return _impl_.targetedwarningseverity_;
}
inline int32_t APoplarPlayerController::targetedwarningseverity() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.TargetedWarningSeverity)
  return _internal_targetedwarningseverity();
}
inline void APoplarPlayerController::_internal_set_targetedwarningseverity(int32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.targetedwarningseverity_ = value;
}
inline void APoplarPlayerController::set_targetedwarningseverity(int32_t value) {
  _internal_set_targetedwarningseverity(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.TargetedWarningSeverity)
}

// required .HederaDefinitions.FCameraViewData ReplicatedCameraViewData = 49;
inline bool APoplarPlayerController::_internal_has_replicatedcameraviewdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replicatedcameraviewdata_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_replicatedcameraviewdata() const {
  return _internal_has_replicatedcameraviewdata();
}
inline void APoplarPlayerController::clear_replicatedcameraviewdata() {
  if (_impl_.replicatedcameraviewdata_ != nullptr) _impl_.replicatedcameraviewdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::HederaDefinitions::FCameraViewData& APoplarPlayerController::_internal_replicatedcameraviewdata() const {
  const ::HederaDefinitions::FCameraViewData* p = _impl_.replicatedcameraviewdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FCameraViewData&>(
      ::HederaDefinitions::_FCameraViewData_default_instance_);
}
inline const ::HederaDefinitions::FCameraViewData& APoplarPlayerController::replicatedcameraviewdata() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.ReplicatedCameraViewData)
  return _internal_replicatedcameraviewdata();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_replicatedcameraviewdata(
    ::HederaDefinitions::FCameraViewData* replicatedcameraviewdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replicatedcameraviewdata_);
  }
  _impl_.replicatedcameraviewdata_ = replicatedcameraviewdata;
  if (replicatedcameraviewdata) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.ReplicatedCameraViewData)
}
inline ::HederaDefinitions::FCameraViewData* APoplarPlayerController::release_replicatedcameraviewdata() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::HederaDefinitions::FCameraViewData* temp = _impl_.replicatedcameraviewdata_;
  _impl_.replicatedcameraviewdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FCameraViewData* APoplarPlayerController::unsafe_arena_release_replicatedcameraviewdata() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.ReplicatedCameraViewData)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::HederaDefinitions::FCameraViewData* temp = _impl_.replicatedcameraviewdata_;
  _impl_.replicatedcameraviewdata_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FCameraViewData* APoplarPlayerController::_internal_mutable_replicatedcameraviewdata() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.replicatedcameraviewdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FCameraViewData>(GetArenaForAllocation());
    _impl_.replicatedcameraviewdata_ = p;
  }
  return _impl_.replicatedcameraviewdata_;
}
inline ::HederaDefinitions::FCameraViewData* APoplarPlayerController::mutable_replicatedcameraviewdata() {
  ::HederaDefinitions::FCameraViewData* _msg = _internal_mutable_replicatedcameraviewdata();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.ReplicatedCameraViewData)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_replicatedcameraviewdata(::HederaDefinitions::FCameraViewData* replicatedcameraviewdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.replicatedcameraviewdata_;
  }
  if (replicatedcameraviewdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replicatedcameraviewdata);
    if (message_arena != submessage_arena) {
      replicatedcameraviewdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicatedcameraviewdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.replicatedcameraviewdata_ = replicatedcameraviewdata;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.ReplicatedCameraViewData)
}

// required .HederaDefinitions.ReplicatedActorReference PipelineSummaryHistoryManager = 50;
inline bool APoplarPlayerController::_internal_has_pipelinesummaryhistorymanager() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pipelinesummaryhistorymanager_ != nullptr);
  return value;
}
inline bool APoplarPlayerController::has_pipelinesummaryhistorymanager() const {
  return _internal_has_pipelinesummaryhistorymanager();
}
inline void APoplarPlayerController::clear_pipelinesummaryhistorymanager() {
  if (_impl_.pipelinesummaryhistorymanager_ != nullptr) _impl_.pipelinesummaryhistorymanager_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::_internal_pipelinesummaryhistorymanager() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.pipelinesummaryhistorymanager_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerController::pipelinesummaryhistorymanager() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.PipelineSummaryHistoryManager)
  return _internal_pipelinesummaryhistorymanager();
}
inline void APoplarPlayerController::unsafe_arena_set_allocated_pipelinesummaryhistorymanager(
    ::HederaDefinitions::ReplicatedActorReference* pipelinesummaryhistorymanager) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pipelinesummaryhistorymanager_);
  }
  _impl_.pipelinesummaryhistorymanager_ = pipelinesummaryhistorymanager;
  if (pipelinesummaryhistorymanager) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerController.PipelineSummaryHistoryManager)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::release_pipelinesummaryhistorymanager() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.pipelinesummaryhistorymanager_;
  _impl_.pipelinesummaryhistorymanager_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::unsafe_arena_release_pipelinesummaryhistorymanager() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerController.PipelineSummaryHistoryManager)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.pipelinesummaryhistorymanager_;
  _impl_.pipelinesummaryhistorymanager_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::_internal_mutable_pipelinesummaryhistorymanager() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.pipelinesummaryhistorymanager_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.pipelinesummaryhistorymanager_ = p;
  }
  return _impl_.pipelinesummaryhistorymanager_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerController::mutable_pipelinesummaryhistorymanager() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_pipelinesummaryhistorymanager();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.PipelineSummaryHistoryManager)
  return _msg;
}
inline void APoplarPlayerController::set_allocated_pipelinesummaryhistorymanager(::HederaDefinitions::ReplicatedActorReference* pipelinesummaryhistorymanager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pipelinesummaryhistorymanager_;
  }
  if (pipelinesummaryhistorymanager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pipelinesummaryhistorymanager);
    if (message_arena != submessage_arena) {
      pipelinesummaryhistorymanager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pipelinesummaryhistorymanager, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.pipelinesummaryhistorymanager_ = pipelinesummaryhistorymanager;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerController.PipelineSummaryHistoryManager)
}

// repeated .HederaDefinitions.FActorSelectionDataContainer MinimapActorSelectData = 51;
inline int APoplarPlayerController::_internal_minimapactorselectdata_size() const {
  return _impl_.minimapactorselectdata_.size();
}
inline int APoplarPlayerController::minimapactorselectdata_size() const {
  return _internal_minimapactorselectdata_size();
}
inline void APoplarPlayerController::clear_minimapactorselectdata() {
  _impl_.minimapactorselectdata_.Clear();
}
inline ::HederaDefinitions::FActorSelectionDataContainer* APoplarPlayerController::mutable_minimapactorselectdata(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerController.MinimapActorSelectData)
  return _impl_.minimapactorselectdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FActorSelectionDataContainer >*
APoplarPlayerController::mutable_minimapactorselectdata() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerController.MinimapActorSelectData)
  return &_impl_.minimapactorselectdata_;
}
inline const ::HederaDefinitions::FActorSelectionDataContainer& APoplarPlayerController::_internal_minimapactorselectdata(int index) const {
  return _impl_.minimapactorselectdata_.Get(index);
}
inline const ::HederaDefinitions::FActorSelectionDataContainer& APoplarPlayerController::minimapactorselectdata(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.MinimapActorSelectData)
  return _internal_minimapactorselectdata(index);
}
inline ::HederaDefinitions::FActorSelectionDataContainer* APoplarPlayerController::_internal_add_minimapactorselectdata() {
  return _impl_.minimapactorselectdata_.Add();
}
inline ::HederaDefinitions::FActorSelectionDataContainer* APoplarPlayerController::add_minimapactorselectdata() {
  ::HederaDefinitions::FActorSelectionDataContainer* _add = _internal_add_minimapactorselectdata();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerController.MinimapActorSelectData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FActorSelectionDataContainer >&
APoplarPlayerController::minimapactorselectdata() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerController.MinimapActorSelectData)
  return _impl_.minimapactorselectdata_;
}

// required int32 CurrentMinimapActorSelectionIndex = 52;
inline bool APoplarPlayerController::_internal_has_currentminimapactorselectionindex() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool APoplarPlayerController::has_currentminimapactorselectionindex() const {
  return _internal_has_currentminimapactorselectionindex();
}
inline void APoplarPlayerController::clear_currentminimapactorselectionindex() {
  _impl_.currentminimapactorselectionindex_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline int32_t APoplarPlayerController::_internal_currentminimapactorselectionindex() const {
  return _impl_.currentminimapactorselectionindex_;
}
inline int32_t APoplarPlayerController::currentminimapactorselectionindex() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerController.CurrentMinimapActorSelectionIndex)
  return _internal_currentminimapactorselectionindex();
}
inline void APoplarPlayerController::_internal_set_currentminimapactorselectionindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.currentminimapactorselectionindex_ = value;
}
inline void APoplarPlayerController::set_currentminimapactorselectionindex(int32_t value) {
  _internal_set_currentminimapactorselectionindex(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerController.CurrentMinimapActorSelectionIndex)
}

// -------------------------------------------------------------------

// FUniqueID

// repeated int32 RawID = 1;
inline int FUniqueID::_internal_rawid_size() const {
  return _impl_.rawid_.size();
}
inline int FUniqueID::rawid_size() const {
  return _internal_rawid_size();
}
inline void FUniqueID::clear_rawid() {
  _impl_.rawid_.Clear();
}
inline int32_t FUniqueID::_internal_rawid(int index) const {
  return _impl_.rawid_.Get(index);
}
inline int32_t FUniqueID::rawid(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FUniqueID.RawID)
  return _internal_rawid(index);
}
inline void FUniqueID::set_rawid(int index, int32_t value) {
  _impl_.rawid_.Set(index, value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FUniqueID.RawID)
}
inline void FUniqueID::_internal_add_rawid(int32_t value) {
  _impl_.rawid_.Add(value);
}
inline void FUniqueID::add_rawid(int32_t value) {
  _internal_add_rawid(value);
  // @@protoc_insertion_point(field_add:HederaDefinitions.FUniqueID.RawID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FUniqueID::_internal_rawid() const {
  return _impl_.rawid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FUniqueID::rawid() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FUniqueID.RawID)
  return _internal_rawid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FUniqueID::_internal_mutable_rawid() {
  return &_impl_.rawid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FUniqueID::mutable_rawid() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FUniqueID.RawID)
  return _internal_mutable_rawid();
}

// required bool bHasValue = 2;
inline bool FUniqueID::_internal_has_bhasvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FUniqueID::has_bhasvalue() const {
  return _internal_has_bhasvalue();
}
inline void FUniqueID::clear_bhasvalue() {
  _impl_.bhasvalue_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FUniqueID::_internal_bhasvalue() const {
  return _impl_.bhasvalue_;
}
inline bool FUniqueID::bhasvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FUniqueID.bHasValue)
  return _internal_bhasvalue();
}
inline void FUniqueID::_internal_set_bhasvalue(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhasvalue_ = value;
}
inline void FUniqueID::set_bhasvalue(bool value) {
  _internal_set_bhasvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FUniqueID.bHasValue)
}

// -------------------------------------------------------------------

// FCurrencyState

// required int32 Type = 1;
inline bool FCurrencyState::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FCurrencyState::has_type() const {
  return _internal_has_type();
}
inline void FCurrencyState::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FCurrencyState::_internal_type() const {
  return _impl_.type_;
}
inline int32_t FCurrencyState::type() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCurrencyState.Type)
  return _internal_type();
}
inline void FCurrencyState::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void FCurrencyState::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCurrencyState.Type)
}

// required float CurrentAmount = 2;
inline bool FCurrencyState::_internal_has_currentamount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FCurrencyState::has_currentamount() const {
  return _internal_has_currentamount();
}
inline void FCurrencyState::clear_currentamount() {
  _impl_.currentamount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FCurrencyState::_internal_currentamount() const {
  return _impl_.currentamount_;
}
inline float FCurrencyState::currentamount() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCurrencyState.CurrentAmount)
  return _internal_currentamount();
}
inline void FCurrencyState::_internal_set_currentamount(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.currentamount_ = value;
}
inline void FCurrencyState::set_currentamount(float value) {
  _internal_set_currentamount(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCurrencyState.CurrentAmount)
}

// required float LastKnownAmount = 3;
inline bool FCurrencyState::_internal_has_lastknownamount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FCurrencyState::has_lastknownamount() const {
  return _internal_has_lastknownamount();
}
inline void FCurrencyState::clear_lastknownamount() {
  _impl_.lastknownamount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FCurrencyState::_internal_lastknownamount() const {
  return _impl_.lastknownamount_;
}
inline float FCurrencyState::lastknownamount() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCurrencyState.LastKnownAmount)
  return _internal_lastknownamount();
}
inline void FCurrencyState::_internal_set_lastknownamount(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lastknownamount_ = value;
}
inline void FCurrencyState::set_lastknownamount(float value) {
  _internal_set_lastknownamount(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCurrencyState.LastKnownAmount)
}

// -------------------------------------------------------------------

// FResourcePoolReference

// required .HederaDefinitions.ReplicatedActorReference PoolManager = 1;
inline bool FResourcePoolReference::_internal_has_poolmanager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poolmanager_ != nullptr);
  return value;
}
inline bool FResourcePoolReference::has_poolmanager() const {
  return _internal_has_poolmanager();
}
inline void FResourcePoolReference::clear_poolmanager() {
  if (_impl_.poolmanager_ != nullptr) _impl_.poolmanager_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& FResourcePoolReference::_internal_poolmanager() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.poolmanager_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& FResourcePoolReference::poolmanager() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FResourcePoolReference.PoolManager)
  return _internal_poolmanager();
}
inline void FResourcePoolReference::unsafe_arena_set_allocated_poolmanager(
    ::HederaDefinitions::ReplicatedActorReference* poolmanager) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poolmanager_);
  }
  _impl_.poolmanager_ = poolmanager;
  if (poolmanager) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FResourcePoolReference.PoolManager)
}
inline ::HederaDefinitions::ReplicatedActorReference* FResourcePoolReference::release_poolmanager() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.poolmanager_;
  _impl_.poolmanager_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* FResourcePoolReference::unsafe_arena_release_poolmanager() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FResourcePoolReference.PoolManager)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.poolmanager_;
  _impl_.poolmanager_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* FResourcePoolReference::_internal_mutable_poolmanager() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.poolmanager_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.poolmanager_ = p;
  }
  return _impl_.poolmanager_;
}
inline ::HederaDefinitions::ReplicatedActorReference* FResourcePoolReference::mutable_poolmanager() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_poolmanager();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FResourcePoolReference.PoolManager)
  return _msg;
}
inline void FResourcePoolReference::set_allocated_poolmanager(::HederaDefinitions::ReplicatedActorReference* poolmanager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.poolmanager_;
  }
  if (poolmanager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(poolmanager);
    if (message_arena != submessage_arena) {
      poolmanager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poolmanager, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.poolmanager_ = poolmanager;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FResourcePoolReference.PoolManager)
}

// required int32 PoolIndexInManager = 2;
inline bool FResourcePoolReference::_internal_has_poolindexinmanager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FResourcePoolReference::has_poolindexinmanager() const {
  return _internal_has_poolindexinmanager();
}
inline void FResourcePoolReference::clear_poolindexinmanager() {
  _impl_.poolindexinmanager_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FResourcePoolReference::_internal_poolindexinmanager() const {
  return _impl_.poolindexinmanager_;
}
inline int32_t FResourcePoolReference::poolindexinmanager() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FResourcePoolReference.PoolIndexInManager)
  return _internal_poolindexinmanager();
}
inline void FResourcePoolReference::_internal_set_poolindexinmanager(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.poolindexinmanager_ = value;
}
inline void FResourcePoolReference::set_poolindexinmanager(int32_t value) {
  _internal_set_poolindexinmanager(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FResourcePoolReference.PoolIndexInManager)
}

// required int32 PoolGUID = 3;
inline bool FResourcePoolReference::_internal_has_poolguid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FResourcePoolReference::has_poolguid() const {
  return _internal_has_poolguid();
}
inline void FResourcePoolReference::clear_poolguid() {
  _impl_.poolguid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t FResourcePoolReference::_internal_poolguid() const {
  return _impl_.poolguid_;
}
inline int32_t FResourcePoolReference::poolguid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FResourcePoolReference.PoolGUID)
  return _internal_poolguid();
}
inline void FResourcePoolReference::_internal_set_poolguid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.poolguid_ = value;
}
inline void FResourcePoolReference::set_poolguid(int32_t value) {
  _internal_set_poolguid(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FResourcePoolReference.PoolGUID)
}

// required .HederaDefinitions.NonReplicatedObjectReference Data = 4;
inline bool FResourcePoolReference::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool FResourcePoolReference::has_data() const {
  return _internal_has_data();
}
inline void FResourcePoolReference::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FResourcePoolReference::_internal_data() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FResourcePoolReference::data() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FResourcePoolReference.Data)
  return _internal_data();
}
inline void FResourcePoolReference::unsafe_arena_set_allocated_data(
    ::HederaDefinitions::NonReplicatedObjectReference* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FResourcePoolReference.Data)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FResourcePoolReference::release_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FResourcePoolReference::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FResourcePoolReference.Data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FResourcePoolReference::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FResourcePoolReference::mutable_data() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FResourcePoolReference.Data)
  return _msg;
}
inline void FResourcePoolReference::set_allocated_data(::HederaDefinitions::NonReplicatedObjectReference* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FResourcePoolReference.Data)
}

// -------------------------------------------------------------------

// FReplicatedNounAttributeState

// required .HederaDefinitions.FName NounName = 1;
inline bool FReplicatedNounAttributeState::_internal_has_nounname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nounname_ != nullptr);
  return value;
}
inline bool FReplicatedNounAttributeState::has_nounname() const {
  return _internal_has_nounname();
}
inline void FReplicatedNounAttributeState::clear_nounname() {
  if (_impl_.nounname_ != nullptr) _impl_.nounname_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FName& FReplicatedNounAttributeState::_internal_nounname() const {
  const ::HederaDefinitions::FName* p = _impl_.nounname_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FName&>(
      ::HederaDefinitions::_FName_default_instance_);
}
inline const ::HederaDefinitions::FName& FReplicatedNounAttributeState::nounname() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedNounAttributeState.NounName)
  return _internal_nounname();
}
inline void FReplicatedNounAttributeState::unsafe_arena_set_allocated_nounname(
    ::HederaDefinitions::FName* nounname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nounname_);
  }
  _impl_.nounname_ = nounname;
  if (nounname) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedNounAttributeState.NounName)
}
inline ::HederaDefinitions::FName* FReplicatedNounAttributeState::release_nounname() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.nounname_;
  _impl_.nounname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FName* FReplicatedNounAttributeState::unsafe_arena_release_nounname() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedNounAttributeState.NounName)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FName* temp = _impl_.nounname_;
  _impl_.nounname_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FName* FReplicatedNounAttributeState::_internal_mutable_nounname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nounname_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FName>(GetArenaForAllocation());
    _impl_.nounname_ = p;
  }
  return _impl_.nounname_;
}
inline ::HederaDefinitions::FName* FReplicatedNounAttributeState::mutable_nounname() {
  ::HederaDefinitions::FName* _msg = _internal_mutable_nounname();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedNounAttributeState.NounName)
  return _msg;
}
inline void FReplicatedNounAttributeState::set_allocated_nounname(::HederaDefinitions::FName* nounname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nounname_;
  }
  if (nounname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nounname);
    if (message_arena != submessage_arena) {
      nounname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nounname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nounname_ = nounname;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedNounAttributeState.NounName)
}

// required float Value = 2;
inline bool FReplicatedNounAttributeState::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FReplicatedNounAttributeState::has_value() const {
  return _internal_has_value();
}
inline void FReplicatedNounAttributeState::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FReplicatedNounAttributeState::_internal_value() const {
  return _impl_.value_;
}
inline float FReplicatedNounAttributeState::value() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedNounAttributeState.Value)
  return _internal_value();
}
inline void FReplicatedNounAttributeState::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void FReplicatedNounAttributeState::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedNounAttributeState.Value)
}

// required bool bOnlyRelevantToOwner = 3;
inline bool FReplicatedNounAttributeState::_internal_has_bonlyrelevanttoowner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FReplicatedNounAttributeState::has_bonlyrelevanttoowner() const {
  return _internal_has_bonlyrelevanttoowner();
}
inline void FReplicatedNounAttributeState::clear_bonlyrelevanttoowner() {
  _impl_.bonlyrelevanttoowner_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FReplicatedNounAttributeState::_internal_bonlyrelevanttoowner() const {
  return _impl_.bonlyrelevanttoowner_;
}
inline bool FReplicatedNounAttributeState::bonlyrelevanttoowner() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedNounAttributeState.bOnlyRelevantToOwner)
  return _internal_bonlyrelevanttoowner();
}
inline void FReplicatedNounAttributeState::_internal_set_bonlyrelevanttoowner(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bonlyrelevanttoowner_ = value;
}
inline void FReplicatedNounAttributeState::set_bonlyrelevanttoowner(bool value) {
  _internal_set_bonlyrelevanttoowner(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedNounAttributeState.bOnlyRelevantToOwner)
}

// -------------------------------------------------------------------

// FWeaponDefinitionData

// required .HederaDefinitions.NonReplicatedObjectReference WeaponTypeDefinition = 1;
inline bool FWeaponDefinitionData::_internal_has_weapontypedefinition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weapontypedefinition_ != nullptr);
  return value;
}
inline bool FWeaponDefinitionData::has_weapontypedefinition() const {
  return _internal_has_weapontypedefinition();
}
inline void FWeaponDefinitionData::clear_weapontypedefinition() {
  if (_impl_.weapontypedefinition_ != nullptr) _impl_.weapontypedefinition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FWeaponDefinitionData::_internal_weapontypedefinition() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.weapontypedefinition_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FWeaponDefinitionData::weapontypedefinition() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FWeaponDefinitionData.WeaponTypeDefinition)
  return _internal_weapontypedefinition();
}
inline void FWeaponDefinitionData::unsafe_arena_set_allocated_weapontypedefinition(
    ::HederaDefinitions::NonReplicatedObjectReference* weapontypedefinition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weapontypedefinition_);
  }
  _impl_.weapontypedefinition_ = weapontypedefinition;
  if (weapontypedefinition) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FWeaponDefinitionData.WeaponTypeDefinition)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FWeaponDefinitionData::release_weapontypedefinition() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.weapontypedefinition_;
  _impl_.weapontypedefinition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FWeaponDefinitionData::unsafe_arena_release_weapontypedefinition() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FWeaponDefinitionData.WeaponTypeDefinition)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.weapontypedefinition_;
  _impl_.weapontypedefinition_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FWeaponDefinitionData::_internal_mutable_weapontypedefinition() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weapontypedefinition_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.weapontypedefinition_ = p;
  }
  return _impl_.weapontypedefinition_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FWeaponDefinitionData::mutable_weapontypedefinition() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_weapontypedefinition();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FWeaponDefinitionData.WeaponTypeDefinition)
  return _msg;
}
inline void FWeaponDefinitionData::set_allocated_weapontypedefinition(::HederaDefinitions::NonReplicatedObjectReference* weapontypedefinition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weapontypedefinition_;
  }
  if (weapontypedefinition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weapontypedefinition);
    if (message_arena != submessage_arena) {
      weapontypedefinition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapontypedefinition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weapontypedefinition_ = weapontypedefinition;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FWeaponDefinitionData.WeaponTypeDefinition)
}

// -------------------------------------------------------------------

// FReplicatedStandInGear

// required .HederaDefinitions.FWeaponDefinitionData Weapon1Data = 1;
inline bool FReplicatedStandInGear::_internal_has_weapon1data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weapon1data_ != nullptr);
  return value;
}
inline bool FReplicatedStandInGear::has_weapon1data() const {
  return _internal_has_weapon1data();
}
inline void FReplicatedStandInGear::clear_weapon1data() {
  if (_impl_.weapon1data_ != nullptr) _impl_.weapon1data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::FWeaponDefinitionData& FReplicatedStandInGear::_internal_weapon1data() const {
  const ::HederaDefinitions::FWeaponDefinitionData* p = _impl_.weapon1data_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FWeaponDefinitionData&>(
      ::HederaDefinitions::_FWeaponDefinitionData_default_instance_);
}
inline const ::HederaDefinitions::FWeaponDefinitionData& FReplicatedStandInGear::weapon1data() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedStandInGear.Weapon1Data)
  return _internal_weapon1data();
}
inline void FReplicatedStandInGear::unsafe_arena_set_allocated_weapon1data(
    ::HederaDefinitions::FWeaponDefinitionData* weapon1data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weapon1data_);
  }
  _impl_.weapon1data_ = weapon1data;
  if (weapon1data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedStandInGear.Weapon1Data)
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::release_weapon1data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FWeaponDefinitionData* temp = _impl_.weapon1data_;
  _impl_.weapon1data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::unsafe_arena_release_weapon1data() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedStandInGear.Weapon1Data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::FWeaponDefinitionData* temp = _impl_.weapon1data_;
  _impl_.weapon1data_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::_internal_mutable_weapon1data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weapon1data_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FWeaponDefinitionData>(GetArenaForAllocation());
    _impl_.weapon1data_ = p;
  }
  return _impl_.weapon1data_;
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::mutable_weapon1data() {
  ::HederaDefinitions::FWeaponDefinitionData* _msg = _internal_mutable_weapon1data();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedStandInGear.Weapon1Data)
  return _msg;
}
inline void FReplicatedStandInGear::set_allocated_weapon1data(::HederaDefinitions::FWeaponDefinitionData* weapon1data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weapon1data_;
  }
  if (weapon1data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weapon1data);
    if (message_arena != submessage_arena) {
      weapon1data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapon1data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weapon1data_ = weapon1data;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedStandInGear.Weapon1Data)
}

// required .HederaDefinitions.FWeaponDefinitionData Weapon2Data = 2;
inline bool FReplicatedStandInGear::_internal_has_weapon2data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weapon2data_ != nullptr);
  return value;
}
inline bool FReplicatedStandInGear::has_weapon2data() const {
  return _internal_has_weapon2data();
}
inline void FReplicatedStandInGear::clear_weapon2data() {
  if (_impl_.weapon2data_ != nullptr) _impl_.weapon2data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FWeaponDefinitionData& FReplicatedStandInGear::_internal_weapon2data() const {
  const ::HederaDefinitions::FWeaponDefinitionData* p = _impl_.weapon2data_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FWeaponDefinitionData&>(
      ::HederaDefinitions::_FWeaponDefinitionData_default_instance_);
}
inline const ::HederaDefinitions::FWeaponDefinitionData& FReplicatedStandInGear::weapon2data() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedStandInGear.Weapon2Data)
  return _internal_weapon2data();
}
inline void FReplicatedStandInGear::unsafe_arena_set_allocated_weapon2data(
    ::HederaDefinitions::FWeaponDefinitionData* weapon2data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weapon2data_);
  }
  _impl_.weapon2data_ = weapon2data;
  if (weapon2data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedStandInGear.Weapon2Data)
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::release_weapon2data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FWeaponDefinitionData* temp = _impl_.weapon2data_;
  _impl_.weapon2data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::unsafe_arena_release_weapon2data() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedStandInGear.Weapon2Data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FWeaponDefinitionData* temp = _impl_.weapon2data_;
  _impl_.weapon2data_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::_internal_mutable_weapon2data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.weapon2data_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FWeaponDefinitionData>(GetArenaForAllocation());
    _impl_.weapon2data_ = p;
  }
  return _impl_.weapon2data_;
}
inline ::HederaDefinitions::FWeaponDefinitionData* FReplicatedStandInGear::mutable_weapon2data() {
  ::HederaDefinitions::FWeaponDefinitionData* _msg = _internal_mutable_weapon2data();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedStandInGear.Weapon2Data)
  return _msg;
}
inline void FReplicatedStandInGear::set_allocated_weapon2data(::HederaDefinitions::FWeaponDefinitionData* weapon2data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weapon2data_;
  }
  if (weapon2data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weapon2data);
    if (message_arena != submessage_arena) {
      weapon2data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapon2data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.weapon2data_ = weapon2data;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedStandInGear.Weapon2Data)
}

// -------------------------------------------------------------------

// FTrackedSkillState

// required .HederaDefinitions.NonReplicatedObjectReference SkillDef = 1;
inline bool FTrackedSkillState::_internal_has_skilldef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skilldef_ != nullptr);
  return value;
}
inline bool FTrackedSkillState::has_skilldef() const {
  return _internal_has_skilldef();
}
inline void FTrackedSkillState::clear_skilldef() {
  if (_impl_.skilldef_ != nullptr) _impl_.skilldef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FTrackedSkillState::_internal_skilldef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.skilldef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FTrackedSkillState::skilldef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FTrackedSkillState.SkillDef)
  return _internal_skilldef();
}
inline void FTrackedSkillState::unsafe_arena_set_allocated_skilldef(
    ::HederaDefinitions::NonReplicatedObjectReference* skilldef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skilldef_);
  }
  _impl_.skilldef_ = skilldef;
  if (skilldef) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FTrackedSkillState.SkillDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FTrackedSkillState::release_skilldef() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.skilldef_;
  _impl_.skilldef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FTrackedSkillState::unsafe_arena_release_skilldef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FTrackedSkillState.SkillDef)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.skilldef_;
  _impl_.skilldef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FTrackedSkillState::_internal_mutable_skilldef() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.skilldef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.skilldef_ = p;
  }
  return _impl_.skilldef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FTrackedSkillState::mutable_skilldef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_skilldef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FTrackedSkillState.SkillDef)
  return _msg;
}
inline void FTrackedSkillState::set_allocated_skilldef(::HederaDefinitions::NonReplicatedObjectReference* skilldef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skilldef_;
  }
  if (skilldef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skilldef);
    if (message_arena != submessage_arena) {
      skilldef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skilldef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.skilldef_ = skilldef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FTrackedSkillState.SkillDef)
}

// required int32 PackedStackCountAndPercentComplete = 2;
inline bool FTrackedSkillState::_internal_has_packedstackcountandpercentcomplete() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FTrackedSkillState::has_packedstackcountandpercentcomplete() const {
  return _internal_has_packedstackcountandpercentcomplete();
}
inline void FTrackedSkillState::clear_packedstackcountandpercentcomplete() {
  _impl_.packedstackcountandpercentcomplete_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FTrackedSkillState::_internal_packedstackcountandpercentcomplete() const {
  return _impl_.packedstackcountandpercentcomplete_;
}
inline int32_t FTrackedSkillState::packedstackcountandpercentcomplete() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FTrackedSkillState.PackedStackCountAndPercentComplete)
  return _internal_packedstackcountandpercentcomplete();
}
inline void FTrackedSkillState::_internal_set_packedstackcountandpercentcomplete(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.packedstackcountandpercentcomplete_ = value;
}
inline void FTrackedSkillState::set_packedstackcountandpercentcomplete(int32_t value) {
  _internal_set_packedstackcountandpercentcomplete(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FTrackedSkillState.PackedStackCountAndPercentComplete)
}

// -------------------------------------------------------------------

// FManagedActorCountData

// required .HederaDefinitions.NonReplicatedObjectReference Type = 1;
inline bool FManagedActorCountData::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool FManagedActorCountData::has_type() const {
  return _internal_has_type();
}
inline void FManagedActorCountData::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FManagedActorCountData::_internal_type() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FManagedActorCountData::type() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FManagedActorCountData.Type)
  return _internal_type();
}
inline void FManagedActorCountData::unsafe_arena_set_allocated_type(
    ::HederaDefinitions::NonReplicatedObjectReference* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FManagedActorCountData.Type)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FManagedActorCountData::release_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FManagedActorCountData::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FManagedActorCountData.Type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FManagedActorCountData::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FManagedActorCountData::mutable_type() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FManagedActorCountData.Type)
  return _msg;
}
inline void FManagedActorCountData::set_allocated_type(::HederaDefinitions::NonReplicatedObjectReference* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FManagedActorCountData.Type)
}

// required int32 Count = 2;
inline bool FManagedActorCountData::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FManagedActorCountData::has_count() const {
  return _internal_has_count();
}
inline void FManagedActorCountData::clear_count() {
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FManagedActorCountData::_internal_count() const {
  return _impl_.count_;
}
inline int32_t FManagedActorCountData::count() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FManagedActorCountData.Count)
  return _internal_count();
}
inline void FManagedActorCountData::_internal_set_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.count_ = value;
}
inline void FManagedActorCountData::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FManagedActorCountData.Count)
}

// -------------------------------------------------------------------

// FReplicatedPerkItem

// required string MetaID = 1;
inline bool FReplicatedPerkItem::_internal_has_metaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_metaid() const {
  return _internal_has_metaid();
}
inline void FReplicatedPerkItem::clear_metaid() {
  _impl_.metaid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FReplicatedPerkItem::metaid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.MetaID)
  return _internal_metaid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FReplicatedPerkItem::set_metaid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.metaid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.MetaID)
}
inline std::string* FReplicatedPerkItem::mutable_metaid() {
  std::string* _s = _internal_mutable_metaid();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedPerkItem.MetaID)
  return _s;
}
inline const std::string& FReplicatedPerkItem::_internal_metaid() const {
  return _impl_.metaid_.Get();
}
inline void FReplicatedPerkItem::_internal_set_metaid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.metaid_.Set(value, GetArenaForAllocation());
}
inline std::string* FReplicatedPerkItem::_internal_mutable_metaid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.metaid_.Mutable(GetArenaForAllocation());
}
inline std::string* FReplicatedPerkItem::release_metaid() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedPerkItem.MetaID)
  if (!_internal_has_metaid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.metaid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metaid_.IsDefault()) {
    _impl_.metaid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FReplicatedPerkItem::set_allocated_metaid(std::string* metaid) {
  if (metaid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metaid_.SetAllocated(metaid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metaid_.IsDefault()) {
    _impl_.metaid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedPerkItem.MetaID)
}

// required string AssetKey = 2;
inline bool FReplicatedPerkItem::_internal_has_assetkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_assetkey() const {
  return _internal_has_assetkey();
}
inline void FReplicatedPerkItem::clear_assetkey() {
  _impl_.assetkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FReplicatedPerkItem::assetkey() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.AssetKey)
  return _internal_assetkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FReplicatedPerkItem::set_assetkey(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.assetkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.AssetKey)
}
inline std::string* FReplicatedPerkItem::mutable_assetkey() {
  std::string* _s = _internal_mutable_assetkey();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedPerkItem.AssetKey)
  return _s;
}
inline const std::string& FReplicatedPerkItem::_internal_assetkey() const {
  return _impl_.assetkey_.Get();
}
inline void FReplicatedPerkItem::_internal_set_assetkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.assetkey_.Set(value, GetArenaForAllocation());
}
inline std::string* FReplicatedPerkItem::_internal_mutable_assetkey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.assetkey_.Mutable(GetArenaForAllocation());
}
inline std::string* FReplicatedPerkItem::release_assetkey() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedPerkItem.AssetKey)
  if (!_internal_has_assetkey()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.assetkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assetkey_.IsDefault()) {
    _impl_.assetkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FReplicatedPerkItem::set_allocated_assetkey(std::string* assetkey) {
  if (assetkey != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.assetkey_.SetAllocated(assetkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assetkey_.IsDefault()) {
    _impl_.assetkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedPerkItem.AssetKey)
}

// required bool bCanUse = 3;
inline bool FReplicatedPerkItem::_internal_has_bcanuse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_bcanuse() const {
  return _internal_has_bcanuse();
}
inline void FReplicatedPerkItem::clear_bcanuse() {
  _impl_.bcanuse_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FReplicatedPerkItem::_internal_bcanuse() const {
  return _impl_.bcanuse_;
}
inline bool FReplicatedPerkItem::bcanuse() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.bCanUse)
  return _internal_bcanuse();
}
inline void FReplicatedPerkItem::_internal_set_bcanuse(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bcanuse_ = value;
}
inline void FReplicatedPerkItem::set_bcanuse(bool value) {
  _internal_set_bcanuse(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.bCanUse)
}

// required int32 ItemLevel = 4;
inline bool FReplicatedPerkItem::_internal_has_itemlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_itemlevel() const {
  return _internal_has_itemlevel();
}
inline void FReplicatedPerkItem::clear_itemlevel() {
  _impl_.itemlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t FReplicatedPerkItem::_internal_itemlevel() const {
  return _impl_.itemlevel_;
}
inline int32_t FReplicatedPerkItem::itemlevel() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.ItemLevel)
  return _internal_itemlevel();
}
inline void FReplicatedPerkItem::_internal_set_itemlevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.itemlevel_ = value;
}
inline void FReplicatedPerkItem::set_itemlevel(int32_t value) {
  _internal_set_itemlevel(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.ItemLevel)
}

// required int32 Rarity = 5;
inline bool FReplicatedPerkItem::_internal_has_rarity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_rarity() const {
  return _internal_has_rarity();
}
inline void FReplicatedPerkItem::clear_rarity() {
  _impl_.rarity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t FReplicatedPerkItem::_internal_rarity() const {
  return _impl_.rarity_;
}
inline int32_t FReplicatedPerkItem::rarity() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.Rarity)
  return _internal_rarity();
}
inline void FReplicatedPerkItem::_internal_set_rarity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.rarity_ = value;
}
inline void FReplicatedPerkItem::set_rarity(int32_t value) {
  _internal_set_rarity(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.Rarity)
}

// required .HederaDefinitions.FUniqueID PlayerID = 6;
inline bool FReplicatedPerkItem::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playerid_ != nullptr);
  return value;
}
inline bool FReplicatedPerkItem::has_playerid() const {
  return _internal_has_playerid();
}
inline void FReplicatedPerkItem::clear_playerid() {
  if (_impl_.playerid_ != nullptr) _impl_.playerid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::FUniqueID& FReplicatedPerkItem::_internal_playerid() const {
  const ::HederaDefinitions::FUniqueID* p = _impl_.playerid_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FUniqueID&>(
      ::HederaDefinitions::_FUniqueID_default_instance_);
}
inline const ::HederaDefinitions::FUniqueID& FReplicatedPerkItem::playerid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.PlayerID)
  return _internal_playerid();
}
inline void FReplicatedPerkItem::unsafe_arena_set_allocated_playerid(
    ::HederaDefinitions::FUniqueID* playerid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerid_);
  }
  _impl_.playerid_ = playerid;
  if (playerid) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedPerkItem.PlayerID)
}
inline ::HederaDefinitions::FUniqueID* FReplicatedPerkItem::release_playerid() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FUniqueID* temp = _impl_.playerid_;
  _impl_.playerid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FUniqueID* FReplicatedPerkItem::unsafe_arena_release_playerid() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedPerkItem.PlayerID)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::FUniqueID* temp = _impl_.playerid_;
  _impl_.playerid_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FUniqueID* FReplicatedPerkItem::_internal_mutable_playerid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.playerid_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FUniqueID>(GetArenaForAllocation());
    _impl_.playerid_ = p;
  }
  return _impl_.playerid_;
}
inline ::HederaDefinitions::FUniqueID* FReplicatedPerkItem::mutable_playerid() {
  ::HederaDefinitions::FUniqueID* _msg = _internal_mutable_playerid();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedPerkItem.PlayerID)
  return _msg;
}
inline void FReplicatedPerkItem::set_allocated_playerid(::HederaDefinitions::FUniqueID* playerid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerid_;
  }
  if (playerid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerid);
    if (message_arena != submessage_arena) {
      playerid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.playerid_ = playerid;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedPerkItem.PlayerID)
}

// required string ApolloJSON = 7;
inline bool FReplicatedPerkItem::_internal_has_apollojson() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_apollojson() const {
  return _internal_has_apollojson();
}
inline void FReplicatedPerkItem::clear_apollojson() {
  _impl_.apollojson_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FReplicatedPerkItem::apollojson() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.ApolloJSON)
  return _internal_apollojson();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FReplicatedPerkItem::set_apollojson(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.apollojson_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.ApolloJSON)
}
inline std::string* FReplicatedPerkItem::mutable_apollojson() {
  std::string* _s = _internal_mutable_apollojson();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedPerkItem.ApolloJSON)
  return _s;
}
inline const std::string& FReplicatedPerkItem::_internal_apollojson() const {
  return _impl_.apollojson_.Get();
}
inline void FReplicatedPerkItem::_internal_set_apollojson(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.apollojson_.Set(value, GetArenaForAllocation());
}
inline std::string* FReplicatedPerkItem::_internal_mutable_apollojson() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.apollojson_.Mutable(GetArenaForAllocation());
}
inline std::string* FReplicatedPerkItem::release_apollojson() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedPerkItem.ApolloJSON)
  if (!_internal_has_apollojson()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.apollojson_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollojson_.IsDefault()) {
    _impl_.apollojson_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FReplicatedPerkItem::set_allocated_apollojson(std::string* apollojson) {
  if (apollojson != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.apollojson_.SetAllocated(apollojson, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollojson_.IsDefault()) {
    _impl_.apollojson_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedPerkItem.ApolloJSON)
}

// required int32 EntitlementIndex = 8;
inline bool FReplicatedPerkItem::_internal_has_entitlementindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_entitlementindex() const {
  return _internal_has_entitlementindex();
}
inline void FReplicatedPerkItem::clear_entitlementindex() {
  _impl_.entitlementindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t FReplicatedPerkItem::_internal_entitlementindex() const {
  return _impl_.entitlementindex_;
}
inline int32_t FReplicatedPerkItem::entitlementindex() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.EntitlementIndex)
  return _internal_entitlementindex();
}
inline void FReplicatedPerkItem::_internal_set_entitlementindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.entitlementindex_ = value;
}
inline void FReplicatedPerkItem::set_entitlementindex(int32_t value) {
  _internal_set_entitlementindex(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.EntitlementIndex)
}

// required bool bActive = 9;
inline bool FReplicatedPerkItem::_internal_has_bactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FReplicatedPerkItem::has_bactive() const {
  return _internal_has_bactive();
}
inline void FReplicatedPerkItem::clear_bactive() {
  _impl_.bactive_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FReplicatedPerkItem::_internal_bactive() const {
  return _impl_.bactive_;
}
inline bool FReplicatedPerkItem::bactive() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.bActive)
  return _internal_bactive();
}
inline void FReplicatedPerkItem::_internal_set_bactive(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bactive_ = value;
}
inline void FReplicatedPerkItem::set_bactive(bool value) {
  _internal_set_bactive(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedPerkItem.bActive)
}

// required .HederaDefinitions.NonReplicatedObjectReference PerkFunction = 10;
inline bool FReplicatedPerkItem::_internal_has_perkfunction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.perkfunction_ != nullptr);
  return value;
}
inline bool FReplicatedPerkItem::has_perkfunction() const {
  return _internal_has_perkfunction();
}
inline void FReplicatedPerkItem::clear_perkfunction() {
  if (_impl_.perkfunction_ != nullptr) _impl_.perkfunction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FReplicatedPerkItem::_internal_perkfunction() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.perkfunction_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FReplicatedPerkItem::perkfunction() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.PerkFunction)
  return _internal_perkfunction();
}
inline void FReplicatedPerkItem::unsafe_arena_set_allocated_perkfunction(
    ::HederaDefinitions::NonReplicatedObjectReference* perkfunction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perkfunction_);
  }
  _impl_.perkfunction_ = perkfunction;
  if (perkfunction) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedPerkItem.PerkFunction)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::release_perkfunction() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.perkfunction_;
  _impl_.perkfunction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::unsafe_arena_release_perkfunction() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedPerkItem.PerkFunction)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.perkfunction_;
  _impl_.perkfunction_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::_internal_mutable_perkfunction() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.perkfunction_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.perkfunction_ = p;
  }
  return _impl_.perkfunction_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::mutable_perkfunction() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_perkfunction();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedPerkItem.PerkFunction)
  return _msg;
}
inline void FReplicatedPerkItem::set_allocated_perkfunction(::HederaDefinitions::NonReplicatedObjectReference* perkfunction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.perkfunction_;
  }
  if (perkfunction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perkfunction);
    if (message_arena != submessage_arena) {
      perkfunction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perkfunction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.perkfunction_ = perkfunction;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedPerkItem.PerkFunction)
}

// required .HederaDefinitions.NonReplicatedObjectReference Wearable = 11;
inline bool FReplicatedPerkItem::_internal_has_wearable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wearable_ != nullptr);
  return value;
}
inline bool FReplicatedPerkItem::has_wearable() const {
  return _internal_has_wearable();
}
inline void FReplicatedPerkItem::clear_wearable() {
  if (_impl_.wearable_ != nullptr) _impl_.wearable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FReplicatedPerkItem::_internal_wearable() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.wearable_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FReplicatedPerkItem::wearable() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedPerkItem.Wearable)
  return _internal_wearable();
}
inline void FReplicatedPerkItem::unsafe_arena_set_allocated_wearable(
    ::HederaDefinitions::NonReplicatedObjectReference* wearable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wearable_);
  }
  _impl_.wearable_ = wearable;
  if (wearable) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedPerkItem.Wearable)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::release_wearable() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.wearable_;
  _impl_.wearable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::unsafe_arena_release_wearable() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedPerkItem.Wearable)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.wearable_;
  _impl_.wearable_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::_internal_mutable_wearable() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.wearable_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.wearable_ = p;
  }
  return _impl_.wearable_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedPerkItem::mutable_wearable() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_wearable();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedPerkItem.Wearable)
  return _msg;
}
inline void FReplicatedPerkItem::set_allocated_wearable(::HederaDefinitions::NonReplicatedObjectReference* wearable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wearable_;
  }
  if (wearable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wearable);
    if (message_arena != submessage_arena) {
      wearable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wearable, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.wearable_ = wearable;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedPerkItem.Wearable)
}

// -------------------------------------------------------------------

// FAugInstance

// required .HederaDefinitions.NonReplicatedObjectReference AugDef = 1;
inline bool FAugInstance::_internal_has_augdef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.augdef_ != nullptr);
  return value;
}
inline bool FAugInstance::has_augdef() const {
  return _internal_has_augdef();
}
inline void FAugInstance::clear_augdef() {
  if (_impl_.augdef_ != nullptr) _impl_.augdef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAugInstance::_internal_augdef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.augdef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAugInstance::augdef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugInstance.AugDef)
  return _internal_augdef();
}
inline void FAugInstance::unsafe_arena_set_allocated_augdef(
    ::HederaDefinitions::NonReplicatedObjectReference* augdef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.augdef_);
  }
  _impl_.augdef_ = augdef;
  if (augdef) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAugInstance.AugDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugInstance::release_augdef() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.augdef_;
  _impl_.augdef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugInstance::unsafe_arena_release_augdef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAugInstance.AugDef)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.augdef_;
  _impl_.augdef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugInstance::_internal_mutable_augdef() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.augdef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.augdef_ = p;
  }
  return _impl_.augdef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugInstance::mutable_augdef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_augdef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAugInstance.AugDef)
  return _msg;
}
inline void FAugInstance::set_allocated_augdef(::HederaDefinitions::NonReplicatedObjectReference* augdef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.augdef_;
  }
  if (augdef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(augdef);
    if (message_arena != submessage_arena) {
      augdef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, augdef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.augdef_ = augdef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAugInstance.AugDef)
}

// required int32 CurrentTier = 2;
inline bool FAugInstance::_internal_has_currenttier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FAugInstance::has_currenttier() const {
  return _internal_has_currenttier();
}
inline void FAugInstance::clear_currenttier() {
  _impl_.currenttier_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FAugInstance::_internal_currenttier() const {
  return _impl_.currenttier_;
}
inline int32_t FAugInstance::currenttier() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugInstance.CurrentTier)
  return _internal_currenttier();
}
inline void FAugInstance::_internal_set_currenttier(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.currenttier_ = value;
}
inline void FAugInstance::set_currenttier(int32_t value) {
  _internal_set_currenttier(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAugInstance.CurrentTier)
}

// required int32 ClientPurchaseStatus = 3;
inline bool FAugInstance::_internal_has_clientpurchasestatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FAugInstance::has_clientpurchasestatus() const {
  return _internal_has_clientpurchasestatus();
}
inline void FAugInstance::clear_clientpurchasestatus() {
  _impl_.clientpurchasestatus_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FAugInstance::_internal_clientpurchasestatus() const {
  return _impl_.clientpurchasestatus_;
}
inline int32_t FAugInstance::clientpurchasestatus() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugInstance.ClientPurchaseStatus)
  return _internal_clientpurchasestatus();
}
inline void FAugInstance::_internal_set_clientpurchasestatus(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.clientpurchasestatus_ = value;
}
inline void FAugInstance::set_clientpurchasestatus(int32_t value) {
  _internal_set_clientpurchasestatus(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAugInstance.ClientPurchaseStatus)
}

// required bool Preselected = 4;
inline bool FAugInstance::_internal_has_preselected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FAugInstance::has_preselected() const {
  return _internal_has_preselected();
}
inline void FAugInstance::clear_preselected() {
  _impl_.preselected_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FAugInstance::_internal_preselected() const {
  return _impl_.preselected_;
}
inline bool FAugInstance::preselected() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugInstance.Preselected)
  return _internal_preselected();
}
inline void FAugInstance::_internal_set_preselected(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.preselected_ = value;
}
inline void FAugInstance::set_preselected(bool value) {
  _internal_set_preselected(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAugInstance.Preselected)
}

// -------------------------------------------------------------------

// FAugCategoryInstance

// required .HederaDefinitions.NonReplicatedObjectReference CategoryDef = 1;
inline bool FAugCategoryInstance::_internal_has_categorydef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.categorydef_ != nullptr);
  return value;
}
inline bool FAugCategoryInstance::has_categorydef() const {
  return _internal_has_categorydef();
}
inline void FAugCategoryInstance::clear_categorydef() {
  if (_impl_.categorydef_ != nullptr) _impl_.categorydef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAugCategoryInstance::_internal_categorydef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.categorydef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAugCategoryInstance::categorydef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugCategoryInstance.CategoryDef)
  return _internal_categorydef();
}
inline void FAugCategoryInstance::unsafe_arena_set_allocated_categorydef(
    ::HederaDefinitions::NonReplicatedObjectReference* categorydef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.categorydef_);
  }
  _impl_.categorydef_ = categorydef;
  if (categorydef) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAugCategoryInstance.CategoryDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugCategoryInstance::release_categorydef() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.categorydef_;
  _impl_.categorydef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugCategoryInstance::unsafe_arena_release_categorydef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAugCategoryInstance.CategoryDef)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.categorydef_;
  _impl_.categorydef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugCategoryInstance::_internal_mutable_categorydef() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.categorydef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.categorydef_ = p;
  }
  return _impl_.categorydef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugCategoryInstance::mutable_categorydef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_categorydef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAugCategoryInstance.CategoryDef)
  return _msg;
}
inline void FAugCategoryInstance::set_allocated_categorydef(::HederaDefinitions::NonReplicatedObjectReference* categorydef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.categorydef_;
  }
  if (categorydef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(categorydef);
    if (message_arena != submessage_arena) {
      categorydef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, categorydef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.categorydef_ = categorydef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAugCategoryInstance.CategoryDef)
}

// repeated .HederaDefinitions.FAugInstance Augs = 2;
inline int FAugCategoryInstance::_internal_augs_size() const {
  return _impl_.augs_.size();
}
inline int FAugCategoryInstance::augs_size() const {
  return _internal_augs_size();
}
inline void FAugCategoryInstance::clear_augs() {
  _impl_.augs_.Clear();
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::mutable_augs(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAugCategoryInstance.Augs)
  return _impl_.augs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugInstance >*
FAugCategoryInstance::mutable_augs() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FAugCategoryInstance.Augs)
  return &_impl_.augs_;
}
inline const ::HederaDefinitions::FAugInstance& FAugCategoryInstance::_internal_augs(int index) const {
  return _impl_.augs_.Get(index);
}
inline const ::HederaDefinitions::FAugInstance& FAugCategoryInstance::augs(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugCategoryInstance.Augs)
  return _internal_augs(index);
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::_internal_add_augs() {
  return _impl_.augs_.Add();
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::add_augs() {
  ::HederaDefinitions::FAugInstance* _add = _internal_add_augs();
  // @@protoc_insertion_point(field_add:HederaDefinitions.FAugCategoryInstance.Augs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugInstance >&
FAugCategoryInstance::augs() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FAugCategoryInstance.Augs)
  return _impl_.augs_;
}

// required .HederaDefinitions.FAugInstance Mutation = 3;
inline bool FAugCategoryInstance::_internal_has_mutation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mutation_ != nullptr);
  return value;
}
inline bool FAugCategoryInstance::has_mutation() const {
  return _internal_has_mutation();
}
inline void FAugCategoryInstance::clear_mutation() {
  if (_impl_.mutation_ != nullptr) _impl_.mutation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FAugInstance& FAugCategoryInstance::_internal_mutation() const {
  const ::HederaDefinitions::FAugInstance* p = _impl_.mutation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAugInstance&>(
      ::HederaDefinitions::_FAugInstance_default_instance_);
}
inline const ::HederaDefinitions::FAugInstance& FAugCategoryInstance::mutation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugCategoryInstance.Mutation)
  return _internal_mutation();
}
inline void FAugCategoryInstance::unsafe_arena_set_allocated_mutation(
    ::HederaDefinitions::FAugInstance* mutation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mutation_);
  }
  _impl_.mutation_ = mutation;
  if (mutation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAugCategoryInstance.Mutation)
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::release_mutation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FAugInstance* temp = _impl_.mutation_;
  _impl_.mutation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::unsafe_arena_release_mutation() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAugCategoryInstance.Mutation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FAugInstance* temp = _impl_.mutation_;
  _impl_.mutation_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::_internal_mutable_mutation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mutation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAugInstance>(GetArenaForAllocation());
    _impl_.mutation_ = p;
  }
  return _impl_.mutation_;
}
inline ::HederaDefinitions::FAugInstance* FAugCategoryInstance::mutable_mutation() {
  ::HederaDefinitions::FAugInstance* _msg = _internal_mutable_mutation();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAugCategoryInstance.Mutation)
  return _msg;
}
inline void FAugCategoryInstance::set_allocated_mutation(::HederaDefinitions::FAugInstance* mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mutation_;
  }
  if (mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mutation);
    if (message_arena != submessage_arena) {
      mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mutation_ = mutation;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAugCategoryInstance.Mutation)
}

// required bool CategoryIsUnlocked = 4;
inline bool FAugCategoryInstance::_internal_has_categoryisunlocked() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FAugCategoryInstance::has_categoryisunlocked() const {
  return _internal_has_categoryisunlocked();
}
inline void FAugCategoryInstance::clear_categoryisunlocked() {
  _impl_.categoryisunlocked_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FAugCategoryInstance::_internal_categoryisunlocked() const {
  return _impl_.categoryisunlocked_;
}
inline bool FAugCategoryInstance::categoryisunlocked() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugCategoryInstance.CategoryIsUnlocked)
  return _internal_categoryisunlocked();
}
inline void FAugCategoryInstance::_internal_set_categoryisunlocked(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.categoryisunlocked_ = value;
}
inline void FAugCategoryInstance::set_categoryisunlocked(bool value) {
  _internal_set_categoryisunlocked(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FAugCategoryInstance.CategoryIsUnlocked)
}

// -------------------------------------------------------------------

// FAugSetInstance

// required .HederaDefinitions.NonReplicatedObjectReference AugSetDef = 1;
inline bool FAugSetInstance::_internal_has_augsetdef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.augsetdef_ != nullptr);
  return value;
}
inline bool FAugSetInstance::has_augsetdef() const {
  return _internal_has_augsetdef();
}
inline void FAugSetInstance::clear_augsetdef() {
  if (_impl_.augsetdef_ != nullptr) _impl_.augsetdef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAugSetInstance::_internal_augsetdef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.augsetdef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FAugSetInstance::augsetdef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugSetInstance.AugSetDef)
  return _internal_augsetdef();
}
inline void FAugSetInstance::unsafe_arena_set_allocated_augsetdef(
    ::HederaDefinitions::NonReplicatedObjectReference* augsetdef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.augsetdef_);
  }
  _impl_.augsetdef_ = augsetdef;
  if (augsetdef) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FAugSetInstance.AugSetDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugSetInstance::release_augsetdef() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.augsetdef_;
  _impl_.augsetdef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugSetInstance::unsafe_arena_release_augsetdef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FAugSetInstance.AugSetDef)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.augsetdef_;
  _impl_.augsetdef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugSetInstance::_internal_mutable_augsetdef() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.augsetdef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.augsetdef_ = p;
  }
  return _impl_.augsetdef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FAugSetInstance::mutable_augsetdef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_augsetdef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAugSetInstance.AugSetDef)
  return _msg;
}
inline void FAugSetInstance::set_allocated_augsetdef(::HederaDefinitions::NonReplicatedObjectReference* augsetdef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.augsetdef_;
  }
  if (augsetdef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(augsetdef);
    if (message_arena != submessage_arena) {
      augsetdef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, augsetdef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.augsetdef_ = augsetdef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FAugSetInstance.AugSetDef)
}

// repeated .HederaDefinitions.FAugCategoryInstance AllCategories = 2;
inline int FAugSetInstance::_internal_allcategories_size() const {
  return _impl_.allcategories_.size();
}
inline int FAugSetInstance::allcategories_size() const {
  return _internal_allcategories_size();
}
inline void FAugSetInstance::clear_allcategories() {
  _impl_.allcategories_.Clear();
}
inline ::HederaDefinitions::FAugCategoryInstance* FAugSetInstance::mutable_allcategories(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FAugSetInstance.AllCategories)
  return _impl_.allcategories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugCategoryInstance >*
FAugSetInstance::mutable_allcategories() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.FAugSetInstance.AllCategories)
  return &_impl_.allcategories_;
}
inline const ::HederaDefinitions::FAugCategoryInstance& FAugSetInstance::_internal_allcategories(int index) const {
  return _impl_.allcategories_.Get(index);
}
inline const ::HederaDefinitions::FAugCategoryInstance& FAugSetInstance::allcategories(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FAugSetInstance.AllCategories)
  return _internal_allcategories(index);
}
inline ::HederaDefinitions::FAugCategoryInstance* FAugSetInstance::_internal_add_allcategories() {
  return _impl_.allcategories_.Add();
}
inline ::HederaDefinitions::FAugCategoryInstance* FAugSetInstance::add_allcategories() {
  ::HederaDefinitions::FAugCategoryInstance* _add = _internal_add_allcategories();
  // @@protoc_insertion_point(field_add:HederaDefinitions.FAugSetInstance.AllCategories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FAugCategoryInstance >&
FAugSetInstance::allcategories() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.FAugSetInstance.AllCategories)
  return _impl_.allcategories_;
}

// -------------------------------------------------------------------

// FReplicatedBehaviorConsumerState

// required bool bIsProcessSuspended = 1;
inline bool FReplicatedBehaviorConsumerState::_internal_has_bisprocesssuspended() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FReplicatedBehaviorConsumerState::has_bisprocesssuspended() const {
  return _internal_has_bisprocesssuspended();
}
inline void FReplicatedBehaviorConsumerState::clear_bisprocesssuspended() {
  _impl_.bisprocesssuspended_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FReplicatedBehaviorConsumerState::_internal_bisprocesssuspended() const {
  return _impl_.bisprocesssuspended_;
}
inline bool FReplicatedBehaviorConsumerState::bisprocesssuspended() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorConsumerState.bIsProcessSuspended)
  return _internal_bisprocesssuspended();
}
inline void FReplicatedBehaviorConsumerState::_internal_set_bisprocesssuspended(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bisprocesssuspended_ = value;
}
inline void FReplicatedBehaviorConsumerState::set_bisprocesssuspended(bool value) {
  _internal_set_bisprocesssuspended(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorConsumerState.bIsProcessSuspended)
}

// required int32 BehaviorSequenceEnabledFlags = 2;
inline bool FReplicatedBehaviorConsumerState::_internal_has_behaviorsequenceenabledflags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FReplicatedBehaviorConsumerState::has_behaviorsequenceenabledflags() const {
  return _internal_has_behaviorsequenceenabledflags();
}
inline void FReplicatedBehaviorConsumerState::clear_behaviorsequenceenabledflags() {
  _impl_.behaviorsequenceenabledflags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FReplicatedBehaviorConsumerState::_internal_behaviorsequenceenabledflags() const {
  return _impl_.behaviorsequenceenabledflags_;
}
inline int32_t FReplicatedBehaviorConsumerState::behaviorsequenceenabledflags() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorConsumerState.BehaviorSequenceEnabledFlags)
  return _internal_behaviorsequenceenabledflags();
}
inline void FReplicatedBehaviorConsumerState::_internal_set_behaviorsequenceenabledflags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.behaviorsequenceenabledflags_ = value;
}
inline void FReplicatedBehaviorConsumerState::set_behaviorsequenceenabledflags(int32_t value) {
  _internal_set_behaviorsequenceenabledflags(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorConsumerState.BehaviorSequenceEnabledFlags)
}

// required bool bNeedToApplyThisState = 3;
inline bool FReplicatedBehaviorConsumerState::_internal_has_bneedtoapplythisstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FReplicatedBehaviorConsumerState::has_bneedtoapplythisstate() const {
  return _internal_has_bneedtoapplythisstate();
}
inline void FReplicatedBehaviorConsumerState::clear_bneedtoapplythisstate() {
  _impl_.bneedtoapplythisstate_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FReplicatedBehaviorConsumerState::_internal_bneedtoapplythisstate() const {
  return _impl_.bneedtoapplythisstate_;
}
inline bool FReplicatedBehaviorConsumerState::bneedtoapplythisstate() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorConsumerState.bNeedToApplyThisState)
  return _internal_bneedtoapplythisstate();
}
inline void FReplicatedBehaviorConsumerState::_internal_set_bneedtoapplythisstate(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bneedtoapplythisstate_ = value;
}
inline void FReplicatedBehaviorConsumerState::set_bneedtoapplythisstate(bool value) {
  _internal_set_bneedtoapplythisstate(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorConsumerState.bNeedToApplyThisState)
}

// -------------------------------------------------------------------

// FReplicatedBehaviorEvent

// required int32 SequenceIndex = 1;
inline bool FReplicatedBehaviorEvent::_internal_has_sequenceindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FReplicatedBehaviorEvent::has_sequenceindex() const {
  return _internal_has_sequenceindex();
}
inline void FReplicatedBehaviorEvent::clear_sequenceindex() {
  _impl_.sequenceindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FReplicatedBehaviorEvent::_internal_sequenceindex() const {
  return _impl_.sequenceindex_;
}
inline int32_t FReplicatedBehaviorEvent::sequenceindex() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorEvent.SequenceIndex)
  return _internal_sequenceindex();
}
inline void FReplicatedBehaviorEvent::_internal_set_sequenceindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sequenceindex_ = value;
}
inline void FReplicatedBehaviorEvent::set_sequenceindex(int32_t value) {
  _internal_set_sequenceindex(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorEvent.SequenceIndex)
}

// required int32 EventCounter = 2;
inline bool FReplicatedBehaviorEvent::_internal_has_eventcounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FReplicatedBehaviorEvent::has_eventcounter() const {
  return _internal_has_eventcounter();
}
inline void FReplicatedBehaviorEvent::clear_eventcounter() {
  _impl_.eventcounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FReplicatedBehaviorEvent::_internal_eventcounter() const {
  return _impl_.eventcounter_;
}
inline int32_t FReplicatedBehaviorEvent::eventcounter() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorEvent.EventCounter)
  return _internal_eventcounter();
}
inline void FReplicatedBehaviorEvent::_internal_set_eventcounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eventcounter_ = value;
}
inline void FReplicatedBehaviorEvent::set_eventcounter(int32_t value) {
  _internal_set_eventcounter(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorEvent.EventCounter)
}

// required int32 EventIndex = 3;
inline bool FReplicatedBehaviorEvent::_internal_has_eventindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FReplicatedBehaviorEvent::has_eventindex() const {
  return _internal_has_eventindex();
}
inline void FReplicatedBehaviorEvent::clear_eventindex() {
  _impl_.eventindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t FReplicatedBehaviorEvent::_internal_eventindex() const {
  return _impl_.eventindex_;
}
inline int32_t FReplicatedBehaviorEvent::eventindex() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorEvent.EventIndex)
  return _internal_eventindex();
}
inline void FReplicatedBehaviorEvent::_internal_set_eventindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.eventindex_ = value;
}
inline void FReplicatedBehaviorEvent::set_eventindex(int32_t value) {
  _internal_set_eventindex(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorEvent.EventIndex)
}

// required int32 EventOutput = 4;
inline bool FReplicatedBehaviorEvent::_internal_has_eventoutput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FReplicatedBehaviorEvent::has_eventoutput() const {
  return _internal_has_eventoutput();
}
inline void FReplicatedBehaviorEvent::clear_eventoutput() {
  _impl_.eventoutput_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t FReplicatedBehaviorEvent::_internal_eventoutput() const {
  return _impl_.eventoutput_;
}
inline int32_t FReplicatedBehaviorEvent::eventoutput() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorEvent.EventOutput)
  return _internal_eventoutput();
}
inline void FReplicatedBehaviorEvent::_internal_set_eventoutput(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.eventoutput_ = value;
}
inline void FReplicatedBehaviorEvent::set_eventoutput(int32_t value) {
  _internal_set_eventoutput(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FReplicatedBehaviorEvent.EventOutput)
}

// required .HederaDefinitions.NonReplicatedObjectReference Instigator = 5;
inline bool FReplicatedBehaviorEvent::_internal_has_instigator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instigator_ != nullptr);
  return value;
}
inline bool FReplicatedBehaviorEvent::has_instigator() const {
  return _internal_has_instigator();
}
inline void FReplicatedBehaviorEvent::clear_instigator() {
  if (_impl_.instigator_ != nullptr) _impl_.instigator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FReplicatedBehaviorEvent::_internal_instigator() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.instigator_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& FReplicatedBehaviorEvent::instigator() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FReplicatedBehaviorEvent.Instigator)
  return _internal_instigator();
}
inline void FReplicatedBehaviorEvent::unsafe_arena_set_allocated_instigator(
    ::HederaDefinitions::NonReplicatedObjectReference* instigator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instigator_);
  }
  _impl_.instigator_ = instigator;
  if (instigator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.FReplicatedBehaviorEvent.Instigator)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedBehaviorEvent::release_instigator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedBehaviorEvent::unsafe_arena_release_instigator() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.FReplicatedBehaviorEvent.Instigator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedBehaviorEvent::_internal_mutable_instigator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instigator_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.instigator_ = p;
  }
  return _impl_.instigator_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* FReplicatedBehaviorEvent::mutable_instigator() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_instigator();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.FReplicatedBehaviorEvent.Instigator)
  return _msg;
}
inline void FReplicatedBehaviorEvent::set_allocated_instigator(::HederaDefinitions::NonReplicatedObjectReference* instigator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.instigator_;
  }
  if (instigator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(instigator);
    if (message_arena != submessage_arena) {
      instigator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instigator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instigator_ = instigator;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.FReplicatedBehaviorEvent.Instigator)
}

// -------------------------------------------------------------------

// FCinematicModeOptions

// required bool bCinematicMode = 1;
inline bool FCinematicModeOptions::_internal_has_bcinematicmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_bcinematicmode() const {
  return _internal_has_bcinematicmode();
}
inline void FCinematicModeOptions::clear_bcinematicmode() {
  _impl_.bcinematicmode_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FCinematicModeOptions::_internal_bcinematicmode() const {
  return _impl_.bcinematicmode_;
}
inline bool FCinematicModeOptions::bcinematicmode() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bCinematicMode)
  return _internal_bcinematicmode();
}
inline void FCinematicModeOptions::_internal_set_bcinematicmode(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bcinematicmode_ = value;
}
inline void FCinematicModeOptions::set_bcinematicmode(bool value) {
  _internal_set_bcinematicmode(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bCinematicMode)
}

// required bool bHidePlayer = 2;
inline bool FCinematicModeOptions::_internal_has_bhideplayer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_bhideplayer() const {
  return _internal_has_bhideplayer();
}
inline void FCinematicModeOptions::clear_bhideplayer() {
  _impl_.bhideplayer_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FCinematicModeOptions::_internal_bhideplayer() const {
  return _impl_.bhideplayer_;
}
inline bool FCinematicModeOptions::bhideplayer() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bHidePlayer)
  return _internal_bhideplayer();
}
inline void FCinematicModeOptions::_internal_set_bhideplayer(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bhideplayer_ = value;
}
inline void FCinematicModeOptions::set_bhideplayer(bool value) {
  _internal_set_bhideplayer(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bHidePlayer)
}

// required bool bAffectsHUD = 3;
inline bool FCinematicModeOptions::_internal_has_baffectshud() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectshud() const {
  return _internal_has_baffectshud();
}
inline void FCinematicModeOptions::clear_baffectshud() {
  _impl_.baffectshud_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FCinematicModeOptions::_internal_baffectshud() const {
  return _impl_.baffectshud_;
}
inline bool FCinematicModeOptions::baffectshud() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsHUD)
  return _internal_baffectshud();
}
inline void FCinematicModeOptions::_internal_set_baffectshud(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.baffectshud_ = value;
}
inline void FCinematicModeOptions::set_baffectshud(bool value) {
  _internal_set_baffectshud(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsHUD)
}

// required bool bAffectsMovement = 4;
inline bool FCinematicModeOptions::_internal_has_baffectsmovement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsmovement() const {
  return _internal_has_baffectsmovement();
}
inline void FCinematicModeOptions::clear_baffectsmovement() {
  _impl_.baffectsmovement_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FCinematicModeOptions::_internal_baffectsmovement() const {
  return _impl_.baffectsmovement_;
}
inline bool FCinematicModeOptions::baffectsmovement() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsMovement)
  return _internal_baffectsmovement();
}
inline void FCinematicModeOptions::_internal_set_baffectsmovement(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.baffectsmovement_ = value;
}
inline void FCinematicModeOptions::set_baffectsmovement(bool value) {
  _internal_set_baffectsmovement(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsMovement)
}

// required bool bAffectsTurning = 5;
inline bool FCinematicModeOptions::_internal_has_baffectsturning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsturning() const {
  return _internal_has_baffectsturning();
}
inline void FCinematicModeOptions::clear_baffectsturning() {
  _impl_.baffectsturning_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FCinematicModeOptions::_internal_baffectsturning() const {
  return _impl_.baffectsturning_;
}
inline bool FCinematicModeOptions::baffectsturning() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsTurning)
  return _internal_baffectsturning();
}
inline void FCinematicModeOptions::_internal_set_baffectsturning(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.baffectsturning_ = value;
}
inline void FCinematicModeOptions::set_baffectsturning(bool value) {
  _internal_set_baffectsturning(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsTurning)
}

// required bool bAffectsButtons = 6;
inline bool FCinematicModeOptions::_internal_has_baffectsbuttons() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsbuttons() const {
  return _internal_has_baffectsbuttons();
}
inline void FCinematicModeOptions::clear_baffectsbuttons() {
  _impl_.baffectsbuttons_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FCinematicModeOptions::_internal_baffectsbuttons() const {
  return _impl_.baffectsbuttons_;
}
inline bool FCinematicModeOptions::baffectsbuttons() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsButtons)
  return _internal_baffectsbuttons();
}
inline void FCinematicModeOptions::_internal_set_baffectsbuttons(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.baffectsbuttons_ = value;
}
inline void FCinematicModeOptions::set_baffectsbuttons(bool value) {
  _internal_set_baffectsbuttons(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsButtons)
}

// required bool bAffectsGodMode = 7;
inline bool FCinematicModeOptions::_internal_has_baffectsgodmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsgodmode() const {
  return _internal_has_baffectsgodmode();
}
inline void FCinematicModeOptions::clear_baffectsgodmode() {
  _impl_.baffectsgodmode_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FCinematicModeOptions::_internal_baffectsgodmode() const {
  return _impl_.baffectsgodmode_;
}
inline bool FCinematicModeOptions::baffectsgodmode() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsGodMode)
  return _internal_baffectsgodmode();
}
inline void FCinematicModeOptions::_internal_set_baffectsgodmode(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.baffectsgodmode_ = value;
}
inline void FCinematicModeOptions::set_baffectsgodmode(bool value) {
  _internal_set_baffectsgodmode(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsGodMode)
}

// required bool bAffectsNoTarget = 8;
inline bool FCinematicModeOptions::_internal_has_baffectsnotarget() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsnotarget() const {
  return _internal_has_baffectsnotarget();
}
inline void FCinematicModeOptions::clear_baffectsnotarget() {
  _impl_.baffectsnotarget_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FCinematicModeOptions::_internal_baffectsnotarget() const {
  return _impl_.baffectsnotarget_;
}
inline bool FCinematicModeOptions::baffectsnotarget() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsNoTarget)
  return _internal_baffectsnotarget();
}
inline void FCinematicModeOptions::_internal_set_baffectsnotarget(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.baffectsnotarget_ = value;
}
inline void FCinematicModeOptions::set_baffectsnotarget(bool value) {
  _internal_set_baffectsnotarget(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsNoTarget)
}

// required bool bAllowCinematicSplitScreen = 9;
inline bool FCinematicModeOptions::_internal_has_ballowcinematicsplitscreen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_ballowcinematicsplitscreen() const {
  return _internal_has_ballowcinematicsplitscreen();
}
inline void FCinematicModeOptions::clear_ballowcinematicsplitscreen() {
  _impl_.ballowcinematicsplitscreen_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FCinematicModeOptions::_internal_ballowcinematicsplitscreen() const {
  return _impl_.ballowcinematicsplitscreen_;
}
inline bool FCinematicModeOptions::ballowcinematicsplitscreen() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAllowCinematicSplitScreen)
  return _internal_ballowcinematicsplitscreen();
}
inline void FCinematicModeOptions::_internal_set_ballowcinematicsplitscreen(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ballowcinematicsplitscreen_ = value;
}
inline void FCinematicModeOptions::set_ballowcinematicsplitscreen(bool value) {
  _internal_set_ballowcinematicsplitscreen(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAllowCinematicSplitScreen)
}

// required bool bAffectsAudio = 10;
inline bool FCinematicModeOptions::_internal_has_baffectsaudio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsaudio() const {
  return _internal_has_baffectsaudio();
}
inline void FCinematicModeOptions::clear_baffectsaudio() {
  _impl_.baffectsaudio_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FCinematicModeOptions::_internal_baffectsaudio() const {
  return _impl_.baffectsaudio_;
}
inline bool FCinematicModeOptions::baffectsaudio() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsAudio)
  return _internal_baffectsaudio();
}
inline void FCinematicModeOptions::_internal_set_baffectsaudio(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.baffectsaudio_ = value;
}
inline void FCinematicModeOptions::set_baffectsaudio(bool value) {
  _internal_set_baffectsaudio(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsAudio)
}

// required bool bKismetSetCinematicMode = 11;
inline bool FCinematicModeOptions::_internal_has_bkismetsetcinematicmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_bkismetsetcinematicmode() const {
  return _internal_has_bkismetsetcinematicmode();
}
inline void FCinematicModeOptions::clear_bkismetsetcinematicmode() {
  _impl_.bkismetsetcinematicmode_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FCinematicModeOptions::_internal_bkismetsetcinematicmode() const {
  return _impl_.bkismetsetcinematicmode_;
}
inline bool FCinematicModeOptions::bkismetsetcinematicmode() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bKismetSetCinematicMode)
  return _internal_bkismetsetcinematicmode();
}
inline void FCinematicModeOptions::_internal_set_bkismetsetcinematicmode(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bkismetsetcinematicmode_ = value;
}
inline void FCinematicModeOptions::set_bkismetsetcinematicmode(bool value) {
  _internal_set_bkismetsetcinematicmode(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bKismetSetCinematicMode)
}

// required bool bHideOutlines = 12;
inline bool FCinematicModeOptions::_internal_has_bhideoutlines() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_bhideoutlines() const {
  return _internal_has_bhideoutlines();
}
inline void FCinematicModeOptions::clear_bhideoutlines() {
  _impl_.bhideoutlines_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FCinematicModeOptions::_internal_bhideoutlines() const {
  return _impl_.bhideoutlines_;
}
inline bool FCinematicModeOptions::bhideoutlines() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bHideOutlines)
  return _internal_bhideoutlines();
}
inline void FCinematicModeOptions::_internal_set_bhideoutlines(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bhideoutlines_ = value;
}
inline void FCinematicModeOptions::set_bhideoutlines(bool value) {
  _internal_set_bhideoutlines(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bHideOutlines)
}

// required bool bAffectsSkills = 13;
inline bool FCinematicModeOptions::_internal_has_baffectsskills() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_baffectsskills() const {
  return _internal_has_baffectsskills();
}
inline void FCinematicModeOptions::clear_baffectsskills() {
  _impl_.baffectsskills_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool FCinematicModeOptions::_internal_baffectsskills() const {
  return _impl_.baffectsskills_;
}
inline bool FCinematicModeOptions::baffectsskills() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bAffectsSkills)
  return _internal_baffectsskills();
}
inline void FCinematicModeOptions::_internal_set_baffectsskills(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.baffectsskills_ = value;
}
inline void FCinematicModeOptions::set_baffectsskills(bool value) {
  _internal_set_baffectsskills(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bAffectsSkills)
}

// required bool bHideScreenParticles = 14;
inline bool FCinematicModeOptions::_internal_has_bhidescreenparticles() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_bhidescreenparticles() const {
  return _internal_has_bhidescreenparticles();
}
inline void FCinematicModeOptions::clear_bhidescreenparticles() {
  _impl_.bhidescreenparticles_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool FCinematicModeOptions::_internal_bhidescreenparticles() const {
  return _impl_.bhidescreenparticles_;
}
inline bool FCinematicModeOptions::bhidescreenparticles() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.bHideScreenParticles)
  return _internal_bhidescreenparticles();
}
inline void FCinematicModeOptions::_internal_set_bhidescreenparticles(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bhidescreenparticles_ = value;
}
inline void FCinematicModeOptions::set_bhidescreenparticles(bool value) {
  _internal_set_bhidescreenparticles(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.bHideScreenParticles)
}

// required int32 ApplicationMode = 15;
inline bool FCinematicModeOptions::_internal_has_applicationmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_applicationmode() const {
  return _internal_has_applicationmode();
}
inline void FCinematicModeOptions::clear_applicationmode() {
  _impl_.applicationmode_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t FCinematicModeOptions::_internal_applicationmode() const {
  return _impl_.applicationmode_;
}
inline int32_t FCinematicModeOptions::applicationmode() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.ApplicationMode)
  return _internal_applicationmode();
}
inline void FCinematicModeOptions::_internal_set_applicationmode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.applicationmode_ = value;
}
inline void FCinematicModeOptions::set_applicationmode(int32_t value) {
  _internal_set_applicationmode(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.ApplicationMode)
}

// required int32 ModeToken = 16;
inline bool FCinematicModeOptions::_internal_has_modetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FCinematicModeOptions::has_modetoken() const {
  return _internal_has_modetoken();
}
inline void FCinematicModeOptions::clear_modetoken() {
  _impl_.modetoken_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t FCinematicModeOptions::_internal_modetoken() const {
  return _impl_.modetoken_;
}
inline int32_t FCinematicModeOptions::modetoken() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.FCinematicModeOptions.ModeToken)
  return _internal_modetoken();
}
inline void FCinematicModeOptions::_internal_set_modetoken(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.modetoken_ = value;
}
inline void FCinematicModeOptions::set_modetoken(int32_t value) {
  _internal_set_modetoken(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.FCinematicModeOptions.ModeToken)
}

// -------------------------------------------------------------------

// APoplarPlayerReplicationInfo

// required .HederaDefinitions.FVector Location = 1;
inline bool APoplarPlayerReplicationInfo::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_location() const {
  return _internal_has_location();
}
inline void APoplarPlayerReplicationInfo::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HederaDefinitions::FVector& APoplarPlayerReplicationInfo::_internal_location() const {
  const ::HederaDefinitions::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& APoplarPlayerReplicationInfo::location() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Location)
  return _internal_location();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_location(
    ::HederaDefinitions::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Location)
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::release_location() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Location)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HederaDefinitions::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::mutable_location() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Location)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_location(::HederaDefinitions::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Location)
}

// required .HederaDefinitions.FRotator Rotation = 2;
inline bool APoplarPlayerReplicationInfo::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void APoplarPlayerReplicationInfo::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerReplicationInfo::_internal_rotation() const {
  const ::HederaDefinitions::FRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FRotator&>(
      ::HederaDefinitions::_FRotator_default_instance_);
}
inline const ::HederaDefinitions::FRotator& APoplarPlayerReplicationInfo::rotation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Rotation)
  return _internal_rotation();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_rotation(
    ::HederaDefinitions::FRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Rotation)
}
inline ::HederaDefinitions::FRotator* APoplarPlayerReplicationInfo::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerReplicationInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Rotation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HederaDefinitions::FRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerReplicationInfo::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::HederaDefinitions::FRotator* APoplarPlayerReplicationInfo::mutable_rotation() {
  ::HederaDefinitions::FRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Rotation)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_rotation(::HederaDefinitions::FRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Rotation)
}

// required float DrawScale = 3;
inline bool APoplarPlayerReplicationInfo::_internal_has_drawscale() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_drawscale() const {
  return _internal_has_drawscale();
}
inline void APoplarPlayerReplicationInfo::clear_drawscale() {
  _impl_.drawscale_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline float APoplarPlayerReplicationInfo::_internal_drawscale() const {
  return _impl_.drawscale_;
}
inline float APoplarPlayerReplicationInfo::drawscale() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.DrawScale)
  return _internal_drawscale();
}
inline void APoplarPlayerReplicationInfo::_internal_set_drawscale(float value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.drawscale_ = value;
}
inline void APoplarPlayerReplicationInfo::set_drawscale(float value) {
  _internal_set_drawscale(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.DrawScale)
}

// required float CustomTimeDilation = 4;
inline bool APoplarPlayerReplicationInfo::_internal_has_customtimedilation() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_customtimedilation() const {
  return _internal_has_customtimedilation();
}
inline void APoplarPlayerReplicationInfo::clear_customtimedilation() {
  _impl_.customtimedilation_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float APoplarPlayerReplicationInfo::_internal_customtimedilation() const {
  return _impl_.customtimedilation_;
}
inline float APoplarPlayerReplicationInfo::customtimedilation() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.CustomTimeDilation)
  return _internal_customtimedilation();
}
inline void APoplarPlayerReplicationInfo::_internal_set_customtimedilation(float value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.customtimedilation_ = value;
}
inline void APoplarPlayerReplicationInfo::set_customtimedilation(float value) {
  _internal_set_customtimedilation(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.CustomTimeDilation)
}

// required uint32 Physics = 5;
inline bool APoplarPlayerReplicationInfo::_internal_has_physics() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_physics() const {
  return _internal_has_physics();
}
inline void APoplarPlayerReplicationInfo::clear_physics() {
  _impl_.physics_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t APoplarPlayerReplicationInfo::_internal_physics() const {
  return _impl_.physics_;
}
inline uint32_t APoplarPlayerReplicationInfo::physics() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Physics)
  return _internal_physics();
}
inline void APoplarPlayerReplicationInfo::_internal_set_physics(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.physics_ = value;
}
inline void APoplarPlayerReplicationInfo::set_physics(uint32_t value) {
  _internal_set_physics(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.Physics)
}

// required uint32 RemoteRole = 6;
inline bool APoplarPlayerReplicationInfo::_internal_has_remoterole() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_remoterole() const {
  return _internal_has_remoterole();
}
inline void APoplarPlayerReplicationInfo::clear_remoterole() {
  _impl_.remoterole_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t APoplarPlayerReplicationInfo::_internal_remoterole() const {
  return _impl_.remoterole_;
}
inline uint32_t APoplarPlayerReplicationInfo::remoterole() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.RemoteRole)
  return _internal_remoterole();
}
inline void APoplarPlayerReplicationInfo::_internal_set_remoterole(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.remoterole_ = value;
}
inline void APoplarPlayerReplicationInfo::set_remoterole(uint32_t value) {
  _internal_set_remoterole(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.RemoteRole)
}

// required uint32 Role = 7;
inline bool APoplarPlayerReplicationInfo::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_role() const {
  return _internal_has_role();
}
inline void APoplarPlayerReplicationInfo::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t APoplarPlayerReplicationInfo::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t APoplarPlayerReplicationInfo::role() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Role)
  return _internal_role();
}
inline void APoplarPlayerReplicationInfo::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.role_ = value;
}
inline void APoplarPlayerReplicationInfo::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.Role)
}

// required uint32 ReplicatedCollisionType = 8;
inline bool APoplarPlayerReplicationInfo::_internal_has_replicatedcollisiontype() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_replicatedcollisiontype() const {
  return _internal_has_replicatedcollisiontype();
}
inline void APoplarPlayerReplicationInfo::clear_replicatedcollisiontype() {
  _impl_.replicatedcollisiontype_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t APoplarPlayerReplicationInfo::_internal_replicatedcollisiontype() const {
  return _impl_.replicatedcollisiontype_;
}
inline uint32_t APoplarPlayerReplicationInfo::replicatedcollisiontype() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCollisionType)
  return _internal_replicatedcollisiontype();
}
inline void APoplarPlayerReplicationInfo::_internal_set_replicatedcollisiontype(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.replicatedcollisiontype_ = value;
}
inline void APoplarPlayerReplicationInfo::set_replicatedcollisiontype(uint32_t value) {
  _internal_set_replicatedcollisiontype(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCollisionType)
}

// required .HederaDefinitions.ReplicatedActorReference Owner = 9;
inline bool APoplarPlayerReplicationInfo::_internal_has_owner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_owner() const {
  return _internal_has_owner();
}
inline void APoplarPlayerReplicationInfo::clear_owner() {
  if (_impl_.owner_ != nullptr) _impl_.owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_owner() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::owner() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Owner)
  return _internal_owner();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_owner(
    ::HederaDefinitions::ReplicatedActorReference* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Owner)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_owner() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Owner)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_owner() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_owner() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Owner)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_owner(::HederaDefinitions::ReplicatedActorReference* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Owner)
}

// required .HederaDefinitions.ReplicatedActorReference Base = 10;
inline bool APoplarPlayerReplicationInfo::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_base() const {
  return _internal_has_base();
}
inline void APoplarPlayerReplicationInfo::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_base() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::base() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Base)
  return _internal_base();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_base(
    ::HederaDefinitions::ReplicatedActorReference* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Base)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_base() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Base)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_base() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Base)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_base(::HederaDefinitions::ReplicatedActorReference* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Base)
}

// required bool bHidden = 11;
inline bool APoplarPlayerReplicationInfo::_internal_has_bhidden() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bhidden() const {
  return _internal_has_bhidden();
}
inline void APoplarPlayerReplicationInfo::clear_bhidden() {
  _impl_.bhidden_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bhidden() const {
  return _impl_.bhidden_;
}
inline bool APoplarPlayerReplicationInfo::bhidden() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bHidden)
  return _internal_bhidden();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bhidden(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.bhidden_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bhidden(bool value) {
  _internal_set_bhidden(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bHidden)
}

// required bool bTearOff = 12;
inline bool APoplarPlayerReplicationInfo::_internal_has_btearoff() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_btearoff() const {
  return _internal_has_btearoff();
}
inline void APoplarPlayerReplicationInfo::clear_btearoff() {
  _impl_.btearoff_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool APoplarPlayerReplicationInfo::_internal_btearoff() const {
  return _impl_.btearoff_;
}
inline bool APoplarPlayerReplicationInfo::btearoff() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bTearOff)
  return _internal_btearoff();
}
inline void APoplarPlayerReplicationInfo::_internal_set_btearoff(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.btearoff_ = value;
}
inline void APoplarPlayerReplicationInfo::set_btearoff(bool value) {
  _internal_set_btearoff(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bTearOff)
}

// required bool bHardAttach = 13;
inline bool APoplarPlayerReplicationInfo::_internal_has_bhardattach() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bhardattach() const {
  return _internal_has_bhardattach();
}
inline void APoplarPlayerReplicationInfo::clear_bhardattach() {
  _impl_.bhardattach_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bhardattach() const {
  return _impl_.bhardattach_;
}
inline bool APoplarPlayerReplicationInfo::bhardattach() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bHardAttach)
  return _internal_bhardattach();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bhardattach(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.bhardattach_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bhardattach(bool value) {
  _internal_set_bhardattach(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bHardAttach)
}

// required bool bCollideActors = 14;
inline bool APoplarPlayerReplicationInfo::_internal_has_bcollideactors() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bcollideactors() const {
  return _internal_has_bcollideactors();
}
inline void APoplarPlayerReplicationInfo::clear_bcollideactors() {
  _impl_.bcollideactors_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bcollideactors() const {
  return _impl_.bcollideactors_;
}
inline bool APoplarPlayerReplicationInfo::bcollideactors() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bCollideActors)
  return _internal_bcollideactors();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bcollideactors(bool value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.bcollideactors_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bcollideactors(bool value) {
  _internal_set_bcollideactors(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bCollideActors)
}

// required bool bCollideWorld = 15;
inline bool APoplarPlayerReplicationInfo::_internal_has_bcollideworld() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bcollideworld() const {
  return _internal_has_bcollideworld();
}
inline void APoplarPlayerReplicationInfo::clear_bcollideworld() {
  _impl_.bcollideworld_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bcollideworld() const {
  return _impl_.bcollideworld_;
}
inline bool APoplarPlayerReplicationInfo::bcollideworld() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bCollideWorld)
  return _internal_bcollideworld();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bcollideworld(bool value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.bcollideworld_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bcollideworld(bool value) {
  _internal_set_bcollideworld(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bCollideWorld)
}

// required bool bBlockActors = 16;
inline bool APoplarPlayerReplicationInfo::_internal_has_bblockactors() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bblockactors() const {
  return _internal_has_bblockactors();
}
inline void APoplarPlayerReplicationInfo::clear_bblockactors() {
  _impl_.bblockactors_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bblockactors() const {
  return _impl_.bblockactors_;
}
inline bool APoplarPlayerReplicationInfo::bblockactors() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bBlockActors)
  return _internal_bblockactors();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bblockactors(bool value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.bblockactors_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bblockactors(bool value) {
  _internal_set_bblockactors(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bBlockActors)
}

// required bool bProjTarget = 17;
inline bool APoplarPlayerReplicationInfo::_internal_has_bprojtarget() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bprojtarget() const {
  return _internal_has_bprojtarget();
}
inline void APoplarPlayerReplicationInfo::clear_bprojtarget() {
  _impl_.bprojtarget_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bprojtarget() const {
  return _impl_.bprojtarget_;
}
inline bool APoplarPlayerReplicationInfo::bprojtarget() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bProjTarget)
  return _internal_bprojtarget();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bprojtarget(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.bprojtarget_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bprojtarget(bool value) {
  _internal_set_bprojtarget(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bProjTarget)
}

// required bool bNetOwner = 18;
inline bool APoplarPlayerReplicationInfo::_internal_has_bnetowner() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bnetowner() const {
  return _internal_has_bnetowner();
}
inline void APoplarPlayerReplicationInfo::clear_bnetowner() {
  _impl_.bnetowner_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bnetowner() const {
  return _impl_.bnetowner_;
}
inline bool APoplarPlayerReplicationInfo::bnetowner() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bNetOwner)
  return _internal_bnetowner();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bnetowner(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.bnetowner_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bnetowner(bool value) {
  _internal_set_bnetowner(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bNetOwner)
}

// required .HederaDefinitions.ReplicatedActorReference Instigator = 19;
inline bool APoplarPlayerReplicationInfo::_internal_has_instigator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instigator_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_instigator() const {
  return _internal_has_instigator();
}
inline void APoplarPlayerReplicationInfo::clear_instigator() {
  if (_impl_.instigator_ != nullptr) _impl_.instigator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_instigator() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.instigator_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::instigator() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Instigator)
  return _internal_instigator();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_instigator(
    ::HederaDefinitions::ReplicatedActorReference* instigator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instigator_);
  }
  _impl_.instigator_ = instigator;
  if (instigator) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Instigator)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_instigator() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_instigator() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Instigator)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_instigator() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.instigator_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.instigator_ = p;
  }
  return _impl_.instigator_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_instigator() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_instigator();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Instigator)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_instigator(::HederaDefinitions::ReplicatedActorReference* instigator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.instigator_;
  }
  if (instigator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(instigator);
    if (message_arena != submessage_arena) {
      instigator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instigator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.instigator_ = instigator;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Instigator)
}

// required .HederaDefinitions.FVector Velocity = 20;
inline bool APoplarPlayerReplicationInfo::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_velocity() const {
  return _internal_has_velocity();
}
inline void APoplarPlayerReplicationInfo::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HederaDefinitions::FVector& APoplarPlayerReplicationInfo::_internal_velocity() const {
  const ::HederaDefinitions::FVector* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FVector&>(
      ::HederaDefinitions::_FVector_default_instance_);
}
inline const ::HederaDefinitions::FVector& APoplarPlayerReplicationInfo::velocity() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Velocity)
  return _internal_velocity();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_velocity(
    ::HederaDefinitions::FVector* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Velocity)
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HederaDefinitions::FVector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Velocity)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HederaDefinitions::FVector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FVector>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::HederaDefinitions::FVector* APoplarPlayerReplicationInfo::mutable_velocity() {
  ::HederaDefinitions::FVector* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Velocity)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_velocity(::HederaDefinitions::FVector* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Velocity)
}

// required int32 Deaths = 21;
inline bool APoplarPlayerReplicationInfo::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_deaths() const {
  return _internal_has_deaths();
}
inline void APoplarPlayerReplicationInfo::clear_deaths() {
  _impl_.deaths_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_deaths() const {
  return _impl_.deaths_;
}
inline int32_t APoplarPlayerReplicationInfo::deaths() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Deaths)
  return _internal_deaths();
}
inline void APoplarPlayerReplicationInfo::_internal_set_deaths(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.deaths_ = value;
}
inline void APoplarPlayerReplicationInfo::set_deaths(int32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.Deaths)
}

// required int32 Ping = 22;
inline bool APoplarPlayerReplicationInfo::_internal_has_ping() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_ping() const {
  return _internal_has_ping();
}
inline void APoplarPlayerReplicationInfo::clear_ping() {
  _impl_.ping_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_ping() const {
  return _impl_.ping_;
}
inline int32_t APoplarPlayerReplicationInfo::ping() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Ping)
  return _internal_ping();
}
inline void APoplarPlayerReplicationInfo::_internal_set_ping(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.ping_ = value;
}
inline void APoplarPlayerReplicationInfo::set_ping(int32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.Ping)
}

// required string PlayerName = 23;
inline bool APoplarPlayerReplicationInfo::_internal_has_playername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_playername() const {
  return _internal_has_playername();
}
inline void APoplarPlayerReplicationInfo::clear_playername() {
  _impl_.playername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& APoplarPlayerReplicationInfo::playername() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APoplarPlayerReplicationInfo::set_playername(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName)
}
inline std::string* APoplarPlayerReplicationInfo::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName)
  return _s;
}
inline const std::string& APoplarPlayerReplicationInfo::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void APoplarPlayerReplicationInfo::_internal_set_playername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* APoplarPlayerReplicationInfo::_internal_mutable_playername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* APoplarPlayerReplicationInfo::release_playername() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.playername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void APoplarPlayerReplicationInfo::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerName)
}

// required bool bAdmin = 24;
inline bool APoplarPlayerReplicationInfo::_internal_has_badmin() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_badmin() const {
  return _internal_has_badmin();
}
inline void APoplarPlayerReplicationInfo::clear_badmin() {
  _impl_.badmin_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool APoplarPlayerReplicationInfo::_internal_badmin() const {
  return _impl_.badmin_;
}
inline bool APoplarPlayerReplicationInfo::badmin() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bAdmin)
  return _internal_badmin();
}
inline void APoplarPlayerReplicationInfo::_internal_set_badmin(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.badmin_ = value;
}
inline void APoplarPlayerReplicationInfo::set_badmin(bool value) {
  _internal_set_badmin(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bAdmin)
}

// required bool bIsSpectator = 25;
inline bool APoplarPlayerReplicationInfo::_internal_has_bisspectator() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bisspectator() const {
  return _internal_has_bisspectator();
}
inline void APoplarPlayerReplicationInfo::clear_bisspectator() {
  _impl_.bisspectator_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bisspectator() const {
  return _impl_.bisspectator_;
}
inline bool APoplarPlayerReplicationInfo::bisspectator() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bIsSpectator)
  return _internal_bisspectator();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bisspectator(bool value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.bisspectator_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bisspectator(bool value) {
  _internal_set_bisspectator(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bIsSpectator)
}

// required bool bOnlySpectator = 26;
inline bool APoplarPlayerReplicationInfo::_internal_has_bonlyspectator() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bonlyspectator() const {
  return _internal_has_bonlyspectator();
}
inline void APoplarPlayerReplicationInfo::clear_bonlyspectator() {
  _impl_.bonlyspectator_ = false;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bonlyspectator() const {
  return _impl_.bonlyspectator_;
}
inline bool APoplarPlayerReplicationInfo::bonlyspectator() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bOnlySpectator)
  return _internal_bonlyspectator();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bonlyspectator(bool value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.bonlyspectator_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bonlyspectator(bool value) {
  _internal_set_bonlyspectator(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bOnlySpectator)
}

// required bool bOutOfLives = 27;
inline bool APoplarPlayerReplicationInfo::_internal_has_boutoflives() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_boutoflives() const {
  return _internal_has_boutoflives();
}
inline void APoplarPlayerReplicationInfo::clear_boutoflives() {
  _impl_.boutoflives_ = false;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_boutoflives() const {
  return _impl_.boutoflives_;
}
inline bool APoplarPlayerReplicationInfo::boutoflives() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bOutOfLives)
  return _internal_boutoflives();
}
inline void APoplarPlayerReplicationInfo::_internal_set_boutoflives(bool value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.boutoflives_ = value;
}
inline void APoplarPlayerReplicationInfo::set_boutoflives(bool value) {
  _internal_set_boutoflives(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bOutOfLives)
}

// required bool bBot = 28;
inline bool APoplarPlayerReplicationInfo::_internal_has_bbot() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bbot() const {
  return _internal_has_bbot();
}
inline void APoplarPlayerReplicationInfo::clear_bbot() {
  _impl_.bbot_ = false;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bbot() const {
  return _impl_.bbot_;
}
inline bool APoplarPlayerReplicationInfo::bbot() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bBot)
  return _internal_bbot();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bbot(bool value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.bbot_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bbot(bool value) {
  _internal_set_bbot(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bBot)
}

// required bool bFromPreviousLevel = 29;
inline bool APoplarPlayerReplicationInfo::_internal_has_bfrompreviouslevel() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bfrompreviouslevel() const {
  return _internal_has_bfrompreviouslevel();
}
inline void APoplarPlayerReplicationInfo::clear_bfrompreviouslevel() {
  _impl_.bfrompreviouslevel_ = false;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bfrompreviouslevel() const {
  return _impl_.bfrompreviouslevel_;
}
inline bool APoplarPlayerReplicationInfo::bfrompreviouslevel() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bFromPreviousLevel)
  return _internal_bfrompreviouslevel();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bfrompreviouslevel(bool value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.bfrompreviouslevel_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bfrompreviouslevel(bool value) {
  _internal_set_bfrompreviouslevel(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bFromPreviousLevel)
}

// required bool bPlayerAFK = 30;
inline bool APoplarPlayerReplicationInfo::_internal_has_bplayerafk() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bplayerafk() const {
  return _internal_has_bplayerafk();
}
inline void APoplarPlayerReplicationInfo::clear_bplayerafk() {
  _impl_.bplayerafk_ = false;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bplayerafk() const {
  return _impl_.bplayerafk_;
}
inline bool APoplarPlayerReplicationInfo::bplayerafk() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bPlayerAFK)
  return _internal_bplayerafk();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bplayerafk(bool value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.bplayerafk_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bplayerafk(bool value) {
  _internal_set_bplayerafk(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bPlayerAFK)
}

// required int32 PlayerID = 31;
inline bool APoplarPlayerReplicationInfo::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_playerid() const {
  return _internal_has_playerid();
}
inline void APoplarPlayerReplicationInfo::clear_playerid() {
  _impl_.playerid_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t APoplarPlayerReplicationInfo::playerid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerID)
  return _internal_playerid();
}
inline void APoplarPlayerReplicationInfo::_internal_set_playerid(int32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.playerid_ = value;
}
inline void APoplarPlayerReplicationInfo::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.PlayerID)
}

// required .HederaDefinitions.ReplicatedActorReference Team = 32;
inline bool APoplarPlayerReplicationInfo::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_team() const {
  return _internal_has_team();
}
inline void APoplarPlayerReplicationInfo::clear_team() {
  if (_impl_.team_ != nullptr) _impl_.team_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_team() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.team_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::team() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Team)
  return _internal_team();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_team(
    ::HederaDefinitions::ReplicatedActorReference* team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_);
  }
  _impl_.team_ = team;
  if (team) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Team)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_team() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.team_;
  _impl_.team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Team)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.team_;
  _impl_.team_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_team() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.team_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.team_ = p;
  }
  return _impl_.team_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_team() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_team();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Team)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_team(::HederaDefinitions::ReplicatedActorReference* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_;
  }
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team);
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.team_ = team;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Team)
}

// required int32 StartTime = 33;
inline bool APoplarPlayerReplicationInfo::_internal_has_starttime() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_starttime() const {
  return _internal_has_starttime();
}
inline void APoplarPlayerReplicationInfo::clear_starttime() {
  _impl_.starttime_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int32_t APoplarPlayerReplicationInfo::starttime() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.StartTime)
  return _internal_starttime();
}
inline void APoplarPlayerReplicationInfo::_internal_set_starttime(int32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.starttime_ = value;
}
inline void APoplarPlayerReplicationInfo::set_starttime(int32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.StartTime)
}

// required int32 Kills = 34;
inline bool APoplarPlayerReplicationInfo::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_kills() const {
  return _internal_has_kills();
}
inline void APoplarPlayerReplicationInfo::clear_kills() {
  _impl_.kills_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_kills() const {
  return _impl_.kills_;
}
inline int32_t APoplarPlayerReplicationInfo::kills() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Kills)
  return _internal_kills();
}
inline void APoplarPlayerReplicationInfo::_internal_set_kills(int32_t value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.kills_ = value;
}
inline void APoplarPlayerReplicationInfo::set_kills(int32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.Kills)
}

// required .HederaDefinitions.FUniqueID UniqueID = 84;
inline bool APoplarPlayerReplicationInfo::_internal_has_uniqueid() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uniqueid_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_uniqueid() const {
  return _internal_has_uniqueid();
}
inline void APoplarPlayerReplicationInfo::clear_uniqueid() {
  if (_impl_.uniqueid_ != nullptr) _impl_.uniqueid_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const ::HederaDefinitions::FUniqueID& APoplarPlayerReplicationInfo::_internal_uniqueid() const {
  const ::HederaDefinitions::FUniqueID* p = _impl_.uniqueid_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FUniqueID&>(
      ::HederaDefinitions::_FUniqueID_default_instance_);
}
inline const ::HederaDefinitions::FUniqueID& APoplarPlayerReplicationInfo::uniqueid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.UniqueID)
  return _internal_uniqueid();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_uniqueid(
    ::HederaDefinitions::FUniqueID* uniqueid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uniqueid_);
  }
  _impl_.uniqueid_ = uniqueid;
  if (uniqueid) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.UniqueID)
}
inline ::HederaDefinitions::FUniqueID* APoplarPlayerReplicationInfo::release_uniqueid() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::HederaDefinitions::FUniqueID* temp = _impl_.uniqueid_;
  _impl_.uniqueid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FUniqueID* APoplarPlayerReplicationInfo::unsafe_arena_release_uniqueid() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.UniqueID)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::HederaDefinitions::FUniqueID* temp = _impl_.uniqueid_;
  _impl_.uniqueid_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FUniqueID* APoplarPlayerReplicationInfo::_internal_mutable_uniqueid() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.uniqueid_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FUniqueID>(GetArenaForAllocation());
    _impl_.uniqueid_ = p;
  }
  return _impl_.uniqueid_;
}
inline ::HederaDefinitions::FUniqueID* APoplarPlayerReplicationInfo::mutable_uniqueid() {
  ::HederaDefinitions::FUniqueID* _msg = _internal_mutable_uniqueid();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.UniqueID)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_uniqueid(::HederaDefinitions::FUniqueID* uniqueid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uniqueid_;
  }
  if (uniqueid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uniqueid);
    if (message_arena != submessage_arena) {
      uniqueid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniqueid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.uniqueid_ = uniqueid;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.UniqueID)
}

// required int32 ExpLevel = 35;
inline bool APoplarPlayerReplicationInfo::_internal_has_explevel() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_explevel() const {
  return _internal_has_explevel();
}
inline void APoplarPlayerReplicationInfo::clear_explevel() {
  _impl_.explevel_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_explevel() const {
  return _impl_.explevel_;
}
inline int32_t APoplarPlayerReplicationInfo::explevel() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ExpLevel)
  return _internal_explevel();
}
inline void APoplarPlayerReplicationInfo::_internal_set_explevel(int32_t value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.explevel_ = value;
}
inline void APoplarPlayerReplicationInfo::set_explevel(int32_t value) {
  _internal_set_explevel(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.ExpLevel)
}

// required int32 ExpPointsNextLevelAt = 36;
inline bool APoplarPlayerReplicationInfo::_internal_has_exppointsnextlevelat() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_exppointsnextlevelat() const {
  return _internal_has_exppointsnextlevelat();
}
inline void APoplarPlayerReplicationInfo::clear_exppointsnextlevelat() {
  _impl_.exppointsnextlevelat_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_exppointsnextlevelat() const {
  return _impl_.exppointsnextlevelat_;
}
inline int32_t APoplarPlayerReplicationInfo::exppointsnextlevelat() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ExpPointsNextLevelAt)
  return _internal_exppointsnextlevelat();
}
inline void APoplarPlayerReplicationInfo::_internal_set_exppointsnextlevelat(int32_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.exppointsnextlevelat_ = value;
}
inline void APoplarPlayerReplicationInfo::set_exppointsnextlevelat(int32_t value) {
  _internal_set_exppointsnextlevelat(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.ExpPointsNextLevelAt)
}

// required int32 ExpPointsNextLevelAtBaseValue = 37;
inline bool APoplarPlayerReplicationInfo::_internal_has_exppointsnextlevelatbasevalue() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_exppointsnextlevelatbasevalue() const {
  return _internal_has_exppointsnextlevelatbasevalue();
}
inline void APoplarPlayerReplicationInfo::clear_exppointsnextlevelatbasevalue() {
  _impl_.exppointsnextlevelatbasevalue_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_exppointsnextlevelatbasevalue() const {
  return _impl_.exppointsnextlevelatbasevalue_;
}
inline int32_t APoplarPlayerReplicationInfo::exppointsnextlevelatbasevalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ExpPointsNextLevelAtBaseValue)
  return _internal_exppointsnextlevelatbasevalue();
}
inline void APoplarPlayerReplicationInfo::_internal_set_exppointsnextlevelatbasevalue(int32_t value) {
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.exppointsnextlevelatbasevalue_ = value;
}
inline void APoplarPlayerReplicationInfo::set_exppointsnextlevelatbasevalue(int32_t value) {
  _internal_set_exppointsnextlevelatbasevalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.ExpPointsNextLevelAtBaseValue)
}

// required bool bIsDead = 38;
inline bool APoplarPlayerReplicationInfo::_internal_has_bisdead() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bisdead() const {
  return _internal_has_bisdead();
}
inline void APoplarPlayerReplicationInfo::clear_bisdead() {
  _impl_.bisdead_ = false;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bisdead() const {
  return _impl_.bisdead_;
}
inline bool APoplarPlayerReplicationInfo::bisdead() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bIsDead)
  return _internal_bisdead();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bisdead(bool value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.bisdead_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bisdead(bool value) {
  _internal_set_bisdead(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bIsDead)
}

// required bool bHideOnHUDIfEnemy = 39;
inline bool APoplarPlayerReplicationInfo::_internal_has_bhideonhudifenemy() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bhideonhudifenemy() const {
  return _internal_has_bhideonhudifenemy();
}
inline void APoplarPlayerReplicationInfo::clear_bhideonhudifenemy() {
  _impl_.bhideonhudifenemy_ = false;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bhideonhudifenemy() const {
  return _impl_.bhideonhudifenemy_;
}
inline bool APoplarPlayerReplicationInfo::bhideonhudifenemy() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bHideOnHUDIfEnemy)
  return _internal_bhideonhudifenemy();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bhideonhudifenemy(bool value) {
  _impl_._has_bits_[1] |= 0x40000000u;
  _impl_.bhideonhudifenemy_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bhideonhudifenemy(bool value) {
  _internal_set_bhideonhudifenemy(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bHideOnHUDIfEnemy)
}

// required int32 GeneralSkillPoints = 40;
inline bool APoplarPlayerReplicationInfo::_internal_has_generalskillpoints() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_generalskillpoints() const {
  return _internal_has_generalskillpoints();
}
inline void APoplarPlayerReplicationInfo::clear_generalskillpoints() {
  _impl_.generalskillpoints_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_generalskillpoints() const {
  return _impl_.generalskillpoints_;
}
inline int32_t APoplarPlayerReplicationInfo::generalskillpoints() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.GeneralSkillPoints)
  return _internal_generalskillpoints();
}
inline void APoplarPlayerReplicationInfo::_internal_set_generalskillpoints(int32_t value) {
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.generalskillpoints_ = value;
}
inline void APoplarPlayerReplicationInfo::set_generalskillpoints(int32_t value) {
  _internal_set_generalskillpoints(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.GeneralSkillPoints)
}

// required int32 SpecialistSkillPoints = 41;
inline bool APoplarPlayerReplicationInfo::_internal_has_specialistskillpoints() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_specialistskillpoints() const {
  return _internal_has_specialistskillpoints();
}
inline void APoplarPlayerReplicationInfo::clear_specialistskillpoints() {
  _impl_.specialistskillpoints_ = 0;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_specialistskillpoints() const {
  return _impl_.specialistskillpoints_;
}
inline int32_t APoplarPlayerReplicationInfo::specialistskillpoints() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.SpecialistSkillPoints)
  return _internal_specialistskillpoints();
}
inline void APoplarPlayerReplicationInfo::_internal_set_specialistskillpoints(int32_t value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.specialistskillpoints_ = value;
}
inline void APoplarPlayerReplicationInfo::set_specialistskillpoints(int32_t value) {
  _internal_set_specialistskillpoints(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.SpecialistSkillPoints)
}

// required float CurrentInstantHitCriticalHitBonus = 42;
inline bool APoplarPlayerReplicationInfo::_internal_has_currentinstanthitcriticalhitbonus() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_currentinstanthitcriticalhitbonus() const {
  return _internal_has_currentinstanthitcriticalhitbonus();
}
inline void APoplarPlayerReplicationInfo::clear_currentinstanthitcriticalhitbonus() {
  _impl_.currentinstanthitcriticalhitbonus_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline float APoplarPlayerReplicationInfo::_internal_currentinstanthitcriticalhitbonus() const {
  return _impl_.currentinstanthitcriticalhitbonus_;
}
inline float APoplarPlayerReplicationInfo::currentinstanthitcriticalhitbonus() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentInstantHitCriticalHitBonus)
  return _internal_currentinstanthitcriticalhitbonus();
}
inline void APoplarPlayerReplicationInfo::_internal_set_currentinstanthitcriticalhitbonus(float value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.currentinstanthitcriticalhitbonus_ = value;
}
inline void APoplarPlayerReplicationInfo::set_currentinstanthitcriticalhitbonus(float value) {
  _internal_set_currentinstanthitcriticalhitbonus(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentInstantHitCriticalHitBonus)
}

// required float CurrentInstantHitCriticalHitBonusBaseValue = 43;
inline bool APoplarPlayerReplicationInfo::_internal_has_currentinstanthitcriticalhitbonusbasevalue() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_currentinstanthitcriticalhitbonusbasevalue() const {
  return _internal_has_currentinstanthitcriticalhitbonusbasevalue();
}
inline void APoplarPlayerReplicationInfo::clear_currentinstanthitcriticalhitbonusbasevalue() {
  _impl_.currentinstanthitcriticalhitbonusbasevalue_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline float APoplarPlayerReplicationInfo::_internal_currentinstanthitcriticalhitbonusbasevalue() const {
  return _impl_.currentinstanthitcriticalhitbonusbasevalue_;
}
inline float APoplarPlayerReplicationInfo::currentinstanthitcriticalhitbonusbasevalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentInstantHitCriticalHitBonusBaseValue)
  return _internal_currentinstanthitcriticalhitbonusbasevalue();
}
inline void APoplarPlayerReplicationInfo::_internal_set_currentinstanthitcriticalhitbonusbasevalue(float value) {
  _impl_._has_bits_[1] |= 0x10000000u;
  _impl_.currentinstanthitcriticalhitbonusbasevalue_ = value;
}
inline void APoplarPlayerReplicationInfo::set_currentinstanthitcriticalhitbonusbasevalue(float value) {
  _internal_set_currentinstanthitcriticalhitbonusbasevalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentInstantHitCriticalHitBonusBaseValue)
}

// repeated .HederaDefinitions.FCurrencyState Currency = 44;
inline int APoplarPlayerReplicationInfo::_internal_currency_size() const {
  return _impl_.currency_.size();
}
inline int APoplarPlayerReplicationInfo::currency_size() const {
  return _internal_currency_size();
}
inline void APoplarPlayerReplicationInfo::clear_currency() {
  _impl_.currency_.Clear();
}
inline ::HederaDefinitions::FCurrencyState* APoplarPlayerReplicationInfo::mutable_currency(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Currency)
  return _impl_.currency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FCurrencyState >*
APoplarPlayerReplicationInfo::mutable_currency() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.Currency)
  return &_impl_.currency_;
}
inline const ::HederaDefinitions::FCurrencyState& APoplarPlayerReplicationInfo::_internal_currency(int index) const {
  return _impl_.currency_.Get(index);
}
inline const ::HederaDefinitions::FCurrencyState& APoplarPlayerReplicationInfo::currency(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Currency)
  return _internal_currency(index);
}
inline ::HederaDefinitions::FCurrencyState* APoplarPlayerReplicationInfo::_internal_add_currency() {
  return _impl_.currency_.Add();
}
inline ::HederaDefinitions::FCurrencyState* APoplarPlayerReplicationInfo::add_currency() {
  ::HederaDefinitions::FCurrencyState* _add = _internal_add_currency();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.Currency)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FCurrencyState >&
APoplarPlayerReplicationInfo::currency() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.Currency)
  return _impl_.currency_;
}

// required .HederaDefinitions.FResourcePoolReference HealthPool = 45;
inline bool APoplarPlayerReplicationInfo::_internal_has_healthpool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.healthpool_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_healthpool() const {
  return _internal_has_healthpool();
}
inline void APoplarPlayerReplicationInfo::clear_healthpool() {
  if (_impl_.healthpool_ != nullptr) _impl_.healthpool_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::HederaDefinitions::FResourcePoolReference& APoplarPlayerReplicationInfo::_internal_healthpool() const {
  const ::HederaDefinitions::FResourcePoolReference* p = _impl_.healthpool_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FResourcePoolReference&>(
      ::HederaDefinitions::_FResourcePoolReference_default_instance_);
}
inline const ::HederaDefinitions::FResourcePoolReference& APoplarPlayerReplicationInfo::healthpool() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.HealthPool)
  return _internal_healthpool();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_healthpool(
    ::HederaDefinitions::FResourcePoolReference* healthpool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.healthpool_);
  }
  _impl_.healthpool_ = healthpool;
  if (healthpool) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.HealthPool)
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::release_healthpool() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HederaDefinitions::FResourcePoolReference* temp = _impl_.healthpool_;
  _impl_.healthpool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::unsafe_arena_release_healthpool() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.HealthPool)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HederaDefinitions::FResourcePoolReference* temp = _impl_.healthpool_;
  _impl_.healthpool_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::_internal_mutable_healthpool() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.healthpool_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FResourcePoolReference>(GetArenaForAllocation());
    _impl_.healthpool_ = p;
  }
  return _impl_.healthpool_;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::mutable_healthpool() {
  ::HederaDefinitions::FResourcePoolReference* _msg = _internal_mutable_healthpool();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.HealthPool)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_healthpool(::HederaDefinitions::FResourcePoolReference* healthpool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.healthpool_;
  }
  if (healthpool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(healthpool);
    if (message_arena != submessage_arena) {
      healthpool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, healthpool, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.healthpool_ = healthpool;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.HealthPool)
}

// required .HederaDefinitions.FResourcePoolReference ShieldArmor = 46;
inline bool APoplarPlayerReplicationInfo::_internal_has_shieldarmor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shieldarmor_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_shieldarmor() const {
  return _internal_has_shieldarmor();
}
inline void APoplarPlayerReplicationInfo::clear_shieldarmor() {
  if (_impl_.shieldarmor_ != nullptr) _impl_.shieldarmor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::HederaDefinitions::FResourcePoolReference& APoplarPlayerReplicationInfo::_internal_shieldarmor() const {
  const ::HederaDefinitions::FResourcePoolReference* p = _impl_.shieldarmor_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FResourcePoolReference&>(
      ::HederaDefinitions::_FResourcePoolReference_default_instance_);
}
inline const ::HederaDefinitions::FResourcePoolReference& APoplarPlayerReplicationInfo::shieldarmor() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ShieldArmor)
  return _internal_shieldarmor();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_shieldarmor(
    ::HederaDefinitions::FResourcePoolReference* shieldarmor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shieldarmor_);
  }
  _impl_.shieldarmor_ = shieldarmor;
  if (shieldarmor) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ShieldArmor)
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::release_shieldarmor() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HederaDefinitions::FResourcePoolReference* temp = _impl_.shieldarmor_;
  _impl_.shieldarmor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::unsafe_arena_release_shieldarmor() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.ShieldArmor)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HederaDefinitions::FResourcePoolReference* temp = _impl_.shieldarmor_;
  _impl_.shieldarmor_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::_internal_mutable_shieldarmor() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.shieldarmor_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FResourcePoolReference>(GetArenaForAllocation());
    _impl_.shieldarmor_ = p;
  }
  return _impl_.shieldarmor_;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::mutable_shieldarmor() {
  ::HederaDefinitions::FResourcePoolReference* _msg = _internal_mutable_shieldarmor();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.ShieldArmor)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_shieldarmor(::HederaDefinitions::FResourcePoolReference* shieldarmor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shieldarmor_;
  }
  if (shieldarmor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shieldarmor);
    if (message_arena != submessage_arena) {
      shieldarmor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shieldarmor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.shieldarmor_ = shieldarmor;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ShieldArmor)
}

// required .HederaDefinitions.NonReplicatedObjectReference PawnAllegiance = 47;
inline bool APoplarPlayerReplicationInfo::_internal_has_pawnallegiance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pawnallegiance_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_pawnallegiance() const {
  return _internal_has_pawnallegiance();
}
inline void APoplarPlayerReplicationInfo::clear_pawnallegiance() {
  if (_impl_.pawnallegiance_ != nullptr) _impl_.pawnallegiance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_pawnallegiance() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.pawnallegiance_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::pawnallegiance() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.PawnAllegiance)
  return _internal_pawnallegiance();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_pawnallegiance(
    ::HederaDefinitions::NonReplicatedObjectReference* pawnallegiance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawnallegiance_);
  }
  _impl_.pawnallegiance_ = pawnallegiance;
  if (pawnallegiance) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.PawnAllegiance)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::release_pawnallegiance() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.pawnallegiance_;
  _impl_.pawnallegiance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::unsafe_arena_release_pawnallegiance() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.PawnAllegiance)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.pawnallegiance_;
  _impl_.pawnallegiance_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_mutable_pawnallegiance() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.pawnallegiance_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.pawnallegiance_ = p;
  }
  return _impl_.pawnallegiance_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_pawnallegiance() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_pawnallegiance();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.PawnAllegiance)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_pawnallegiance(::HederaDefinitions::NonReplicatedObjectReference* pawnallegiance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawnallegiance_;
  }
  if (pawnallegiance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawnallegiance);
    if (message_arena != submessage_arena) {
      pawnallegiance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawnallegiance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.pawnallegiance_ = pawnallegiance;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.PawnAllegiance)
}

// required .HederaDefinitions.NonReplicatedObjectReference CharacterNameIdDef = 48;
inline bool APoplarPlayerReplicationInfo::_internal_has_characternameiddef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.characternameiddef_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_characternameiddef() const {
  return _internal_has_characternameiddef();
}
inline void APoplarPlayerReplicationInfo::clear_characternameiddef() {
  if (_impl_.characternameiddef_ != nullptr) _impl_.characternameiddef_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_characternameiddef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.characternameiddef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::characternameiddef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterNameIdDef)
  return _internal_characternameiddef();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_characternameiddef(
    ::HederaDefinitions::NonReplicatedObjectReference* characternameiddef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.characternameiddef_);
  }
  _impl_.characternameiddef_ = characternameiddef;
  if (characternameiddef) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterNameIdDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::release_characternameiddef() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.characternameiddef_;
  _impl_.characternameiddef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::unsafe_arena_release_characternameiddef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterNameIdDef)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.characternameiddef_;
  _impl_.characternameiddef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_mutable_characternameiddef() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.characternameiddef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.characternameiddef_ = p;
  }
  return _impl_.characternameiddef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_characternameiddef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_characternameiddef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterNameIdDef)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_characternameiddef(::HederaDefinitions::NonReplicatedObjectReference* characternameiddef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.characternameiddef_;
  }
  if (characternameiddef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(characternameiddef);
    if (message_arena != submessage_arena) {
      characternameiddef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, characternameiddef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.characternameiddef_ = characternameiddef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterNameIdDef)
}

// required bool bGFxMenuOpen = 49;
inline bool APoplarPlayerReplicationInfo::_internal_has_bgfxmenuopen() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bgfxmenuopen() const {
  return _internal_has_bgfxmenuopen();
}
inline void APoplarPlayerReplicationInfo::clear_bgfxmenuopen() {
  _impl_.bgfxmenuopen_ = false;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bgfxmenuopen() const {
  return _impl_.bgfxmenuopen_;
}
inline bool APoplarPlayerReplicationInfo::bgfxmenuopen() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bGFxMenuOpen)
  return _internal_bgfxmenuopen();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bgfxmenuopen(bool value) {
  _impl_._has_bits_[1] |= 0x80000000u;
  _impl_.bgfxmenuopen_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bgfxmenuopen(bool value) {
  _internal_set_bgfxmenuopen(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bGFxMenuOpen)
}

// required int32 NumTrackedSkillSlotsInUse = 50;
inline bool APoplarPlayerReplicationInfo::_internal_has_numtrackedskillslotsinuse() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_numtrackedskillslotsinuse() const {
  return _internal_has_numtrackedskillslotsinuse();
}
inline void APoplarPlayerReplicationInfo::clear_numtrackedskillslotsinuse() {
  _impl_.numtrackedskillslotsinuse_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_numtrackedskillslotsinuse() const {
  return _impl_.numtrackedskillslotsinuse_;
}
inline int32_t APoplarPlayerReplicationInfo::numtrackedskillslotsinuse() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.NumTrackedSkillSlotsInUse)
  return _internal_numtrackedskillslotsinuse();
}
inline void APoplarPlayerReplicationInfo::_internal_set_numtrackedskillslotsinuse(int32_t value) {
  _impl_._has_bits_[1] |= 0x20000000u;
  _impl_.numtrackedskillslotsinuse_ = value;
}
inline void APoplarPlayerReplicationInfo::set_numtrackedskillslotsinuse(int32_t value) {
  _internal_set_numtrackedskillslotsinuse(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.NumTrackedSkillSlotsInUse)
}

// required int32 HighestCompletedPlayThrough = 51;
inline bool APoplarPlayerReplicationInfo::_internal_has_highestcompletedplaythrough() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_highestcompletedplaythrough() const {
  return _internal_has_highestcompletedplaythrough();
}
inline void APoplarPlayerReplicationInfo::clear_highestcompletedplaythrough() {
  _impl_.highestcompletedplaythrough_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_highestcompletedplaythrough() const {
  return _impl_.highestcompletedplaythrough_;
}
inline int32_t APoplarPlayerReplicationInfo::highestcompletedplaythrough() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.HighestCompletedPlayThrough)
  return _internal_highestcompletedplaythrough();
}
inline void APoplarPlayerReplicationInfo::_internal_set_highestcompletedplaythrough(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000004u;
  _impl_.highestcompletedplaythrough_ = value;
}
inline void APoplarPlayerReplicationInfo::set_highestcompletedplaythrough(int32_t value) {
  _internal_set_highestcompletedplaythrough(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.HighestCompletedPlayThrough)
}

// required int32 NumReplicatedNouns = 52;
inline bool APoplarPlayerReplicationInfo::_internal_has_numreplicatednouns() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_numreplicatednouns() const {
  return _internal_has_numreplicatednouns();
}
inline void APoplarPlayerReplicationInfo::clear_numreplicatednouns() {
  _impl_.numreplicatednouns_ = 0;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_numreplicatednouns() const {
  return _impl_.numreplicatednouns_;
}
inline int32_t APoplarPlayerReplicationInfo::numreplicatednouns() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.NumReplicatedNouns)
  return _internal_numreplicatednouns();
}
inline void APoplarPlayerReplicationInfo::_internal_set_numreplicatednouns(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000008u;
  _impl_.numreplicatednouns_ = value;
}
inline void APoplarPlayerReplicationInfo::set_numreplicatednouns(int32_t value) {
  _internal_set_numreplicatednouns(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.NumReplicatedNouns)
}

// repeated .HederaDefinitions.FReplicatedNounAttributeState ReplicatedNouns = 53;
inline int APoplarPlayerReplicationInfo::_internal_replicatednouns_size() const {
  return _impl_.replicatednouns_.size();
}
inline int APoplarPlayerReplicationInfo::replicatednouns_size() const {
  return _internal_replicatednouns_size();
}
inline void APoplarPlayerReplicationInfo::clear_replicatednouns() {
  _impl_.replicatednouns_.Clear();
}
inline ::HederaDefinitions::FReplicatedNounAttributeState* APoplarPlayerReplicationInfo::mutable_replicatednouns(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedNouns)
  return _impl_.replicatednouns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedNounAttributeState >*
APoplarPlayerReplicationInfo::mutable_replicatednouns() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedNouns)
  return &_impl_.replicatednouns_;
}
inline const ::HederaDefinitions::FReplicatedNounAttributeState& APoplarPlayerReplicationInfo::_internal_replicatednouns(int index) const {
  return _impl_.replicatednouns_.Get(index);
}
inline const ::HederaDefinitions::FReplicatedNounAttributeState& APoplarPlayerReplicationInfo::replicatednouns(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedNouns)
  return _internal_replicatednouns(index);
}
inline ::HederaDefinitions::FReplicatedNounAttributeState* APoplarPlayerReplicationInfo::_internal_add_replicatednouns() {
  return _impl_.replicatednouns_.Add();
}
inline ::HederaDefinitions::FReplicatedNounAttributeState* APoplarPlayerReplicationInfo::add_replicatednouns() {
  ::HederaDefinitions::FReplicatedNounAttributeState* _add = _internal_add_replicatednouns();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedNouns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedNounAttributeState >&
APoplarPlayerReplicationInfo::replicatednouns() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedNouns)
  return _impl_.replicatednouns_;
}

// required .HederaDefinitions.FReplicatedStandInGear StandInGear = 54;
inline bool APoplarPlayerReplicationInfo::_internal_has_standingear() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.standingear_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_standingear() const {
  return _internal_has_standingear();
}
inline void APoplarPlayerReplicationInfo::clear_standingear() {
  if (_impl_.standingear_ != nullptr) _impl_.standingear_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::HederaDefinitions::FReplicatedStandInGear& APoplarPlayerReplicationInfo::_internal_standingear() const {
  const ::HederaDefinitions::FReplicatedStandInGear* p = _impl_.standingear_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FReplicatedStandInGear&>(
      ::HederaDefinitions::_FReplicatedStandInGear_default_instance_);
}
inline const ::HederaDefinitions::FReplicatedStandInGear& APoplarPlayerReplicationInfo::standingear() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.StandInGear)
  return _internal_standingear();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_standingear(
    ::HederaDefinitions::FReplicatedStandInGear* standingear) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.standingear_);
  }
  _impl_.standingear_ = standingear;
  if (standingear) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.StandInGear)
}
inline ::HederaDefinitions::FReplicatedStandInGear* APoplarPlayerReplicationInfo::release_standingear() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HederaDefinitions::FReplicatedStandInGear* temp = _impl_.standingear_;
  _impl_.standingear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FReplicatedStandInGear* APoplarPlayerReplicationInfo::unsafe_arena_release_standingear() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.StandInGear)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HederaDefinitions::FReplicatedStandInGear* temp = _impl_.standingear_;
  _impl_.standingear_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FReplicatedStandInGear* APoplarPlayerReplicationInfo::_internal_mutable_standingear() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.standingear_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FReplicatedStandInGear>(GetArenaForAllocation());
    _impl_.standingear_ = p;
  }
  return _impl_.standingear_;
}
inline ::HederaDefinitions::FReplicatedStandInGear* APoplarPlayerReplicationInfo::mutable_standingear() {
  ::HederaDefinitions::FReplicatedStandInGear* _msg = _internal_mutable_standingear();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.StandInGear)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_standingear(::HederaDefinitions::FReplicatedStandInGear* standingear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.standingear_;
  }
  if (standingear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(standingear);
    if (message_arena != submessage_arena) {
      standingear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standingear, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.standingear_ = standingear;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.StandInGear)
}

// repeated .HederaDefinitions.FTrackedSkillState TrackedSkills = 55;
inline int APoplarPlayerReplicationInfo::_internal_trackedskills_size() const {
  return _impl_.trackedskills_.size();
}
inline int APoplarPlayerReplicationInfo::trackedskills_size() const {
  return _internal_trackedskills_size();
}
inline void APoplarPlayerReplicationInfo::clear_trackedskills() {
  _impl_.trackedskills_.Clear();
}
inline ::HederaDefinitions::FTrackedSkillState* APoplarPlayerReplicationInfo::mutable_trackedskills(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.TrackedSkills)
  return _impl_.trackedskills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FTrackedSkillState >*
APoplarPlayerReplicationInfo::mutable_trackedskills() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.TrackedSkills)
  return &_impl_.trackedskills_;
}
inline const ::HederaDefinitions::FTrackedSkillState& APoplarPlayerReplicationInfo::_internal_trackedskills(int index) const {
  return _impl_.trackedskills_.Get(index);
}
inline const ::HederaDefinitions::FTrackedSkillState& APoplarPlayerReplicationInfo::trackedskills(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.TrackedSkills)
  return _internal_trackedskills(index);
}
inline ::HederaDefinitions::FTrackedSkillState* APoplarPlayerReplicationInfo::_internal_add_trackedskills() {
  return _impl_.trackedskills_.Add();
}
inline ::HederaDefinitions::FTrackedSkillState* APoplarPlayerReplicationInfo::add_trackedskills() {
  ::HederaDefinitions::FTrackedSkillState* _add = _internal_add_trackedskills();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.TrackedSkills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FTrackedSkillState >&
APoplarPlayerReplicationInfo::trackedskills() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.TrackedSkills)
  return _impl_.trackedskills_;
}

// required .HederaDefinitions.ReplicatedActorReference PoplarPSI = 56;
inline bool APoplarPlayerReplicationInfo::_internal_has_poplarpsi() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poplarpsi_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_poplarpsi() const {
  return _internal_has_poplarpsi();
}
inline void APoplarPlayerReplicationInfo::clear_poplarpsi() {
  if (_impl_.poplarpsi_ != nullptr) _impl_.poplarpsi_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_poplarpsi() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.poplarpsi_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::poplarpsi() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.PoplarPSI)
  return _internal_poplarpsi();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_poplarpsi(
    ::HederaDefinitions::ReplicatedActorReference* poplarpsi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poplarpsi_);
  }
  _impl_.poplarpsi_ = poplarpsi;
  if (poplarpsi) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.PoplarPSI)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_poplarpsi() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.poplarpsi_;
  _impl_.poplarpsi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_poplarpsi() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.PoplarPSI)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.poplarpsi_;
  _impl_.poplarpsi_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_poplarpsi() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.poplarpsi_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.poplarpsi_ = p;
  }
  return _impl_.poplarpsi_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_poplarpsi() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_poplarpsi();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.PoplarPSI)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_poplarpsi(::HederaDefinitions::ReplicatedActorReference* poplarpsi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.poplarpsi_;
  }
  if (poplarpsi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(poplarpsi);
    if (message_arena != submessage_arena) {
      poplarpsi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poplarpsi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.poplarpsi_ = poplarpsi;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.PoplarPSI)
}

// required bool bNPC = 57;
inline bool APoplarPlayerReplicationInfo::_internal_has_bnpc() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bnpc() const {
  return _internal_has_bnpc();
}
inline void APoplarPlayerReplicationInfo::clear_bnpc() {
  _impl_.bnpc_ = false;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bnpc() const {
  return _impl_.bnpc_;
}
inline bool APoplarPlayerReplicationInfo::bnpc() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bNPC)
  return _internal_bnpc();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bnpc(bool value) {
  _impl_._has_bits_[2] |= 0x00000001u;
  _impl_.bnpc_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bnpc(bool value) {
  _internal_set_bnpc(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bNPC)
}

// required bool bDigitalDelux = 58;
inline bool APoplarPlayerReplicationInfo::_internal_has_bdigitaldelux() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bdigitaldelux() const {
  return _internal_has_bdigitaldelux();
}
inline void APoplarPlayerReplicationInfo::clear_bdigitaldelux() {
  _impl_.bdigitaldelux_ = false;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bdigitaldelux() const {
  return _impl_.bdigitaldelux_;
}
inline bool APoplarPlayerReplicationInfo::bdigitaldelux() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bDigitalDelux)
  return _internal_bdigitaldelux();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bdigitaldelux(bool value) {
  _impl_._has_bits_[2] |= 0x00000002u;
  _impl_.bdigitaldelux_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bdigitaldelux(bool value) {
  _internal_set_bdigitaldelux(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bDigitalDelux)
}

// required bool bPlayBrowsingTaunt = 59;
inline bool APoplarPlayerReplicationInfo::_internal_has_bplaybrowsingtaunt() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bplaybrowsingtaunt() const {
  return _internal_has_bplaybrowsingtaunt();
}
inline void APoplarPlayerReplicationInfo::clear_bplaybrowsingtaunt() {
  _impl_.bplaybrowsingtaunt_ = false;
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bplaybrowsingtaunt() const {
  return _impl_.bplaybrowsingtaunt_;
}
inline bool APoplarPlayerReplicationInfo::bplaybrowsingtaunt() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bPlayBrowsingTaunt)
  return _internal_bplaybrowsingtaunt();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bplaybrowsingtaunt(bool value) {
  _impl_._has_bits_[2] |= 0x00000010u;
  _impl_.bplaybrowsingtaunt_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bplaybrowsingtaunt(bool value) {
  _internal_set_bplaybrowsingtaunt(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bPlayBrowsingTaunt)
}

// required bool bIsPvEMatch = 60;
inline bool APoplarPlayerReplicationInfo::_internal_has_bispvematch() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bispvematch() const {
  return _internal_has_bispvematch();
}
inline void APoplarPlayerReplicationInfo::clear_bispvematch() {
  _impl_.bispvematch_ = false;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bispvematch() const {
  return _impl_.bispvematch_;
}
inline bool APoplarPlayerReplicationInfo::bispvematch() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bIsPvEMatch)
  return _internal_bispvematch();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bispvematch(bool value) {
  _impl_._has_bits_[2] |= 0x00000020u;
  _impl_.bispvematch_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bispvematch(bool value) {
  _internal_set_bispvematch(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bIsPvEMatch)
}

// required bool bNeedsToCastSurrenderVote = 61;
inline bool APoplarPlayerReplicationInfo::_internal_has_bneedstocastsurrendervote() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_bneedstocastsurrendervote() const {
  return _internal_has_bneedstocastsurrendervote();
}
inline void APoplarPlayerReplicationInfo::clear_bneedstocastsurrendervote() {
  _impl_.bneedstocastsurrendervote_ = false;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline bool APoplarPlayerReplicationInfo::_internal_bneedstocastsurrendervote() const {
  return _impl_.bneedstocastsurrendervote_;
}
inline bool APoplarPlayerReplicationInfo::bneedstocastsurrendervote() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.bNeedsToCastSurrenderVote)
  return _internal_bneedstocastsurrendervote();
}
inline void APoplarPlayerReplicationInfo::_internal_set_bneedstocastsurrendervote(bool value) {
  _impl_._has_bits_[2] |= 0x00000040u;
  _impl_.bneedstocastsurrendervote_ = value;
}
inline void APoplarPlayerReplicationInfo::set_bneedstocastsurrendervote(bool value) {
  _internal_set_bneedstocastsurrendervote(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.bNeedsToCastSurrenderVote)
}

// required .HederaDefinitions.ReplicatedActorReference BotOwnerPRI = 62;
inline bool APoplarPlayerReplicationInfo::_internal_has_botownerpri() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.botownerpri_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_botownerpri() const {
  return _internal_has_botownerpri();
}
inline void APoplarPlayerReplicationInfo::clear_botownerpri() {
  if (_impl_.botownerpri_ != nullptr) _impl_.botownerpri_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_botownerpri() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.botownerpri_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::botownerpri() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.BotOwnerPRI)
  return _internal_botownerpri();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_botownerpri(
    ::HederaDefinitions::ReplicatedActorReference* botownerpri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.botownerpri_);
  }
  _impl_.botownerpri_ = botownerpri;
  if (botownerpri) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.BotOwnerPRI)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_botownerpri() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.botownerpri_;
  _impl_.botownerpri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_botownerpri() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.BotOwnerPRI)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.botownerpri_;
  _impl_.botownerpri_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_botownerpri() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.botownerpri_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.botownerpri_ = p;
  }
  return _impl_.botownerpri_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_botownerpri() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_botownerpri();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.BotOwnerPRI)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_botownerpri(::HederaDefinitions::ReplicatedActorReference* botownerpri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.botownerpri_;
  }
  if (botownerpri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(botownerpri);
    if (message_arena != submessage_arena) {
      botownerpri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, botownerpri, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.botownerpri_ = botownerpri;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.BotOwnerPRI)
}

// required int32 BotDifficulty = 63;
inline bool APoplarPlayerReplicationInfo::_internal_has_botdifficulty() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_botdifficulty() const {
  return _internal_has_botdifficulty();
}
inline void APoplarPlayerReplicationInfo::clear_botdifficulty() {
  _impl_.botdifficulty_ = 0;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline int32_t APoplarPlayerReplicationInfo::_internal_botdifficulty() const {
  return _impl_.botdifficulty_;
}
inline int32_t APoplarPlayerReplicationInfo::botdifficulty() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.BotDifficulty)
  return _internal_botdifficulty();
}
inline void APoplarPlayerReplicationInfo::_internal_set_botdifficulty(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000080u;
  _impl_.botdifficulty_ = value;
}
inline void APoplarPlayerReplicationInfo::set_botdifficulty(int32_t value) {
  _internal_set_botdifficulty(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.BotDifficulty)
}

// required .HederaDefinitions.ReplicatedActorReference MyAlertPoint = 64;
inline bool APoplarPlayerReplicationInfo::_internal_has_myalertpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.myalertpoint_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_myalertpoint() const {
  return _internal_has_myalertpoint();
}
inline void APoplarPlayerReplicationInfo::clear_myalertpoint() {
  if (_impl_.myalertpoint_ != nullptr) _impl_.myalertpoint_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_myalertpoint() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.myalertpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::myalertpoint() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.MyAlertPoint)
  return _internal_myalertpoint();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_myalertpoint(
    ::HederaDefinitions::ReplicatedActorReference* myalertpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.myalertpoint_);
  }
  _impl_.myalertpoint_ = myalertpoint;
  if (myalertpoint) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.MyAlertPoint)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_myalertpoint() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.myalertpoint_;
  _impl_.myalertpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_myalertpoint() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.MyAlertPoint)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.myalertpoint_;
  _impl_.myalertpoint_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_myalertpoint() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.myalertpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.myalertpoint_ = p;
  }
  return _impl_.myalertpoint_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_myalertpoint() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_myalertpoint();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.MyAlertPoint)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_myalertpoint(::HederaDefinitions::ReplicatedActorReference* myalertpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.myalertpoint_;
  }
  if (myalertpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(myalertpoint);
    if (message_arena != submessage_arena) {
      myalertpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myalertpoint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.myalertpoint_ = myalertpoint;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.MyAlertPoint)
}

// required .HederaDefinitions.FResourcePoolReference EnergyPool = 65;
inline bool APoplarPlayerReplicationInfo::_internal_has_energypool() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.energypool_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_energypool() const {
  return _internal_has_energypool();
}
inline void APoplarPlayerReplicationInfo::clear_energypool() {
  if (_impl_.energypool_ != nullptr) _impl_.energypool_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::HederaDefinitions::FResourcePoolReference& APoplarPlayerReplicationInfo::_internal_energypool() const {
  const ::HederaDefinitions::FResourcePoolReference* p = _impl_.energypool_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FResourcePoolReference&>(
      ::HederaDefinitions::_FResourcePoolReference_default_instance_);
}
inline const ::HederaDefinitions::FResourcePoolReference& APoplarPlayerReplicationInfo::energypool() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.EnergyPool)
  return _internal_energypool();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_energypool(
    ::HederaDefinitions::FResourcePoolReference* energypool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.energypool_);
  }
  _impl_.energypool_ = energypool;
  if (energypool) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.EnergyPool)
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::release_energypool() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::HederaDefinitions::FResourcePoolReference* temp = _impl_.energypool_;
  _impl_.energypool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::unsafe_arena_release_energypool() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.EnergyPool)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::HederaDefinitions::FResourcePoolReference* temp = _impl_.energypool_;
  _impl_.energypool_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::_internal_mutable_energypool() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.energypool_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FResourcePoolReference>(GetArenaForAllocation());
    _impl_.energypool_ = p;
  }
  return _impl_.energypool_;
}
inline ::HederaDefinitions::FResourcePoolReference* APoplarPlayerReplicationInfo::mutable_energypool() {
  ::HederaDefinitions::FResourcePoolReference* _msg = _internal_mutable_energypool();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.EnergyPool)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_energypool(::HederaDefinitions::FResourcePoolReference* energypool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.energypool_;
  }
  if (energypool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(energypool);
    if (message_arena != submessage_arena) {
      energypool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, energypool, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.energypool_ = energypool;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.EnergyPool)
}

// required .HederaDefinitions.NonReplicatedObjectReference UnitTypeDefinition = 66;
inline bool APoplarPlayerReplicationInfo::_internal_has_unittypedefinition() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unittypedefinition_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_unittypedefinition() const {
  return _internal_has_unittypedefinition();
}
inline void APoplarPlayerReplicationInfo::clear_unittypedefinition() {
  if (_impl_.unittypedefinition_ != nullptr) _impl_.unittypedefinition_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_unittypedefinition() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.unittypedefinition_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::unittypedefinition() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.UnitTypeDefinition)
  return _internal_unittypedefinition();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_unittypedefinition(
    ::HederaDefinitions::NonReplicatedObjectReference* unittypedefinition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unittypedefinition_);
  }
  _impl_.unittypedefinition_ = unittypedefinition;
  if (unittypedefinition) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.UnitTypeDefinition)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::release_unittypedefinition() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.unittypedefinition_;
  _impl_.unittypedefinition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::unsafe_arena_release_unittypedefinition() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.UnitTypeDefinition)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.unittypedefinition_;
  _impl_.unittypedefinition_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_mutable_unittypedefinition() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.unittypedefinition_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.unittypedefinition_ = p;
  }
  return _impl_.unittypedefinition_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_unittypedefinition() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_unittypedefinition();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.UnitTypeDefinition)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_unittypedefinition(::HederaDefinitions::NonReplicatedObjectReference* unittypedefinition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unittypedefinition_;
  }
  if (unittypedefinition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unittypedefinition);
    if (message_arena != submessage_arena) {
      unittypedefinition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unittypedefinition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.unittypedefinition_ = unittypedefinition;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.UnitTypeDefinition)
}

// required .HederaDefinitions.ReplicatedActorReference StatReplicationInfo = 67;
inline bool APoplarPlayerReplicationInfo::_internal_has_statreplicationinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statreplicationinfo_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_statreplicationinfo() const {
  return _internal_has_statreplicationinfo();
}
inline void APoplarPlayerReplicationInfo::clear_statreplicationinfo() {
  if (_impl_.statreplicationinfo_ != nullptr) _impl_.statreplicationinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_statreplicationinfo() const {
  const ::HederaDefinitions::ReplicatedActorReference* p = _impl_.statreplicationinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::ReplicatedActorReference&>(
      ::HederaDefinitions::_ReplicatedActorReference_default_instance_);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::statreplicationinfo() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.StatReplicationInfo)
  return _internal_statreplicationinfo();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_statreplicationinfo(
    ::HederaDefinitions::ReplicatedActorReference* statreplicationinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statreplicationinfo_);
  }
  _impl_.statreplicationinfo_ = statreplicationinfo;
  if (statreplicationinfo) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.StatReplicationInfo)
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::release_statreplicationinfo() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.statreplicationinfo_;
  _impl_.statreplicationinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::unsafe_arena_release_statreplicationinfo() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.StatReplicationInfo)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::HederaDefinitions::ReplicatedActorReference* temp = _impl_.statreplicationinfo_;
  _impl_.statreplicationinfo_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_mutable_statreplicationinfo() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.statreplicationinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::ReplicatedActorReference>(GetArenaForAllocation());
    _impl_.statreplicationinfo_ = p;
  }
  return _impl_.statreplicationinfo_;
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_statreplicationinfo() {
  ::HederaDefinitions::ReplicatedActorReference* _msg = _internal_mutable_statreplicationinfo();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.StatReplicationInfo)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_statreplicationinfo(::HederaDefinitions::ReplicatedActorReference* statreplicationinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.statreplicationinfo_;
  }
  if (statreplicationinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statreplicationinfo);
    if (message_arena != submessage_arena) {
      statreplicationinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statreplicationinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.statreplicationinfo_ = statreplicationinfo;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.StatReplicationInfo)
}

// repeated .HederaDefinitions.ReplicatedActorReference NemesisPRIArray = 68;
inline int APoplarPlayerReplicationInfo::_internal_nemesispriarray_size() const {
  return _impl_.nemesispriarray_.size();
}
inline int APoplarPlayerReplicationInfo::nemesispriarray_size() const {
  return _internal_nemesispriarray_size();
}
inline void APoplarPlayerReplicationInfo::clear_nemesispriarray() {
  _impl_.nemesispriarray_.Clear();
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::mutable_nemesispriarray(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.NemesisPRIArray)
  return _impl_.nemesispriarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ReplicatedActorReference >*
APoplarPlayerReplicationInfo::mutable_nemesispriarray() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.NemesisPRIArray)
  return &_impl_.nemesispriarray_;
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::_internal_nemesispriarray(int index) const {
  return _impl_.nemesispriarray_.Get(index);
}
inline const ::HederaDefinitions::ReplicatedActorReference& APoplarPlayerReplicationInfo::nemesispriarray(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.NemesisPRIArray)
  return _internal_nemesispriarray(index);
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::_internal_add_nemesispriarray() {
  return _impl_.nemesispriarray_.Add();
}
inline ::HederaDefinitions::ReplicatedActorReference* APoplarPlayerReplicationInfo::add_nemesispriarray() {
  ::HederaDefinitions::ReplicatedActorReference* _add = _internal_add_nemesispriarray();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.NemesisPRIArray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ReplicatedActorReference >&
APoplarPlayerReplicationInfo::nemesispriarray() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.NemesisPRIArray)
  return _impl_.nemesispriarray_;
}

// repeated .HederaDefinitions.FManagedActorCountData ManagedActorCounts = 69;
inline int APoplarPlayerReplicationInfo::_internal_managedactorcounts_size() const {
  return _impl_.managedactorcounts_.size();
}
inline int APoplarPlayerReplicationInfo::managedactorcounts_size() const {
  return _internal_managedactorcounts_size();
}
inline void APoplarPlayerReplicationInfo::clear_managedactorcounts() {
  _impl_.managedactorcounts_.Clear();
}
inline ::HederaDefinitions::FManagedActorCountData* APoplarPlayerReplicationInfo::mutable_managedactorcounts(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.ManagedActorCounts)
  return _impl_.managedactorcounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FManagedActorCountData >*
APoplarPlayerReplicationInfo::mutable_managedactorcounts() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.ManagedActorCounts)
  return &_impl_.managedactorcounts_;
}
inline const ::HederaDefinitions::FManagedActorCountData& APoplarPlayerReplicationInfo::_internal_managedactorcounts(int index) const {
  return _impl_.managedactorcounts_.Get(index);
}
inline const ::HederaDefinitions::FManagedActorCountData& APoplarPlayerReplicationInfo::managedactorcounts(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ManagedActorCounts)
  return _internal_managedactorcounts(index);
}
inline ::HederaDefinitions::FManagedActorCountData* APoplarPlayerReplicationInfo::_internal_add_managedactorcounts() {
  return _impl_.managedactorcounts_.Add();
}
inline ::HederaDefinitions::FManagedActorCountData* APoplarPlayerReplicationInfo::add_managedactorcounts() {
  ::HederaDefinitions::FManagedActorCountData* _add = _internal_add_managedactorcounts();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.ManagedActorCounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FManagedActorCountData >&
APoplarPlayerReplicationInfo::managedactorcounts() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.ManagedActorCounts)
  return _impl_.managedactorcounts_;
}

// required uint32 ReplicatedRespawnTimeRemaining = 70;
inline bool APoplarPlayerReplicationInfo::_internal_has_replicatedrespawntimeremaining() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_replicatedrespawntimeremaining() const {
  return _internal_has_replicatedrespawntimeremaining();
}
inline void APoplarPlayerReplicationInfo::clear_replicatedrespawntimeremaining() {
  _impl_.replicatedrespawntimeremaining_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline uint32_t APoplarPlayerReplicationInfo::_internal_replicatedrespawntimeremaining() const {
  return _impl_.replicatedrespawntimeremaining_;
}
inline uint32_t APoplarPlayerReplicationInfo::replicatedrespawntimeremaining() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedRespawnTimeRemaining)
  return _internal_replicatedrespawntimeremaining();
}
inline void APoplarPlayerReplicationInfo::_internal_set_replicatedrespawntimeremaining(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000100u;
  _impl_.replicatedrespawntimeremaining_ = value;
}
inline void APoplarPlayerReplicationInfo::set_replicatedrespawntimeremaining(uint32_t value) {
  _internal_set_replicatedrespawntimeremaining(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedRespawnTimeRemaining)
}

// required uint32 CharacterSelectionState = 71;
inline bool APoplarPlayerReplicationInfo::_internal_has_characterselectionstate() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_characterselectionstate() const {
  return _internal_has_characterselectionstate();
}
inline void APoplarPlayerReplicationInfo::clear_characterselectionstate() {
  _impl_.characterselectionstate_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline uint32_t APoplarPlayerReplicationInfo::_internal_characterselectionstate() const {
  return _impl_.characterselectionstate_;
}
inline uint32_t APoplarPlayerReplicationInfo::characterselectionstate() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterSelectionState)
  return _internal_characterselectionstate();
}
inline void APoplarPlayerReplicationInfo::_internal_set_characterselectionstate(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000200u;
  _impl_.characterselectionstate_ = value;
}
inline void APoplarPlayerReplicationInfo::set_characterselectionstate(uint32_t value) {
  _internal_set_characterselectionstate(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.CharacterSelectionState)
}

// repeated int32 ActivatedPerkFlags = 72;
inline int APoplarPlayerReplicationInfo::_internal_activatedperkflags_size() const {
  return _impl_.activatedperkflags_.size();
}
inline int APoplarPlayerReplicationInfo::activatedperkflags_size() const {
  return _internal_activatedperkflags_size();
}
inline void APoplarPlayerReplicationInfo::clear_activatedperkflags() {
  _impl_.activatedperkflags_.Clear();
}
inline int32_t APoplarPlayerReplicationInfo::_internal_activatedperkflags(int index) const {
  return _impl_.activatedperkflags_.Get(index);
}
inline int32_t APoplarPlayerReplicationInfo::activatedperkflags(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ActivatedPerkFlags)
  return _internal_activatedperkflags(index);
}
inline void APoplarPlayerReplicationInfo::set_activatedperkflags(int index, int32_t value) {
  _impl_.activatedperkflags_.Set(index, value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.ActivatedPerkFlags)
}
inline void APoplarPlayerReplicationInfo::_internal_add_activatedperkflags(int32_t value) {
  _impl_.activatedperkflags_.Add(value);
}
inline void APoplarPlayerReplicationInfo::add_activatedperkflags(int32_t value) {
  _internal_add_activatedperkflags(value);
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.ActivatedPerkFlags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
APoplarPlayerReplicationInfo::_internal_activatedperkflags() const {
  return _impl_.activatedperkflags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
APoplarPlayerReplicationInfo::activatedperkflags() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.ActivatedPerkFlags)
  return _internal_activatedperkflags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
APoplarPlayerReplicationInfo::_internal_mutable_activatedperkflags() {
  return &_impl_.activatedperkflags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
APoplarPlayerReplicationInfo::mutable_activatedperkflags() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.ActivatedPerkFlags)
  return _internal_mutable_activatedperkflags();
}

// repeated .HederaDefinitions.FReplicatedPerkItem Perks = 73;
inline int APoplarPlayerReplicationInfo::_internal_perks_size() const {
  return _impl_.perks_.size();
}
inline int APoplarPlayerReplicationInfo::perks_size() const {
  return _internal_perks_size();
}
inline void APoplarPlayerReplicationInfo::clear_perks() {
  _impl_.perks_.Clear();
}
inline ::HederaDefinitions::FReplicatedPerkItem* APoplarPlayerReplicationInfo::mutable_perks(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Perks)
  return _impl_.perks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedPerkItem >*
APoplarPlayerReplicationInfo::mutable_perks() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.Perks)
  return &_impl_.perks_;
}
inline const ::HederaDefinitions::FReplicatedPerkItem& APoplarPlayerReplicationInfo::_internal_perks(int index) const {
  return _impl_.perks_.Get(index);
}
inline const ::HederaDefinitions::FReplicatedPerkItem& APoplarPlayerReplicationInfo::perks(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Perks)
  return _internal_perks(index);
}
inline ::HederaDefinitions::FReplicatedPerkItem* APoplarPlayerReplicationInfo::_internal_add_perks() {
  return _impl_.perks_.Add();
}
inline ::HederaDefinitions::FReplicatedPerkItem* APoplarPlayerReplicationInfo::add_perks() {
  ::HederaDefinitions::FReplicatedPerkItem* _add = _internal_add_perks();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.Perks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::FReplicatedPerkItem >&
APoplarPlayerReplicationInfo::perks() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.Perks)
  return _impl_.perks_;
}

// required float OvershieldStrength = 74;
inline bool APoplarPlayerReplicationInfo::_internal_has_overshieldstrength() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_overshieldstrength() const {
  return _internal_has_overshieldstrength();
}
inline void APoplarPlayerReplicationInfo::clear_overshieldstrength() {
  _impl_.overshieldstrength_ = 0;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline float APoplarPlayerReplicationInfo::_internal_overshieldstrength() const {
  return _impl_.overshieldstrength_;
}
inline float APoplarPlayerReplicationInfo::overshieldstrength() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.OvershieldStrength)
  return _internal_overshieldstrength();
}
inline void APoplarPlayerReplicationInfo::_internal_set_overshieldstrength(float value) {
  _impl_._has_bits_[2] |= 0x00000400u;
  _impl_.overshieldstrength_ = value;
}
inline void APoplarPlayerReplicationInfo::set_overshieldstrength(float value) {
  _internal_set_overshieldstrength(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.OvershieldStrength)
}

// required float MaxOvershieldValue = 75;
inline bool APoplarPlayerReplicationInfo::_internal_has_maxovershieldvalue() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_maxovershieldvalue() const {
  return _internal_has_maxovershieldvalue();
}
inline void APoplarPlayerReplicationInfo::clear_maxovershieldvalue() {
  _impl_.maxovershieldvalue_ = 0;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline float APoplarPlayerReplicationInfo::_internal_maxovershieldvalue() const {
  return _impl_.maxovershieldvalue_;
}
inline float APoplarPlayerReplicationInfo::maxovershieldvalue() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.MaxOvershieldValue)
  return _internal_maxovershieldvalue();
}
inline void APoplarPlayerReplicationInfo::_internal_set_maxovershieldvalue(float value) {
  _impl_._has_bits_[2] |= 0x00000800u;
  _impl_.maxovershieldvalue_ = value;
}
inline void APoplarPlayerReplicationInfo::set_maxovershieldvalue(float value) {
  _internal_set_maxovershieldvalue(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.APoplarPlayerReplicationInfo.MaxOvershieldValue)
}

// required .HederaDefinitions.NonReplicatedObjectReference BrowseCharacterNameIdDef = 76;
inline bool APoplarPlayerReplicationInfo::_internal_has_browsecharacternameiddef() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.browsecharacternameiddef_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_browsecharacternameiddef() const {
  return _internal_has_browsecharacternameiddef();
}
inline void APoplarPlayerReplicationInfo::clear_browsecharacternameiddef() {
  if (_impl_.browsecharacternameiddef_ != nullptr) _impl_.browsecharacternameiddef_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_browsecharacternameiddef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.browsecharacternameiddef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::browsecharacternameiddef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseCharacterNameIdDef)
  return _internal_browsecharacternameiddef();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_browsecharacternameiddef(
    ::HederaDefinitions::NonReplicatedObjectReference* browsecharacternameiddef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.browsecharacternameiddef_);
  }
  _impl_.browsecharacternameiddef_ = browsecharacternameiddef;
  if (browsecharacternameiddef) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseCharacterNameIdDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::release_browsecharacternameiddef() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.browsecharacternameiddef_;
  _impl_.browsecharacternameiddef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::unsafe_arena_release_browsecharacternameiddef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseCharacterNameIdDef)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.browsecharacternameiddef_;
  _impl_.browsecharacternameiddef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_mutable_browsecharacternameiddef() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.browsecharacternameiddef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.browsecharacternameiddef_ = p;
  }
  return _impl_.browsecharacternameiddef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_browsecharacternameiddef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_browsecharacternameiddef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseCharacterNameIdDef)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_browsecharacternameiddef(::HederaDefinitions::NonReplicatedObjectReference* browsecharacternameiddef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.browsecharacternameiddef_;
  }
  if (browsecharacternameiddef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(browsecharacternameiddef);
    if (message_arena != submessage_arena) {
      browsecharacternameiddef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, browsecharacternameiddef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.browsecharacternameiddef_ = browsecharacternameiddef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseCharacterNameIdDef)
}

// required .HederaDefinitions.NonReplicatedObjectReference BrowseSkinIdDef = 77;
inline bool APoplarPlayerReplicationInfo::_internal_has_browseskiniddef() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.browseskiniddef_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_browseskiniddef() const {
  return _internal_has_browseskiniddef();
}
inline void APoplarPlayerReplicationInfo::clear_browseskiniddef() {
  if (_impl_.browseskiniddef_ != nullptr) _impl_.browseskiniddef_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_browseskiniddef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.browseskiniddef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::browseskiniddef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseSkinIdDef)
  return _internal_browseskiniddef();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_browseskiniddef(
    ::HederaDefinitions::NonReplicatedObjectReference* browseskiniddef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.browseskiniddef_);
  }
  _impl_.browseskiniddef_ = browseskiniddef;
  if (browseskiniddef) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseSkinIdDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::release_browseskiniddef() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.browseskiniddef_;
  _impl_.browseskiniddef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::unsafe_arena_release_browseskiniddef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseSkinIdDef)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.browseskiniddef_;
  _impl_.browseskiniddef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_mutable_browseskiniddef() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.browseskiniddef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.browseskiniddef_ = p;
  }
  return _impl_.browseskiniddef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_browseskiniddef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_browseskiniddef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseSkinIdDef)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_browseskiniddef(::HederaDefinitions::NonReplicatedObjectReference* browseskiniddef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.browseskiniddef_;
  }
  if (browseskiniddef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(browseskiniddef);
    if (message_arena != submessage_arena) {
      browseskiniddef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, browseskiniddef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.browseskiniddef_ = browseskiniddef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.BrowseSkinIdDef)
}

// required .HederaDefinitions.NonReplicatedObjectReference SkinIdDef = 78;
inline bool APoplarPlayerReplicationInfo::_internal_has_skiniddef() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skiniddef_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_skiniddef() const {
  return _internal_has_skiniddef();
}
inline void APoplarPlayerReplicationInfo::clear_skiniddef() {
  if (_impl_.skiniddef_ != nullptr) _impl_.skiniddef_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_skiniddef() const {
  const ::HederaDefinitions::NonReplicatedObjectReference* p = _impl_.skiniddef_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::NonReplicatedObjectReference&>(
      ::HederaDefinitions::_NonReplicatedObjectReference_default_instance_);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::skiniddef() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.SkinIdDef)
  return _internal_skiniddef();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_skiniddef(
    ::HederaDefinitions::NonReplicatedObjectReference* skiniddef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skiniddef_);
  }
  _impl_.skiniddef_ = skiniddef;
  if (skiniddef) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.SkinIdDef)
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::release_skiniddef() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.skiniddef_;
  _impl_.skiniddef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::unsafe_arena_release_skiniddef() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.SkinIdDef)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::HederaDefinitions::NonReplicatedObjectReference* temp = _impl_.skiniddef_;
  _impl_.skiniddef_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_mutable_skiniddef() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.skiniddef_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::NonReplicatedObjectReference>(GetArenaForAllocation());
    _impl_.skiniddef_ = p;
  }
  return _impl_.skiniddef_;
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_skiniddef() {
  ::HederaDefinitions::NonReplicatedObjectReference* _msg = _internal_mutable_skiniddef();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.SkinIdDef)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_skiniddef(::HederaDefinitions::NonReplicatedObjectReference* skiniddef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skiniddef_;
  }
  if (skiniddef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skiniddef);
    if (message_arena != submessage_arena) {
      skiniddef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skiniddef, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.skiniddef_ = skiniddef;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.SkinIdDef)
}

// required .HederaDefinitions.FAugSetInstance Augs = 79;
inline bool APoplarPlayerReplicationInfo::_internal_has_augs() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.augs_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_augs() const {
  return _internal_has_augs();
}
inline void APoplarPlayerReplicationInfo::clear_augs() {
  if (_impl_.augs_ != nullptr) _impl_.augs_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::HederaDefinitions::FAugSetInstance& APoplarPlayerReplicationInfo::_internal_augs() const {
  const ::HederaDefinitions::FAugSetInstance* p = _impl_.augs_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FAugSetInstance&>(
      ::HederaDefinitions::_FAugSetInstance_default_instance_);
}
inline const ::HederaDefinitions::FAugSetInstance& APoplarPlayerReplicationInfo::augs() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.Augs)
  return _internal_augs();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_augs(
    ::HederaDefinitions::FAugSetInstance* augs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.augs_);
  }
  _impl_.augs_ = augs;
  if (augs) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Augs)
}
inline ::HederaDefinitions::FAugSetInstance* APoplarPlayerReplicationInfo::release_augs() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::HederaDefinitions::FAugSetInstance* temp = _impl_.augs_;
  _impl_.augs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FAugSetInstance* APoplarPlayerReplicationInfo::unsafe_arena_release_augs() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.Augs)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::HederaDefinitions::FAugSetInstance* temp = _impl_.augs_;
  _impl_.augs_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FAugSetInstance* APoplarPlayerReplicationInfo::_internal_mutable_augs() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.augs_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FAugSetInstance>(GetArenaForAllocation());
    _impl_.augs_ = p;
  }
  return _impl_.augs_;
}
inline ::HederaDefinitions::FAugSetInstance* APoplarPlayerReplicationInfo::mutable_augs() {
  ::HederaDefinitions::FAugSetInstance* _msg = _internal_mutable_augs();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.Augs)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_augs(::HederaDefinitions::FAugSetInstance* augs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.augs_;
  }
  if (augs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(augs);
    if (message_arena != submessage_arena) {
      augs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, augs, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.augs_ = augs;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.Augs)
}

// required .HederaDefinitions.FReplicatedBehaviorConsumerState ReplicatedBehaviorConsumerState = 80;
inline bool APoplarPlayerReplicationInfo::_internal_has_replicatedbehaviorconsumerstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replicatedbehaviorconsumerstate_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_replicatedbehaviorconsumerstate() const {
  return _internal_has_replicatedbehaviorconsumerstate();
}
inline void APoplarPlayerReplicationInfo::clear_replicatedbehaviorconsumerstate() {
  if (_impl_.replicatedbehaviorconsumerstate_ != nullptr) _impl_.replicatedbehaviorconsumerstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::HederaDefinitions::FReplicatedBehaviorConsumerState& APoplarPlayerReplicationInfo::_internal_replicatedbehaviorconsumerstate() const {
  const ::HederaDefinitions::FReplicatedBehaviorConsumerState* p = _impl_.replicatedbehaviorconsumerstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FReplicatedBehaviorConsumerState&>(
      ::HederaDefinitions::_FReplicatedBehaviorConsumerState_default_instance_);
}
inline const ::HederaDefinitions::FReplicatedBehaviorConsumerState& APoplarPlayerReplicationInfo::replicatedbehaviorconsumerstate() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorConsumerState)
  return _internal_replicatedbehaviorconsumerstate();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_replicatedbehaviorconsumerstate(
    ::HederaDefinitions::FReplicatedBehaviorConsumerState* replicatedbehaviorconsumerstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replicatedbehaviorconsumerstate_);
  }
  _impl_.replicatedbehaviorconsumerstate_ = replicatedbehaviorconsumerstate;
  if (replicatedbehaviorconsumerstate) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorConsumerState)
}
inline ::HederaDefinitions::FReplicatedBehaviorConsumerState* APoplarPlayerReplicationInfo::release_replicatedbehaviorconsumerstate() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::HederaDefinitions::FReplicatedBehaviorConsumerState* temp = _impl_.replicatedbehaviorconsumerstate_;
  _impl_.replicatedbehaviorconsumerstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FReplicatedBehaviorConsumerState* APoplarPlayerReplicationInfo::unsafe_arena_release_replicatedbehaviorconsumerstate() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorConsumerState)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::HederaDefinitions::FReplicatedBehaviorConsumerState* temp = _impl_.replicatedbehaviorconsumerstate_;
  _impl_.replicatedbehaviorconsumerstate_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FReplicatedBehaviorConsumerState* APoplarPlayerReplicationInfo::_internal_mutable_replicatedbehaviorconsumerstate() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.replicatedbehaviorconsumerstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FReplicatedBehaviorConsumerState>(GetArenaForAllocation());
    _impl_.replicatedbehaviorconsumerstate_ = p;
  }
  return _impl_.replicatedbehaviorconsumerstate_;
}
inline ::HederaDefinitions::FReplicatedBehaviorConsumerState* APoplarPlayerReplicationInfo::mutable_replicatedbehaviorconsumerstate() {
  ::HederaDefinitions::FReplicatedBehaviorConsumerState* _msg = _internal_mutable_replicatedbehaviorconsumerstate();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorConsumerState)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_replicatedbehaviorconsumerstate(::HederaDefinitions::FReplicatedBehaviorConsumerState* replicatedbehaviorconsumerstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.replicatedbehaviorconsumerstate_;
  }
  if (replicatedbehaviorconsumerstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replicatedbehaviorconsumerstate);
    if (message_arena != submessage_arena) {
      replicatedbehaviorconsumerstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicatedbehaviorconsumerstate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.replicatedbehaviorconsumerstate_ = replicatedbehaviorconsumerstate;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorConsumerState)
}

// required .HederaDefinitions.FReplicatedBehaviorEvent ReplicatedBehaviorEvent = 81;
inline bool APoplarPlayerReplicationInfo::_internal_has_replicatedbehaviorevent() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replicatedbehaviorevent_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_replicatedbehaviorevent() const {
  return _internal_has_replicatedbehaviorevent();
}
inline void APoplarPlayerReplicationInfo::clear_replicatedbehaviorevent() {
  if (_impl_.replicatedbehaviorevent_ != nullptr) _impl_.replicatedbehaviorevent_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::HederaDefinitions::FReplicatedBehaviorEvent& APoplarPlayerReplicationInfo::_internal_replicatedbehaviorevent() const {
  const ::HederaDefinitions::FReplicatedBehaviorEvent* p = _impl_.replicatedbehaviorevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FReplicatedBehaviorEvent&>(
      ::HederaDefinitions::_FReplicatedBehaviorEvent_default_instance_);
}
inline const ::HederaDefinitions::FReplicatedBehaviorEvent& APoplarPlayerReplicationInfo::replicatedbehaviorevent() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorEvent)
  return _internal_replicatedbehaviorevent();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_replicatedbehaviorevent(
    ::HederaDefinitions::FReplicatedBehaviorEvent* replicatedbehaviorevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replicatedbehaviorevent_);
  }
  _impl_.replicatedbehaviorevent_ = replicatedbehaviorevent;
  if (replicatedbehaviorevent) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorEvent)
}
inline ::HederaDefinitions::FReplicatedBehaviorEvent* APoplarPlayerReplicationInfo::release_replicatedbehaviorevent() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::HederaDefinitions::FReplicatedBehaviorEvent* temp = _impl_.replicatedbehaviorevent_;
  _impl_.replicatedbehaviorevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FReplicatedBehaviorEvent* APoplarPlayerReplicationInfo::unsafe_arena_release_replicatedbehaviorevent() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorEvent)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::HederaDefinitions::FReplicatedBehaviorEvent* temp = _impl_.replicatedbehaviorevent_;
  _impl_.replicatedbehaviorevent_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FReplicatedBehaviorEvent* APoplarPlayerReplicationInfo::_internal_mutable_replicatedbehaviorevent() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.replicatedbehaviorevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FReplicatedBehaviorEvent>(GetArenaForAllocation());
    _impl_.replicatedbehaviorevent_ = p;
  }
  return _impl_.replicatedbehaviorevent_;
}
inline ::HederaDefinitions::FReplicatedBehaviorEvent* APoplarPlayerReplicationInfo::mutable_replicatedbehaviorevent() {
  ::HederaDefinitions::FReplicatedBehaviorEvent* _msg = _internal_mutable_replicatedbehaviorevent();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorEvent)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_replicatedbehaviorevent(::HederaDefinitions::FReplicatedBehaviorEvent* replicatedbehaviorevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.replicatedbehaviorevent_;
  }
  if (replicatedbehaviorevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replicatedbehaviorevent);
    if (message_arena != submessage_arena) {
      replicatedbehaviorevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicatedbehaviorevent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.replicatedbehaviorevent_ = replicatedbehaviorevent;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedBehaviorEvent)
}

// required .HederaDefinitions.FCinematicModeOptions ReplicatedCinematicModeOptions = 82;
inline bool APoplarPlayerReplicationInfo::_internal_has_replicatedcinematicmodeoptions() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replicatedcinematicmodeoptions_ != nullptr);
  return value;
}
inline bool APoplarPlayerReplicationInfo::has_replicatedcinematicmodeoptions() const {
  return _internal_has_replicatedcinematicmodeoptions();
}
inline void APoplarPlayerReplicationInfo::clear_replicatedcinematicmodeoptions() {
  if (_impl_.replicatedcinematicmodeoptions_ != nullptr) _impl_.replicatedcinematicmodeoptions_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::HederaDefinitions::FCinematicModeOptions& APoplarPlayerReplicationInfo::_internal_replicatedcinematicmodeoptions() const {
  const ::HederaDefinitions::FCinematicModeOptions* p = _impl_.replicatedcinematicmodeoptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::HederaDefinitions::FCinematicModeOptions&>(
      ::HederaDefinitions::_FCinematicModeOptions_default_instance_);
}
inline const ::HederaDefinitions::FCinematicModeOptions& APoplarPlayerReplicationInfo::replicatedcinematicmodeoptions() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCinematicModeOptions)
  return _internal_replicatedcinematicmodeoptions();
}
inline void APoplarPlayerReplicationInfo::unsafe_arena_set_allocated_replicatedcinematicmodeoptions(
    ::HederaDefinitions::FCinematicModeOptions* replicatedcinematicmodeoptions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replicatedcinematicmodeoptions_);
  }
  _impl_.replicatedcinematicmodeoptions_ = replicatedcinematicmodeoptions;
  if (replicatedcinematicmodeoptions) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCinematicModeOptions)
}
inline ::HederaDefinitions::FCinematicModeOptions* APoplarPlayerReplicationInfo::release_replicatedcinematicmodeoptions() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::HederaDefinitions::FCinematicModeOptions* temp = _impl_.replicatedcinematicmodeoptions_;
  _impl_.replicatedcinematicmodeoptions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HederaDefinitions::FCinematicModeOptions* APoplarPlayerReplicationInfo::unsafe_arena_release_replicatedcinematicmodeoptions() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCinematicModeOptions)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::HederaDefinitions::FCinematicModeOptions* temp = _impl_.replicatedcinematicmodeoptions_;
  _impl_.replicatedcinematicmodeoptions_ = nullptr;
  return temp;
}
inline ::HederaDefinitions::FCinematicModeOptions* APoplarPlayerReplicationInfo::_internal_mutable_replicatedcinematicmodeoptions() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.replicatedcinematicmodeoptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::HederaDefinitions::FCinematicModeOptions>(GetArenaForAllocation());
    _impl_.replicatedcinematicmodeoptions_ = p;
  }
  return _impl_.replicatedcinematicmodeoptions_;
}
inline ::HederaDefinitions::FCinematicModeOptions* APoplarPlayerReplicationInfo::mutable_replicatedcinematicmodeoptions() {
  ::HederaDefinitions::FCinematicModeOptions* _msg = _internal_mutable_replicatedcinematicmodeoptions();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCinematicModeOptions)
  return _msg;
}
inline void APoplarPlayerReplicationInfo::set_allocated_replicatedcinematicmodeoptions(::HederaDefinitions::FCinematicModeOptions* replicatedcinematicmodeoptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.replicatedcinematicmodeoptions_;
  }
  if (replicatedcinematicmodeoptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replicatedcinematicmodeoptions);
    if (message_arena != submessage_arena) {
      replicatedcinematicmodeoptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicatedcinematicmodeoptions, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.replicatedcinematicmodeoptions_ = replicatedcinematicmodeoptions;
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.APoplarPlayerReplicationInfo.ReplicatedCinematicModeOptions)
}

// repeated .HederaDefinitions.NonReplicatedObjectReference CurrentWearableDefinitions = 83;
inline int APoplarPlayerReplicationInfo::_internal_currentwearabledefinitions_size() const {
  return _impl_.currentwearabledefinitions_.size();
}
inline int APoplarPlayerReplicationInfo::currentwearabledefinitions_size() const {
  return _internal_currentwearabledefinitions_size();
}
inline void APoplarPlayerReplicationInfo::clear_currentwearabledefinitions() {
  _impl_.currentwearabledefinitions_.Clear();
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::mutable_currentwearabledefinitions(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentWearableDefinitions)
  return _impl_.currentwearabledefinitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::NonReplicatedObjectReference >*
APoplarPlayerReplicationInfo::mutable_currentwearabledefinitions() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentWearableDefinitions)
  return &_impl_.currentwearabledefinitions_;
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::_internal_currentwearabledefinitions(int index) const {
  return _impl_.currentwearabledefinitions_.Get(index);
}
inline const ::HederaDefinitions::NonReplicatedObjectReference& APoplarPlayerReplicationInfo::currentwearabledefinitions(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentWearableDefinitions)
  return _internal_currentwearabledefinitions(index);
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::_internal_add_currentwearabledefinitions() {
  return _impl_.currentwearabledefinitions_.Add();
}
inline ::HederaDefinitions::NonReplicatedObjectReference* APoplarPlayerReplicationInfo::add_currentwearabledefinitions() {
  ::HederaDefinitions::NonReplicatedObjectReference* _add = _internal_add_currentwearabledefinitions();
  // @@protoc_insertion_point(field_add:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentWearableDefinitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::NonReplicatedObjectReference >&
APoplarPlayerReplicationInfo::currentwearabledefinitions() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.APoplarPlayerReplicationInfo.CurrentWearableDefinitions)
  return _impl_.currentwearabledefinitions_;
}

// -------------------------------------------------------------------

// ActorReplicationMessage

// required .HederaDefinitions.ActorReplicationMessage.ActorType actorType = 1;
inline bool ActorReplicationMessage::_internal_has_actortype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActorReplicationMessage::has_actortype() const {
  return _internal_has_actortype();
}
inline void ActorReplicationMessage::clear_actortype() {
  _impl_.actortype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::HederaDefinitions::ActorReplicationMessage_ActorType ActorReplicationMessage::_internal_actortype() const {
  return static_cast< ::HederaDefinitions::ActorReplicationMessage_ActorType >(_impl_.actortype_);
}
inline ::HederaDefinitions::ActorReplicationMessage_ActorType ActorReplicationMessage::actortype() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.ActorReplicationMessage.actorType)
  return _internal_actortype();
}
inline void ActorReplicationMessage::_internal_set_actortype(::HederaDefinitions::ActorReplicationMessage_ActorType value) {
  assert(::HederaDefinitions::ActorReplicationMessage_ActorType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.actortype_ = value;
}
inline void ActorReplicationMessage::set_actortype(::HederaDefinitions::ActorReplicationMessage_ActorType value) {
  _internal_set_actortype(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.ActorReplicationMessage.actorType)
}

// required bool isInitial = 2;
inline bool ActorReplicationMessage::_internal_has_isinitial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ActorReplicationMessage::has_isinitial() const {
  return _internal_has_isinitial();
}
inline void ActorReplicationMessage::clear_isinitial() {
  _impl_.isinitial_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ActorReplicationMessage::_internal_isinitial() const {
  return _impl_.isinitial_;
}
inline bool ActorReplicationMessage::isinitial() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.ActorReplicationMessage.isInitial)
  return _internal_isinitial();
}
inline void ActorReplicationMessage::_internal_set_isinitial(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isinitial_ = value;
}
inline void ActorReplicationMessage::set_isinitial(bool value) {
  _internal_set_isinitial(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.ActorReplicationMessage.isInitial)
}

// required uint32 actorID = 3;
inline bool ActorReplicationMessage::_internal_has_actorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ActorReplicationMessage::has_actorid() const {
  return _internal_has_actorid();
}
inline void ActorReplicationMessage::clear_actorid() {
  _impl_.actorid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ActorReplicationMessage::_internal_actorid() const {
  return _impl_.actorid_;
}
inline uint32_t ActorReplicationMessage::actorid() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.ActorReplicationMessage.actorID)
  return _internal_actorid();
}
inline void ActorReplicationMessage::_internal_set_actorid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.actorid_ = value;
}
inline void ActorReplicationMessage::set_actorid(uint32_t value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:HederaDefinitions.ActorReplicationMessage.actorID)
}

// required bytes replicationMessage = 4;
inline bool ActorReplicationMessage::_internal_has_replicationmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActorReplicationMessage::has_replicationmessage() const {
  return _internal_has_replicationmessage();
}
inline void ActorReplicationMessage::clear_replicationmessage() {
  _impl_.replicationmessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActorReplicationMessage::replicationmessage() const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.ActorReplicationMessage.replicationMessage)
  return _internal_replicationmessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActorReplicationMessage::set_replicationmessage(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.replicationmessage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HederaDefinitions.ActorReplicationMessage.replicationMessage)
}
inline std::string* ActorReplicationMessage::mutable_replicationmessage() {
  std::string* _s = _internal_mutable_replicationmessage();
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.ActorReplicationMessage.replicationMessage)
  return _s;
}
inline const std::string& ActorReplicationMessage::_internal_replicationmessage() const {
  return _impl_.replicationmessage_.Get();
}
inline void ActorReplicationMessage::_internal_set_replicationmessage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.replicationmessage_.Set(value, GetArenaForAllocation());
}
inline std::string* ActorReplicationMessage::_internal_mutable_replicationmessage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.replicationmessage_.Mutable(GetArenaForAllocation());
}
inline std::string* ActorReplicationMessage::release_replicationmessage() {
  // @@protoc_insertion_point(field_release:HederaDefinitions.ActorReplicationMessage.replicationMessage)
  if (!_internal_has_replicationmessage()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.replicationmessage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.replicationmessage_.IsDefault()) {
    _impl_.replicationmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ActorReplicationMessage::set_allocated_replicationmessage(std::string* replicationmessage) {
  if (replicationmessage != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.replicationmessage_.SetAllocated(replicationmessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.replicationmessage_.IsDefault()) {
    _impl_.replicationmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HederaDefinitions.ActorReplicationMessage.replicationMessage)
}

// -------------------------------------------------------------------

// ReplicationFrame

// repeated .HederaDefinitions.ActorReplicationMessage actorReplicationMessages = 1;
inline int ReplicationFrame::_internal_actorreplicationmessages_size() const {
  return _impl_.actorreplicationmessages_.size();
}
inline int ReplicationFrame::actorreplicationmessages_size() const {
  return _internal_actorreplicationmessages_size();
}
inline void ReplicationFrame::clear_actorreplicationmessages() {
  _impl_.actorreplicationmessages_.Clear();
}
inline ::HederaDefinitions::ActorReplicationMessage* ReplicationFrame::mutable_actorreplicationmessages(int index) {
  // @@protoc_insertion_point(field_mutable:HederaDefinitions.ReplicationFrame.actorReplicationMessages)
  return _impl_.actorreplicationmessages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ActorReplicationMessage >*
ReplicationFrame::mutable_actorreplicationmessages() {
  // @@protoc_insertion_point(field_mutable_list:HederaDefinitions.ReplicationFrame.actorReplicationMessages)
  return &_impl_.actorreplicationmessages_;
}
inline const ::HederaDefinitions::ActorReplicationMessage& ReplicationFrame::_internal_actorreplicationmessages(int index) const {
  return _impl_.actorreplicationmessages_.Get(index);
}
inline const ::HederaDefinitions::ActorReplicationMessage& ReplicationFrame::actorreplicationmessages(int index) const {
  // @@protoc_insertion_point(field_get:HederaDefinitions.ReplicationFrame.actorReplicationMessages)
  return _internal_actorreplicationmessages(index);
}
inline ::HederaDefinitions::ActorReplicationMessage* ReplicationFrame::_internal_add_actorreplicationmessages() {
  return _impl_.actorreplicationmessages_.Add();
}
inline ::HederaDefinitions::ActorReplicationMessage* ReplicationFrame::add_actorreplicationmessages() {
  ::HederaDefinitions::ActorReplicationMessage* _add = _internal_add_actorreplicationmessages();
  // @@protoc_insertion_point(field_add:HederaDefinitions.ReplicationFrame.actorReplicationMessages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HederaDefinitions::ActorReplicationMessage >&
ReplicationFrame::actorreplicationmessages() const {
  // @@protoc_insertion_point(field_list:HederaDefinitions.ReplicationFrame.actorReplicationMessages)
  return _impl_.actorreplicationmessages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HederaDefinitions

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HederaDefinitions::ActorReplicationMessage_ActorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HederaDefinitions::ActorReplicationMessage_ActorType>() {
  return ::HederaDefinitions::ActorReplicationMessage_ActorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_definitions_2eproto
