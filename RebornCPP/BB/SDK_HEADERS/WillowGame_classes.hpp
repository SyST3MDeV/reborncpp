/*
#############################################################################################
# BattleBorn (1.0.0.0) SDK
# Generated with the CodeRedGenerator v1.0.3
# ========================================================================================= #
# File: WillowGame_classes.hpp
# ========================================================================================= #
# Credits: TheFeckless, ItsBranK
# Links: www.github.com/CodeRedModding/CodeRed-Generator, www.twitter.com/ItsBranK
#############################################################################################
*/
#pragma once

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_SELECTION_WEIGHT_THRESHOLD                        0
#define CONST_HolsteredWeaponSize_ExtraLarge                    8
#define CONST_HolsteredWeaponSize_Large                         4
#define CONST_HolsteredWeaponSize_Medium                        2
#define CONST_HolsteredWeaponSize_Small                         1
#define CONST_NETWORK_NOTIFICATION_TIME                         3
#define CONST_MAX_RECENT_KILLS                                  2
#define CONST_MIN_TIME_BETWEEN_SAVES_AT_SAME_STATION            6
#define CONST_MAX_REPLICATED_NOUNS                              2
#define CONST_MAX_PAWN_IMPACT_EFFECTS                           6
#define CONST_MAX_PAWN_REPLICATED_DESIGNER_ATTRIBUTES           2
#define CONST_HOLSTERED_ITEMS_HIDDEN_BIT                        3
#define CONST_HOLSTERED_WEAPONS_HIDDEN_BIT                      2
#define CONST_EQUIPPED_OFFHAND_WEAPON_HIDDEN_BIT                1
#define CONST_EQUIPPED_PRIMARY_WEAPON_HIDDEN_BIT                0
#define CONST_MAX_NUM_HOLSTERED_WEAPON_SLOTS                    3
#define CONST_NUM_EQUIPMENT_LOCATIONS                           4
#define CONST_MINTIMEBETWEENPAINSOUNDS                          0
#define CONST_MAX_IO_IMPACT_EFFECTS                             4
#define CONST_MAX_IO_REPLICATED_DESIGNER_ATTRIBUTES             8
#define CONST_MAX_SKILL_TYPES                                   5
#define CONST_FALLING_NODE_END_CHILD                            3
#define CONST_FALLING_NODE_IDLE_CHILD                           2
#define CONST_FALLING_NODE_START_CHILD                          1
#define CONST_FALLING_NODE_PASS_THRU_CHILD                      0
#define CONST_MAX_WEAPON_CARD_MODIFIER_STATS                    5
#define CONST_UnusedZoomedFireModeNum                           2
#define CONST_DAMAGEFLAG_ZeroDamage                             2
#define CONST_DAMAGEFLAG_MeleeAttack                            1
#define CONST_DAMAGEFLAG_BuffResist                             5
#define CONST_DAMAGEFLAG_HealOvershield                         2
#define CONST_DAMAGEFLAG_HealShield                             1
#define CONST_DAMAGEFLAG_Overshield                             6
#define CONST_DAMAGEFLAG_Shield                                 3
#define CONST_DAMAGEFLAG_Health                                 1
#define CONST_DAMAGEFLAG_NotifyCrosshair                        8
#define CONST_DAMAGEFLAG_Resist                                 4
#define CONST_DAMAGEFLAG_Healing                                2
#define CONST_DAMAGEFLAG_CriticalHit                            1
#define CONST_NUM_MISSION_REWARD_CHOICES                        2
#define CONST_MAX_REPLICATED_BASIC_EMITTERS                     3
#define CONST_MAX_REPLICATED_BEAM_ENDPOINTS                     1
#define CONST_REPLICATED_PRECISION_SCALE                        1
#define CONST_NUM_REPLICATED_PARAMETERS                         2
#define CONST_MAX_NUM_NPC_ALLIES                                2
#define CONST_NUM_FAST_TRAVEL_BYTES                             1
#define CONST_MAX_ACTIVE_AREA_WAYPOINTS                         4
#define CONST_MAX_ACTIVE_WAYPOINTS                              6
#define CONST_DialogResultNo                                    '\''
#define CONST_DialogResultYes                                   '\''
#define CONST_DialogResultOk                                    '\''
#define CONST_MaxButtons                                        5
#define CONST_TARGETABLEFLAG_IgnoreCloakAbility                 4
#define CONST_MAX_BEAMS                                         2
#define CONST_MAX_PROJECTILES                                   1
#define CONST_MAX_EXIT_POINTS                                   4
#define CONST_MAX_TRACKED_SKILLS                                1
#define CONST_MAX_AMMO_RESOURCE_UPGRADES                        8
#define CONST_TIME_BETWEEN_LOCATION_STAT_UPDATES_MS             5
#define CONST_MAX_ALLOWED_LOCATION_DELTA                        5
#define CONST_MAX_PLAYER_DAMAGE_NOTIFICATIONS                   1
#define CONST_MAX_COMBINE_HITS_TIME                             0
#define CONST_RECENTLY_RESISTED_ATTACK_HISTORY_LENGTH           1
#define CONST_LevelTravelMenu                                   1
#define CONST_FastTravelMenu                                    0
#define CONST_IneligibleMenu                                    3
#define CONST_CompletedMenu                                     2
#define CONST_NotStartedMenu                                    1
#define CONST_InProgressMenu                                    0
#define CONST_TOOLTIP_SPACING                                   '\"'
#define CONST_CLOSE_FADE_OUT_TIME                               0
#define CONST_INTERRUPT_FADE_OUT_TIME                           0
#define CONST_SCROLL_INITIAL_DELAY                              0
#define CONST_SCROLL_MIN_DELAY                                  0
#define CONST_SCROLL_ACCEL_RATE                                 0
#define CONST_MenuRefreshRate                                   0
#define CONST_DETECTION_TIME_INTERVAL                           0

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum WillowGame.AchievementUtility.EAchievementList
enum class EAchievementList : uint8_t
{
	ACH_Invalid                                        = 0,
	ACH_MaxCommanderRank                               = 1,
	ACH_Win30MissionsOrMatches                         = 2,
	ACH_CompleteAllStoryMissionsHardcore               = 3,
	ACH_CompleteAllStoryMissionsAdvanced               = 4,
	ACH_WinAllSeasonOnePvP                             = 5,
	ACH_PlayWithAllSeasonOneCharacters                 = 6,
	ACH_Collect25TitlesFromChallenges                  = 7,
	ACH_MaxCharacterMetaLevel                          = 8,
	ACH_DefeatRendain                                  = 9,
	ACH_NoCampaignTicketsLost                          = 10,
	ACH_DoubleKills                                    = 11,
	ACH_ActivateLegendaryMod                           = 12,
	ACH_DiamondStoryMission                            = 13,
	ACH_KillAllSeasonOneCharacters                     = 14,
	ACH_EpicModLoadout                                 = 15,
	ACH_ActivateMutation                               = 16,
	ACH_UnlockCharacter                                = 17,
	ACH_FullTeamMatchmaking                            = 18,
	ACH_CompleteAllThornLoreChallenges                 = 19,
	ACH_CompleteAllOscarMikeLoreChallenges             = 20,
	ACH_CompleteAllRathLoreChallenges                  = 21,
	ACH_CompleteAllMarquisLoreChallenges               = 22,
	ACH_CompleteAllMikoLoreChallenges                  = 23,
	ACH_CompleteAllMontanaLoreChallenges               = 24,
	ACH_CompleteAllReynaLoreChallenges                 = 25,
	ACH_CompleteAllCaldariusLoreChallenges             = 26,
	ACH_CompleteAllOrendiLoreChallenges                = 27,
	ACH_CompleteAllPhoebeLoreChallenges                = 28,
	ACH_CompleteAllBenedictLoreChallenges              = 29,
	ACH_CompleteAllBoulderLoreChallenges               = 30,
	ACH_CompleteAllAmbraLoreChallenges                 = 31,
	ACH_CompleteAllIsicLoreChallenges                  = 32,
	ACH_CompleteAllShayneLoreChallenges                = 33,
	ACH_CompleteAllGalileaLoreChallenges               = 34,
	ACH_CompleteAllKelvinLoreChallenges                = 35,
	ACH_CompleteAllAttikusLoreChallenges               = 36,
	ACH_CompleteAllElDragonLoreChallenges              = 37,
	ACH_CompleteAllTobyLoreChallenges                  = 38,
	ACH_CompleteAllGhaltLoreChallenges                 = 39,
	ACH_CompleteAllMelkaLoreChallenges                 = 40,
	ACH_CompleteAllDeandeLoreChallenges                = 41,
	ACH_CompleteAllKleeseLoreChallenges                = 42,
	ACH_CompleteAllWhiskeyFoxtrotLoreChallenges        = 43,
	ACH_CompleteTheRenegadeStoryMission                = 44,
	ACH_CompleteTheVoidsEdgeStoryMission               = 45,
	ACH_CompleteTheExperimentStoryMission              = 46,
	ACH_CompleteTheArchiveStoryMission                 = 47,
	ACH_CompleteTheSentinelStoryMission                = 48,
	ACH_CompleteTheSaboteurStoryMission                = 49,
	ACH_CompleteTheAlgorithmStoryMission               = 50,
	ACH_CompleteAllAlaniLoreChallenges                 = 51,
	ACH_CompleteAllPendlesLoreChallenges               = 52,
	ACH_CompleteAllErnestLoreChallenges                = 53,
	ACH_CompleteOperationOneMission                    = 54,
	ACH_CompleteOperationTwoMission                    = 55,
	ACH_CompleteAllSideKickLoreChallenges              = 56,
	ACH_CompleteOperationThreeMission                  = 57,
	ACH_CompleteOperationFourMission                   = 58,
	ACH_CompleteOperationFiveMission                   = 59,
	ACH_CompleteAllBeatrixLoreChallenges               = 60,
	ACH_END                                            = 61
};

// Enum WillowGame.Action_GenericAttack.EUnawareResponse
enum class EUnawareResponse : uint8_t
{
	EUnaware_Ignore                                    = 0,
	EUnaware_Timed                                     = 1,
	EUnaware_ReachOnce                                 = 2,
	EUnaware_Fail                                      = 3,
	EUnaware_END                                       = 4
};

// Enum WillowGame.Action_GenericAttack.EAttackType
enum class EAttackType : uint8_t
{
	Attack_Far                                         = 0,
	Attack_Close                                       = 1,
	Attack_InPlace                                     = 2,
	Attack_END                                         = 3
};

// Enum WillowGame.Action_AnimAttack.EAimType
enum class EAimType : uint8_t
{
	AimType_HoldStill                                  = 0,
	AimType_FollowTarget                               = 1,
	AimType_AlignToTarget                              = 2,
	AimType_FaceTarget                                 = 3,
	AimType_END                                        = 4
};

// Enum WillowGame.Action_Idle.EFollowType
enum class EFollowType : uint8_t
{
	Follow_None                                        = 0,
	Follow_Parent                                      = 1,
	Follow_Target                                      = 2,
	Follow_Master                                      = 3,
	Follow_END                                         = 4
};

// Enum WillowGame.Action_LeapAttack.ELeapAttackType
enum class ELeapAttackType : uint8_t
{
	ELeapAttack_AtTarget                               = 0,
	ELeapAttack_AtLocation                             = 1,
	ELeapAttack_END                                    = 2
};

// Enum WillowGame.Behavior_AISetFlight.ESetFlightMode
enum class ESetFlightMode : uint8_t
{
	SetFlight_Land                                     = 0,
	SetFlight_TakeOff                                  = 1,
	SetFlight_END                                      = 2
};

// Enum WillowGame.Action_SweepAttack.ESweepDirection
enum class ESweepDirection : uint8_t
{
	Sweep_Left                                         = 0,
	Sweep_Right                                        = 1,
	Sweep_Random                                       = 2,
	Sweep_END                                          = 3
};

// Enum WillowGame.Action_SwoopAttack.ESwoopOffset
enum class ESwoopOffset : uint8_t
{
	SwoopOffset_Left                                   = 0,
	SwoopOffset_Right                                  = 1,
	SwoopOffset_Random                                 = 2,
	SwoopOffset_END                                    = 3
};

// Enum WillowGame.Action_TeleportAttack.ETeleportAttackType
enum class ETeleportAttackType : uint8_t
{
	ETeleportAttackType_TeleportAndStay                = 0,
	ETeleportAttackType_TeleportAndReturn              = 1,
	ETeleportAttackType_END                            = 2
};

// Enum WillowGame.InteractionIconDefinition.EInteractionIcons
enum class EInteractionIcons : uint8_t
{
	INTERACTION_ICON_None                              = 0,
	INTERACTION_ICON_Use                               = 1,
	INTERACTION_ICON_Talk                              = 2,
	INTERACTION_ICON_Heal                              = 3,
	INTERACTION_ICON_Shop                              = 4,
	INTERACTION_ICON_Computer                          = 5,
	INTERACTION_ICON_Smash                             = 6,
	INTERACTION_ICON_CannotUse                         = 7,
	INTERACTION_ICON_Open                              = 8,
	INTERACTION_ICON_Trade                             = 9,
	INTERACTION_ICON_Objective                         = 10,
	INTERACTION_ICON_PickUp                            = 11,
	INTERACTION_ICON_Full                              = 12,
	INTERACTION_ICON_FullFadeOut                       = 13,
	INTERACTION_ICON_Cooldown                          = 14,
	INTERACTION_ICON_Hacking                           = 15,
	INTERACTION_ICON_Revive                            = 16,
	INTERACTION_ICON_BuildNodeBusy                     = 17,
	INTERACTION_ICON_BuildNodeCooldown                 = 18,
	INTERACTION_ICON_BuildNodeCantAfford               = 19,
	INTERACTION_ICON_BuildNodeUse                      = 20,
	INTERACTION_ICON_BuildNodeFullyUpgraded            = 21,
	INTERACTION_ICON_ShardBank                         = 22,
	INTERACTION_ICON_END                               = 23
};

// Enum WillowGame.InteractiveObjectDefinition.EOnTouchEventOutputs
enum class EOnTouchEventOutputs : uint8_t
{
	EONTOUCH_Player                                    = 0,
	EONTOUCH_NotPlayer                                 = 1,
	EONTOUCH_END                                       = 2
};

// Enum WillowGame.InteractiveObjectDefinition.ERelevanceDistance
enum class ERelevanceDistance : uint8_t
{
	RELEVANCE_ShardCrystal                             = 0,
	RELEVANCE_Lootable                                 = 1,
	RELEVANCE_Huge                                     = 2,
	RELEVANCE_BuildNode                                = 3,
	RELEVANCE_CapturePoint                             = 4,
	RELEVANCE_END                                      = 5
};

// Enum WillowGame.InteractiveObjectDefinition.ERadarIconType
enum class ERadarIconType : uint8_t
{
	RadarIconType_None                                 = 0,
	RadarIconType_Gunfire                              = 1,
	RadarIconType_Threat                               = 2,
	RadarIconType_BountyBoard                          = 3,
	RadarIconType_Shop                                 = 4,
	RadarIconType_Health                               = 5,
	RadarIconType_NewU                                 = 6,
	RadarIconType_CatchARide                           = 7,
	RadarIconType_Settlement                           = 8,
	RadarIconType_MissionNPC                           = 9,
	RadarIconType_NamedNPC                             = 10,
	RadarIconType_Loot                                 = 11,
	RadarIconType_Objective                            = 12,
	RadarIconType_Checkpoint                           = 13,
	RadarIconType_TravelStation                        = 14,
	RadarIconType_CustomizationStation                 = 15,
	RadarIconType_LevelTransition                      = 16,
	RadarIconType_END                                  = 17
};

// Enum WillowGame.IUsable.EUsabilityPriority
enum class EUsabilityPriority : uint8_t
{
	UP_Default                                         = 0,
	UP_High                                            = 1,
	UP_END                                             = 2
};

// Enum WillowGame.IUsable.EUsabilityType
enum class EUsabilityType : uint8_t
{
	UT_Primary                                         = 0,
	UT_Secondary                                       = 1,
	UT_END                                             = 2
};

// Enum WillowGame.AIPawnBalanceDefinition.EItemGameStageSource
enum class EItemGameStageSource : uint8_t
{
	IGSS_ExpLevelOfBalancedActor                       = 0,
	IGSS_GameStageOfBalancedActor                      = 1,
	IGSS_END                                           = 2
};

// Enum WillowGame.AIPawnBalanceDefinition.EAITransformed
enum class EAITransformed : uint8_t
{
	EAIT_None                                          = 0,
	EAIT_Fire                                          = 1,
	EAIT_Shock                                         = 2,
	EAIT_Corrosive                                     = 3,
	EAIT_Custom                                        = 4,
	EAIT_Slagged                                       = 5,
	EAIT_END                                           = 6
};

// Enum WillowGame.AnimNotify_UseBehavior.EUseBehaviorContext
enum class EUseBehaviorContext : uint8_t
{
	EUBC_ActorSkelMeshIsAttachedTo                     = 0,
	EUBC_ObjectSkelMeshWasCreatedBy                    = 1,
	EUBC_END                                           = 2
};

// Enum WillowGame.AttributePresentationDefinition.EAttributeValueSignStyle
enum class EAttributeValueSignStyle : uint8_t
{
	SIGNSTYLE_AsIs                                     = 0,
	SIGNSTYLE_Positive                                 = 1,
	SIGNSTYLE_Negative                                 = 2,
	SIGNSTYLE_AsIsAnyStyle                             = 3,
	SIGNSTYLE_OppositeSign                             = 4,
	SIGNSTYLE_END                                      = 5
};

// Enum WillowGame.AttributeSlotEffectAttributeValueResolver.EAttributeSlotEffectProperty
enum class EAttributeSlotEffectProperty : uint8_t
{
	ATTRSLOTEFFECTPROP_Grade                           = 0,
	ATTRSLOTEFFECTPROP_ComputedModifierValue           = 1,
	ATTRSLOTEFFECTPROP_END                             = 2
};

// Enum WillowGame.AvatarAwardUtility.EWillowAvatarAwards
enum class EWillowAvatarAwards : uint8_t
{
	WAA_Invalid                                        = 0,
	WAA_One                                            = 1,
	WAA_Two                                            = 2,
	WAA_Three                                          = 3,
	WAA_END                                            = 4
};

// Enum WillowGame.Behavior_AIFollow.EFollowAction
enum class EFollowAction : uint8_t
{
	FollowAction_StartFollow                           = 0,
	FollowAction_StopFollow                            = 1,
	FollowAction_END                                   = 2
};

// Enum WillowGame.Behavior_BoolMath.EBinaryBooleanOperation
enum class EBinaryBooleanOperation : uint8_t
{
	BOOLMATH_NoChange                                  = 0,
	BOOLMATH_And                                       = 1,
	BOOLMATH_Or                                        = 2,
	BOOLMATH_Xor                                       = 3,
	BOOLMATH_Not                                       = 4,
	BOOLMATH_END                                       = 5
};

// Enum WillowGame.Behavior_CauseDamage.EDamageTarget
enum class EDamageTarget : uint8_t
{
	DT_BehaviorContext                                 = 0,
	DT_OtherEventParticipant                           = 1,
	DT_CustomTarget                                    = 2,
	DT_RadiusAroundContext                             = 3,
	DT_END                                             = 4
};

// Enum WillowGame.Behavior_ChangeEnvironmentTag.EEnvironmentTagAction
enum class EEnvironmentTagAction : uint8_t
{
	EnviroTagAction_Add                                = 0,
	EnviroTagAction_Remove                             = 1,
	EnviroTagAction_END                                = 2
};

// Enum WillowGame.Behavior_Charm.ECharmAction
enum class ECharmAction : uint8_t
{
	CharmAction_Charm                                  = 0,
	CharmAction_Uncharm                                = 1,
	CharmAction_END                                    = 2
};

// Enum WillowGame.Behavior_CompareObject.ECompareObjectOutputLinkIds
enum class ECompareObjectOutputLinkIds : uint8_t
{
	OBJECTOUTPUT_Same                                  = 0,
	OBJECTOUTPUT_Different                             = 1,
	OBJECTOUTPUT_END                                   = 2
};

// Enum WillowGame.Behavior_CoordinatedEffect.ETriggerCoordinatedEffectOutputLinks
enum class ETriggerCoordinatedEffectOutputLinks : uint8_t
{
	TRIGGER_COORDINATEDEFFECT_Out                      = 0,
	TRIGGER_COORDINATEDEFFECT_Finished                 = 1,
	TRIGGER_COORDINATEDEFFECT_END                      = 2
};

// Enum WillowGame.Behavior_DamageArea.EDamageArea
enum class EDamageArea : uint8_t
{
	EDA_Enable                                         = 0,
	EDA_Disable                                        = 1,
	EDA_Toggle                                         = 2,
	EDA_END                                            = 3
};

// Enum WillowGame.Behavior_DamageClassSwitch.EDamageClassSwitchValues
enum class EDamageClassSwitchValues : uint8_t
{
	DCSV_Player                                        = 0,
	DCSV_Pawn                                          = 1,
	DCSV_Vehicle                                       = 2,
	DCSV_InteractiveObject                             = 3,
	DCSV_END                                           = 4
};

// Enum WillowGame.Behavior_DamageSourceSwitch.EDamageSourceSwitchValues
enum class EDamageSourceSwitchValues : uint8_t
{
	DSSV_Bullet                                        = 0,
	DSSV_Grenade                                       = 1,
	DSSV_Melee                                         = 2,
	DSSV_Rocket                                        = 3,
	DSSV_Skill                                         = 4,
	DSSV_StatusEffect                                  = 5,
	DSSV_VehicleRanInto                                = 6,
	DSSV_VehicleRanOver                                = 7,
	DSSV_Crushed                                       = 8,
	DSSV_Fell                                          = 9,
	DSSV_Pistol                                        = 10,
	DSSV_SubMachineGun                                 = 11,
	DSSV_Shotgun                                       = 12,
	DSSV_MachineGun                                    = 13,
	DSSV_Sniper                                        = 14,
	DSSV_DetonatedCrate                                = 15,
	DSSV_END                                           = 16
};

// Enum WillowGame.Behavior_DamageSurfaceTypeSwitch.EDamageSurfaceTypeSwitchValues
enum class EDamageSurfaceTypeSwitchValues : uint8_t
{
	DSTSV_Generic                                      = 0,
	DSTSV_Flesh                                        = 1,
	DSTSV_Armor                                        = 2,
	DSTSV_Shield                                       = 3,
	DSTSV_END                                          = 4
};

// Enum WillowGame.WillowLightProjectileManager.EBeamSource
enum class EBeamSource : uint8_t
{
	EBS_Weapon                                         = 0,
	EBS_Pawn                                           = 1,
	EBS_WorldBody                                      = 2,
	EBS_END                                            = 3
};

// Enum WillowGame.Behavior_FireShot.EFireShotOutputLinks
enum class EFireShotOutputLinks : uint8_t
{
	FSOL_Complete                                      = 0,
	FSOL_FiredShot                                     = 1,
	FSOL_END                                           = 2
};

// Enum WillowGame.Behavior_SimpleMath.EBinaryMathOperation
enum class EBinaryMathOperation : uint8_t
{
	BINARYMATH_Add                                     = 0,
	BINARYMATH_Sub                                     = 1,
	BINARYMATH_Mul                                     = 2,
	BINARYMATH_Div                                     = 3,
	BINARYMATH_Pow                                     = 4,
	BINARYMATH_Rand                                    = 5,
	BINARYMATH_Avg                                     = 6,
	BINARYMATH_Min                                     = 7,
	BINARYMATH_Maximum                                 = 8,
	BINARYMATH_NoChange                                = 9,
	BINARYMATH_END                                     = 10
};

// Enum WillowGame.Behavior_IsObjectPlayer.EComparePlayerOutputLinkIds
enum class EComparePlayerOutputLinkIds : uint8_t
{
	PLAYEROUTPUT_IsPlayer                              = 0,
	PLAYEROUTPUT_NotPlayer                             = 1,
	PLAYEROUTPUT_END                                   = 2
};

// Enum WillowGame.Behavior_IsObjectVehicle.ECompareVehicleOutputLinkIds
enum class ECompareVehicleOutputLinkIds : uint8_t
{
	VEHICLEOUTPUT_IsVehicle                            = 0,
	VEHICLEOUTPUT_NotVehicle                           = 1,
	VEHICLEOUTPUT_END                                  = 2
};

// Enum WillowGame.Behavior_NetworkRoleSwitch.ENetworkRoleSwitchValues
enum class ENetworkRoleSwitchValues : uint8_t
{
	NRS_Server                                         = 0,
	NRS_Client                                         = 1,
	NRS_END                                            = 2
};

// Enum WillowGame.Behavior_OpinionSwitch.EOpinionSwitchLinkIds
enum class EOpinionSwitchLinkIds : uint8_t
{
	OPINIONOUTPUT_Enemy                                = 0,
	OPINIONOUTPUT_Neutral                              = 1,
	OPINIONOUTPUT_Friendly                             = 2,
	OPINIONOUTPUT_END                                  = 3
};

// Enum WillowGame.Behavior_PhysicsResponse.RelativeDirectionalOverride
enum class ERelativeDirectionalOverride : uint8_t
{
	NoOverride                                         = 0,
	Upwards                                            = 1,
	Downwards                                          = 2,
	Outwards                                           = 3,
	Inwards                                            = 4,
	Forwards                                           = 5,
	Backwards                                          = 6,
	Left                                               = 7,
	Right                                              = 8,
	RelativeDirectionalOverride_END                    = 9
};

// Enum WillowGame.Behavior_PostProcessChain.EPostProcessChainAction
enum class EPostProcessChainAction : uint8_t
{
	PPCA_PushChain                                     = 0,
	PPCA_PopChain                                      = 1,
	PPCA_END                                           = 2
};

// Enum WillowGame.IUpdatePostProcessOverride.EAttributeScalarParamOperand
enum class EAttributeScalarParamOperand : uint8_t
{
	ASPO_None                                          = 0,
	ASPO_Add                                           = 1,
	ASPO_Subtract                                      = 2,
	ASPO_END                                           = 3
};

// Enum WillowGame.IUpdatePostProcessOverride.EPostProcessOverrideUpdatePhase
enum class EPostProcessOverrideUpdatePhase : uint8_t
{
	PPUPDATEPHASE_None                                 = 0,
	PPUPDATEPHASE_TransitionIn                         = 1,
	PPUPDATEPHASE_TransitionHold                       = 2,
	PPUPDATEPHASE_TransitionOut                        = 3,
	PPUPDATEPHASE_END                                  = 4
};

// Enum WillowGame.Behavior_QueryDayNightCycle.EDayNightCycleValues
enum class EDayNightCycleValues : uint8_t
{
	DNCV_Daytime                                       = 0,
	DNCV_Nighttime                                     = 1,
	DNCV_END                                           = 2
};

// Enum WillowGame.Behavior_ScreenParticle.EScreenParticleAction
enum class EScreenParticleAction : uint8_t
{
	SPA_Show                                           = 0,
	SPA_ShowAndHideWhenFinished                        = 1,
	SPA_Hide                                           = 2,
	SPA_HideButAllowToFinishFirst                      = 3,
	SPA_END                                            = 4
};

// Enum WillowGame.IScreenParticle.ScreenParticleScalingMode
enum class EScreenParticleScalingMode : uint8_t
{
	ESPSM_FitToHorizontal                              = 0,
	ESPSM_FitToVertical                                = 1,
	ESPSM_FitToExterior                                = 2,
	ESPSM_FitToInterior                                = 3,
	ESPSM_FitToViewport                                = 4,
	ESPSM_END                                          = 5
};

// Enum WillowGame.WillowWeaponTypes.EWeaponVisibleAmmoState
enum class EWeaponVisibleAmmoState : uint8_t
{
	VISIBLE_AMMO_STATE_Default                         = 0,
	VISIBLE_AMMO_STATE_PendingReload                   = 1,
	VISIBLE_AMMO_STATE_END                             = 2
};

// Enum WillowGame.WillowWeaponTypes.EWeaponHand
enum class EWeaponHand : uint8_t
{
	HAND_Right                                         = 0,
	HAND_Left                                          = 1,
	HAND_Centered                                      = 2,
	HAND_Hidden                                        = 3,
	HAND_END                                           = 4
};

// Enum WillowGame.WillowWeaponTypes.EWeaponBoneControllerType
enum class EWeaponBoneControllerType : uint8_t
{
	WEAP_BONE_CONTROL_General                          = 0,
	WEAP_BONE_CONTROL_BarrelSpinner                    = 1,
	WEAP_BONE_CONTROL_Cylinder                         = 2,
	WEAP_BONE_CONTROL_END                              = 3
};

// Enum WillowGame.WillowWeaponTypes.EWeaponBodyAssetType
enum class EWeaponBodyAssetType : uint8_t
{
	WeaponBodyAsset_None                               = 0,
	WeaponBodyAsset_MuzzleFlash                        = 1,
	WeaponBodyAsset_ShellEffect                        = 2,
	WeaponBodyAsset_SightEffect                        = 3,
	WeaponBodyAsset_ChargeEffect                       = 4,
	WeaponBodyAsset_CooldownEffect                     = 5,
	WeaponBodyAsset_END                                = 6
};

// Enum WillowGame.WillowWeaponTypes.EWeaponEventType
enum class EWeaponEventType : uint8_t
{
	WEAPONEVENT_Advance                                = 0,
	WEAPONEVENT_Stop                                   = 1,
	WEAPONEVENT_Pause                                  = 2,
	WEAPONEVENT_UnPause                                = 3,
	WEAPONEVENT_Reset                                  = 4,
	WEAPONEVENT_END                                    = 5
};

// Enum WillowGame.WillowWeaponTypes.EWeaponPartVariation
enum class EWeaponPartVariation : uint8_t
{
	WeaponPartVar_Default                              = 0,
	WeaponPartVar_One                                  = 1,
	WeaponPartVar_Two                                  = 2,
	WeaponPartVar_Three                                = 3,
	WeaponPartVar_END                                  = 4
};

// Enum WillowGame.WillowWeaponTypes.EWeaponPartType
enum class EWeaponPartType : uint8_t
{
	WP_Body                                            = 0,
	WP_Grip                                            = 1,
	WP_Barrel                                          = 2,
	WP_Sight                                           = 3,
	WP_Stock                                           = 4,
	WP_Elemental                                       = 5,
	WP_Accessory1                                      = 6,
	WP_Accessory2                                      = 7,
	WP_Material                                        = 8,
	WP_Prefix                                          = 9,
	WP_Title                                           = 10,
	WP_END                                             = 11
};

// Enum WillowGame.WillowWeaponTypes.EWeaponType
enum class EWeaponType : uint8_t
{
	WT_Pistol                                          = 0,
	WT_Shotgun                                         = 1,
	WT_SMG                                             = 2,
	WT_SniperRifle                                     = 3,
	WT_AssaultRifle                                    = 4,
	WT_RocketLauncher                                  = 5,
	WT_END                                             = 6
};

// Enum WillowGame.Behavior_SetLookAtSpeed.ESetLookAtSpeedAction
enum class ESetLookAtSpeedAction : uint8_t
{
	ESLASA_SetSpeed                                    = 0,
	ESLASA_SetDefault                                  = 1,
	ESLASA_END                                         = 2
};

// Enum WillowGame.Behavior_SimulateInputButton.SimulatedInputEvent
enum class ESimulatedInputEvent : uint8_t
{
	SIE_Pressed                                        = 0,
	SIE_Released                                       = 1,
	SIE_PressAndRelease                                = 2,
	SIE_DoubleClick                                    = 3,
	SIE_END                                            = 4
};

// Enum WillowGame.WillowEmitter.EEmitterSpawnType
enum class EEmitterSpawnType : uint8_t
{
	ESPT_Default                                       = 0,
	ESPT_FirstOnly                                     = 1,
	ESPT_FirstAndThird                                 = 2,
	ESPT_END                                           = 3
};

// Enum WillowGame.Behavior_SpawnProjectile.EProjectileSelectionBehavior
enum class EProjectileSelectionBehavior : uint8_t
{
	PROJECTILESELECT_UseSpecified                      = 0,
	PROJECTILESELECT_UseCurrent                        = 1,
	PROJECTILESELECT_END                               = 2
};

// Enum WillowGame.Behavior_SpawnProjectile.ESpawnDistributionType
enum class ESpawnDistributionType : uint8_t
{
	SPSDT_Cone                                         = 0,
	SPSDT_Arc                                          = 1,
	SPSDT_VerticalArc                                  = 2,
	SPSDT_PawnAccuracy                                 = 3,
	SPSDT_WeaponAccuracy                               = 4,
	SPSDT_END                                          = 5
};

// Enum WillowGame.Behavior_SpawnProjectile.ESpawnProjectileOutputLinks
enum class ESpawnProjectileOutputLinks : uint8_t
{
	SPOL_Complete                                      = 0,
	SPOL_SpawnedProjectile                             = 1,
	SPOL_END                                           = 2
};

// Enum WillowGame.Behavior_SplitscreenInstanceDataVisibility.ESplitscreenVisibilityAction
enum class ESplitscreenVisibilityAction : uint8_t
{
	SplitscreenVisibilityAction_Show                   = 0,
	SplitscreenVisibilityAction_Hide                   = 1,
	SplitscreenVisibilityAction_END                    = 2
};

// Enum WillowGame.Behavior_SplitscreenInstanceDataVisibility.ESplitscreenVisibilityViewport
enum class ESplitscreenVisibilityViewport : uint8_t
{
	SplitscreenVisibilityViewport_None                 = 0,
	SplitscreenVisibilityViewport_One                  = 1,
	SplitscreenVisibilityViewport_Two                  = 2,
	SplitscreenVisibilityViewport_Both                 = 3,
	SplitscreenVisibilityViewport_END                  = 4
};

// Enum WillowGame.Behavior_ToggleObstacle.EObstacleToggle
enum class EObstacleToggle : uint8_t
{
	ObstacleToggle_TurnOn                              = 0,
	ObstacleToggle_TurnOff                             = 1,
	ObstacleToggle_Toggle                              = 2,
	ObstacleToggle_END                                 = 3
};

// Enum WillowGame.Behavior_VectorMath.EVectorMathOperation
enum class EVectorMathOperation : uint8_t
{
	VECTORMATH_NoChange                                = 0,
	VECTORMATH_Add                                     = 1,
	VECTORMATH_Sub                                     = 2,
	VECTORMATH_Mul                                     = 3,
	VECTORMATH_Div                                     = 4,
	VECTORMATH_RandomNormal                            = 5,
	VECTORMATH_RandomCone                              = 6,
	VECTORMATH_Projection                              = 7,
	VECTORMATH_NormalizeA                              = 8,
	VECTORMATH_Cross                                   = 9,
	VECTORMATH_ToRotator                               = 10,
	VECTORMATH_FromRotator                             = 11,
	VECTORMATH_Dot                                     = 12,
	VECTORMATH_AX                                      = 13,
	VECTORMATH_AY                                      = 14,
	VECTORMATH_AZ                                      = 15,
	VECTORMATH_END                                     = 16
};

// Enum WillowGame.Behavior_WeaponGlowEffect.EWeaponGlowEffectAction
enum class EWeaponGlowEffectAction : uint8_t
{
	GLOW_ACTION_Play                                   = 0,
	GLOW_ACTION_Stop                                   = 1,
	GLOW_ACTION_StopAny                                = 2,
	GLOW_ACTION_END                                    = 3
};

// Enum WillowGame.BehaviorVolume.EBehaviorVolumeAction
enum class EBehaviorVolumeAction : uint8_t
{
	EBVA_Entry                                         = 0,
	EBVA_Exit                                          = 1,
	EBVA_Shoot                                         = 2,
	EBVA_END                                           = 3
};

// Enum WillowGame.BodyHitRegionDefinition.EGoreMode
enum class EGoreMode : uint8_t
{
	GORE_Full                                          = 0,
	GORE_None                                          = 1,
	GORE_END                                           = 2
};

// Enum WillowGame.WillowPhysicalMaterialProperty.EDamageSurfaceType
enum class EDamageSurfaceType : uint8_t
{
	DMGSURFACE_Generic                                 = 0,
	DMGSURFACE_Flesh                                   = 1,
	DMGSURFACE_Armor                                   = 2,
	DMGSURFACE_Shield                                  = 3,
	DMGSURFACE_END                                     = 4
};

// Enum WillowGame.WillowPhysicalMaterialProperty.EImpactUsage
enum class EImpactUsage : uint8_t
{
	IU_None                                            = 0,
	IU_Footstep                                        = 1,
	IU_Bullet                                          = 2,
	IU_END                                             = 3
};

// Enum WillowGame.BodyClassDefinition.EExertionVocalizationType
enum class EExertionVocalizationType : uint8_t
{
	ExertionVocalizationType_Jumped                    = 0,
	ExertionVocalizationType_Landed                    = 1,
	ExertionVocalizationType_END                       = 2
};

// Enum WillowGame.BodyWeaponHoldDefinition.EBodyWeaponActionPosture
enum class EBodyWeaponActionPosture : uint8_t
{
	BWAP_All                                           = 0,
	BWAP_Standing                                      = 1,
	BWAP_Crouched                                      = 2,
	BWAP_Injured                                       = 3,
	BWAP_END                                           = 4
};

// Enum WillowGame.BodyWeaponHoldDefinition.EBodyWeaponAction
enum class EBodyWeaponAction : uint8_t
{
	BWA_None                                           = 0,
	BWA_Fire                                           = 1,
	BWA_FireRecoil                                     = 2,
	BWA_Melee                                          = 3,
	BWA_Reload                                         = 4,
	BWA_Equip                                          = 5,
	BWA_PutDown                                        = 6,
	BWA_PutDownSwap                                    = 7,
	BWA_ThrowGrenade                                   = 8,
	BWA_GrabEquip                                      = 9,
	BWA_MeleeSelf                                      = 10,
	BWA_Charging                                       = 11,
	BWA_Overcharged                                    = 12,
	BWA_StartReload                                    = 13,
	BWA_EndReload                                      = 14,
	BWA_StartOverheat                                  = 15,
	BWA_EndOverheat                                    = 16,
	BWA_END                                            = 17
};

// Enum WillowGame.WeaponTypeDefinition.EGbxWeaponLock
enum class EGbxWeaponLock : uint8_t
{
	GBXWEAPLOCK_None                                   = 0,
	GBXWEAPLOCK_PaintAndHold                           = 1,
	GBXWEAPLOCK_END                                    = 2
};

// Enum WillowGame.WeaponTypeDefinition.EBarrelSpinMode
enum class EBarrelSpinMode : uint8_t
{
	BSM_None                                           = 0,
	BSM_SpinUpToFullFireRate                           = 1,
	BSM_SpinBarrelWithEachShot                         = 2,
	BSM_END                                            = 3
};

// Enum WillowGame.WillowDeclarations.EEquipmentLoc
enum class EEquipmentLoc : uint8_t
{
	EQUIPLOC_Shield                                    = 0,
	EQUIPLOC_GrenadeMod                                = 1,
	EQUIPLOC_ClassMod                                  = 2,
	EQUIPLOC_Artifact                                  = 3,
	EQUIPLOC_None                                      = 4,
	EQUIPLOC_END                                       = 5
};

// Enum WillowGame.WillowDeclarations.EStoragePanelBackground
enum class EStoragePanelBackground : uint8_t
{
	ESPB_Inventory                                     = 0,
	ESPB_Health                                        = 1,
	ESPB_Weapons                                       = 2,
	ESPB_Ammo                                          = 3,
	ESPB_Bank                                          = 4,
	ESPB_Stash                                         = 5,
	EPSB_Blackmarket                                   = 6,
	EPSB_Custom                                        = 7,
	EStoragePanelBackground_END                        = 8
};

// Enum WillowGame.ChallengeFeedbackMessage.EChallengeFeedback
enum class EChallengeFeedback : uint8_t
{
	CHAL_FEEDBACK_Completed                            = 0,
	CHAL_FEEDBACK_Received                             = 1,
	CHAL_FEEDBACK_END                                  = 2
};

// Enum WillowGame.WillowGFxMovie.ERTTType
enum class ERTTType : uint8_t
{
	RTTT_Cell                                          = 0,
	RTTT_HalfCell                                      = 1,
	RTTT_Card                                          = 2,
	RTTT_QuickSlot                                     = 3,
	RTTT_END                                           = 4
};

// Enum WillowGame.WillowPlayerController.EOnlineMessageType
enum class EOnlineMessageType : uint8_t
{
	OMT_None                                           = 0,
	OMT_Network                                        = 1,
	OMT_Dlc                                            = 2,
	OMT_Mission                                        = 3,
	OMT_Travel                                         = 4,
	OMT_Misc                                           = 5,
	OMT_END                                            = 6
};

// Enum WillowGame.WillowPlayerController.EWillowInviteType
enum class EWillowInviteType : uint8_t
{
	WIT_InviteRequired                                 = 0,
	WIT_FriendsOnly                                    = 1,
	WIT_Public                                         = 2,
	WIT_END                                            = 3
};

// Enum WillowGame.WillowPlayerController.EPresenceModeContext
enum class EPresenceModeContext : uint8_t
{
	EPMC_Any                                           = 0,
	EPMC_OnFoot                                        = 1,
	EPMC_Driving                                       = 2,
	EPMC_Dueling                                       = 3,
	EPMC_OpenSlots                                     = 4,
	EPMC_END                                           = 5
};

// Enum WillowGame.WillowPlayerController.EMissionFanfareType
enum class EMissionFanfareType : uint8_t
{
	EMFT_NewMissionAccepted                            = 0,
	EMFT_NewMissionActive                              = 1,
	EMFT_NewPlotMissionActive                          = 2,
	EMFT_ObjectiveIncremented                          = 3,
	EMFT_ObjectiveComplete                             = 4,
	EMFT_ObjectiveCleared                              = 5,
	EMFT_MissionReadyToTurnIn                          = 6,
	EMFT_MissionCompleted                              = 7,
	EMFT_PingNonTrackedOnly                            = 8,
	EMFT_END                                           = 9
};

// Enum WillowGame.WillowProfile.ETwoPlayerSplitDirectionOptions
enum class ETwoPlayerSplitDirectionOptions : uint8_t
{
	SDO_Vertical                                       = 0,
	SDO_Horizontal                                     = 1,
	SDO_END                                            = 2
};

// Enum WillowGame.WillowProfile.EProfileViewDistanceOptions
enum class EProfileViewDistanceOptions : uint8_t
{
	PVDO_Low                                           = 0,
	PVDO_Medium                                        = 1,
	PVDO_High                                          = 2,
	PVDO_UltraHigh                                     = 3,
	PVDO_END                                           = 4
};

// Enum WillowGame.WillowProfile.EPartyNetworkOptions
enum class EPartyNetworkOptions : uint8_t
{
	PNO_OnlineFriendsOnly                              = 0,
	PNO_OnlinePublic                                   = 1,
	PNO_OnlinePrivate                                  = 2,
	PNO_END                                            = 3
};

// Enum WillowGame.WillowProfile.EThreePlayerSplitDirectionOptions
enum class EThreePlayerSplitDirectionOptions : uint8_t
{
	TPSDO_FAVOR_TOP                                    = 0,
	TPSDO_FAVOR_BOTTOM                                 = 1,
	TPSDO_FAVOR_RIGHT                                  = 2,
	TPSDO_FAVOR_LEFT                                   = 3,
	TPSDO_FAVOR_END                                    = 4
};

// Enum WillowGame.WillowProfile.E4KConsoleResolutionSetting
enum class E4KConsoleResolutionSetting : uint8_t
{
	ConsoleResolution_1080p60fps                       = 0,
	ConsoleResolution_1080p30fps                       = 1,
	ConsoleResolution_4k30fps                          = 2,
	ConsoleResolution_END                              = 3
};

// Enum WillowGame.WillowProfile.ESpeakerSetup
enum class ESpeakerSetup : uint8_t
{
	SS_SmallSpeaker                                    = 0,
	SS_Hifi                                            = 1,
	SS_NightTime                                       = 2,
	SS_Mono                                            = 3,
	SS_Headphones                                      = 4,
	SS_END                                             = 5
};

// Enum WillowGame.WillowProfile.ESpectatorFirstPersonPreference
enum class ESpectatorFirstPersonPreference : uint8_t
{
	SFPP_BothAllowedPreferThird                        = 0,
	SFPP_BothAllowedPreferCurrent                      = 1,
	SFPP_AlwaysFirstPerson                             = 2,
	SFPP_AlwaysThirdPerson                             = 3,
	SFPP_END                                           = 4
};

// Enum WillowGame.WillowProfile.EAutoDisplayDeathRecap
enum class EAutoDisplayDeathRecap : uint8_t
{
	ADDR_HideByDefault                                 = 0,
	ADDR_DisplayByDefault                              = 1,
	ADDR_END                                           = 2
};

// Enum WillowGame.WillowProfile.ESpectatorCameraClippingMode
enum class ESpectatorCameraClippingMode : uint8_t
{
	SCCM_EnableCameraClipping                          = 0,
	SCCM_AllowFreeCamClipping                          = 1,
	SCCM_DisableCameraClipping                         = 2,
	SCCM_END                                           = 3
};

// Enum WillowGame.WillowProfile.ERegenTextDisplayMode
enum class ERegenTextDisplayMode : uint8_t
{
	RTDM_Always                                        = 0,
	RTDM_Sometimes                                     = 1,
	RTDM_Never                                         = 2,
	RTDM_END                                           = 3
};

// Enum WillowGame.WillowProfile.EChatDisplayLength
enum class EChatDisplayLength : uint8_t
{
	CHDL_Short                                         = 0,
	CHDL_Normal                                        = 1,
	CHDL_Long                                          = 2,
	CHDL_END                                           = 3
};

// Enum WillowGame.WillowProfile.EAutoAimSetting
enum class EAutoAimSetting : uint8_t
{
	AUTOAIM_On                                         = 0,
	AUTOAIM_Off                                        = 1,
	AUTOAIM_Dynamic                                    = 2,
	AUTOAIM_END                                        = 3
};

// Enum WillowGame.WillowProfile.EMapDisplayOptions
enum class EMapDisplayOptions : uint8_t
{
	MDO_Default                                        = 0,
	MDO_Minimap                                        = 1,
	MDO_Radar                                          = 2,
	MDO_END                                            = 3
};

// Enum WillowGame.WillowProfile.EDamageNumberStyleOptions
enum class EDamageNumberStyleOptions : uint8_t
{
	DNSO_CombinedNumbers                               = 0,
	DNSO_IndividualNumbers                             = 1,
	DNSO_END                                           = 2
};

// Enum WillowGame.WillowProfile.EDamageFeedbackOptions
enum class EDamageFeedbackOptions : uint8_t
{
	DFO_NumericalAndFlash                              = 0,
	DFO_Numerical                                      = 1,
	DFO_Flash                                          = 2,
	DFO_None                                           = 3,
	DFO_END                                            = 4
};

// Enum WillowGame.SkillDefinition.ESkillKillEvents
enum class ESkillKillEvents : uint8_t
{
	SKE_KilledEnemy                                    = 0,
	SKE_KilledByEnemy                                  = 1,
	SKE_END                                            = 2
};

// Enum WillowGame.SkillDefinition.ESkillDamageEvents
enum class ESkillDamageEvents : uint8_t
{
	SDE_DamagedEnemy                                   = 0,
	SDE_DamagedFriendly                                = 1,
	SDE_DamagedByEnemy                                 = 2,
	SDE_DamagedByFriendly                              = 3,
	SDE_DamagedNeutral_Deprecated                      = 4,
	SDE_DamagedByNeutral_Deprecated                    = 5,
	SDE_DamagedUnawareEnemy                            = 6,
	SDE_DamagedEnemyWithMeleeFromBehind                = 7,
	SDE_BlockedByEnemy                                 = 8,
	SDE_END                                            = 9
};

// Enum WillowGame.SkillDefinition.ERequiredActionSkillState
enum class ERequiredActionSkillState : uint8_t
{
	ERASS_Ignore                                       = 0,
	ERASS_MustBeRunning                                = 1,
	ERASS_MustNotBeRunning                             = 2,
	ERASS_END                                          = 3
};

// Enum WillowGame.SkillDefinition.ETrackedSkillType
enum class ETrackedSkillType : uint8_t
{
	TRACKEDSKILL_Untracked                             = 0,
	TRACKEDSKILL_Kill                                  = 1,
	TRACKEDSKILL_Triggered                             = 2,
	TRACKEDSKILL_Respond                               = 3,
	TRACKEDSKILL_ConsumableBuff                        = 4,
	TRACKEDSKILL_MeleeOverride                         = 5,
	TRACKEDSKILL_END                                   = 6
};

// Enum WillowGame.SkillDefinition.ESkillEventGradeType
enum class ESkillEventGradeType : uint8_t
{
	SEVG_PlayerSkillGrade                              = 0,
	SEVG_HardcodedGrade                                = 1,
	SEVG_SameAsThisSkillGrade                          = 2,
	SEVG_END                                           = 3
};

// Enum WillowGame.SkillDefinition.ESkillKilledEventType
enum class ESkillKilledEventType : uint8_t
{
	SKEVT_KilledEnemy                                  = 0,
	SKEVT_KilledFriendly                               = 1,
	SKEVT_KilledNeutral                                = 2,
	SKEVT_KilledByEnemy                                = 3,
	SKEVT_KilledByFriendly                             = 4,
	SKEVT_KilledByNeutral                              = 5,
	SKEVT_END                                          = 6
};

// Enum WillowGame.SkillDefinition.ESkillDamagedEventType
enum class ESkillDamagedEventType : uint8_t
{
	SDEVT_DamagedEnemy                                 = 0,
	SDEVT_DamagedFriendly                              = 1,
	SDEVT_DamagedNeutral                               = 2,
	SDEVT_DamagedByEnemy                               = 3,
	SDEVT_DamagedByFriendly                            = 4,
	SDEVT_DamagedByNeutral                             = 5,
	SDEVT_ShieldDepletedAfterBeingFull                 = 6,
	SDEVT_END                                          = 7
};

// Enum WillowGame.SkillDefinition.ESkillEventType
enum class ESkillEventType : uint8_t
{
	SEVT_SkillActivated                                = 0,
	SEVT_SkillExecuted                                 = 1,
	SEVT_SkillDeactivated                              = 2,
	SEVT_SkillPaused                                   = 3,
	SEVT_SkillResumed                                  = 4,
	SEVT_DamagedEnemy                                  = 5,
	SEVT_DamagedFriendly                               = 6,
	SEVT_DamagedNeutral                                = 7,
	SEVT_DamagedByEnemy                                = 8,
	SEVT_DamagedByFriendly                             = 9,
	SEVT_DamagedByNeutral                              = 10,
	SEVT_ShieldDepletedAfterBeingFull                  = 11,
	SEVT_KilledEnemy                                   = 12,
	SEVT_KilledFriendly                                = 13,
	SEVT_KilledNeutral                                 = 14,
	SEVT_KilledByEnemy                                 = 15,
	SEVT_KilledByFriendly                              = 16,
	SEVT_KilledByNeutral                               = 17,
	SEVT_WeaponZoomed                                  = 18,
	SEVT_WeaponUnzoomed                                = 19,
	SEVT_WeaponShotMissed                              = 20,
	SEVT_WeaponFired                                   = 21,
	SEVT_WeaponReloaded                                = 22,
	SEVT_PlayerDeathAverted                            = 23,
	SEVT_ActionSkillCooldownAbilityActivated           = 24,
	SEVT_ActionSkillActiveAbilityActivated             = 25,
	SEVT_DamagedUnawareEnemy                           = 26,
	SEVT_DamagedEnemyWithMeleeFromBehind               = 27,
	SEVT_MeleeOverrideSkillActivated                   = 28,
	SEVT_ThrowGrenadeOverrideSkillActivated            = 29,
	SEVT_WeaponSwapped                                 = 30,
	SEVT_PlayerRecoveredFromDownState                  = 31,
	SEVT_ShieldDepleted                                = 32,
	SEVT_ShieldFull                                    = 33,
	SEVT_WeaponStartReload                             = 34,
	SEVT_PlayerResurrected                             = 35,
	SEVT_WeaponManuallyReloaded                        = 36,
	SEVT_AppliedStatusEffectToEnemy                    = 37,
	SEVT_DownStateBegin                                = 38,
	SEVT_DownStateEnd                                  = 39,
	SEVT_BledOut                                       = 40,
	SEVT_OnStatusEffectTypeBegin                       = 41,
	SEVT_OnStatusEffectTypeEnd                         = 42,
	SEVT_CounteredByEnemy                              = 43,
	SEVT_CounteredEnemy                                = 44,
	SEVT_BlockedByEnemy                                = 45,
	SEVT_BlockedEnemy                                  = 46,
	SEVT_BuffStarted                                   = 47,
	SEVT_BuffEnded                                     = 48,
	SEVT_StealthConfirmed                              = 49,
	SEVT_StealthBroken                                 = 50,
	SEVT_Landed                                        = 51,
	SEVT_CollectedPickup                               = 52,
	SEVT_AssistedKillingEnemy                          = 53,
	SEVT_NeutralizedCapturePad                         = 54,
	SEVT_CapturedCapturePad                            = 55,
	SEVT_PurchasedBuildable                            = 56,
	SEVT_TauntStarted                                  = 57,
	SEVT_TauntEnded                                    = 58,
	SEVT_END                                           = 59
};

// Enum WillowGame.SkillDefinition.eSkillCastStyle
enum class EeSkillCastStyle : uint8_t
{
	eSCS_StandardCast                                  = 0,
	eSCS_QuickCast                                     = 1,
	eSCS_InstaCast                                     = 2,
	eSCS_END                                           = 3
};

// Enum WillowGame.SkillDefinition.EEffectTarget
enum class EEffectTarget : uint8_t
{
	TARGET_None                                        = 0,
	TARGET_Self                                        = 1,
	TARGET_Allies                                      = 2,
	TARGET_Enemies                                     = 3,
	TARGET_All                                         = 4,
	TARGET_Pets                                        = 5,
	TARGET_END                                         = 6
};

// Enum WillowGame.SkillDefinition.EEffectDurationType
enum class EEffectDurationType : uint8_t
{
	DURATION_Infinite                                  = 0,
	DURATION_Timed                                     = 1,
	DURATION_END                                       = 2
};

// Enum WillowGame.SkillDefinition.ESkillType
enum class ESkillType : uint8_t
{
	SKILL_TYPE_Passive                                 = 0,
	SKILL_TYPE_Action                                  = 1,
	SKILL_TYPE_ActionAugment                           = 2,
	SKILL_TYPE_Kill                                    = 3,
	SKILL_TYPE_Proficiency                             = 4,
	SKILL_TYPE_END                                     = 5
};

// Enum WillowGame.SkillDefinition.ESkillState
enum class ESkillState : uint8_t
{
	SKILL_Deactivated                                  = 0,
	SKILL_Active                                       = 1,
	SKILL_Paused                                       = 2,
	SKILL_END                                          = 3
};

// Enum WillowGame.SkillDefinition.ETargetCriteria
enum class ETargetCriteria : uint8_t
{
	CRITERIA_None                                      = 0,
	CRITERIA_Nearest                                   = 1,
	CRITERIA_END                                       = 2
};

// Enum WillowGame.WillowProfile.EParticleDetailSetting
enum class EParticleDetailSetting : uint8_t
{
	ParticleDetail_Minimum                             = 0,
	ParticleDetail_Normal                              = 1,
	ParticleDetail_Maximum                             = 2,
	ParticleDetail_END                                 = 3
};

// Enum WillowGame.WillowPlayerController.EBackButtonScreen
enum class EBackButtonScreen : uint8_t
{
	CS_None                                            = 0,
	CS_MissionLog                                      = 1,
	CS_Map                                             = 2,
	CS_Inventory                                       = 3,
	CS_Skills                                          = 4,
	CS_Challenges                                      = 5,
	CS_END                                             = 6
};

// Enum WillowGame.WillowPlayerController.EMissionSortType
enum class EMissionSortType : uint8_t
{
	MSORT_Region                                       = 0,
	MSORT_Status                                       = 1,
	MSORT_Difficulty                                   = 2,
	MSORT_Chronological                                = 3,
	MSORT_END                                          = 4
};

// Enum WillowGame.WillowPlayerController.ELoadGameResult
enum class ELoadGameResult : uint8_t
{
	LGR_Failure                                        = 0,
	LGR_Success                                        = 1,
	LGR_Pending                                        = 2,
	LGR_CorruptedFailure                               = 3,
	LGR_UnloadedDLCFailure                             = 4,
	LGR_DuplicateFailure                               = 5,
	LGR_END                                            = 6
};

// Enum WillowGame.WillowPawn.EHolsteredGearState
enum class EHolsteredGearState : uint8_t
{
	HGS_None                                           = 0,
	HGS_PendingFadeIn                                  = 1,
	HGS_FadingIn                                       = 2,
	HGS_FadingOut                                      = 3,
	HGS_END                                            = 4
};

// Enum WillowGame.WillowPawn.EStaggerState
enum class EStaggerState : uint8_t
{
	ESTAGGER_Staggered                                 = 0,
	ESTAGGER_Unstaggering                              = 1,
	ESTAGGER_BlendAnimStart                            = 2,
	ESTAGGER_BlendAnimEnd                              = 3,
	ESTAGGER_END                                       = 4
};

// Enum WillowGame.WillowPawn.EDenStat
enum class EDenStat : uint8_t
{
	DenStat_None                                       = 0,
	DenStat_Injured                                    = 1,
	DenStat_OnFire                                     = 2,
	DenStat_Corrosive                                  = 3,
	DenStat_Shocked                                    = 4,
	DenStat_Slagged                                    = 5,
	DenStat_Slowed                                     = 6,
	DenStat_Healing                                    = 7,
	DenStat_END                                        = 8
};

// Enum WillowGame.WillowPawn.ERegionList
enum class ERegionList : uint8_t
{
	ERL_Firestone                                      = 0,
	ERL_NewHaven                                       = 1,
	ERL_END                                            = 2
};

// Enum WillowGame.WillowPawn.EResurrectReason
enum class EResurrectReason : uint8_t
{
	ERR_Unknown                                        = 0,
	ERR_IDied                                          = 1,
	ERR_OtherDied                                      = 2,
	ERR_FellOutOfWorld                                 = 3,
	ERR_LDRes                                          = 4,
	ERR_Gibbed                                         = 5,
	ERR_OutsideWorldBounds                             = 6,
	ERR_LevelTravel                                    = 7,
	ERR_END                                            = 8
};

// Enum WillowGame.ItemPool.ELootStyle
enum class ELootStyle : uint8_t
{
	LOOTSTYLE_StandardPickup                           = 0,
	LOOTSTYLE_AttachedLoot                             = 1,
	LOOTSTYLE_DroppedLoot                              = 2,
	LOOTSTYLE_END                                      = 3
};

// Enum WillowGame.HitReactionDefinition.EFlinchType
enum class EFlinchType : uint8_t
{
	FlinchType_None                                    = 0,
	FlinchType_Soft                                    = 1,
	FlinchType_Hard                                    = 2,
	FlinchType_END                                     = 3
};

// Enum WillowGame.IDesignerAttributeProvider.EDesignerAttributeReplicationStrategy
enum class EDesignerAttributeReplicationStrategy : uint8_t
{
	DATTRREP_NoReplication                             = 0,
	DATTRREP_RepToOwnerOnly                            = 1,
	DATTRREP_RepToEveryone                             = 2,
	DATTRREP_END                                       = 3
};

// Enum WillowGame.WillowGFxMovie3D.MovieFittingStyle
enum class EMovieFittingStyle : uint8_t
{
	MFS_FitWithoutCropping                             = 0,
	MFS_FitWithCropping                                = 1,
	MFS_FitHorizontal                                  = 2,
	MFS_FitVertical                                    = 3,
	MFS_END                                            = 4
};

// Enum WillowGame.CombatMusicManager.ECombatMusicManagerState
enum class ECombatMusicManagerState : uint8_t
{
	CMMS_Playing                                       = 0,
	CMMS_VolumeFading                                  = 1,
	CMMS_Idle                                          = 2,
	CMMS_END                                           = 3
};

// Enum WillowGame.CoordinatedEffectDefinition.ECoordinatedParticleScaleMode
enum class ECoordinatedParticleScaleMode : uint8_t
{
	CPSM_None                                          = 0,
	CPSM_LargestAxis                                   = 1,
	CPSM_SmallestAxis                                  = 2,
	CPSM_HorizontalAxis                                = 3,
	CPSM_VerticalAxis                                  = 4,
	CPSM_EachAxis                                      = 5,
	CPSM_END                                           = 6
};

// Enum WillowGame.DesignerAttributeDefinition.EDesignerAtttributeScope
enum class EDesignerAtttributeScope : uint8_t
{
	DASCOPE_Global                                     = 0,
	DASCOPE_Local                                      = 1,
	DASCOPE_Constant                                   = 2,
	DASCOPE_END                                        = 3
};

// Enum WillowGame.GlobalsDefinition.EItemRarity
enum class EItemRarity : uint8_t
{
	RARITY_Unknown                                     = 0,
	RARITY_Common                                      = 1,
	RARITY_Uncommon                                    = 2,
	RARITY_Rare                                        = 3,
	RARITY_VeryRare                                    = 4,
	RARITY_Legendary                                   = 5,
	RARITY_Seraph                                      = 6,
	RARITY_END                                         = 7
};

// Enum WillowGame.GlobalsDefinition.EDropLifeSpanType
enum class EDropLifeSpanType : uint8_t
{
	DROP_VeryShortLived                                = 0,
	DROP_ShortLived                                    = 1,
	DROP_LongLived                                     = 2,
	DROP_LiveForever                                   = 3,
	DROP_LiveAsLongAsLevel                             = 4,
	DROP_END                                           = 5
};

// Enum WillowGame.ExperienceResourcePool.EExperienceType
enum class EExperienceType : uint8_t
{
	EXPERIENCE_Generic                                 = 0,
	EXPERIENCE_Combat                                  = 1,
	EXPERIENCE_Mission                                 = 2,
	EXPERIENCE_END                                     = 3
};

// Enum WillowGame.FiringModeDefinition.ELightBeamLock
enum class ELightBeamLock : uint8_t
{
	LBL_Never                                          = 0,
	LBL_Always                                         = 1,
	LBL_LockOn                                         = 2,
	LBL_END                                            = 3
};

// Enum WillowGame.FiringModeDefinition.EWillowWeaponFireType
enum class EWillowWeaponFireType : uint8_t
{
	EWWFT_Bullet                                       = 0,
	EWWFT_Beam                                         = 1,
	EWWFT_Rocket                                       = 2,
	EWWFT_HitScan                                      = 3,
	EWWFT_PretendScan                                  = 4,
	EWWFT_END                                          = 5
};

// Enum WillowGame.GFxTextListContainer.EArrayKind
enum class EArrayKind : uint8_t
{
	EAK_Source                                         = 0,
	EAK_Categories                                     = 1,
	EAK_InvalidEntry                                   = 2,
	EAK_Unloadable                                     = 3,
	EAK_END                                            = 4
};

// Enum WillowGame.GFxTextListContainer.ETextListMoveDir
enum class ETextListMoveDir : uint8_t
{
	TLMD_Up                                            = 0,
	TLMD_Down                                          = 1,
	TLMD_PageUp                                        = 2,
	TLMD_PageDown                                      = 3,
	TLMD_First                                         = 4,
	TLMD_Last                                          = 5,
	TLMD_PreviousCategory                              = 6,
	TLMD_NextCategory                                  = 7,
	TLMD_END                                           = 8
};

// Enum WillowGame.GlobalAttributeValueResolver.EGlobalAttributes
enum class EGlobalAttributes : uint8_t
{
	GATTR_ExperiencePointTestLevel                     = 0,
	GATTR_MetaExperiencePointTestLevel                 = 1,
	GATTR_END                                          = 2
};

// Enum WillowGame.GlobalsDefinition.ENumClassPlayers
enum class ENumClassPlayers : uint8_t
{
	NCP_OnePlayer                                      = 0,
	NCP_TwoPlayers                                     = 1,
	NCP_ThreePlayers                                   = 2,
	NCP_FourPlayers                                    = 3,
	NCP_END                                            = 4
};

// Enum WillowGame.InputActionDefinition.EInputActionEvent
enum class EInputActionEvent : uint8_t
{
	INPUT_ACTION_Begin                                 = 0,
	INPUT_ACTION_End                                   = 1,
	INPUT_ACTION_END                                   = 2
};

// Enum WillowGame.InputDeviceDefinition.EAxisParameter
enum class EAxisParameter : uint8_t
{
	AXIS_PARAM_aBaseX                                  = 0,
	AXIS_PARAM_aBaseY                                  = 1,
	AXIS_PARAM_aBaseZ                                  = 2,
	AXIS_PARAM_aMouseX                                 = 3,
	AXIS_PARAM_aMouseY                                 = 4,
	AXIS_PARAM_aForward                                = 5,
	AXIS_PARAM_aTurn                                   = 6,
	AXIS_PARAM_aStrafe                                 = 7,
	AXIS_PARAM_aUp                                     = 8,
	AXIS_PARAM_aLookUp                                 = 9,
	AXIS_PARAM_aPS3AccelX                              = 10,
	AXIS_PARAM_aPS3AccelY                              = 11,
	AXIS_PARAM_aPS3AccelZ                              = 12,
	AXIS_PARAM_aPS3Gyro                                = 13,
	AXIS_PARAM_END                                     = 14
};

// Enum WillowGame.IProjectileBehavior.EProjectilePayloadType
enum class EProjectilePayloadType : uint8_t
{
	PPT_Standard                                       = 0,
	PPT_AreaEffect                                     = 1,
	PPT_BouncingBetty                                  = 2,
	PPT_MIRV                                           = 3,
	PPT_Singularity                                    = 4,
	PPT_TedioreReload                                  = 5,
	PPT_Transfusion                                    = 6,
	PPT_END                                            = 7
};

// Enum WillowGame.IProjectileBehavior.EHomingTargetType
enum class EHomingTargetType : uint8_t
{
	HTARGET_None                                       = 0,
	HTARGET_Instigator                                 = 1,
	HTARGET_ViewGuidePawn                              = 2,
	HTARGET_ViewGuideLocation                          = 3,
	HTARGET_NearestActor                               = 4,
	HTARGET_NearestFriend                              = 5,
	HTARGET_NearestFoe                                 = 6,
	HTARGET_NearestFriendNotInstigator                 = 7,
	HTARGET_ViewGuideRotation                          = 8,
	HTARGET_END                                        = 9
};

// Enum WillowGame.LockoutDefinition.ELockoutStyle
enum class ELockoutStyle : uint8_t
{
	LOCKOUT_Relative                                   = 0,
	LOCKOUT_NextDay                                    = 1,
	LOCKOUT_NextWeek                                   = 2,
	LOCKOUT_END                                        = 3
};

// Enum WillowGame.MeleeDefinition.EMeleeEffectsDirectionSource
enum class EMeleeEffectsDirectionSource : uint8_t
{
	MeleeEffectsDirectionSource_Default                = 0,
	MeleeEffectsDirectionSource_Socket                 = 1,
	MeleeEffectsDirectionSource_ClockFace              = 2,
	MeleeEffectsDirectionSource_END                    = 3
};

// Enum WillowGame.MeleeDefinition.EMeleeOnHitOutputs
enum class EMeleeOnHitOutputs : uint8_t
{
	MeleeOnHit_All                                     = 0,
	MeleeOnHit_Enemy                                   = 1,
	MeleeOnHit_Friendly                                = 2,
	MeleeOnHit_Neutral                                 = 3,
	MeleeOnHit_END                                     = 4
};

// Enum WillowGame.PlayerActionExpressionEvaluator.EPlayerEvalAction
enum class EPlayerEvalAction : uint8_t
{
	EVAL_ACTION_Melee                                  = 0,
	EVAL_ACTION_Reload                                 = 1,
	EVAL_ACTION_WeaponFire                             = 2,
	EVAL_ACTION_Grenade                                = 3,
	EVAL_ACTION_WeaponZoom                             = 4,
	EVAL_ACTION_Sprint                                 = 5,
	EVAL_ACTION_Duck                                   = 6,
	EVAL_ACTION_WeaponZoomIn                           = 7,
	EVAL_ACTION_END                                    = 8
};

// Enum WillowGame.WillowGFxUIManagerDefinition.EUILayout
enum class EUILayout : uint8_t
{
	UILAYOUT_16x9                                      = 0,
	UILAYOUT_16x901                                    = 1,
	UILAYOUT_16x902                                    = 2,
	UILAYOUT_4x3                                       = 3,
	UILAYOUT_4x301                                     = 4,
	UILAYOUT_4x302                                     = 5,
	UILAYOUT_16x10                                     = 6,
	UILAYOUT_16x1001                                   = 7,
	UILAYOUT_16x1002                                   = 8,
	UILAYOUT_END                                       = 9
};

// Enum WillowGame.ProjectileBehavior_Detonate.ETargetAllegiance
enum class ETargetAllegiance : uint8_t
{
	TARGET_ALLEG_Friendly                              = 0,
	TARGET_ALLEG_Enemy                                 = 1,
	TARGET_ALLEG_Any                                   = 2,
	TARGET_ALLEG_END                                   = 3
};

// Enum WillowGame.ProjectileDefinition.EProjectileOnHitOutputs
enum class EProjectileOnHitOutputs : uint8_t
{
	ProjectileOnHit_All                                = 0,
	ProjectileOnHit_Enemy                              = 1,
	ProjectileOnHit_Friendly                           = 2,
	ProjectileOnHit_Neutral                            = 3,
	ProjectileOnHit_END                                = 4
};

// Enum WillowGame.ProjectileDefinition.EHomingTargetChangeType
enum class EHomingTargetChangeType : uint8_t
{
	HTC_AnyTarget                                      = 0,
	HTC_NewTarget                                      = 1,
	HTC_LostTarget                                     = 2,
	HTC_END                                            = 3
};

// Enum WillowGame.ProjectileDefinition.EProjectileType
enum class EProjectileType : uint8_t
{
	PROJECTILE_TYPE_Unknown                            = 0,
	PROJECTILE_TYPE_Frag_Grenade                       = 1,
	PROJECTILE_TYPE_Protean_Grenade                    = 2,
	PROJECTILE_TYPE_Rocket                             = 3,
	PROJECTILE_TYPE_END                                = 4
};

// Enum WillowGame.SeqAct_ExecuteSkill.EExecuteSkillSequenceInput
enum class EExecuteSkillSequenceInput : uint8_t
{
	SEQUENCE_ActivateSkill                             = 0,
	SEQUENCE_DeactivateSkill                           = 1,
	SEQUENCE_ToggleSkill                               = 2,
	SEQUENCE_END                                       = 3
};

// Enum WillowGame.SeqAct_MathBase.ESeqAct_MathOperation
enum class ESeqAct_MathOperation : uint8_t
{
	SQAMO_Add                                          = 0,
	SQAMO_Subtract                                     = 1,
	SQAMO_Multiply                                     = 2,
	SQAMO_Divide                                       = 3,
	SQAMO_Modulus                                      = 4,
	SQAMO_END                                          = 5
};

// Enum WillowGame.SeqAct_ModifyHUDElement.EHUDElement
enum class EHUDElement : uint8_t
{
	HUD_ResourcePool                                   = 0,
	HUD_Ammo                                           = 1,
	HUD_Compass                                        = 2,
	HUD_Skills                                         = 3,
	HUD_XP                                             = 4,
	HUD_END                                            = 5
};

// Enum WillowGame.SeqAct_ProceduralSwitch.EChoiceProbability
enum class EChoiceProbability : uint8_t
{
	PROBABILITY_NoBias                                 = 0,
	PROBABILITY_Rare                                   = 1,
	PROBABILITY_Common                                 = 2,
	PROBABILITY_END                                    = 3
};

// Enum WillowGame.SharedEventProviderDefinition.EPoplarSharedEventMessage
enum class EPoplarSharedEventMessage : uint8_t
{
	PSEM_None                                          = 0,
	PSEM_JoinedGame                                    = 1,
	PSEM_ActionSkillTargetRequirementFailed            = 2,
	PSEM_ActionSkillCooldownRequirementFailed          = 3,
	PSEM_ActionSkillEnergyRequirementFailed            = 4,
	PSEM_EnteredBase                                   = 5,
	PSEM_ExitedBase                                    = 6,
	PSEM_ReceivingStealthCoverage                      = 7,
	PSEM_UsedSkill                                     = 8,
	PSEM_HasLowHealth                                  = 9,
	PSEM_DamagedByTower                                = 10,
	PSEM_HasCashSurplus                                = 11,
	PSEM_SkillActivationFailure                        = 12,
	PSEM_ActionSkillsBlockedByCrowdControlDebuff       = 13,
	PSEM_Jumped                                        = 14,
	PSEM_Landed                                        = 15,
	PSEM_MeleeAttack                                   = 16,
	PSEM_ShieldDepleted                                = 17,
	PSEM_ShieldRegenerating                            = 18,
	PSEM_ShieldFullyCharged                            = 19,
	PSEM_ShieldNowNotRegenerating                      = 20,
	PSEM_ShieldNowIdle                                 = 21,
	PSEM_ShieldNowNotDepleted                          = 22,
	PSEM_ShieldNowNotFullyCharged                      = 23,
	PSEM_OvershieldGained                              = 24,
	PSEM_OvershieldDepleted                            = 25,
	PSEM_OvershieldRenewed                             = 26,
	PSEM_KillModifierAchieved                          = 27,
	PSEM_AssistModifierAcheived                        = 28,
	PSEM_OpenedHelix                                   = 29,
	PSEM_ClosedHelix                                   = 30,
	PSEM_HelixSelectionMade                            = 31,
	PSEM_OpenedMinimap                                 = 32,
	PSEM_ClosedMinimap                                 = 33,
	PSEM_CreatedPlayerAlertFromMinimap                 = 34,
	PSEM_OpenedBuildNodeMenu                           = 35,
	PSEM_ClosedBuildNodeMenu                           = 36,
	PSEM_BuildNodeSelectionChanged                     = 37,
	PSEM_PurchasedBuildable                            = 38,
	PSEM_RepairedBuildable                             = 39,
	PSEM_StartedHackingBuildNode                       = 40,
	PSEM_BuildNodeHackingEndedUnsuccessfully           = 41,
	PSEM_BuildNodeHackingEndedSuccessfully             = 42,
	PSEM_NoKillModifierAchieved                        = 43,
	PSEM_END                                           = 44
};

// Enum WillowGame.Skill.PawnListSource
enum class EPawnListSource : uint8_t
{
	PAWN_Teammate                                      = 0,
	PAWN_Enemy                                         = 1,
	PAWN_END                                           = 2
};

// Enum WillowGame.Skill.EAdjustModifierMode
enum class EAdjustModifierMode : uint8_t
{
	WILLOW_ADJUST_InitialAddModifer                    = 0,
	WILLOW_ADJUST_AddModifer                           = 1,
	WILLOW_ADJUST_RemoveModifer                        = 2,
	WILLOW_ADJUST_END                                  = 3
};

// Enum WillowGame.SkillEffectManager.EShieldEvent
enum class EShieldEvent : uint8_t
{
	ESE_ShieldDepleted                                 = 0,
	ESE_ShieldNotDepleted                              = 1,
	ESE_ShieldFullyCharged                             = 2,
	ESE_ShieldNotFullyCharged                          = 3,
	ESE_ShieldRegenerating                             = 4,
	ESE_ShieldNotRegenerating                          = 5,
	ESE_ShieldIdle                                     = 6,
	ESE_END                                            = 7
};

// Enum WillowGame.SkillExpressionEvaluator.ESkillRunState
enum class ESkillRunState : uint8_t
{
	ESS_Running                                        = 0,
	ESS_NotRunning                                     = 1,
	ESS_END                                            = 2
};

// Enum WillowGame.TargetableAttributeValueResolver.ETargetableValue
enum class ETargetableValue : uint8_t
{
	TARGETABLE_IsChampion                              = 0,
	TARGETABLE_END                                     = 1
};

// Enum WillowGame.TransformedExpressionEvaluator.ETransformedOption
enum class ETransformedOption : uint8_t
{
	TransformedOption_Active                           = 0,
	TransformedOption_NotActive                        = 1,
	TransformedOption_END                              = 2
};

// Enum WillowGame.WillowAIComponent.ECombatPointLOS
enum class ECombatPointLOS : uint8_t
{
	CPLOS_Ignore                                       = 0,
	CPLOS_UseLOS                                       = 1,
	CPLOS_AvoidLOS                                     = 2,
	CPLOS_END                                          = 3
};

// Enum WillowGame.WillowAIMoveNode.EVehicleNodeType
enum class EVehicleNodeType : uint8_t
{
	VEHNODE_Patrol                                     = 0,
	VEHNODE_ScriptedPath                               = 1,
	VEHNODE_END                                        = 2
};

// Enum WillowGame.WillowAnimNode_AimState.EAimAnimState
enum class EAimAnimState : uint8_t
{
	AimAnimState_Idle                                  = 0,
	AimAnimState_IronSights                            = 1,
	AimAnimState_END                                   = 2
};

// Enum WillowGame.WillowAnimNode_MovementTransition.EMoveState
enum class EMoveState : uint8_t
{
	MOVESTATE_Idle                                     = 0,
	MOVESTATE_LaunchDelay                              = 1,
	MOVESTATE_Launching                                = 2,
	MOVESTATE_Cycling                                  = 3,
	MOVESTATE_Stopping                                 = 4,
	MOVESTATE_END                                      = 5
};

// Enum WillowGame.WillowAnimNode_MovementTransition.EMoveTransChannel
enum class EMoveTransChannel : uint8_t
{
	EMTC_Idle                                          = 0,
	EMTC_Movement                                      = 1,
	EMTC_Transition                                    = 2,
	EMTC_END                                           = 3
};

// Enum WillowGame.WillowAutoAimStrategyDefinition.ETargetSnapMethod
enum class ETargetSnapMethod : uint8_t
{
	SNAP_METHOD_SnapPoint                              = 0,
	SNAP_METHOD_SnapRegion                             = 1,
	SNAP_METHOD_END                                    = 2
};

// Enum WillowGame.WillowWeapon.EWeaponAnimPutDownState
enum class EWeaponAnimPutDownState : uint8_t
{
	WAPDS_None                                         = 0,
	WAPDS_PutDown                                      = 1,
	WAPDS_PutDownSwap                                  = 2,
	WAPDS_PutDownInterrupted                           = 3,
	WAPDS_END                                          = 4
};

// Enum WillowGame.WillowWeapon.EWeaponSpinState
enum class EWeaponSpinState : uint8_t
{
	SPIN_STATE_None                                    = 0,
	SPIN_STATE_SpinningUp                              = 1,
	SPIN_STATE_FullySpunUp                             = 2,
	SPIN_STATE_END                                     = 3
};

// Enum WillowGame.WillowWeapon.EZoomState
enum class EZoomState : uint8_t
{
	ZST_NotZoomed                                      = 0,
	ZST_ZoomingIn                                      = 1,
	ZST_Zoomed                                         = 2,
	ZST_ZoomingOut                                     = 3,
	ZST_END                                            = 4
};

// Enum WillowGame.WillowWeapon.EWeaponReloadState
enum class EWeaponReloadState : uint8_t
{
	RELOADSTATE_None                                   = 0,
	RELOADSTATE_Reloading                              = 1,
	RELOADSTATE_Aborted                                = 2,
	RELOADSTATE_StartReloading                         = 3,
	RELOADSTATE_EndReloading                           = 4,
	RELOADSTATE_END                                    = 5
};

// Enum WillowGame.WillowNavigationHandle.EFlightMode
enum class EFlightMode : uint8_t
{
	FlightMode_None                                    = 0,
	FlightMode_Flying                                  = 1,
	FlightMode_Stuck                                   = 2,
	FlightMode_Landing                                 = 3,
	FlightMode_Walking                                 = 4,
	FlightMode_END                                     = 5
};

// Enum WillowGame.WillowDamageArea.ECollisionPrimitive
enum class ECollisionPrimitive : uint8_t
{
	CP_StaticMesh                                      = 0,
	CP_Cylinder                                        = 1,
	CP_Sphere                                          = 2,
	CP_END                                             = 3
};

// Enum WillowGame.WillowDeclarations.ERewardPopup
enum class ERewardPopup : uint8_t
{
	ERP_BadassToken                                    = 0,
	ERP_CharacterHead                                  = 1,
	ERP_CharacterSkin                                  = 2,
	ERP_VehicleSkin                                    = 3,
	ERP_END                                            = 4
};

// Enum WillowGame.WillowDialogNameTag.EchoPortraitType
enum class EchoPortraitType : uint8_t
{
	ECHO_PORTRAIT_Scaleform                            = 0,
	ECHO_PORTRAIT_Video                                = 1,
	ECHO_PORTRAIT_END                                  = 2
};

// Enum WillowGame.WillowDownloadableContentManager.EDlcInstallState
enum class EDlcInstallState : uint8_t
{
	DLC_INSTALL_None                                   = 0,
	DLC_INSTALL_InstallingBundles                      = 1,
	DLC_INSTALL_LoadingAsyncPackages                   = 2,
	DLC_INSTALL_InstallingContent                      = 3,
	DLC_INSTALL_InstallingOfferContent                 = 4,
	DLC_INSTALL_InstallComplete                        = 5,
	DLC_INSTALL_END                                    = 6
};

// Enum WillowGame.WillowElevator.ElevatorButtonUsage
enum class ElevatorButtonUsage : uint8_t
{
	EBU_Cycle                                          = 0,
	EBU_Call                                           = 1,
	EBU_Previous                                       = 2,
	EBU_Next                                           = 3,
	EBU_END                                            = 4
};

// Enum WillowGame.WillowElevatorButton.EElevButtonState
enum class EElevButtonState : uint8_t
{
	BS_Enabled                                         = 0,
	BS_Disabled                                        = 1,
	BS_InUse                                           = 2,
	BS_END                                             = 3
};

// Enum WillowGame.WillowGameEngine.ELevelChangeState
enum class ELevelChangeState : uint8_t
{
	LCS_None                                           = 0,
	LCS_SyncingCommit                                  = 1,
	LCS_SyncingUnPause                                 = 2,
	LCS_END                                            = 3
};

// Enum WillowGame.WillowGameMessage.EWillowGameMessage
enum class EWillowGameMessage : uint8_t
{
	WGM_PlayerEnteredGame                              = 0,
	WGM_PlayerLeftGame                                 = 1,
	WGM_CreaturesGrowStronger                          = 2,
	WGM_CreaturesWeaken                                = 3,
	WGM_END                                            = 4
};

// Enum WillowGame.WillowGFxDialogBox.EDialogType
enum class EDialogType : uint8_t
{
	Normal                                             = 0,
	SplitScreen                                        = 1,
	Small                                              = 2,
	Alternate                                          = 3,
	Alternate_SplitScreen                              = 4,
	Alternate_Small                                    = 5,
	TextInput                                          = 6,
	EDialogType_END                                    = 7
};

// Enum WillowGame.WillowHUD.EHUDEquippedCardType
enum class EHUDEquippedCardType : uint8_t
{
	HUDEquippedCard_Weapon                             = 0,
	HUDEquippedCard_Shield                             = 1,
	HUDEquippedCard_GrenadeMod                         = 2,
	HUDEquippedCard_ClassMod                           = 3,
	HUDEquippedCard_Artifact                           = 4,
	HUDEquippedCard_END                                = 5
};

// Enum WillowGame.WillowHUD.EHUDPickupCardType
enum class EHUDPickupCardType : uint8_t
{
	HUDPickupCard_Weapon                               = 0,
	HUDPickupCard_Shield                               = 1,
	HUDPickupCard_GrenadeMod                           = 2,
	HUDPickupCard_ClassMod                             = 3,
	HUDPickupCard_Artifact                             = 4,
	HUDPickupCard_Item                                 = 5,
	HUDPickupCard_END                                  = 6
};

// Enum WillowGame.WillowPlayerInput.EButtonState
enum class EButtonState : uint8_t
{
	BUTTON_STATE_Pressed                               = 0,
	BUTTON_STATE_Held                                  = 1,
	BUTTON_STATE_Released                              = 2,
	BUTTON_STATE_Cleared                               = 3,
	BUTTON_STATE_END                                   = 4
};

// Enum WillowGame.WillowPlayerPawnDataManager.OnDemandTrackedAssetType
enum class EOnDemandTrackedAssetType : uint8_t
{
	OD_ASSET_Character                                 = 0,
	OD_ASSET_Skin                                      = 1,
	OD_ASSET_BasicSkin                                 = 2,
	OD_ASSET_END                                       = 3
};

// Enum WillowGame.WillowPlayerPawnDataManager.DataRequestType
enum class EDataRequestType : uint8_t
{
	DRT_Object                                         = 0,
	DRT_END                                            = 1
};

// Enum WillowGame.WillowSeqAct_KillPawnBasedOnAllegiance.EAllegianceRelationship
enum class EAllegianceRelationship : uint8_t
{
	ALLEG_Enemy                                        = 0,
	ALLEG_Friendly                                     = 1,
	ALLEG_JustThisAllegiance                           = 2,
	ALLEG_END                                          = 3
};

// Enum WillowGame.WillowSeqAct_PlayArmAnimation.EAnimationType
enum class EAnimationType : uint8_t
{
	AT_Equip                                           = 0,
	AT_PutDown                                         = 1,
	AT_END                                             = 2
};

// Enum WillowGame.WillowSkelControl_RotationRateBySpeed.ESpeedComponent
enum class ESpeedComponent : uint8_t
{
	ESC_Forward                                        = 0,
	ESC_Strafe                                         = 1,
	ESC_Horizontal                                     = 2,
	ESC_Vertical                                       = 3,
	ESC_Full                                           = 4,
	ESC_END                                            = 5
};

// Enum WillowGame.WillowStaggerAnimNodeBlend.EReferencePointType
enum class EReferencePointType : uint8_t
{
	REFPOINT_TYPE_Bone                                 = 0,
	REFPOINT_TYPE_Socket                               = 1,
	REFPOINT_TYPE_END                                  = 2
};

// Enum WillowGame.WillowTI_PrioritizeHealth.EHealthPriority
enum class EHealthPriority : uint8_t
{
	HealthPriority_PrioritizeWeak                      = 0,
	HealthPriority_PrioritizeHealthy                   = 1,
	HealthPriority_END                                 = 2
};

// Enum WillowGame.WillowUIInteraction.ENetworkActorChannelSortStyle
enum class ENetworkActorChannelSortStyle : uint8_t
{
	NETACTORSORT_ActorNameAToZ                         = 0,
	NETACTORSORT_ActornameZToA                         = 1,
	NETACTORSORT_CountHighToLow                        = 2,
	NETACTORSORT_CountLowToHigh                        = 3,
	NETACTORSORT_END                                   = 4
};

// Enum WillowGame.WillowUIInteraction.EMemoryDetailsSortStyle
enum class EMemoryDetailsSortStyle : uint8_t
{
	MEMDETAILSORT_ResourceNameAToZ                     = 0,
	MEMDETAILSORT_ResourceNameZToA                     = 1,
	MEMDETAILSORT_SizeSmallToLarge                     = 2,
	MEMDETAILSORT_SizeLargeToSmall                     = 3,
	MEMDETAILSORT_CountHighToLow                       = 4,
	MEMDETAILSORT_END                                  = 5
};

// Enum WillowGame.WillowUIInteraction.EAttributeDebugSort
enum class EAttributeDebugSort : uint8_t
{
	ATTDEBUGSORT_NameUp                                = 0,
	ATTDEBUGSORT_NameDn                                = 1,
	ATTDEBUGSORT_END                                   = 2
};

// Enum WillowGame.WillowUIInteraction.EFontSize
enum class EFontSize : uint8_t
{
	FONT_Medium                                        = 0,
	FONT_Tiny                                          = 1,
	FONT_Small                                         = 2,
	FONT_Large                                         = 3,
	FONT_END                                           = 4
};

// Enum WillowGame.WillowUIInteraction.ETextVAlignment
enum class ETextVAlignment : uint8_t
{
	VALIGN_FixedPos                                    = 0,
	VALIGN_Center                                      = 1,
	VALIGN_Bottom                                      = 2,
	VALIGN_END                                         = 3
};

// Enum WillowGame.WillowUIInteraction.ETextHAlignment
enum class ETextHAlignment : uint8_t
{
	HALIGN_FixedPos                                    = 0,
	HALIGN_Left                                        = 1,
	HALIGN_Center                                      = 2,
	HALIGN_END                                         = 3
};


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class WillowGame.AchievementUtility
// 0x0000 (0x0058 - 0x0058)
class UAchievementUtility : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AchievementUtility");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_FlyCompanion
// 0x0038 (0x0338 - 0x0370)
class UAction_FlyCompanion : public UAction_Companion
{
public:
	float                                              FollowHeight;                                  // 0x0338 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bRandomOffsets : 1;                            // 0x033C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FAIRange                                    RandomHOffset;                                 // 0x0340 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    RandomVOffset;                                 // 0x0348 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    RandomAngleLimits;                             // 0x0350 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AWillowMind*                                 WMind;                                         // 0x0358 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 WPawn;                                         // 0x0360 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowNavigationHandle*                     WNavHandle;                                    // 0x0368 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_FlyCompanion");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_MoveToInstanceData
// 0x0030 (0x02B8 - 0x02E8)
class UAction_MoveToInstanceData : public UAction_FollowMoveNodes
{
public:
	struct FName                                       InstanceDataName;                              // 0x02B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bRotateUponArrival : 1;                        // 0x02C0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bChooseClosest : 1;                            // 0x02C0 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	float                                              RotateAngle;                                   // 0x02C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AWillowMind*                                 MyWillowMind;                                  // 0x02C8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x02D0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      InstanceDataActor;                             // 0x02D8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AGearboxAIMoveNode*                          InstanceDataMoveNode;                          // 0x02E0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_MoveToInstanceData");
		}

		return uClassPointer;
	};

	void SetMoveNode(class AGearboxAIMoveNode* NewNode);
	class AGearboxAIMoveNode* GetMoveNode();
	void SetMoveFacingPolicy();
	void CheckStateTransition();
	class AActor* GetInstanceDataActor();
	void eventStart();
	struct FName eventCanRun();
	void eventInit();
};

// Class WillowGame.Action_WillowPatrol
// 0x0028 (0x02F8 - 0x0320)
class UAction_WillowPatrol : public UAction_Patrol
{
public:
	struct FAIRange                                    TimeBetweenPatrolMovement;                     // 0x02F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TimeOfNextRandomPatrol;                        // 0x0300 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AWillowMind*                                 MyWillowMind;                                  // 0x0308 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x0310 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowNavigationHandle*                     WillowNavHandle;                               // 0x0318 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_WillowPatrol");
		}

		return uClassPointer;
	};

	float GetPatrolWaitTime();
	void CheckFullyBlocked();
	struct FVector GetRandomHomeLocation();
	bool IsTooFarFromHome();
	void CheckStateTransition();
	struct FName GetPatrolState();
	void eventActivateEvent(const struct FName& EventName);
	void eventStart();
	void eventInit();
};

// Class WillowGame.Action_WillowScripted
// 0x0030 (0x0340 - 0x0370)
class UAction_WillowScripted : public UAction_Scripted
{
public:
	class AWillowMind*                                 MyWillowMind;                                  // 0x0340 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x0348 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowAIComponent*                          WillowAIComp;                                  // 0x0350 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UWillowNavigationHandle*                     WillowNavHandle;                               // 0x0358 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UFormationComponent*                         FollowFormation;                               // 0x0360 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UWillowSeqAct_AIScriptedFollow*              FollowAction;                                  // 0x0368 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_WillowScripted");
		}

		return uClassPointer;
	};

	bool ReachedFormation(const struct FVector& TestLoc);
	bool LocationInFollowRange(const struct FVector& TestLoc);
	void ScriptedActionEnded();
	void ScriptedActionStarted();
	struct FName GetDesiredStateName();
	bool ShouldLookAtPlayer();
	void eventActivateEvent(const struct FName& EventName);
	void eventStart();
	void eventInit();
};

// Class WillowGame.Action_ScriptedNPC
// 0x0008 (0x0370 - 0x0378)
class UAction_ScriptedNPC : public UAction_WillowScripted
{
public:
	uint32_t                                           bLoadBalanceNPC : 1;                           // 0x0370 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIdleNPC : 1;                                  // 0x0370 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_ScriptedNPC");
		}

		return uClassPointer;
	};

	void SetupLoadBalancePathing();
	void SetupLoadBalanceDefaults();
	struct FName GetDesiredStateName();
	void CheckStateTransition();
	struct FName eventCanRun();
};

// Class WillowGame.ActionSkill
// 0x0100 (0x0240 - 0x0340)
class AActionSkill : public AActor
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0240 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITimerBehavior;                       // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0250 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0258 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              TickRate;                                      // 0x0260 (0x0004) [0x0000000000000000]               
	float                                              NextTick;                                      // 0x0264 (0x0004) [0x0000000000000000]               
	class UISkillInstigator*                           MySkillInstigator_Object;                      // 0x0268 (0x0008) [0x0000000000000000] 
	class UISkillInstigator*                           MySkillInstigator_Interface;                   // 0x0270 (0x0008) [0x0000000000000000]               
	class AController*                                 MyController;                                  // 0x0278 (0x0008) [0x0000000000000000]               
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x0280 (0x0008) [0x0000000000000000]               
	class AWillowPlayerController*                     MyWillowPC;                                    // 0x0288 (0x0008) [0x0000000000000000]               
	class AWillowMind*                                 MyWillowMind;                                  // 0x0290 (0x0008) [0x0000000000000000]               
	class AActor*                                      Target;                                        // 0x0298 (0x0008) [0x0000000000000020] (CPF_Net)     
	struct FInstanceData2                              InstanceState;                                 // 0x02A0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x02B0 (0x0004) [0x0000000000000000]               
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;               // 0x02B4 (0x000C) [0x0000000100000020] (CPF_Net)     
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                       // 0x02C0 (0x0010) [0x0000000100000020] (CPF_Net)     
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x02D0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FTimerBehaviorUserState                     ActionSkillTimers;                             // 0x02D8 (0x0024) [0x0000000000000000]               
	struct FActionSkillCustomEventReplicationData      CustomEventReplication;                        // 0x02FC (0x000C) [0x0000000100000020] (CPF_Net)     
	uint32_t                                           bInitialized : 1;                              // 0x0308 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDebugEnabled : 1;                             // 0x0308 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bBlockDeactivate : 1;                          // 0x0308 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bWantsDeactivate : 1;                          // 0x0308 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bWantsDestroy : 1;                             // 0x0308 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bActionSkillNearingCompletionEventFired : 1;   // 0x0308 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bAllowAutomaticActiveAbilityActivation : 1;    // 0x0308 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bRestrictActiveAbilityByCount : 1;             // 0x0308 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bRestrictActiveAbilityByTimeFrequency : 1;     // 0x0308 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowAutomaticCooldownAbilityActivation : 1;  // 0x0308 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bRestrictCooldownAbilityByCount : 1;           // 0x0308 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bRestrictCooldownAbilityByTimeFrequency : 1;   // 0x0308 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	float                                              ActionSkillNearingCompletionTime;              // 0x030C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxActivationCountPerActiveCycle;              // 0x0310 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ActiveAbilityActivationTimeFrequency;          // 0x0314 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxActivationCountPerCooldownCycle;            // 0x0318 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CooldownAbilityActivationTimeFrequency;        // 0x031C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USkillDefinition*                            MeleeOverrideSkill;                            // 0x0320 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            TimeStarted;                                   // 0x0328 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentActiveAbilityCount;                     // 0x032C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextActiveAbilityTime;                         // 0x0330 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CurrentCooldownAbilityCount;                   // 0x0334 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextCooldownAbilityTime;                       // 0x0338 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActionSkill");
		}

		return uClassPointer;
	};

	bool ShouldResetOnInterruptedGrenadeThrow();
	bool eventCanResetActionSkill();
	bool eventOverrideCrosshairVisibility(bool bVisible, bool bForScope);
	float eventGetDeferredActionSkillTime();
	void eventTickActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime);
	void eventDisableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void eventEnableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	class UObject* GetActionSkillEventContextObject();
	void eventRunCustomEvent(const struct FName& EventName, class UObject* optionalEventInstigator, class UObject* optionalOtherEventParticipantObject, const struct FBehaviorParameters& optionalEventData);
	void eventHandleTimerEvent(EBehaviorTimerEvent EventType, const struct FBehaviorParameters& optionalEventData);
	bool SetTimerState(EBehaviorTimerID TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(EBehaviorTimerID TimerId, struct FBehaviorTimerState& TimerState);
	float GetTimeSeconds();
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void eventEnableDebug(bool DebugEnabled);
	void NotifyActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class UISkillInstigator* SkillInstigator, float ActionSkillDuration, float ActiveTimeRemaining, class AActor* optionalTheTarget);
	void eventStartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class UISkillInstigator* SkillInstigator, float ActionSkillDuration, float ActiveTimeRemaining, class AActor* optionalTheTarget);
	void eventClientStartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class UISkillInstigator* SkillInstigator, float ActionSkillDuration, float ActiveTimeRemaining, class AActor* optionalTheTarget);
	bool eventAllowNewActiveAbilityActivation();
	bool eventAllowAutomaticActiveAbilityActivation();
	bool eventAllowNewCooldownAbilityActivation();
	bool eventAllowAutomaticCooldownAbilityActivation();
	void eventOnActionSkillTick(float DeltaTime);
	bool OverridesStandardMelee();
	bool ReadyToInterceptMelee(class AActor* AutoAimTarget);
	void OnActionSkillOwnerMelee(class AActor* TargetIfAvailable);
	void OnActionSkillWeaponsRestricted(bool bWeaponsRestricted);
	void OnActionSkillKilledEnemy(class AWillowPawn* KilledPawn);
	void OnActionSkillFakePause(bool bPaused);
	void OnActionSkillOwnerTouchedActor(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnActionSkillOwnerHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void OnActionSkillOwnerStoppedWalking();
	void OnActionSkillOwnerBeganWalking(uint8_t PreviousPhysics);
	void OnActionSkillOwnerBeganFalling(uint8_t PreviousPhysics);
	void eventOnActionSkillOwnerAllieganceChanged(class UPawnAllegiance* NewAllegiance);
	void OnActionSkillOwnerWeaponSwitched(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void OnActionSkillOwnerDied();
	void eventOwnerLostAutoAimTarget(class UITargetable* OldTargetable);
	void eventOwnerAcquiredAutoAimTarget(class UITargetable* NewTargetable);
	void UnregisterNotificationDelegates();
	void RegisterNotificationDelegates();
	void eventTornOff();
	void eventTearOff();
	void OnActionSkillEnded();
	bool eventIsDeactivateBlocked();
	void ClientActionSkillWantsToDeactivate();
	void eventOnActionSkillWantsToDeactivate();
	void eventOnActionSkillStarted(class UISkillInstigator* TheSkillInstigator);
	void SetTarget(class AActor* TheTarget);
	void eventReplicatedEvent(const struct FName& VarName);
	void OnActionSkillOwnerShowBackMenu(class APawn* SkillInstigator, bool bOpened, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnTimerEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnActionSkillNearingCompletion(class APawn* SkillInstigator, class AActor* SkillTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnActionSkillOwnerMeleeOverridden(class APawn* SkillInstigator, class AActor* SkillTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnOwnerLostAutoAimTarget(class APawn* SkillOwner, class AActor* OldTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnOwnerAcquiredAutoAimTarget(class APawn* SkillOwner, class AActor* NewTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnActionSkillDeactivated(class APawn* SkillInstigator, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnActionSkillActivated(class APawn* SkillInstigator, class AActor* SkillTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnActionSkillActiveAbilityNotified(class APawn* SkillInstigator, float ActiveTimeRemaining, class AActor* SkillTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
	void OnActionSkillActiveAbilityActivated(class APawn* SkillInstigator, float ActiveTimeRemaining, class AActor* SkillTargetIfAvailable, struct FBehaviorConsumerHandle& TheConsumerHandle);
};

// Class WillowGame.ActionSkillStateExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UActionSkillStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	uint32_t                                           bIsRunning : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsNotRunning : 1;                             // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActionSkillStateExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.ActorFactoryInteractiveObject
// 0x0008 (0x00C0 - 0x00C8)
class UActorFactoryInteractiveObject : public UActorFactory
{
public:
	class UInteractiveObjectDefinition*                Definition;                                    // 0x00C0 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryInteractiveObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryVehicleSpawnStationPlatform
// 0x0000 (0x00C8 - 0x00C8)
class UActorFactoryVehicleSpawnStationPlatform : public UActorFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryVehicleSpawnStationPlatform");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryVehicleSpawnStationTerminal
// 0x0000 (0x00C8 - 0x00C8)
class UActorFactoryVehicleSpawnStationTerminal : public UActorFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryVehicleSpawnStationTerminal");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowElevatorButton
// 0x0000 (0x00C8 - 0x00C8)
class UActorFactoryWillowElevatorButton : public UActorFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowElevatorButton");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowCoopPlayerStart
// 0x0000 (0x00C0 - 0x00C0)
class UActorFactoryWillowCoopPlayerStart : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowCoopPlayerStart");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowElevator
// 0x0000 (0x00E0 - 0x00E0)
class UActorFactoryWillowElevator : public UActorFactoryMover
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowElevator");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowPawn
// 0x0008 (0x00C0 - 0x00C8)
class UActorFactoryWillowPawn : public UActorFactory
{
public:
	class AWillowPawn*                                 PawnArchetype;                                 // 0x00C0 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowPawn");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowTrigger
// 0x0000 (0x00C0 - 0x00C0)
class UActorFactoryWillowTrigger : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowTrigger");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AdvancedAxisDefinition
// 0x0020 (0x0058 - 0x0078)
class UAdvancedAxisDefinition : public UGBXDefinition
{
public:
	float                                              Speed;                                         // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomSpeed;                                     // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DeadZone;                                      // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelThreshold;                                // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelRate;                                     // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelSpeed;                                    // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelWarmup;                                   // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AdvancedAxisDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AIDebugDummyBase
// 0x0030 (0x02A8 - 0x02D8)
class AAIDebugDummyBase : public ASkeletalMeshActor
{
public:
	class USkeletalMeshComponent*                      MyMesh;                                        // 0x02A8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMaterialInstance*                           MatInstBody;                                   // 0x02B0 (0x0008) [0x0000000000000000]               
	class UMaterialInstance*                           MatInstHead;                                   // 0x02B8 (0x0008) [0x0000000000000000]               
	class UMaterialInstance*                           MatInstHelmet;                                 // 0x02C0 (0x0008) [0x0000000000000000]               
	struct FLinearColor                                DummyColor;                                    // 0x02C8 (0x0010) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AIDebugDummyBase");
		}

		return uClassPointer;
	};

	void eventSetSkeletalMesh(class USkeletalMesh* NewMesh);
	void PostBeginPlay();
};

// Class WillowGame.AIDebugDummy
// 0x0000 (0x02D8 - 0x02D8)
class AAIDebugDummy : public AAIDebugDummyBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AIDebugDummy");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AIPawnBalanceDefinition
// 0x00B8 (0x0058 - 0x0110)
class UAIPawnBalanceDefinition : public UBaseBalanceDefinition
{
public:
	class UExpressionEvaluator*                        CanSpawnIf;                                    // 0x0058 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class TArray<struct FAIPawnPlaythroughData>        PlayThroughs;                                  // 0x0060 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class AWillowPawn*                                 AIPawnArchetype;                               // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           Champion : 1;                                  // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class TArray<class USpawnedActorTagDefinition*>    ActorTags;                                     // 0x0080 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                DefaultExpLevel;                               // 0x0090 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EItemGameStageSource                               BaseItemGameStage;                             // 0x00B0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ItemGameStageOffset;                           // 0x00B8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UItemPoolListDefinition*>       DefaultItemPoolIncludedLists;                  // 0x00D8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FItemPoolInfo>                 DefaultItemPoolList;                           // 0x00E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAIPawnGameStageGradeWeightData> Grades;                                        // 0x00F8 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class USwfMovie*                                   OverrideUnitKillMessageIcon;                   // 0x0108 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AIPawnBalanceDefinition");
		}

		return uClassPointer;
	};

	struct FName GetTransformedKillStat(EAITransformed Transform);
	class FString GetTransformedDisplayName(EAITransformed Transform);
	bool SetupPawnItemPoolList(class AWillowPawn* SpawnedPawn);
	class AWillowPawn* GetPawnArchetype();
	int32_t GetPlayThroughIndex();
};

// Class WillowGame.AIResourceAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UAIResourceAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UAIResource*                                 Resource;                                      // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AIResourceAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AmmoDropWeightAttributeValueResolver
// 0x00B0 (0x0058 - 0x0108)
class UAmmoDropWeightAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UResourceDefinition*                         Resource;                                      // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ResourceThreshold;                             // 0x0060 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bIncludeDeadPlayers : 1;                       // 0x0080 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                AboveThresholdWeight;                          // 0x0088 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                NoPoolWeight;                                  // 0x00A8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MinBelowThresholdWeight;                       // 0x00C8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MaxBelowThresholdWeight;                       // 0x00E8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AmmoDropWeightAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AmmoPanelGFxObject
// 0x0030 (0x00D8 - 0x0108)
class UAmmoPanelGFxObject : public UGFxObject
{
public:
	class FString                                      AmmoTitle;                                     // 0x00D8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            CachedRepeater;                                // 0x00E8 (0x0004) [0x0000000000000000]               
	int32_t                                            CachedSMG;                                     // 0x00EC (0x0004) [0x0000000000000000]               
	int32_t                                            CachedShotgun;                                 // 0x00F0 (0x0004) [0x0000000000000000]               
	int32_t                                            CachedAR;                                      // 0x00F4 (0x0004) [0x0000000000000000]               
	int32_t                                            CachedSniper;                                  // 0x00F8 (0x0004) [0x0000000000000000]               
	int32_t                                            CachedRocket;                                  // 0x00FC (0x0004) [0x0000000000000000]               
	int32_t                                            CachedGrenade;                                 // 0x0100 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AmmoPanelGFxObject");
		}

		return uClassPointer;
	};

	void __SetHighlight(const class FString& HighlightFrame);
	void SetHighlight(class AWillowInventory* WInv);
	void SetAmmoLabels(const class FString& LabelNameBase, int32_t HasAmount, int32_t MaxAmount);
	void SetAmmoCount(const class FString& FlashString, class UResourceDefinition* ResourceDef, class AWillowPlayerController* WPCOwner, int32_t& CachedAmount);
	void SetAllAmmoCounts();
	void RefreshTransientData();
	void SetTitle(const class FString& Title);
	void Init();
};

// Class WillowGame.AmmoResourcePool
// 0x0000 (0x0170 - 0x0170)
class UAmmoResourcePool : public UResourcePool
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AmmoResourcePool");
		}

		return uClassPointer;
	};

	void GetDebugText(class TArray<class FString>& DebugText);
	float GetExtraAmmoRegen();
};

// Class WillowGame.AmmoResourceUpgradeAttributeValueResolver
// 0x0010 (0x0058 - 0x0068)
class UAmmoResourceUpgradeAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UResourceDefinition*                         AssociatedResource;                            // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            AmmoResourceUpgradesArrayIndex;                // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AmmoResourceUpgradeAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AnimNodeStateExpressionEvaluator
// 0x0018 (0x0058 - 0x0070)
class UAnimNodeStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	struct FName                                       AnimNodeName;                                  // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<int32_t>                              ChildIndices;                                  // 0x0060 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AnimNodeStateExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.AnimNotify_CustomEvent
// 0x0008 (0x0058 - 0x0060)
class UAnimNotify_CustomEvent : public UAnimNotify
{
public:
	struct FName                                       CustomEventName;                               // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AnimNotify_CustomEvent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AnimNotify_DialogEvent
// 0x0010 (0x0058 - 0x0068)
class UAnimNotify_DialogEvent : public UAnimNotify
{
public:
	class UDialogEventList*                            List;                                          // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDialogEvent*                                DialogEvent;                                   // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AnimNotify_DialogEvent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AnimNotify_EnableHandIK
// 0x0008 (0x0058 - 0x0060)
class UAnimNotify_EnableHandIK : public UAnimNotify
{
public:
	int32_t                                            Hand;                                          // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnableIK : 1;                                 // 0x005C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AnimNotify_EnableHandIK");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AnimNotify_EnableHeadLookAt
// 0x0010 (0x0058 - 0x0068)
class UAnimNotify_EnableHeadLookAt : public UAnimNotify
{
public:
	struct FName                                       HeadControlName;                               // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnable : 1;                                   // 0x0060 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AnimNotify_EnableHeadLookAt");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AnimNotify_UseBehavior
// 0x0018 (0x0058 - 0x0070)
class UAnimNotify_UseBehavior : public UAnimNotify
{
public:
	class TArray<class UBehaviorBase*>                 Behaviors;                                     // 0x0058 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bRunOnServer : 1;                              // 0x0068 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bRunOnClient : 1;                              // 0x0068 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bRunIfLocalPlayer : 1;                         // 0x0068 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bPassInstigatorAsSelfContext : 1;              // 0x0068 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	EUseBehaviorContext                                InstigatorContextForBehavior;                  // 0x006C (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AnimNotify_UseBehavior");
		}

		return uClassPointer;
	};

	bool PreTestNotify(class AWillowPawn* anOwner);
};

// Class WillowGame.AttributePresentationDefinition
// 0x00F8 (0x0058 - 0x0150)
class UAttributePresentationDefinition : public UGBXDefinition
{
public:
	float                                              BasePriority;                                  // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributeDefinition*                        Attribute;                                     // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      Description;                                   // 0x0068 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NoConstraintText;                              // 0x0078 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Prefix;                                        // 0x0088 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Suffix;                                        // 0x0098 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bIncludePrefixInTranslation : 1;               // 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bIncludeSuffixInTranslation : 1;               // 0x00A8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bBiggerIsBetter : 1;                           // 0x00A8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisplayAsPercentage : 1;                      // 0x00A8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisplayPercentAsFloat : 1;                    // 0x00A8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisplayAsInverse : 1;                         // 0x00A8 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bDontDisplayNumber : 1;                        // 0x00A8 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bDontDisplayPlusSign : 1;                      // 0x00A8 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseCustomNumberPlacement : 1;                 // 0x00A8 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableTextColor : 1;                          // 0x00A8 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bValueRemappingEnabled : 1;                    // 0x00A8 (0x0004) [0x0000000000000002] [0x00000400] (CPF_Const)
	uint32_t                                           bUseOneAsBaseValueForPresentationIfContextFailsToResolve : 1;// 0x00A8 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	EAttributeInitializationRounding                   RoundingMode;                                  // 0x00AC (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EAttributeValueSignStyle                           SignStyle;                                     // 0x00AD (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      TextColor;                                     // 0x00B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            FloatPrecision;                                // 0x00B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      Icon;                                          // 0x00B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributePresentationValueRemappingData    RemappingData;                                 // 0x00C8 (0x0088) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttributePresentationDefinition");
		}

		return uClassPointer;
	};

	bool IncludePrefixInTranslation();
	bool IncludeSuffixInTranslation();
	bool IsTextColorEnabled();
	struct FColor GetTextColor();
	EAttributeValueSignStyle GetSignStyle();
	EAttributeInitializationRounding GetEffectiveRoundingMode(EAttributeTranslationStyle Style);
	EAttributeInitializationRounding GetRoundingMode();
	bool ShouldUseCustomNumberPlacement();
	bool ShouldDisplayPlusSign();
	bool ShouldDisplayNumberInTranslation();
	bool ShouldDisplayAsInverse();
	bool ShouldDisplayAsPercentage();
	bool IsBiggerBetter();
	float GetBasePriority();
	float RemapValue(float InputValue, class UObject* ContextSourceOverride);
	static float RoundValue(float InputValue, int32_t PrecisionAferDecimalPoint, EAttributeInitializationRounding EffectiveRoundingMode);
	float ApplyPresentationRulesToValue(float ModifierValue, EAttributeTranslationStyle Style, bool bAllowZero, class UObject* ContextSourceOverride);
};

// Class WillowGame.AttributePresentationListDefinition
// 0x0010 (0x0058 - 0x0068)
class UAttributePresentationListDefinition : public UGBXDefinition
{
public:
	class TArray<class UAttributePresentationDefinition*> Attributes;                                    // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttributePresentationListDefinition");
		}

		return uClassPointer;
	};

	class UAttributePresentationDefinition* FindAttributePresentation(class UAttributeDefinition* Attribute);
};

// Class WillowGame.AttributeSlotEffectAttributeValueResolver
// 0x0010 (0x0058 - 0x0068)
class UAttributeSlotEffectAttributeValueResolver : public UAttributeValueResolver
{
public:
	EAttributeSlotEffectProperty                       SlotProperty;                                  // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SlotName;                                      // 0x005C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttributeSlotEffectAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AvatarAwardUtility
// 0x0000 (0x0058 - 0x0058)
class UAvatarAwardUtility : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AvatarAwardUtility");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BalanceModifierDefinition
// 0x0010 (0x0058 - 0x0068)
class UBalanceModifierDefinition : public UGBXDefinition
{
public:
	class TArray<struct FBalanceModification>          BalanceModifiers;                              // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BalanceModifierDefinition");
		}

		return uClassPointer;
	};

	float GetAmplifiedDamageMultiplier();
	float GetAdditionalEnemyDamageMultiplier(int32_t EnemyGameStage, bool bIsChampion);
	void UpdateSpawnedAIPawn(class AWillowPawn* SpawnedAIPawn, class AWillowMind* WMind);
	float GetXPGainedFromQuestsMultiplier(class AWillowPlayerController* PlayerGettingXP);
	float GetXPGainedFromCombatMultiplier(class AWillowPlayerController* PlayerGettingXP);
};

// Class WillowGame.Behavior_ActivateListenerSkill
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ActivateListenerSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToActivate;                               // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ActivateListenerSkill");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ActivateSkill
// 0x0028 (0x0070 - 0x0098)
class UBehavior_ActivateSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToActivate;                               // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseAdditionalSkillTarget : 1;                 // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        AdditionalTargetContext;                       // 0x0080 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ActivateSkill");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AddInstanceData
// 0x0028 (0x0070 - 0x0098)
class UBehavior_AddInstanceData : public UBehaviorBase
{
public:
	uint32_t                                           bAllowDuplicates : 1;                          // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<struct FInstanceDataUnion>            InstanceData;                                  // 0x0078 (0x0010) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FInstanceDataItem2>            InstanceData2;                                 // 0x0088 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AddInstanceData");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AddInstanceDataFromBehaviorContext
// 0x0028 (0x0070 - 0x0098)
class UBehavior_AddInstanceDataFromBehaviorContext : public UBehaviorBase
{
public:
	struct FName                                       DatumName;                                     // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeleteByOwner : 1;                            // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowDuplicateNames : 1;                      // 0x0078 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        ObjectContext;                                 // 0x0080 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AddInstanceDataFromBehaviorContext");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AddObjectInstanceData
// 0x0018 (0x0070 - 0x0088)
class UBehavior_AddObjectInstanceData : public UBehaviorBase
{
public:
	class UObject*                                     InstanceDataObject;                            // 0x0070 (0x0008) [0x0000000000000000]               
	struct FName                                       InstanceDataName;                              // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDeleteByOwner : 1;                            // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowDuplicateNames : 1;                      // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AddObjectInstanceData");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AIChangeInventory
// 0x0020 (0x0070 - 0x0090)
class UBehavior_AIChangeInventory : public UBehaviorBase
{
public:
	class TArray<struct FItemPoolInfo>                 NewItemPoolList;                               // 0x0070 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UItemPoolListDefinition*>       NewItemPoolIncludedLists;                      // 0x0080 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AIChangeInventory");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AIFollow
// 0x0040 (0x0070 - 0x00B0)
class UBehavior_AIFollow : public UBehaviorBase
{
public:
	EFollowAction                                      Action;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        ToFollow;                                      // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanAttack : 1;                                // 0x0090 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseFormation : 1;                             // 0x0090 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	float                                              CatchupDistance;                               // 0x0094 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HoldStillDistance;                             // 0x0098 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UStanceDefinition*                           StanceDefinition;                              // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       FormationNameTag;                              // 0x00A8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AIFollow");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AILevelUp
// 0x0008 (0x0070 - 0x0078)
class UBehavior_AILevelUp : public UBehaviorBase
{
public:
	uint32_t                                           bResetHealth : 1;                              // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	int32_t                                            MaxLevelUps;                                   // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AILevelUp");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AIPatsy
// 0x0020 (0x0070 - 0x0090)
class UBehavior_AIPatsy : public UBehaviorBase
{
public:
	uint32_t                                           bClearPatsy : 1;                               // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        Patsy;                                         // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AIPatsy");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AIProvoke
// 0x0018 (0x0070 - 0x0088)
class UBehavior_AIProvoke : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ProvokeInstigator;                             // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AIProvoke");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AIResetProvocation
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AIResetProvocation : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AIResetProvocation");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AISetFlight
// 0x0008 (0x0070 - 0x0078)
class UBehavior_AISetFlight : public UBehaviorBase
{
public:
	ESetFlightMode                                     Mode;                                          // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AISetFlight");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AISetItemTossTarget
// 0x0018 (0x0070 - 0x0088)
class UBehavior_AISetItemTossTarget : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        TossTarget;                                    // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AISetItemTossTarget");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AISpawn
// 0x0058 (0x0070 - 0x00C8)
class UBehavior_AISpawn : public UBehaviorBase
{
public:
	uint32_t                                           bForceSpawn : 1;                               // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnFromSpawnPointInstanceData : 1;          // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FName                                       SpawnPointName;                                // 0x0074 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpawnDefinition*                            SpawnDef;                                      // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        SpawnContext;                                  // 0x0088 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       InstanceDataName;                              // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        OverrideContext;                               // 0x00A8 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SpawnOverrideName;                             // 0x00C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AISpawn");
		}

		return uClassPointer;
	};

	class AActor* SpawnActor(class UObject* ContextObject, class USpawnDefinition* EffectiveSpawnDef, class UObject* SpawnLocationContext);
	void PublishBehaviorOutput(class AActor* SpawnedActor, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AIThrowProjectileAtTarget
// 0x0080 (0x0070 - 0x00F0)
class UBehavior_AIThrowProjectileAtTarget : public UBehaviorBase
{
public:
	int32_t                                            NumProjectiles;                                // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FTrajectoryData                             Options;                                       // 0x0074 (0x0024) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     StartOffset;                                   // 0x0098 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       StartSocket;                                   // 0x00A4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       ChildProjectileBaseValues;                     // 0x00B0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UProjectileDefinition*                       ProjectileDef;                                 // 0x00C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bGrenade : 1;                                  // 0x00C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseBackupTarget : 1;                          // 0x00C8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	class AWillowProjectile*                           ExistingProjectile;                            // 0x00D0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TargetIndex;                                   // 0x00D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAIThrowProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                    // 0x00E0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AIThrowProjectileAtTarget");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class AWillowProjectile* SpawnedProjectile, struct FBehaviorKernelInfo& KernelInfo);
	void ThrowExisting(class UObject* ContextObject);
	void ThrowProjectile(class AWillowProjectile* NewProjectile, class UIAIInterface* AI, class UObject* ContextObject, int32_t ExpLevel);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PerchPieceThrow
// 0x0008 (0x00F0 - 0x00F8)
class UBehavior_PerchPieceThrow : public UBehavior_AIThrowProjectileAtTarget
{
public:
	uint32_t                                           bDrop : 1;                                     // 0x00F0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PerchPieceThrow");
		}

		return uClassPointer;
	};

	void ThrowProjectile(class AWillowProjectile* NewProjectile, class UIAIInterface* AI, class UObject* ContextObject, int32_t ExpLevel);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
	static class AActor* GetPerchUser(class UObject* ContextObject);
	static void DropPerchPiece(class UObject* ContextObject);
};

// Class WillowGame.Behavior_AssignBoolVariable
// 0x0008 (0x0070 - 0x0078)
class UBehavior_AssignBoolVariable : public UBehaviorBase
{
public:
	uint32_t                                           Value : 1;                                     // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AssignBoolVariable");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(bool Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AssignFloatVariable
// 0x0008 (0x0070 - 0x0078)
class UBehavior_AssignFloatVariable : public UBehaviorBase
{
public:
	float                                              Value;                                         // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AssignFloatVariable");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(float Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AssignIntVariable
// 0x0008 (0x0070 - 0x0078)
class UBehavior_AssignIntVariable : public UBehaviorBase
{
public:
	int32_t                                            Value;                                         // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AssignIntVariable");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(int32_t Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AssignObjectVariable
// 0x0008 (0x0070 - 0x0078)
class UBehavior_AssignObjectVariable : public UBehaviorBase
{
public:
	class UObject*                                     Value;                                         // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AssignObjectVariable");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class UObject* Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AssignVectorVariable
// 0x0010 (0x0070 - 0x0080)
class UBehavior_AssignVectorVariable : public UBehaviorBase
{
public:
	struct FVector                                     Value;                                         // 0x0070 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AssignVectorVariable");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(const struct FVector& Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AttachActor
// 0x0030 (0x0070 - 0x00A0)
class UBehavior_AttachActor : public UBehaviorBase
{
public:
	struct FName                                       AttachmentPointName;                           // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        ToAttach;                                      // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AttachTime;                                    // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       InstanceDataName;                              // 0x0094 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AttachActor");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AttemptItemCallout
// 0x0018 (0x0070 - 0x0088)
class UBehavior_AttemptItemCallout : public UBehaviorBase
{
public:
	class UDialogEvent*                                DE_CallOut;                                    // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       InstanceDataName;                              // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bMarkAsDiscovered : 1;                         // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTestVisibility : 1;                           // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AttemptItemCallout");
		}

		return uClassPointer;
	};

	bool TestTargetVisibility(class UObject* Target, class APawn* Viewer);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_AttributeEffect
// 0x0018 (0x0070 - 0x0088)
class UBehavior_AttributeEffect : public UBehaviorBase
{
public:
	class USkillDefinition*                            AttributeEffect;                               // 0x0070 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class TArray<struct FAttributeEffectData>          AttributeEffects;                              // 0x0078 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AttributeEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_BoolMath
// 0x0008 (0x0070 - 0x0078)
class UBehavior_BoolMath : public UBehaviorBase
{
public:
	uint32_t                                           A : 1;                                         // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           B : 1;                                         // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	EBinaryBooleanOperation                            Operation;                                     // 0x0074 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_BoolMath");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(bool Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_BreakConstraintsOnRagdoll
// 0x0008 (0x0070 - 0x0078)
class UBehavior_BreakConstraintsOnRagdoll : public UBehaviorBase
{
public:
	uint32_t                                           bBreakConstraintsOnRagdoll : 1;                // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_BreakConstraintsOnRagdoll");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CauseDamage
// 0x0138 (0x0070 - 0x01A8)
class UBehavior_CauseDamage : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                        // 0x0070 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPhysicsAffector;                     // 0x0078 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FAttributeInitializationData                DamageFormula;                                 // 0x0080 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                RadiusFormula;                                 // 0x00A0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MomentumFormula;                               // 0x00C0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x00E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        OverrideContext;                               // 0x00E8 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       OverrideName;                                  // 0x0100 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      DamageSource;                                  // 0x0108 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                          // 0x0110 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UImpactDefinition*                           ImpactDefinition;                              // 0x0118 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectDamage;                            // 0x0120 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectChance;                            // 0x0140 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDamageTarget                                      DamageTarget;                                  // 0x0160 (0x0001) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       CustomTargetName;                              // 0x0164 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FBehaviorContextData                        TargetContext;                                 // 0x0170 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bInflictRadiusDamage : 1;                      // 0x0188 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisableRadiusDamageFalloff : 1;               // 0x0188 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bSkipTraceTest : 1;                            // 0x0188 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageFriendlies : 1;                      // 0x0188 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageInstigator : 1;                      // 0x0188 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bBarrelSource : 1;                             // 0x0188 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bPlantSource : 1;                              // 0x0188 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	float                                              BarrelSourceTime;                              // 0x018C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlantSourceTime;                               // 0x0190 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              InstigatorSelfDamageScale;                     // 0x0194 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExpressionEvaluator*                        Condition;                                     // 0x0198 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class AActor*                                      SelfActor;                                     // 0x01A0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CauseDamage");
		}

		return uClassPointer;
	};

	void DamageResult_KilledNeutral(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledFriendly(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledEnemy(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_DamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void DamageResult_DamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags);
	void DamageResult_DamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	class UIDamageCauser* GetDamageCauser(class AActor* DamageInstigatorContext, class AActor* optionalFallbackContext);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CauseTinnitus
// 0x0050 (0x0070 - 0x00C0)
class UBehavior_CauseTinnitus : public UBehaviorBase
{
public:
	struct FAttributeInitializationData                Radius;                                        // 0x0070 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StrengthModifier;                              // 0x0090 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAffectTargetPlayerOnly : 1;                   // 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOverrideTinnitusAkEvent : 1;                  // 0x00B0 (0x0004) [0x0000000000000000] [0x00000002] 
	class UAkEvent*                                    OverrideTinnitusAkEvent;                       // 0x00B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CauseTinnitus");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
	void TriggerTinnitusOnPlayerController(class UObject* ContextObject, class AActor* ContextActor, class APlayerController* PC);
};

// Class WillowGame.Behavior_ChangeBehaviorSetState
// 0x0010 (0x0070 - 0x0080)
class UBehavior_ChangeBehaviorSetState : public UBehaviorBase
{
public:
	struct FName                                       BehaviorSetName;                               // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EChangeStatus                                      ChangeStatus;                                  // 0x0078 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeBehaviorSetState");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ChangeCanTarget
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ChangeCanTarget : public UBehaviorBase
{
public:
	EChangeStatus                                      ChangeStatus;                                  // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeCanTarget");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ChangeDenAllegiance
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ChangeDenAllegiance : public UBehaviorBase
{
public:
	class UPawnAllegiance*                             Allegiance;                                    // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeDenAllegiance");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ChangeEnvironmentTag
// 0x0010 (0x0070 - 0x0080)
class UBehavior_ChangeEnvironmentTag : public UBehaviorBase
{
public:
	EEnvironmentTagAction                              Action;                                        // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UEnvironmentTagDefinition*                   EnvironmentTag;                                // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeEnvironmentTag");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ChangeInstanceDataSwitch
// 0x0010 (0x0070 - 0x0080)
class UBehavior_ChangeInstanceDataSwitch : public UBehaviorBase
{
public:
	struct FName                                       SwitchName;                                    // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NewValue;                                      // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSimulated : 1;                                // 0x007C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeInstanceDataSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ChangeSkillBehaviorSequenceState
// 0x0018 (0x0070 - 0x0088)
class UBehavior_ChangeSkillBehaviorSequenceState : public UBehaviorBase
{
public:
	EChangeStatus                                      Action;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SequenceName;                                  // 0x0074 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USkillDefinition*                            SkillDef;                                      // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeSkillBehaviorSequenceState");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ChangeWeaponVisibility
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ChangeWeaponVisibility : public UBehaviorBase
{
public:
	EChangeStatus                                      Status;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyToFirstPerson : 1;                       // 0x0074 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyToThirdPerson : 1;                       // 0x0074 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeWeaponVisibility");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_Charm
// 0x0020 (0x0070 - 0x0090)
class UBehavior_Charm : public UBehaviorBase
{
public:
	ECharmAction                                       Action;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        CharmOwner;                                    // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_Charm");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CheckMapChangeConditions
// 0x0010 (0x0070 - 0x0080)
class UBehavior_CheckMapChangeConditions : public UBehaviorBase
{
public:
	struct FName                                       MapChangeCustomEvent;                          // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       PlayerBusyCustomEvent;                         // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CheckMapChangeConditions");
		}

		return uClassPointer;
	};

	void PlayerBusyEvent(class UIBehaviorConsumer* CustomEventInterface);
	void MapChangeEvent(class UIBehaviorConsumer* CustomEventInterface);
	void GetDestinationStationDefinition();
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CompareFloat
// 0x0008 (0x0070 - 0x0078)
class UBehavior_CompareFloat : public UBehaviorBase
{
public:
	float                                              ValueA;                                        // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CompareFloat");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CompareInt
// 0x0008 (0x0070 - 0x0078)
class UBehavior_CompareInt : public UBehaviorBase
{
public:
	int32_t                                            A;                                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            B;                                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CompareInt");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CompareObject
// 0x0010 (0x0070 - 0x0080)
class UBehavior_CompareObject : public UBehaviorBase
{
public:
	class UObject*                                     ObjectA;                                       // 0x0070 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UObject*                                     ObjectB;                                       // 0x0078 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CompareObject");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_Conditional
// 0x0010 (0x0070 - 0x0080)
class UBehavior_Conditional : public UBehaviorBase
{
public:
	class TArray<struct FBehaviorCondition>            Conditions;                                    // 0x0070 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_Conditional");
		}

		return uClassPointer;
	};

	void eventPublishBehaviorOutput(int32_t Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CoordinatedEffect
// 0x0018 (0x0070 - 0x0088)
class UBehavior_CoordinatedEffect : public UBehaviorBase
{
public:
	EChangeStatus                                      Status;                                        // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UCoordinatedEffectDefinition*                Effect;                                        // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AWillowPawn*                                 PlayerOwner;                                   // 0x0080 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CoordinatedEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CreateImpactEffect
// 0x0020 (0x0070 - 0x0090)
class UBehavior_CreateImpactEffect : public UBehaviorBase
{
public:
	class UWillowImpactDefinition*                     ImpactDefinition;                              // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ImpactPointName;                               // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDirectionRelativeToParent                         ImpactDirection;                               // 0x0080 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ImpactTraceLength;                             // 0x0084 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ImpactTraceStartBackupLength;                  // 0x0088 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CreateImpactEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_CreateWeatherSystem
// 0x0010 (0x0070 - 0x0080)
class UBehavior_CreateWeatherSystem : public UBehaviorBase
{
public:
	class UParticleSystem*                             WeatherSystemTemplate;                         // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ScreenEffectTemplate;                          // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_CreateWeatherSystem");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DamageArea
// 0x0008 (0x0070 - 0x0078)
class UBehavior_DamageArea : public UBehaviorBase
{
public:
	EDamageArea                                        Action;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DamageArea");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DamageClassSwitch
// 0x0008 (0x0070 - 0x0078)
class UBehavior_DamageClassSwitch : public UBehaviorBase
{
public:
	class UObject*                                     HitObject;                                     // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DamageClassSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DamageSourceSwitch
// 0x0008 (0x0070 - 0x0078)
class UBehavior_DamageSourceSwitch : public UBehaviorBase
{
public:
	class UObject*                                     DamageSource;                                  // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DamageSourceSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DamageSurfaceTypeSwitch
// 0x0008 (0x0070 - 0x0078)
class UBehavior_DamageSurfaceTypeSwitch : public UBehaviorBase
{
public:
	int32_t                                            DamageSurfaceType;                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DamageSurfaceTypeSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DeactivateSkill
// 0x0018 (0x0070 - 0x0088)
class UBehavior_DeactivateSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToDeactivate;                             // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bIgnoreSkillInstigator : 1;                    // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeactivateAllInstances : 1;                   // 0x0078 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bForceDeactivate : 1;                          // 0x0078 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	class AActor*                                      BuffInstigator;                                // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DeactivateSkill");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DebugMessage
// 0x0040 (0x0070 - 0x00B0)
class UBehavior_DebugMessage : public UBehaviorBase
{
public:
	class FString                                      DebugMessage;                                  // 0x0070 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              Duration;                                      // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           DebugBool : 1;                                 // 0x0084 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOutputBool : 1;                               // 0x0084 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bOutputFloat : 1;                              // 0x0084 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bOutputInt : 1;                                // 0x0084 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bOutputObject : 1;                             // 0x0084 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bOutputVector : 1;                             // 0x0084 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bOutputToLogFile : 1;                          // 0x0084 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	float                                              DebugFloat;                                    // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            DebugInt;                                      // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UObject*>                       DebugObject;                                   // 0x0090 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FVector                                     DebugVector;                                   // 0x00A0 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DebugMessage");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DestroyBeams
// 0x0020 (0x0070 - 0x0090)
class UBehavior_DestroyBeams : public UBehaviorBase
{
public:
	uint32_t                                           bDestroyAllBeams : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        TargetContext;                                 // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DestroyBeams");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DestroyBeamsByName
// 0x0008 (0x0070 - 0x0078)
class UBehavior_DestroyBeamsByName : public UBehaviorBase
{
public:
	struct FName                                       BeamName;                                      // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DestroyBeamsByName");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_DestroyBeamsForSource
// 0x0020 (0x0070 - 0x0090)
class UBehavior_DestroyBeamsForSource : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        SourceContext;                                 // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SourceSocket;                                  // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DestroyBeamsForSource");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DestroyWeatherSystem
// 0x0000 (0x0070 - 0x0070)
class UBehavior_DestroyWeatherSystem : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DestroyWeatherSystem");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DetachActor
// 0x0060 (0x0070 - 0x00D0)
class UBehavior_DetachActor : public UBehaviorBase
{
public:
	uint32_t                                           bSetActorToPhysFallingOnDetach : 1;            // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAddVelocityOnDetach : 1;                      // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FRelativeDirectionData                      DetachDirection;                               // 0x0078 (0x0038) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DetachSpeed;                                   // 0x00B0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DetachActor");
		}

		return uClassPointer;
	};

	void ApplyDetachVelocity(class AActor* ActorToDetach, const struct FVector& DetachVelocity);
	struct FVector CalculateDetachVelocity(class AActor* ActorToDetach);
	void DetachActor(class AActor* ActorToDetach);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DisableFallingDamage
// 0x0008 (0x0070 - 0x0078)
class UBehavior_DisableFallingDamage : public UBehaviorBase
{
public:
	uint32_t                                           bDisableFallingDamage : 1;                     // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DisableFallingDamage");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DropProjectile
// 0x0030 (0x0070 - 0x00A0)
class UBehavior_DropProjectile : public UBehaviorBase
{
public:
	struct FName                                       InstanceDataName;                              // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       ChildProjectileBaseValues;                     // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UProjectileDefinition*                       ProjectileDef;                                 // 0x0088 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FDropProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                    // 0x0090 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DropProjectile");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_DuplicateInstanceData
// 0x0020 (0x0070 - 0x0090)
class UBehavior_DuplicateInstanceData : public UBehaviorBase
{
public:
	struct FName                                       DuplicateName;                                 // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceData;                                  // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DuplicateInstanceData");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_Explode
// 0x0160 (0x0070 - 0x01D0)
class UBehavior_Explode : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                        // 0x0070 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPhysicsAffector;                     // 0x0078 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UClass*                                      DamageSource;                                  // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DamageRadiusFormula;                           // 0x0088 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DamageFormula;                                 // 0x00A8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MomentumFormula;                               // 0x00C8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExplosionDefinition*                        Definition;                                    // 0x00F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bReplicate : 1;                                // 0x00F8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bNoSound : 1;                                  // 0x00F8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisableRadiusDamageFalloff : 1;               // 0x00F8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bSkipTraceTest : 1;                            // 0x00F8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageFriendlies : 1;                      // 0x00F8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageInstigator : 1;                      // 0x00F8 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bBarrelSource : 1;                             // 0x00F8 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bPlantSource : 1;                              // 0x00F8 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	struct FVector                                     LocationOffset;                                // 0x00FC (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SocketName;                                    // 0x0108 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        DamageContext;                                 // 0x0110 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     HitNormal;                                     // 0x0128 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectDamage;                            // 0x0138 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectChance;                            // 0x0158 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        OverrideContext;                               // 0x0178 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       OverrideName;                                  // 0x0190 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        HitContext;                                    // 0x0198 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BarrelSourceTime;                              // 0x01B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlantSourceTime;                               // 0x01B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              InstigatorSelfDamageScale;                     // 0x01B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      OverrideActor;                                 // 0x01C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      SelfActor;                                     // 0x01C8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_Explode");
		}

		return uClassPointer;
	};

	void SetInstigatorOverride(class UObject* Override);
	void DamageResult_KilledNeutral(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledFriendly(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledEnemy(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_DamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void DamageResult_DamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags);
	void DamageResult_DamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_FireBeam
// 0x00D8 (0x0070 - 0x0148)
class UBehavior_FireBeam : public UBehaviorBase
{
public:
	struct FName                                       SourceSocket;                                  // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     SourceOffset;                                  // 0x0078 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseWeapon : 1;                                // 0x0084 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bLockTarget : 1;                               // 0x0084 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FName                                       TargetSocket;                                  // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     TargetOffset;                                  // 0x0090 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        TargetContext;                                 // 0x00A0 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumBeams;                                      // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DamagePerSecondFormula;                        // 0x00C0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MomentumPerSecondFormula;                      // 0x00E0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                RadiusToDoDamageAroundImpact;                  // 0x0100 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFiringModeDefinition*                       FiringModeDefinition;                          // 0x0120 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      DamageSource;                                  // 0x0128 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                          // 0x0130 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UImpactDefinition*                           ImpactDefinition;                              // 0x0138 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamName;                                      // 0x0140 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_FireBeam");
		}

		return uClassPointer;
	};

	void FillData(class UObject* ContextObject, struct FBeamLocationData& Data);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_FireCustomSkillEvent
// 0x0010 (0x0070 - 0x0080)
class UBehavior_FireCustomSkillEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                     // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USkillDefinition*                            Skill;                                         // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_FireCustomSkillEvent");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_FireShot
// 0x0130 (0x0070 - 0x01A0)
class UBehavior_FireShot : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        WeaponOwnerContext;                            // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumProjectiles;                                // 0x0088 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRelativeDirectionData                      SpawnDirection;                                // 0x0090 (0x0038) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SpawnSocket;                                   // 0x00C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     SpawnDirectionVector;                          // 0x00D0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UFiringModeDefinition*                       FiringModeDefinition;                          // 0x00E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         FireLocationSocketNames;                       // 0x00E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	EFireSocketSelectionMethod                         FireSocketSelection;                           // 0x00F8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TimeBetweenShots;                              // 0x00FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DamagePerSecondFormula;                        // 0x0100 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MomentumPerSecondFormula;                      // 0x0120 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                RadiusToDoDamageAroundImpact;                  // 0x0140 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      DamageSource;                                  // 0x0160 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                          // 0x0168 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UImpactDefinition*                           ImpactDefinition;                              // 0x0170 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     BeamLocationOffset;                            // 0x0178 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTreatDirectionAsDestination : 1;              // 0x0184 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bSimulateWeaponFire : 1;                       // 0x0184 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         FireLocationSocketsRemaining;                  // 0x0188 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            NumShotsFired;                                 // 0x0198 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_FireShot");
		}

		return uClassPointer;
	};

	void FireNextShot(const struct FBehaviorKernelInfo& KernelInfo, class UIFireShotBehavior* FireInterface, class UIWorldBody* WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ForceInjured
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ForceInjured : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ForceInjured");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_GetClosestPlayer
// 0x0008 (0x0070 - 0x0078)
class UBehavior_GetClosestPlayer : public UBehaviorBase
{
public:
	uint32_t                                           bFriendlyToContext : 1;                        // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnemyToContext : 1;                           // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GetClosestPlayer");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class UObject* Player, float Distance, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_GetItemPrice
// 0x0010 (0x0070 - 0x0080)
class UBehavior_GetItemPrice : public UBehaviorBase
{
public:
	class UObject*                                     Item;                                          // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              Markup;                                        // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GetItemPrice");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(float Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_GetVelocity
// 0x0008 (0x0070 - 0x0078)
class UBehavior_GetVelocity : public UBehaviorBase
{
public:
	uint32_t                                           bLocalSpace : 1;                               // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GetVelocity");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(const struct FVector& Velocity, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_GFxMoviePlay
// 0x0028 (0x0070 - 0x0098)
class UBehavior_GFxMoviePlay : public UBehaviorBase
{
public:
	class UGFxMovieDefinition*                         MovieDefinition;                               // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FBehaviorContextData                        OtherContext;                                  // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       Tag;                                           // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GFxMoviePlay");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_GFxMovieRegister
// 0x0020 (0x0070 - 0x0090)
class UBehavior_GFxMovieRegister : public UBehaviorBase
{
public:
	class UGFxMovieDefinition*                         MovieDefinition;                               // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUnregister : 1;                               // 0x0078 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FName                                       MeshComponentInstanceDataName;                 // 0x007C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         RegisteredDefinition;                          // 0x0088 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GFxMovieRegister");
		}

		return uClassPointer;
	};

	void RegisterMovie(class UObject* SelfObject);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
	void RemoveFromroot(class UObject* Obj);
	void AddToRoot(class UObject* Obj);
};

// Class WillowGame.Behavior_GFxMovieSetState
// 0x0008 (0x0070 - 0x0078)
class UBehavior_GFxMovieSetState : public UBehaviorBase
{
public:
	struct FName                                       StateToChange;                                 // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GFxMovieSetState");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_GFxMovieStop
// 0x0008 (0x0070 - 0x0078)
class UBehavior_GFxMovieStop : public UBehaviorBase
{
public:
	struct FName                                       Tag;                                           // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GFxMovieStop");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_HeadLookHold
// 0x0010 (0x0070 - 0x0080)
class UBehavior_HeadLookHold : public UBehaviorBase
{
public:
	struct FName                                       Reason;                                        // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EAIHoldAction                                      Action;                                        // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_HeadLookHold");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_IntMath
// 0x0010 (0x0070 - 0x0080)
class UBehavior_IntMath : public UBehaviorBase
{
public:
	int32_t                                            A;                                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            B;                                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EBinaryMathOperation                               Operation;                                     // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IntMath");
		}

		return uClassPointer;
	};

	void eventPublishBehaviorOutput(int32_t Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_IntSwitchRange
// 0x0010 (0x0070 - 0x0080)
class UBehavior_IntSwitchRange : public UBehaviorBase
{
public:
	int32_t                                            CheckValue;                                    // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            RangeMin;                                      // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            RangeMax;                                      // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IntSwitchRange");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_IsCensoredMode
// 0x0000 (0x0070 - 0x0070)
class UBehavior_IsCensoredMode : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IsCensoredMode");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_IsObjectPlayer
// 0x0010 (0x0070 - 0x0080)
class UBehavior_IsObjectPlayer : public UBehaviorBase
{
public:
	class UObject*                                     PlayerCandidate;                               // 0x0070 (0x0008) [0x0000000000000000]               
	uint32_t                                           bBotsCountAsPlayers : 1;                       // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IsObjectPlayer");
		}

		return uClassPointer;
	};

	bool ControllerIsPlayer(class AController* TestController);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_IsObjectVehicle
// 0x0008 (0x0070 - 0x0078)
class UBehavior_IsObjectVehicle : public UBehaviorBase
{
public:
	class UObject*                                     VehicleCandidate;                              // 0x0070 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IsObjectVehicle");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_IsViewportWidescreen
// 0x0000 (0x0070 - 0x0070)
class UBehavior_IsViewportWidescreen : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IsViewportWidescreen");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_LeapAtTarget
// 0x0000 (0x0070 - 0x0070)
class UBehavior_LeapAtTarget : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_LeapAtTarget");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_LocalCustomEvent
// 0x0008 (0x0070 - 0x0078)
class UBehavior_LocalCustomEvent : public UBehaviorBase
{
public:
	struct FName                                       CustomEventName;                               // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_LocalCustomEvent");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_MakeVector
// 0x0010 (0x0070 - 0x0080)
class UBehavior_MakeVector : public UBehaviorBase
{
public:
	float                                              X;                                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Y;                                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Z;                                             // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_MakeVector");
		}

		return uClassPointer;
	};

	void eventPublishBehaviorOutput(const struct FVector& Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_MatchTransform
// 0x0020 (0x0070 - 0x0090)
class UBehavior_MatchTransform : public UBehaviorBase
{
public:
	struct FName                                       AttachmentName;                                // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        Source;                                        // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_MatchTransform");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyOffsets(class AActor* DestOwner, class UPrimitiveComponent* DestComponent, const struct FVector& SourceWorldLoc, const struct FRotator& SourceWorldRot);
};

// Class WillowGame.Behavior_MeleeAttack
// 0x0018 (0x0070 - 0x0088)
class UBehavior_MeleeAttack : public UBehaviorBase
{
public:
	class UMeleeDefinition*                            MeleeDefinition;                               // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bOverrideEffectsDirection : 1;                 // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              EffectsClockFaceDirection;                     // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       StartSocketOverride;                           // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_MeleeAttack");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_NetworkRoleSwitch
// 0x0000 (0x0070 - 0x0070)
class UBehavior_NetworkRoleSwitch : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_NetworkRoleSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ObjectClassSwitch
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ObjectClassSwitch : public UBehaviorBase
{
public:
	struct FName                                       ObjectClassName;                               // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ObjectClassSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_OpinionSwitch
// 0x0018 (0x0070 - 0x0088)
class UBehavior_OpinionSwitch : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        Other;                                         // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_OpinionSwitch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_OverrideWeaponCrosshair
// 0x0010 (0x0070 - 0x0080)
class UBehavior_OverrideWeaponCrosshair : public UBehaviorBase
{
public:
	class FString                                      CrosshairFrame;                                // 0x0070 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_OverrideWeaponCrosshair");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PackAttack
// 0x0000 (0x0070 - 0x0070)
class UBehavior_PackAttack : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PackAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_PawnLeap
// 0x0048 (0x0070 - 0x00B8)
class UBehavior_PawnLeap : public UBehaviorBase
{
public:
	float                                              LeapSpeed;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LeapAngle;                                     // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     OffsetLocation;                                // 0x0078 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOffsetBasedOnRotation : 1;                    // 0x0084 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseTrace : 1;                                 // 0x0084 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              TraceCheckRandomYaw;                           // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TraceCheckPitch;                               // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TraceCheckMaxDistance;                         // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     TraceStartOffset;                              // 0x0094 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      TargetObject;                                  // 0x00A0 (0x0008) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	float                                              RandomYawOnTarget;                             // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UWillowAnimDefinition*                       LeapAnimDef;                                   // 0x00B0 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PawnLeap");
		}

		return uClassPointer;
	};

	struct FVector FindLandingLocation(class AWillowPawn* AIPawn);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PerchPieceAttach
// 0x0008 (0x0070 - 0x0078)
class UBehavior_PerchPieceAttach : public UBehaviorBase
{
public:
	struct FName                                       AttachmentName;                                // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PerchPieceAttach");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PhaseLockHold
// 0x0010 (0x0070 - 0x0080)
class UBehavior_PhaseLockHold : public UBehaviorBase
{
public:
	struct FName                                       Reason;                                        // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EAIHoldAction                                      Action;                                        // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PhaseLockHold");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PhysicsResponse
// 0x0058 (0x0070 - 0x00C8)
class UBehavior_PhysicsResponse : public UBehaviorBase
{
public:
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ERelativeDirectionalOverride                       RelativeDirection;                             // 0x0078 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     HitNormal;                                     // 0x007C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     HitLocation;                                   // 0x0088 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        TargetContext;                                 // 0x0098 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        SelfContext;                                   // 0x00B0 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PhysicsResponse");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_PhysXLevel
// 0x0000 (0x0070 - 0x0070)
class UBehavior_PhysXLevel : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PhysXLevel");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PlayAnimation
// 0x0008 (0x0070 - 0x0078)
class UBehavior_PlayAnimation : public UBehaviorBase
{
public:
	struct FName                                       AnimName;                                      // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PlayAnimation");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PlayMultipleExplosionsSound
// 0x0030 (0x0070 - 0x00A0)
class UBehavior_PlayMultipleExplosionsSound : public UBehaviorBase
{
public:
	class UExplosionDefinition*                        Definition;                                    // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bReplicate : 1;                                // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        OverrideContext;                               // 0x0080 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       OverrideName;                                  // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PlayMultipleExplosionsSound");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PostProcessChain
// 0x0030 (0x0070 - 0x00A0)
class UBehavior_PostProcessChain : public UBehaviorBase
{
public:
	class TArray<struct FMaterialEffectModifier>       MaterialEffectModifiers;                       // 0x0070 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	EPostProcessChainAction                            Action;                                        // 0x0080 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPostProcessChain*                           Chain;                                         // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FDOFEffectModifierData                      DOFEffectModifier;                             // 0x0090 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PostProcessChain");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PostProcessChain_LostShield
// 0x0018 (0x00A0 - 0x00B8)
class UBehavior_PostProcessChain_LostShield : public UBehavior_PostProcessChain
{
public:
	struct FName                                       HealthParamName;                               // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MaterialEffectName;                            // 0x00A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UpdateRate;                                    // 0x00B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PostProcessChain_LostShield");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PostProcessOverlay
// 0x0140 (0x0070 - 0x01B0)
class UBehavior_PostProcessOverlay : public UBehaviorBase
{
public:
	struct FPostProcessOverlay                         OverlayParameters;                             // 0x0070 (0x0140) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PostProcessOverlay");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_PostSurfaceImpactAkEvent
// 0x0020 (0x0090 - 0x00B0)
class UBehavior_PostSurfaceImpactAkEvent : public UBehavior_PostAkEvent
{
public:
	class UAkSwitch*                                   MaterialAkSwitch;                              // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     HitObject;                                     // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PlaybackLocation;                              // 0x00A0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnableImpactRepositionForPlayers : 1;         // 0x00AC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PostSurfaceImpactAkEvent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_PursueNodeType
// 0x0008 (0x0070 - 0x0078)
class UBehavior_PursueNodeType : public UBehaviorBase
{
public:
	struct FName                                       NodeType;                                      // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PursueNodeType");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_QueryDayNightCycle
// 0x0000 (0x0070 - 0x0070)
class UBehavior_QueryDayNightCycle : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_QueryDayNightCycle");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RandomBranch
// 0x0010 (0x0070 - 0x0080)
class UBehavior_RandomBranch : public UBehaviorBase
{
public:
	class TArray<float>                                Conditions;                                    // 0x0070 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RandomBranch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_Switch
// 0x0008 (0x0080 - 0x0088)
class UBehavior_Switch : public UBehavior_RandomBranch
{
public:
	float                                              CheckValue;                                    // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_Switch");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RandomlySelectBehaviors
// 0x0030 (0x0070 - 0x00A0)
class UBehavior_RandomlySelectBehaviors : public UBehaviorBase
{
public:
	class TArray<struct FBehaviorsSelectionData>       Possibilities;                                 // 0x0070 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bUseWeightContext : 1;                         // 0x0080 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        WeightContext;                                 // 0x0088 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RandomlySelectBehaviors");
		}

		return uClassPointer;
	};

	void ApplyBehavior(class UObject* SelfObject, class UObject* optionalMyInstigatorObject, class UObject* optionalOtherEventParticipantObject, const struct FBehaviorParameters& optionalEventData, struct FBehaviorKernelInfo& KernelInfo);
	void SelectAndRunWeightedBehaviors(class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
};

// Class WillowGame.Behavior_ReCalculateResourcePoolValues
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ReCalculateResourcePoolValues : public UBehaviorBase
{
public:
	class UResourceDefinition*                         Resource;                                      // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ReCalculateResourcePoolValues");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RefillResourcePool
// 0x0068 (0x0070 - 0x00D8)
class UBehavior_RefillResourcePool : public UBehaviorBase
{
public:
	class UResourceDefinition*                         Resource;                                      // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                Percentage;                                    // 0x0078 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MaxPercentage;                                 // 0x0098 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bCreatePoolIfNecessary : 1;                    // 0x00B8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        PercentageContext;                             // 0x00C0 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RefillResourcePool");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RefillWeapon
// 0x0000 (0x0070 - 0x0070)
class UBehavior_RefillWeapon : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RefillWeapon");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RegisterTargetable
// 0x0008 (0x0070 - 0x0078)
class UBehavior_RegisterTargetable : public UBehaviorBase
{
public:
	uint32_t                                           bUnregister : 1;                               // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RegisterTargetable");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ReloadComplete
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ReloadComplete : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ReloadComplete");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RemoteCustomEvent
// 0x0048 (0x0070 - 0x00B8)
class UBehavior_RemoteCustomEvent : public UBehaviorBase
{
public:
	class UObject*                                     SequenceProvider;                              // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FNameBasedObjectPath                        ProviderDefinitionPathName;                    // 0x0078 (0x0034) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CustomEventName;                               // 0x00AC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RemoteCustomEvent");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RemoveInstanceData
// 0x0010 (0x0070 - 0x0080)
class UBehavior_RemoveInstanceData : public UBehaviorBase
{
public:
	class TArray<struct FRemoveObject>                 InstanceData;                                  // 0x0070 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RemoveInstanceData");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RemoveInstanceDataObject
// 0x0018 (0x0070 - 0x0088)
class UBehavior_RemoveInstanceDataObject : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        RemoveData;                                    // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RemoveInstanceDataObject");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ResetHitRegionHealth
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ResetHitRegionHealth : public UBehaviorBase
{
public:
	class UBodyHitRegionDefinition*                    HitRegion;                                     // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ResetHitRegionHealth");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RotatePawn
// 0x0040 (0x0070 - 0x00B0)
class UBehavior_RotatePawn : public UBehaviorBase
{
public:
	struct FRelativeDirectionData                      RotateDirection;                               // 0x0070 (0x0038) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bYawOnly : 1;                                  // 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              Time;                                          // 0x00AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RotatePawn");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_RuleEvent
// 0x0000 (0x0070 - 0x0070)
class UBehavior_RuleEvent : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RuleEvent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_RunBehaviorAlias
// 0x0050 (0x0070 - 0x00C0)
class UBehavior_RunBehaviorAlias : public UBehaviorBase
{
public:
	class UBehaviorAliasDefinition*                    BehaviorAlias;                                 // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        AliasSelfContext;                              // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        AliasMyInstigatorContext;                      // 0x0090 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        AliasOtherEventParticipantContext;             // 0x00A8 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RunBehaviorAlias");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ScreenParticle
// 0x00D0 (0x0070 - 0x0140)
class UBehavior_ScreenParticle : public UBehaviorBase
{
public:
	uint32_t                                           bSaveParticleReference : 1;                    // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseClientPrediction : 1;                      // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeleteByOwner : 1;                            // 0x0070 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FScreenParticleInitParams                   Parameters;                                    // 0x0098 (0x0078) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	EScreenParticleAction                              Action;                                        // 0x0110 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FScreenParticleModifier>       ScreenParticleModifiers;                       // 0x0118 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class UMaterialInterface*                          MaterialInterface;                             // 0x0128 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       MatParamName;                                  // 0x0130 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UParticleSystem*                             ParticleSystem;                                // 0x0138 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ScreenParticle");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class UParticleSystemComponent* ScreenParticle, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_WeaponScopeEffect
// 0x0000 (0x0140 - 0x0140)
class UBehavior_WeaponScopeEffect : public UBehavior_ScreenParticle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_WeaponScopeEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SendMessageToPlayers
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SendMessageToPlayers : public UBehaviorBase
{
public:
	uint32_t                                           bShouldSendToInstigator : 1;                   // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class UClass*                                      SendMsgClass;                                  // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SendMessageToPlayers");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetAIAimLocation
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetAIAimLocation : public UBehaviorBase
{
public:
	struct FName                                       AimLocation;                                   // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetAIAimLocation");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetAIFlag
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SetAIFlag : public UBehaviorBase
{
public:
	class UFlagDefinition*                             FlagDef;                                       // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           FlagValue : 1;                                 // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetAIFlag");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetAkRTPCValue
// 0x0018 (0x0070 - 0x0088)
class UBehavior_SetAkRTPCValue : public UBehaviorBase
{
public:
	class UAkRtpc*                                     Rtpc;                                          // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Value;                                         // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bGlobal : 1;                                   // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetAkRTPCValue");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetAlternateVertexWeight
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetAlternateVertexWeight : public UBehaviorBase
{
public:
	struct FName                                       BoneName;                                      // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetAlternateVertexWeight");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetAnimSwitchNode
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SetAnimSwitchNode : public UBehaviorBase
{
public:
	struct FName                                       AnimNodeName;                                  // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       Switch;                                        // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetAnimSwitchNode");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetAnimTree
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetAnimTree : public UBehaviorBase
{
public:
	class UAnimTree*                                   AnimTreeTemplate;                              // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetAnimTree");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetBeingHealed
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetBeingHealed : public UBehaviorBase
{
public:
	uint32_t                                           bBeingHealed : 1;                              // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetBeingHealed");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetCleanupParameters
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetCleanupParameters : public UBehaviorBase
{
public:
	float                                              MaxLifetime;                                   // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetCleanupParameters");
		}

		return uClassPointer;
	};

	void eventApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetCombatHiddenState
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetCombatHiddenState : public UBehaviorBase
{
public:
	EChangeStatus                                      Status;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetCombatHiddenState");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetCompassIcon
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetCompassIcon : public UBehaviorBase
{
public:
	ERadarIconType                                     CompassIcon;                                   // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetCompassIcon");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetDeathDefinition
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetDeathDefinition : public UBehaviorBase
{
public:
	class UBodyClassDeathDefinition*                   NewDeathDefinition;                            // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetDeathDefinition");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetDiscardRootMotion
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetDiscardRootMotion : public UBehaviorBase
{
public:
	uint32_t                                           bDiscardRootMotion : 1;                        // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetDiscardRootMotion");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetElevatorButtonGlowing
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetElevatorButtonGlowing : public UBehaviorBase
{
public:
	uint32_t                                           bEnableGlow : 1;                               // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetElevatorButtonGlowing");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetExtraImpactEffect
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SetExtraImpactEffect : public UBehaviorBase
{
public:
	EBulletFromClip                                    BulletFromClip;                                // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UWillowImpactDefinition*                     ImpactDefinition;                              // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetExtraImpactEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetExtraMuzzleEffect
// 0x0018 (0x0070 - 0x0088)
class UBehavior_SetExtraMuzzleEffect : public UBehaviorBase
{
public:
	EBulletFromClip                                    BulletFromClip;                                // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FExtraMuzzleEffect                          Effect;                                        // 0x0078 (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetExtraMuzzleEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetGodMode
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetGodMode : public UBehaviorBase
{
public:
	uint32_t                                           bNonCheatGodMode : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetGodMode");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetHardAttach
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetHardAttach : public UBehaviorBase
{
public:
	uint32_t                                           bHardAttach : 1;                               // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetHardAttach");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetHitRegionModifier
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetHitRegionModifier : public UBehaviorBase
{
public:
	struct FName                                       ModifierName;                                  // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetHitRegionModifier");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetInfoBarVisibility
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetInfoBarVisibility : public UBehaviorBase
{
public:
	uint32_t                                           bVisible : 1;                                  // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetInfoBarVisibility");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetLookAtSpeed
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetLookAtSpeed : public UBehaviorBase
{
public:
	ESetLookAtSpeedAction                              Action;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              OverrideSpeed;                                 // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetLookAtSpeed");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetMaterialScalarFade
// 0x0068 (0x0070 - 0x00D8)
class UBehavior_SetMaterialScalarFade : public UBehaviorBase
{
public:
	struct FName                                       ScalarName;                                    // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAttributeInitializationData                StartValue;                                    // 0x0078 (0x0020) [0x0000000000000001] (CPF_Edit)    
	struct FAttributeInitializationData                EndValue;                                      // 0x0098 (0x0020) [0x0000000000000001] (CPF_Edit)    
	struct FAttributeInitializationData                FadeTime;                                      // 0x00B8 (0x0020) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetMaterialScalarFade");
		}

		return uClassPointer;
	};

	void StartFade(class UIMaterialFadeBehavior* ContextInterface, float CalcStartValue, float CalcEndValue, float CalcFadeTime);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetMaterialScalarFadeForGoreDeath
// 0x0008 (0x00D8 - 0x00E0)
class UBehavior_SetMaterialScalarFadeForGoreDeath : public UBehavior_SetMaterialScalarFade
{
public:
	uint32_t                                           bDestroyActorAfterGoreEffect : 1;              // 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetMaterialScalarFadeForGoreDeath");
		}

		return uClassPointer;
	};

	void StartFade(class UIMaterialFadeBehavior* ContextInterface, float CalcStartValue, float CalcEndValue, float CalcFadeTime);
};

// Class WillowGame.Behavior_SetMorphNodeWeight
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SetMorphNodeWeight : public UBehaviorBase
{
public:
	struct FName                                       MorphNodeName;                                 // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              WeightTarget;                                  // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WeightBlendTime;                               // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetMorphNodeWeight");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetParticleEffectOwner
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SetParticleEffectOwner : public UBehaviorBase
{
public:
	class AWillowEmitter*                              ParticleEffect;                                // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bHideEffectFromOwner : 1;                      // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseOwnerSeeFlags : 1;                         // 0x0078 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bOnlyPlayerOwnerSee : 1;                       // 0x0078 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetParticleEffectOwner");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetPawnThrottleData
// 0x0020 (0x0070 - 0x0090)
class UBehavior_SetPawnThrottleData : public UBehaviorBase
{
public:
	float                                              FullThrottleDistance;                          // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FullThrottleTime;                              // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinThrottleDistance;                           // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxThrottleDistance;                           // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinThrottleTime;                               // 0x0080 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxThrottleTime;                               // 0x0084 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSkipWhileIdle : 1;                            // 0x0088 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetPawnThrottleData");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetRuleSet
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetRuleSet : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetRuleSet");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetRuleSetByName
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetRuleSetByName : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetRuleSetByName");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetShieldColor
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetShieldColor : public UBehaviorBase
{
public:
	uint32_t                                           bResetShieldToDefaultColor : 1;                // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FColor                                      NewShieldColor;                                // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetShieldColor");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetShieldTriggeredState
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetShieldTriggeredState : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetShieldTriggeredState");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetSkelControlSingleBoneData
// 0x0020 (0x0070 - 0x0090)
class UBehavior_SetSkelControlSingleBoneData : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                               // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     BoneTranslation;                               // 0x0078 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    BoneRotation;                                  // 0x0084 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetSkelControlSingleBoneData");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetTimeOfDay
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetTimeOfDay : public UBehaviorBase
{
public:
	float                                              TimeOfDay;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetTimeOfDay");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SetWeaponSight
// 0x0008 (0x0070 - 0x0078)
class UBehavior_SetWeaponSight : public UBehaviorBase
{
public:
	class UWeaponSightDefinition*                      Sight;                                         // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetWeaponSight");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ShowMissionInterface
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ShowMissionInterface : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ShowMissionInterface");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ShowSelfAsTarget
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ShowSelfAsTarget : public UBehaviorBase
{
public:
	uint32_t                                           ControllersOnly : 1;                           // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ShowSelfAsTarget");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SimpleAnimPlay
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SimpleAnimPlay : public UBehaviorBase
{
public:
	class UWillowAnimTree*                             Tree;                                          // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AnimName;                                      // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SimpleAnimPlay");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SimpleAnimStop
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SimpleAnimStop : public UBehaviorBase
{
public:
	class UWillowAnimTree*                             Tree;                                          // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AnimName;                                      // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SimpleAnimStop");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SimpleMath
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SimpleMath : public UBehaviorBase
{
public:
	float                                              A;                                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              B;                                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EBinaryMathOperation                               Operation;                                     // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SimpleMath");
		}

		return uClassPointer;
	};

	void eventPublishBehaviorOutput(float Result, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SimulateInputButton
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SimulateInputButton : public UBehaviorBase
{
public:
	class UInputButtonDefinition*                      Button;                                        // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	ESimulatedInputEvent                               EventType;                                     // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SimulateInputButton");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SkillCustomEvent
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SkillCustomEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                     // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USkillDefinition*                            SkillDef;                                      // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SkillCustomEvent");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnActor
// 0x0058 (0x0070 - 0x00C8)
class UBehavior_SpawnActor : public UBehaviorBase
{
public:
	uint32_t                                           bSaveReference : 1;                            // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeleteByOwner : 1;                            // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bAttachToContext : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x0074 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0080 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      ActorTemplate;                                 // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AttachmentPointName;                           // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     RelativeLocation;                              // 0x00A8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    RelativeRotation;                              // 0x00B4 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDirectionRelativeToParent                         SpawnDirection;                                // 0x00C0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnActor");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnDecal
// 0x0038 (0x0070 - 0x00A8)
class UBehavior_SpawnDecal : public UBehaviorBase
{
public:
	class UDecalMaterial*                              Material;                                      // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BoneName;                                      // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EAxis                                              AlignToAxis;                                   // 0x0080 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              Size;                                          // 0x0084 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    SpawnRotation;                                 // 0x0088 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     SpawnLocation;                                 // 0x0094 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Thickness;                                     // 0x00A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnDecal");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnFirstPersonParticleSystem
// 0x0058 (0x0070 - 0x00C8)
class UBehavior_SpawnFirstPersonParticleSystem : public UBehaviorBase
{
public:
	uint32_t                                           bSaveParticleReference : 1;                    // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeleteByOwner : 1;                            // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ParticleEffect;                                // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AttachmentPointName;                           // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     RelativeLocation;                              // 0x00A8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    RelativeRotation;                              // 0x00B4 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DrawScale;                                     // 0x00C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnFirstPersonParticleSystem");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class UParticleSystemComponent* NewComponent, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnParticleSystem
// 0x00B0 (0x0070 - 0x0120)
class UBehavior_SpawnParticleSystem : public UBehaviorBase
{
public:
	uint32_t                                           bSaveParticleReference : 1;                    // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseClientPrediction : 1;                      // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeleteByOwner : 1;                            // 0x0070 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bManagedLifetime : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bAttachToContext : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bSetOwnerFromContext : 1;                      // 0x0070 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bReplicateEmitter : 1;                         // 0x0070 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bWorldLocationRotation : 1;                    // 0x0070 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bHideEffectFromOwner : 1;                      // 0x0070 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseOwnerSeeFlags : 1;                         // 0x0070 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bOnlyPlayerOwnerSee : 1;                       // 0x0070 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bShareOwnerSeeFlagsWithTeam : 1;               // 0x0070 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ParticleEffect;                                // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AttachmentPointName;                           // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     RelativeLocation;                              // 0x00A8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    RelativeRotation;                              // 0x00B4 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DrawScale;                                     // 0x00C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDirectionRelativeToParent                         SpawnDirection;                                // 0x00C4 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EEmitterSpawnType                                  SpawnType;                                     // 0x00C5 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESceneDepthPriorityGroup                           EffectDepthPriorityGroup;                      // 0x00C6 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SortPriority;                                  // 0x00C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttachmentLocationData                     BeamSource;                                    // 0x00D0 (0x0028) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttachmentLocationData                     BeamTarget;                                    // 0x00F8 (0x0028) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnParticleSystem");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class AEmitter* SpawnedEmitter, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnPerch
// 0x0020 (0x0070 - 0x0090)
class UBehavior_SpawnPerch : public UBehaviorBase
{
public:
	struct FName                                       AttachPoint;                                   // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPerchTag*                                   PerchTag;                                      // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PerchLifetime;                                 // 0x0080 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UseRadius;                                     // 0x0084 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UseHeight;                                     // 0x0088 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnPerch");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class AActor* SpawnedPerch, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnProjectile
// 0x0118 (0x0070 - 0x0188)
class UBehavior_SpawnProjectile : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        OwnerContext;                                  // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSetOwnerFromOwnerContext : 1;                 // 0x0088 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bSaveProjectileReference : 1;                  // 0x0088 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bTransformRelativeLocationBySpawnDirection : 1;// 0x0088 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           InheritParentVelocity : 1;                     // 0x0088 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bAttachToContext : 1;                          // 0x0088 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bFindBase : 1;                                 // 0x0088 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bInflictRadiusDamageOnOwner : 1;               // 0x0088 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnEvenDistribution : 1;                    // 0x0088 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bConvergeTowardsAimLocation : 1;               // 0x0088 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseSocketAsParentForSpawnOrientation : 1;     // 0x0088 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnFromContextViewLocation : 1;             // 0x0088 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnFromContextWeapon : 1;                   // 0x0088 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	struct FName                                       AttachmentPointName;                           // 0x008C (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0098 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                NumProjectilesFormula;                         // 0x00B8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumProjectiles;                                // 0x00D8 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	EProjectileSelectionBehavior                       SelectionBehavior;                             // 0x00DC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDirectionRelativeToParent                         SpawnDirection;                                // 0x00DD (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESpawnDistributionType                             SpawnDistributionType;                         // 0x00DE (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EFireSocketSelectionMethod                         FireSocketSelection;                           // 0x00DF (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UProjectileDefinition*                       ProjectileDefinition;                          // 0x00E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     RelativeLocation;                              // 0x00E8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FindBaseSearchDistance;                        // 0x00F4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      OverrideBase;                                  // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       ChildProjectileBaseValues;                     // 0x0100 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                    // 0x0110 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FVector                                     RotationOverride;                              // 0x0120 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SpeedOverride;                                 // 0x012C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DirectionConeMinSize;                          // 0x0130 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DirectionConeSize;                             // 0x0134 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     SpawnDirectionOverride;                        // 0x0138 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         FireLocationSocketNames;                       // 0x0148 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              TimeBetweenShots;                              // 0x0158 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     SpawnLocationOverride;                         // 0x015C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DrawScaleOverride;                             // 0x0168 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         FireLocationSocketsRemaining;                  // 0x0170 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            NumShotsFired;                                 // 0x0180 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnProjectile");
		}

		return uClassPointer;
	};

	void PublishBehaviorOutput(class AWillowProjectile* SpawnedProjectile, struct FBehaviorKernelInfo& KernelInfo);
	static struct FVector StaticGetChildProjectilePositionFromWeapon(class AWillowWeapon* Weap, const struct FName& InAttachmentPointName);
	static struct FVector StaticGetWorldBodyViewLocation(class UIWorldBody* WorldBodyInterface);
	static struct FVector StaticGetChildProjectilePosition(class UIWorldBody* WorldBodyInterface, const struct FName& InAttachmentPointName);
	static struct FVector StaticGetChildProjectileDirectionFromWeapon(class AWillowWeapon* Weap, const struct FName& InAttachmentPointName, class UIWorldBody* WorldBodyInterface, class UProjectileDefinition* InProjectileDefinition, EDirectionRelativeToParent InSpawnDirection, bool optionalInbUseSocketAsParentForSpawnOrientation);
	static struct FVector StaticGetChildProjectileDirection(const struct FName& InAttachmentPointName, class UIWorldBody* WorldBodyInterface, class UProjectileDefinition* InProjectileDefinition, EDirectionRelativeToParent InSpawnDirection, bool optionalInbUseSocketAsParentForSpawnOrientation);
	void SpawnChildProjectiles(class UObject* ContextObject, class UIWorldBody* WorldBodyInterface, class UISpawnActor* SpawnActorInterface, class UIInstanceData* SaveReferenceContext, int32_t EffectiveNumProjectiles, const struct FBehaviorKernelInfo& KernelInfo, int32_t optionalIStart, int32_t optionalIMax);
	struct FVector CalculateConeVector(float Fraction, const struct FVector& Origin, const struct FVector& Direction, float AngleWidth, float AngleHeight);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnProjectileFromImpact
// 0x0058 (0x0070 - 0x00C8)
class UBehavior_SpawnProjectileFromImpact : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        OwnerContext;                                  // 0x0070 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSetOwnerFromOwnerContext : 1;                 // 0x0088 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bSaveProjectileReference : 1;                  // 0x0088 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0090 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x00A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UProjectileDefinition*                       ProjectileDefinition;                          // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                    // 0x00B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnProjectileFromImpact");
		}

		return uClassPointer;
	};

	void AttachProjectileToBase(class AWillowProjectile* SpawnedProjectile, class UIWorldBody* WorldBodyInterface, struct FImpactInfo& ImpactData);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SpawnTemporalField
// 0x0050 (0x0070 - 0x00C0)
class UBehavior_SpawnTemporalField : public UBehaviorBase
{
public:
	class ATemporalField*                              TemporalField;                                 // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LifeSpan;                                      // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        LocationContext;                               // 0x0080 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AttachmentPointName;                           // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAttachToContext : 1;                          // 0x00A0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FVector                                     RelativeLocation;                              // 0x00A4 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    RelativeRotation;                              // 0x00B0 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnTemporalField");
		}

		return uClassPointer;
	};

	struct FVector GetAttachmentLocation(class UIWorldBody* WorldBodyInterface);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_SplitscreenInstanceDataVisibility
// 0x0010 (0x0070 - 0x0080)
class UBehavior_SplitscreenInstanceDataVisibility : public UBehaviorBase
{
public:
	ESplitscreenVisibilityAction                       Action;                                        // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESplitscreenVisibilityViewport                     SplitscreenViewport;                           // 0x0071 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       InstanceDataName;                              // 0x0074 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SplitscreenInstanceDataVisibility");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_StartDeathRagdoll
// 0x0008 (0x0070 - 0x0078)
class UBehavior_StartDeathRagdoll : public UBehaviorBase
{
public:
	uint32_t                                           bAnimationDriven : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableContactNotification : 1;                // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_StartDeathRagdoll");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_StopMeleeAttack
// 0x0000 (0x0070 - 0x0070)
class UBehavior_StopMeleeAttack : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_StopMeleeAttack");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ToggleNPCAlly
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ToggleNPCAlly : public UBehaviorBase
{
public:
	uint32_t                                           bEnable : 1;                                   // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ToggleNPCAlly");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_ToggleObstacle
// 0x0008 (0x0070 - 0x0078)
class UBehavior_ToggleObstacle : public UBehaviorBase
{
public:
	EObstacleToggle                                    Option;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ToggleObstacle");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_Transform
// 0x0008 (0x0070 - 0x0078)
class UBehavior_Transform : public UBehaviorBase
{
public:
	EAITransformed                                     Transform;                                     // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_Transform");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_UnitTest_CheckIfGFxMoviePlaying
// 0x0008 (0x0098 - 0x00A0)
class UBehavior_UnitTest_CheckIfGFxMoviePlaying : public UBehavior_UnitTest
{
public:
	class USwfMovie*                                   Movie;                                         // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UnitTest_CheckIfGFxMoviePlaying");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_UnitTest_GoToLocation
// 0x0020 (0x0098 - 0x00B8)
class UBehavior_UnitTest_GoToLocation : public UBehavior_UnitTest
{
public:
	struct FVector                                     Location;                                      // 0x0098 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     TargetLocation;                                // 0x00A8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              TimeoutMinutes;                                // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UnitTest_GoToLocation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_UnlockAvatarAward
// 0x0008 (0x0070 - 0x0078)
class UBehavior_UnlockAvatarAward : public UBehaviorBase
{
public:
	EWillowAvatarAwards                                AvatarAward;                                   // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UnlockAvatarAward");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_UnlockAvatarAwardForAllPlayers
// 0x0008 (0x0070 - 0x0078)
class UBehavior_UnlockAvatarAwardForAllPlayers : public UBehaviorBase
{
public:
	EWillowAvatarAwards                                AvatarAward;                                   // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UnlockAvatarAwardForAllPlayers");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_UpdateCollision
// 0x0008 (0x0070 - 0x0078)
class UBehavior_UpdateCollision : public UBehaviorBase
{
public:
	uint32_t                                           bResetTouching : 1;                            // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UpdateCollision");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_UpgradeSkill
// 0x0050 (0x0070 - 0x00C0)
class UBehavior_UpgradeSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToUpgrade;                                // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                NumberOfLevelsToRaise;                         // 0x0078 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MaximumLevelToRaiseSkill;                      // 0x0098 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bPostSharedEventMessageIfSkillUpgraded : 1;    // 0x00B8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UpgradeSkill");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_UseObject
// 0x0010 (0x0070 - 0x0080)
class UBehavior_UseObject : public UBehaviorBase
{
public:
	EUsabilityType                                     UseType;                                       // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UObject*                                     User;                                          // 0x0078 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UseObject");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_VectorMath
// 0x0020 (0x0070 - 0x0090)
class UBehavior_VectorMath : public UBehaviorBase
{
public:
	struct FVector                                     A;                                             // 0x0070 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     B;                                             // 0x007C (0x000C) [0x0000000000000001] (CPF_Edit)    
	EVectorMathOperation                               Operation;                                     // 0x0088 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_VectorMath");
		}

		return uClassPointer;
	};

	void eventPublishBehaviorOutput(float Length, const struct FVector& VectorResult, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_VectorToLocalSpace
// 0x0018 (0x0070 - 0x0088)
class UBehavior_VectorToLocalSpace : public UBehaviorBase
{
public:
	struct FVector                                     WorldSpaceVector;                              // 0x0070 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AttachmentPointName;                           // 0x007C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_VectorToLocalSpace");
		}

		return uClassPointer;
	};

	void eventPublishBehaviorOutput(const struct FVector& VectorResult, struct FBehaviorKernelInfo& KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_WeaponBoneControl
// 0x0010 (0x0070 - 0x0080)
class UBehavior_WeaponBoneControl : public UBehaviorBase
{
public:
	struct FName                                       BoneControlName;                               // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EWeaponEventType                                   WeaponEventType;                               // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_WeaponBoneControl");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_WeaponGlowEffect
// 0x0010 (0x0070 - 0x0080)
class UBehavior_WeaponGlowEffect : public UBehaviorBase
{
public:
	EWeaponGlowEffectAction                            Action;                                        // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWeaponGlowEffectDefinition*                 Effect;                                        // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_WeaponGlowEffect");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_WeaponsRestriction
// 0x0008 (0x0070 - 0x0078)
class UBehavior_WeaponsRestriction : public UBehaviorBase
{
public:
	uint32_t                                           bRestrictionOn : 1;                            // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowOnPlayers : 1;                           // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_WeaponsRestriction");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.Behavior_WeaponVisibleAmmoState
// 0x0008 (0x0070 - 0x0078)
class UBehavior_WeaponVisibleAmmoState : public UBehaviorBase
{
public:
	EWeaponVisibleAmmoState                            State;                                         // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_WeaponVisibleAmmoState");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.BehaviorAliasDefinition
// 0x0010 (0x0058 - 0x0068)
class UBehaviorAliasDefinition : public UGBXDefinition
{
public:
	class TArray<class UBehaviorBase*>                 FallbackBehaviors;                             // 0x0058 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BehaviorAliasDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BehaviorAliasLookupDefinition
// 0x0010 (0x0058 - 0x0068)
class UBehaviorAliasLookupDefinition : public UGBXDefinition
{
public:
	class TArray<struct FBehaviorAliasReference>       BehaviorAliasList;                             // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BehaviorAliasLookupDefinition");
		}

		return uClassPointer;
	};

	bool RunBehaviorAlias(class UBehaviorAliasDefinition* BehaviorAlias, class UObject* SelfObject, class UObject* optionalMyInstigatorObject, class UObject* optionalOtherEventParticipantObject, const struct FBehaviorParameters& optionalEventData);
};

// Class WillowGame.BehaviorVolume
// 0x00A8 (0x0310 - 0x03B8)
class ABehaviorVolume : public APhysicsVolume
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0310 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0318 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                       // 0x0320 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;           // 0x0328 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITeleportAware;                       // 0x0330 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UBehaviorVolumeDefinition*                   Definition;                                    // 0x0338 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x0340 (0x0004) [0x0000000000000000]               
	float                                              RadiusForSearch;                               // 0x0344 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class AActor*>                        TouchingActors;                                // 0x0348 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              TickRate;                                      // 0x0358 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NextTickTime;                                  // 0x035C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            VehicleCrewNdx;                                // 0x0360 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FInstanceData2                              InstanceDataState;                             // 0x0368 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bEnable : 1;                                   // 0x0378 (0x0004) [0x0000000100000021] [0x00000001] (CPF_Edit | CPF_Net)
	class URegionDefinition*                           BalanceToRegionDef;                            // 0x0380 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ExpLevel;                                      // 0x0388 (0x0004) [0x4000000000000020] (CPF_Net)     
	int32_t                                            GameStage;                                     // 0x038C (0x0004) [0x4000000000000020] (CPF_Net)     
	int32_t                                            AwesomeLevel;                                  // 0x0390 (0x0004) [0x4000000000000020] (CPF_Net)     
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x0398 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UInstancedDesignerAttribute*>   DesignerAttributes;                            // 0x03A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BehaviorVolume");
		}

		return uClassPointer;
	};

	void InitializeAttributeStartingValues();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int32_t NewExpLevel);
	void SetAwesomeLevel(int32_t NewAwesomeLevel);
	void SetGameStage(int32_t NewGameStage);
	int32_t GetExpLevel();
	int32_t GetAwesomeLevel();
	int32_t GetGameStage();
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void ClearTouchList();
	void HandleDisabled();
	void OnToggle(class USeqAct_Toggle* Action);
	bool eventCanSplashNativeWrapper(class AActor* Other);
	bool IsWaterVolume();
	void eventBehaviorVolumeImpact(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal, EBehaviorVolumeAction Action);
	void eventTakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& HitDirection, class UClass* inDamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	void eventTraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, const struct FQWord& TraceFlags, float TouchTime);
	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool StopsProjectile(class AProjectile* P);
	void eventPostBeginPlay();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void eventReplicatedEvent(const struct FName& VarName);
};

// Class WillowGame.DynamicBehaviorVolume
// 0x0000 (0x03B8 - 0x03B8)
class ADynamicBehaviorVolume : public ABehaviorVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DynamicBehaviorVolume");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BehaviorVolumeDefinition
// 0x0038 (0x0058 - 0x0090)
class UBehaviorVolumeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UWillowImpactDefinition*                     DefaultTouchImpact;                            // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     DefaultUntouchImpact;                          // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     DefaultTraceImpact;                            // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicalMaterial*                           PhysicalMaterial;                              // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsWater : 1;                                  // 0x0080 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bIgnoreTracesThatStartInsideVolume : 1;        // 0x0080 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTakeRadiusDamage : 1;                      // 0x0080 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bClientTouchEvents : 1;                        // 0x0080 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bTeleportThroughAware : 1;                     // 0x0080 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0088 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BehaviorVolumeDefinition");
		}

		return uClassPointer;
	};

	void OnShoot(const struct FBehaviorConsumerHandle& ConsumerHandle, class UObject* Instigator, class UObject* ContextForHitLocation, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnExit(const struct FBehaviorConsumerHandle& ConsumerHandle, class UObject* Instigator);
	void OnEntry(const struct FBehaviorConsumerHandle& ConsumerHandle, class UObject* Instigator);
};

// Class WillowGame.BlackMarketUpgradeAttributeValueResolver
// 0x0000 (0x0058 - 0x0058)
class UBlackMarketUpgradeAttributeValueResolver : public UAttributeValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BlackMarketUpgradeAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BodyClassDeathDefinition
// 0x00A8 (0x0058 - 0x0100)
class UBodyClassDeathDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<struct FTechDeathData>                TechDeaths;                                    // 0x0060 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class USpecialMoveDefinition*                      NonRagdollDeathSpecialMove;                    // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExpressionEvaluator*                        CanPlayDeathAnimationIf;                       // 0x0078 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	float                                              DissolveBodyDelayBeforeDestroy;                // 0x0080 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCoordinatedEffectDefinition*                FadeBodyEffect;                                // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FadeBodyDelay;                                 // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FGoreTriggerData>              GibTriggers;                                   // 0x0098 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           KeepCorpseAfterDeath : 1;                      // 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDestroyOnDeath : 1;                           // 0x00A8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bTearOffAfterDeath : 1;                        // 0x00A8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bCensorGibs : 1;                               // 0x00A8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bDeathAnimRagdoll : 1;                         // 0x00A8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bMotorizeRagdollOnNormalDeath : 1;             // 0x00A8 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bMotorizeRagdollOnTechDeath : 1;               // 0x00A8 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bDefaultRagdollContactNotification : 1;        // 0x00A8 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bCreateSpringsForAllBones : 1;                 // 0x00A8 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x00B0 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              BlendToRagdollTime;                            // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RagdollLinearSpring;                           // 0x00BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RagdollAngularSpring;                          // 0x00C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RagdollMotorSpring;                            // 0x00C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RagdollMotorDamping;                           // 0x00C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         RagdollContactReportBones;                     // 0x00D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              RagdollContactReportThreshold;                 // 0x00E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         RagdollSpringBones;                            // 0x00E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UBodyClassDeathDefinition*                   LowLODDeath;                                   // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BodyClassDeathDefinition");
		}

		return uClassPointer;
	};

	void OnTechDeath(const struct FName& SpecializedEventName, class AController* Killer, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnBodyDissolve(class AController* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDeathNonGib(class AController* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDeathGib(class AController* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledBy(class AController* Killer, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPlayDeathPizazz(struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.BodyClassDefinition
// 0x0460 (0x0058 - 0x04B8)
class UBodyClassDefinition : public UFeatureDefinition
{
public:
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;               // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDialogEditorHelper;                  // 0x0060 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFootstepPreviewProvider;             // 0x0068 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBodyProvider;                        // 0x0070 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FName                                       HeadLookAtName;                                // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLeftHandIKDisabled : 1;                       // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseMeshForCollision : 1;                      // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           IgnoreMomentumTransfer : 1;                    // 0x0080 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bBlockFriendlyPawns : 1;                       // 0x0080 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bBlockFriendlyProjectiles : 1;                 // 0x0080 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bMeleeTraceCanHitCylinder : 1;                 // 0x0080 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           UseRootMotion : 1;                             // 0x0080 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           UseRootRotation : 1;                           // 0x0080 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bAllowProjectilesToCollideWithSkeletalMesh : 1;// 0x0080 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bUpdateMeshTranslationWhenCylinderChanges : 1; // 0x0080 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bCanUpdateMeshTranslation : 1;                 // 0x0080 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bUseHitReactions : 1;                          // 0x0080 (0x0004) [0x0000000000000002] [0x00000800] (CPF_Const)
	uint32_t                                           bUseFlinchParent : 1;                          // 0x0080 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseDamageLocationParent : 1;                  // 0x0080 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bShowDamageLocations : 1;                      // 0x0080 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bStaggerWhenLandingOnUnwalkableTerrain : 1;    // 0x0080 (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseTurns : 1;                                 // 0x0080 (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseTurnParent : 1;                            // 0x0080 (0x0004) [0x0000000000000003] [0x00020000] (CPF_Edit | CPF_Const)
	uint32_t                                           bPawnIsAlwaysRelevant : 1;                     // 0x0080 (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bVehicleBlockingActor : 1;                     // 0x0080 (0x0004) [0x0000000000000002] [0x00080000] (CPF_Const)
	uint32_t                                           bUseDodges : 1;                                // 0x0080 (0x0004) [0x0000000020000003] [0x00100000] (CPF_Edit | CPF_Const | CPF_Deprecated)
	uint32_t                                           bDodgeUseParent : 1;                           // 0x0080 (0x0004) [0x0000000020000003] [0x00200000] (CPF_Edit | CPF_Const | CPF_Deprecated)
	uint32_t                                           bCanAvoidGrenades : 1;                         // 0x0080 (0x0004) [0x0000000020000003] [0x00400000] (CPF_Edit | CPF_Const | CPF_Deprecated)
	uint32_t                                           bQueueProvocationAnims : 1;                    // 0x0080 (0x0004) [0x0000000000000003] [0x00800000] (CPF_Edit | CPF_Const)
	uint32_t                                           bProvocationUseParent : 1;                     // 0x0080 (0x0004) [0x0000000000000003] [0x01000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanBeInjured : 1;                             // 0x0080 (0x0004) [0x0000000000000003] [0x02000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bInjuredUseParent : 1;                         // 0x0080 (0x0004) [0x0000000000000003] [0x04000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseParentStances : 1;                         // 0x0080 (0x0004) [0x0000000000000003] [0x08000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDamageParent : 1;                             // 0x0080 (0x0004) [0x0000000000000002] [0x10000000] (CPF_Const)
	uint32_t                                           bDisplayParentInfo : 1;                        // 0x0080 (0x0004) [0x0000000000000003] [0x20000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bOnlyDisplayParentInfoWhileAttached : 1;       // 0x0080 (0x0004) [0x0000000000000003] [0x40000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bKillWhenParentDies : 1;                       // 0x0080 (0x0004) [0x0000000000000003] [0x80000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisplayMinibarInfo : 1;                       // 0x0084 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDamageOnlyAppliesToParent : 1;                // 0x0084 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           HideInfoOnHUD : 1;                             // 0x0084 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bFullyArmored : 1;                             // 0x0084 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bHideEmptyShieldBar : 1;                       // 0x0084 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bIsPossibleHomingTarget : 1;                   // 0x0084 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bUseRotationModifierBySpeed : 1;               // 0x0084 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseSimulatedRotation : 1;                     // 0x0084 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bCrawlerFloorAdjust : 1;                       // 0x0084 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bUseParentPhaselockDef : 1;                    // 0x0084 (0x0004) [0x0000000000000002] [0x00000200] (CPF_Const)
	class UPerchDefinition*                            PerchDefinition;                               // 0x0088 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UNavAnimDefinition*                          NavAnimDefinition;                             // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USpawnPointDefinition*                       SpawnPointDefinition;                          // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UPhysicsJumpDefinition*                      PhysicsJumpDefinition;                         // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              CrouchHeight;                                  // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UBodyHitRegionDefinition*                    DefaultHitRegion;                              // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBodyHitRegionDefinition*>      HitRegionList;                                 // 0x00B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UBodyClassDefinition*                        HitReactionParentBodyClass;                    // 0x00C8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FHitReactionData                            HitReaction;                                   // 0x00D0 (0x0020) [0x0000000000000002] (CPF_Const)   
	class UHitReactionDefinition*                      SoftFlinches;                                  // 0x00F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UHitReactionDefinition*                      HardFlinches;                                  // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DamageLocationTime;                            // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageLocationFadeTime;                        // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageLocationSize;                            // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UBodyClassDeathDefinition*                   DeathDef;                                      // 0x0110 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 CustomDeathBehaviors;                          // 0x0118 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	float                                              RagDollGravity;                                // 0x0128 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinimumRecognizedImpact;                       // 0x012C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DirectImpactEffectThreshold;                   // 0x0130 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SlidingImpactEffectThreshold;                  // 0x0134 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ImpactEffectProbability;                       // 0x0138 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     RagdollImpact;                                 // 0x0140 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_EffectsThreshold;                           // 0x0148 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_SlideThreshold;                             // 0x014C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_ImpactThreshold;                            // 0x0150 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_SlideMinRepeatTime;                         // 0x0154 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_ImpactMinRepeatTime;                        // 0x0158 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExplosionDefinition*                        RD_SlideExplosion;                             // 0x0160 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_SlideExplosionDamageRadius;                 // 0x0168 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExplosionDefinition*                        RD_ImpactExplosion;                            // 0x0170 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_ImpactExplosionDamageRadius;                // 0x0178 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_ImpactAkEventThreshold;                     // 0x017C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RD_ImpactAkEventMinRepeatTime;                 // 0x0180 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    RD_ImpactAkEvent;                              // 0x0188 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         FootstepBones;                                 // 0x0190 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UWillowImpactDefinition*                     FootstepImpact;                                // 0x01A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UWillowImpactDefinition*>       LeadInFootstepImpacts;                         // 0x01A8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UWillowImpactDefinition*                     HeavyFootStepImpact;                           // 0x01B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     JumpedImpact;                                  // 0x01C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     LandedImpact;                                  // 0x01C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UnwalkableTerrainStaggerVelocityZ;             // 0x01D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LandedMinVel;                                  // 0x01D4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     SkidImpact;                                    // 0x01D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SkidCameraLurchMagnitude;                      // 0x01E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SkidCameraLurchSpeed;                          // 0x01E4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBehaviorAliasLookupDefinition*              BehaviorAliasLookup;                           // 0x01E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ArmsMaterialIndex;                             // 0x01F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ShieldEnabledParameterName;                    // 0x01F4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ShieldColorParameterName;                      // 0x01FC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     TouchImpactDefinition;                         // 0x0208 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     UntouchImpactDefinition;                       // 0x0210 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumFootstepsToStop;                            // 0x0218 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    StoppedAkEvent;                                // 0x0220 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     HitByVehicleImpactDefinition;                  // 0x0228 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     RunOverByVehicleImpactDefinition;              // 0x0230 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCoordinatedEffectDefinition*                PlayerReRezCoordinatedEffect;                  // 0x0238 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGearboxAnimDefinition*                      PlayerReRezAnim;                               // 0x0240 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             WaterWakeParticleSystem;                       // 0x0248 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTurnDefinition*                             DefaultTurns;                                  // 0x0250 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTurnDefinition*                             DefaultCrouchTurns;                            // 0x0258 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBodyClassDefinition*                        AnimationParentBody;                           // 0x0260 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGearboxSkeletalMeshComponent*               FirstPersonHands;                              // 0x0268 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              UnarmedFirstPersonFOV;                         // 0x0270 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     PrimaryStandInOffset;                          // 0x0274 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBodyClassDefinition*                        WeaponActionParentClass;                       // 0x0280 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AimOffsetNodeName;                             // 0x0288 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBodyWeaponHoldDefinition*                   DefaultWeaponHoldDef;                          // 0x0290 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBodyWeaponHoldDefinition*>     WeaponHoldDefs;                                // 0x0298 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UAkEvent*                                    ThrowGrenadeAkEvent;                           // 0x02A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MeleeAkEvent;                                  // 0x02B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FExtraWeaponSlot>              ExtraWeaponSlots;                              // 0x02B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint8_t                                            ExpectedInstanceDataSize;                      // 0x02C8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         DefaultStatusEffectSockets;                    // 0x02D0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UParticleSystem*                             DefaultParticleSystemTemplate;                 // 0x02E0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 MeleeWeaponMesh;                               // 0x02E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MeleeSocketName;                               // 0x02F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCameraAnim*                                 MeleeCameraAnim;                               // 0x02F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       PrimaryColorParameterName;                     // 0x0300 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SecondaryColorParameterName;                   // 0x0308 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       TertiaryColorParameterName;                    // 0x0310 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     PhysVehicleExtentScalars;                      // 0x0318 (0x000C) [0x0000000000000002] (CPF_Const)   
	class UStaggerDefinition*                          StaggerSettings;                               // 0x0328 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBodyProviderDefinition*                     BodyProviderDefinition;                        // 0x0330 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              DodgeAngle;                                    // 0x0338 (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	float                                              DodgeChance;                                   // 0x033C (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	float                                              DodgeTargetDistMin;                            // 0x0340 (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	float                                              DodgeRepeatTimeMin;                            // 0x0344 (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	float                                              DodgeRepeatTimeMax;                            // 0x0348 (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	struct FAIRange                                    DodgeDelayTime;                                // 0x034C (0x0008) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	class USpecialMove_Dodge*                          DodgeAnimLeft;                                 // 0x0358 (0x0008) [0x0000000024000003] (CPF_Edit | CPF_Const | CPF_EditInline | CPF_Deprecated)
	class USpecialMove_Dodge*                          DodgeAnimRight;                                // 0x0360 (0x0008) [0x0000000024000003] (CPF_Edit | CPF_Const | CPF_EditInline | CPF_Deprecated)
	float                                              DodgeGrenadeChance;                            // 0x0368 (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	class TArray<class USpecialMove_Dodge*>            MovementDodgeAnims;                            // 0x0370 (0x0010) [0x0000000024400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated)
	struct FAIRange                                    MovementDodgeTime;                             // 0x0380 (0x0008) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	float                                              PlayProvokedAnimChance;                        // 0x0388 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlayUnprovokedAnimChance;                      // 0x038C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class USpecialMove_Motion*>           ProvokedAnims;                                 // 0x0390 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class USpecialMove_Motion*>           UnprovokedAnims;                               // 0x03A0 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	float                                              TimeBetweenHeavyBreathLoop;                    // 0x03B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FBreathingLoopInfo>            BreathingLoops;                                // 0x03B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FExertionVocalization>         ExertionVocalizations;                         // 0x03C8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              InjuredHealthPct;                              // 0x03D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnInjured;                                     // 0x03E0 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnUninjured;                                   // 0x03F0 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class USpecialMoveDefinition*                      LostShieldAnim;                                // 0x0400 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<EDamageType>                          LostShieldDamageTriggers;                      // 0x0408 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UStanceTypeDefinition*                       RunStance;                                     // 0x0418 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UStanceTypeDefinition*                       PatrolStance;                                  // 0x0420 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UStanceTypeDefinition*                       SprintStance;                                  // 0x0428 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UStanceTypeDefinition*                       InjuredStance;                                 // 0x0430 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UStanceTypeDefinition*                       CrouchStance;                                  // 0x0438 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UStanceTypeDefinition*                       FlyStance;                                     // 0x0440 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              ParentDamageLimit;                             // 0x0448 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DamageParentScale;                             // 0x044C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         AuxiliaryTargetNames;                          // 0x0450 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              DeltaRotationModifierBySpeed;                  // 0x0460 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SimulatedRotationLerpTime;                     // 0x0464 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FName>                         CrawlerFloorAdjustBones;                       // 0x0468 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              CrawlerFloorAdjustRadius;                      // 0x0478 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CrawlerFloorAdjustTraceUp;                     // 0x047C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CrawlerFloorAdjustTraceDown;                   // 0x0480 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CrawlerFloorAdjustOffset;                      // 0x0484 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CrawlerFloorAdjustRate;                        // 0x0488 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhaseLockDefinition*                        PhaseLockDef;                                  // 0x0490 (0x0008) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FVehicleCrewMappingStruct>     DLCVehicleAnimSetMappings;                     // 0x0498 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FGenericAnimMapping>           GenericAnimMappings;                           // 0x04A8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BodyClassDefinition");
		}

		return uClassPointer;
	};

	class UBodyClassDefinition* GetFlinchBody();
	void GetDefaultStances(class TArray<class UStanceTypeDefinition*>& OutStances);
	void GetHitRegions(class TArray<class UBodyHitRegionDefinition*>& Regions, class UBodyHitRegionDefinition*& DefaultRegion);
	bool ShouldUseUpperBodyMovementBlendForHoldName(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag);
	bool ShouldUseArmBoneBlendForHoldName(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag);
	struct FName GetAimOffsetProfileForHoldName(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag);
	void GetWeaponHoldAnimSets(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag, bool bIncludeViewSets, class TArray<class UAnimSet*>& OutAnimSets);
	class UBodyWeaponHoldDefinition* GetWeaponHoldDef(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag, bool bSearchParentClass, bool bFallbackToDefaultDef);
};

// Class WillowGame.BodyHitRegionDefinition
// 0x0340 (0x0058 - 0x0398)
class UBodyHitRegionDefinition : public UBaseHitRegionDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FName                                       HitRegionName;                                 // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         RegionBoneNames;                               // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UBodyHitRegionDefinition*>      AdjacentHitRegions;                            // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FName>                         DamageBoneNames;                               // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FBodyHitRegionModifierData>    Modifiers;                                     // 0x0098 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bMigratedDamageBones : 1;                      // 0x00A8 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bCriticalHit : 1;                              // 0x00A8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bHeadshot : 1;                                 // 0x00A8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowRadiusDamage : 1;                        // 0x00A8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bManualAllowRadiusDamage : 1;                  // 0x00A8 (0x0004) [0x0000000000000002] [0x00000010] (CPF_Const)
	uint32_t                                           bUseIndependentHealth : 1;                     // 0x00A8 (0x0004) [0x0000000000000002] [0x00000020] (CPF_Const)
	uint32_t                                           bShowDamageNumbers : 1;                        // 0x00A8 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bScaleHealthWithAttribute : 1;                 // 0x00A8 (0x0004) [0x0000000000000002] [0x00000080] (CPF_Const)
	uint32_t                                           bAllowRejuvenationFromHeals : 1;               // 0x00A8 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bBypassShields : 1;                            // 0x00A8 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bOnlyReflectToAttacker : 1;                    // 0x00A8 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bReflectProjectiles : 1;                       // 0x00A8 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bRicochetIfReflectionChanceFails : 1;          // 0x00A8 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bTrackDamage : 1;                              // 0x00A8 (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bMigratedUseOwnerHealth : 1;                   // 0x00A8 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bWasUseOwnerHealthOne : 1;                     // 0x00A8 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bPlayImpactWithNoDamage : 1;                   // 0x00A8 (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseHitReactions : 1;                          // 0x00A8 (0x0004) [0x0000000000000002] [0x00020000] (CPF_Const)
	uint32_t                                           bOverrideHitReactionData : 1;                  // 0x00A8 (0x0004) [0x0000000000000002] [0x00040000] (CPF_Const)
	uint32_t                                           bFallbackToBodyFlinches : 1;                   // 0x00A8 (0x0004) [0x0000000000000003] [0x00080000] (CPF_Edit | CPF_Const)
	struct FName                                       OverrideDOTSocket;                             // 0x00AC (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              OwnerHealthPercent;                            // 0x00B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PercentOfMaxHealthLimit;                       // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 RegionDeathBehaviors;                          // 0x00C0 (0x0010) [0x0000000004420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FDamageReactionData>           DamageTriggeredReactions;                      // 0x00D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FDamageReactionData>           HealingTriggeredReactions;                     // 0x00E0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UDamageTypeDefinition*>         AllowedDamageTypes;                            // 0x00F0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                BulletReflectionOffSelfChance;                 // 0x0100 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                BulletReflectedOffSelfDamageScale;             // 0x0120 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                BulletReflectedOffSelfDamageTakenScale;        // 0x0140 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ReflectionAccuracyModifier;                    // 0x0160 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                RicochetAccuracyModifier;                      // 0x0180 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicalMaterial*                           PhysicalMaterial;                              // 0x01A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicalMaterial*                           ShieldedPhysicalMaterial;                      // 0x01A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FImpactResponseEffect                       DefaultImpactResponse;                         // 0x01B0 (0x0158) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	EDamageSurfaceType                                 DefaultDamageSurfaceType;                      // 0x0308 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     BloodImpact;                                   // 0x0310 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BloodSplatterMinDistance;                      // 0x0318 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BloodSplatterMaxDistance;                      // 0x031C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BloodSplatterDirectionRandomness;              // 0x0320 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBodyClassDeathDefinition*                   OverrideDeathDef;                              // 0x0328 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0330 (0x0008) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FName>                         HitReactionSpringBones;                        // 0x0338 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FName>                         HitReactionUnfixedBones;                       // 0x0348 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FHitReactionData                            HitReaction;                                   // 0x0358 (0x0020) [0x0000000000000002] (CPF_Const)   
	class UHitReactionDefinition*                      SoftFlinches;                                  // 0x0378 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UHitReactionDefinition*                      HardFlinches;                                  // 0x0380 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UHitReactionDefinition*                      SoftHitReaction;                               // 0x0388 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UHitReactionDefinition*                      HardHitReaction;                               // 0x0390 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BodyHitRegionDefinition");
		}

		return uClassPointer;
	};

	void OnTakeHeal(class UObject* Instigator, float Damage, float CurrentHealth, float MaxHealth, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTakeDamage(class UObject* Instigator, float Damage, float CurrentHealth, float MaxHealth, const struct FVector& HitLocation, const struct FVector& HitMomentum, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHealingReaction(const struct FName& SpecializedEventName, class AController* DamageInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnRegionRejuvenate(EGoreMode EventOutput, class AController* KilledBy, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnReflectedProjectile(const struct FVector& ReflectedDirection, const struct FVector& HitLocation, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnRegionGore(const struct FName& SpecializedEventName, class AController* GoreInstigator, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamageReaction(const struct FName& SpecializedEventName, class AController* DamageInstigator, const struct FVector& HitLocation, const struct FVector& HitMomentum, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnRegionDeath(EGoreMode EventOutput, class AController* KilledBy, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.BodyRegionProtectionDefinition
// 0x0178 (0x0058 - 0x01D0)
class UBodyRegionProtectionDefinition : public UGBXDefinition
{
public:
	class UBodyHitRegionDefinition*                    BodyHitRegion;                                 // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageModifierPercent;                         // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           PlayImpactWithNoDamage : 1;                    // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           RunTookDamageRuleWithNoDamage : 1;             // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FImpactResponseEffect                       DamageImpactEffects;                           // 0x0068 (0x0158) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              PercentOfMaxHealthLimit;                       // 0x01C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           PhysicalMaterial;                              // 0x01C8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BodyRegionProtectionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BodyWeaponHoldDefinition
// 0x00B8 (0x0058 - 0x0110)
class UBodyWeaponHoldDefinition : public UGBXDefinition
{
public:
	struct FName                                       HoldName;                                      // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UEnvironmentTagDefinition*                   EnvironmentTag;                                // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AimOffsetProfileName;                          // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseArmBoneBlend : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseUpperBodyMovementBlend : 1;                // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bFallbackToDefaultHold : 1;                    // 0x0070 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bLeftHandIKEnabled : 1;                        // 0x0070 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	class TArray<class UAnimSet*>                      AnimSetList;                                   // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UAnimSet*>                      ViewAnimSetList;                               // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FBodyWeaponActionPostureData>  WeaponActions;                                 // 0x0098 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FBodyHandIKHoldData                         DefaultLeftHandIKHold;                         // 0x00A8 (0x0024) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FCustomBodyHandIKHoldData>     CustomLeftHandIKHolds;                         // 0x00D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FVector                                     LeftHandIKJointLocation;                       // 0x00E0 (0x000C) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FVector                                     LeftHandIKHandLocation;                        // 0x00EC (0x000C) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FRotator                                    LeftHandIKHandRotation;                        // 0x00F8 (0x000C) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UBodyWeaponHoldDefinition*                   ParentDefinition;                              // 0x0108 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BodyWeaponHoldDefinition");
		}

		return uClassPointer;
	};

	void GetAnimSets(bool bIncludeViewSets, class TArray<class UAnimSet*>& OutAnimSets);
	class USpecialMoveDefinition* GetWeaponSMD(EBodyWeaponAction BodyAction, EBodyWeaponActionPosture BodyPosture, class UObject* SearchContext);
};

// Class WillowGame.BulletListenerComponent
// 0x0010 (0x0370 - 0x0380)
class UBulletListenerComponent : public UCylinderComponent
{
public:
	class TArray<class UBehaviorBase*>                 OnBulletTouch;                                 // 0x0370 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BulletListenerComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CellsNavigator
// 0x0038 (0x0058 - 0x0090)
class UCellsNavigator : public UObject
{
public:
	class TArray<struct FCellInfo>                     Cells;                                         // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<int32_t>                              UnnavigableIndices;                            // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            CurrentSelectedCellIndex;                      // 0x0078 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FMoveToCellData>               MoveCellInfo;                                  // 0x0080 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CellsNavigator");
		}

		return uClassPointer;
	};

	static class UMeshComponent* eventConstructInvMesh(class AWillowInventory* TheItem);
	int32_t CellIndex(const class FString& CellName);
	class FString CellName(int32_t CellIndex);
	int32_t SimpleMoveCell(int32_t CurrentCellIndex, float MoveX, float MoveY);
	int32_t MoveCell(int32_t CurrentCellIndex, const struct FVector& Dir, float StrictTolerance, float LooseTolerance, float StrictGiveUpDistance, float LooseGiveUpDistance);
	void SetupCell(const class FString& CellName, float X, float Y, float Width, float Height);
};

// Class WillowGame.ChallengeCategoryDefinition
// 0x0008 (0x0088 - 0x0090)
class UChallengeCategoryDefinition : public UGearboxExpandableListCategory
{
public:
	struct FPointer                                    ChallengeCategoryInfo;                         // 0x0088 (0x0008) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengeCategoryDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengeFeedbackMessage
// 0x0020 (0x0068 - 0x0088)
class UChallengeFeedbackMessage : public ULocalMessage
{
public:
	class FString                                      ChallengeCompleted;                            // 0x0068 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChallengeReceived;                             // 0x0078 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengeFeedbackMessage");
		}

		return uClassPointer;
	};

	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class WillowGame.ChallengesPanelDefinition
// 0x0000 (0x0058 - 0x0058)
class UChallengesPanelDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengesPanelDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengeSubCategoryDefinition
// 0x0008 (0x0088 - 0x0090)
class UChallengeSubCategoryDefinition : public UGearboxExpandableListSubCategory
{
public:
	struct FPointer                                    ChallengeSubCategoryInfo;                      // 0x0088 (0x0008) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengeSubCategoryDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CharacterSelectCameraActor
// 0x0000 (0x0388 - 0x0388)
class ACharacterSelectCameraActor : public ACameraActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CharacterSelectCameraActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CharacterSelectionGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UCharacterSelectionGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CharacterSelectionGFxObject");
		}

		return uClassPointer;
	};

	void FadeIn(float FadeTimeInSeconds);
	void BeginClose(float FadeTimeInSeconds);
	void ConfigureForPause(bool bPaused);
	void SetTooltips(const class FString& Tooltips);
	int32_t GetCharacterGridIndexInDirection(int32_t PlayerIndex, int32_t CharacterGridDirection);
	void SetMessageInfo(const class FString& MessageInfo);
	void SetTimerInfo(const class FString& TimerInfo, int32_t TimeInSeconds);
	void SetSelectionIndicator(int32_t PlayerIndex, bool bFocused, int32_t CharacterIndex);
	void SetPartySelection(int32_t PartyMemberIndex, const class FString& Gamertag, bool bHasConfirmedCharacter, const class FString& ClassIconMovieName, int32_t CharacterLevel);
	void ClearPartySelections();
	void SetState(int32_t PlayerIndex, int32_t NewState);
	void SetCharacterInfo(int32_t PlayerIndex, const class FString& CharName, const class FString& CharClass, const class FString& ActionAbilityDesc, const class FString& PreferredWeaponDesc);
	void CommitSelectableCharacters();
	void AddSelectableCharacter(const class FString& IconMoviePath);
};

// Class WillowGame.ChargeDefinition
// 0x0048 (0x0058 - 0x00A0)
class UChargeDefinition : public UGBXDefinition
{
public:
	float                                              MissDistance;                                  // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StrikeDistance;                                // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      ChargeStart;                                   // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      ChargeStop;                                    // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      ChargeStrike;                                  // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      ChargeHitWall;                                 // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UStanceDefinition*                           ChargeStance;                                  // 0x0080 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bApplyKnockbackToFriendlies : 1;               // 0x0088 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	float                                              FriendlyKnockback;                             // 0x008C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FriendlyKnockbackUpPercent;                    // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SlowStopTime;                                  // 0x0094 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SlowStopSpeedPercent;                          // 0x0098 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChargeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CombatMusicManager
// 0x0050 (0x0058 - 0x00A8)
class UCombatMusicManager : public UObject
{
public:
	class TArray<struct FTargetedPlayerState>          TargetedPlayerStates;                          // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              TimeSinceLastUpdate;                           // 0x0068 (0x0004) [0x0000000000000000]               
	float                                              TimeOfNewCombatAction;                         // 0x006C (0x0004) [0x0000000000000000]               
	float                                              TimeCombatMusicStarted;                        // 0x0070 (0x0004) [0x0000000000000000]               
	float                                              TimeOfLastStateChange;                         // 0x0074 (0x0004) [0x0000000000000000]               
	float                                              MaxDurationOfThisCombatMusic;                  // 0x0078 (0x0004) [0x0000000000000000]               
	float                                              LastTimeAddedShieldDownThreat;                 // 0x007C (0x0004) [0x0000000000000000]               
	float                                              LastTimeMusicTimedOut;                         // 0x0080 (0x0004) [0x0000000000000000]               
	float                                              MaxDurationOfThisMoratorium;                   // 0x0084 (0x0004) [0x0000000000000000]               
	uint32_t                                           bChangingState : 1;                            // 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bCombatMusicManagerEnabled : 1;                // 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bInDebugMode : 1;                              // 0x0088 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bBossFightActive : 1;                          // 0x0088 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bHaveAddedEnemyWithCustomCombatMusic : 1;      // 0x0088 (0x0004) [0x0000000000000000] [0x00000010] 
	ECombatMusicManagerState                           CombatMusicManagerState;                       // 0x008C (0x0001) [0x0000000000000000]               
	float                                              CurrentThreatValue;                            // 0x0090 (0x0004) [0x0000000000000000]               
	class UCombatMusicParameters*                      CombatMusicParams;                             // 0x0098 (0x0008) [0x0000000000000000]               
	float                                              UpdateThreatDelta;                             // 0x00A0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CombatMusicManager");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	float GetDebugTime();
	void ForceSetThreatLevel(float ThreatLevel);
	void ForceFadeOutCombatMusic(bool bTurnBackOnAmbientMusic);
	void SetEnabled(bool bEnabled);
	void Update();
	void PlayerShieldDown(class AActor* Player);
	void PlayerDamagedByEnemy(class AActor* Player, class AWillowMind* Enemy, float Damage, class UClass* DamageType);
	void EnemyTargetChanged(class AWillowMind* Enemy, bool optionalBForceRemove);
	void PlayerPetTargetedByEnemy(class AActor* Pet, class AActor* Player, class AWillowMind* Enemy);
	void PlayerTargetedByEnemy(class AActor* Player, class AWillowMind* Enemy);
};

// Class WillowGame.CombatMusicParameters
// 0x0080 (0x0058 - 0x00D8)
class UCombatMusicParameters : public UGBXDefinition
{
public:
	float                                              FullThreatThreshholdValue;                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MediumThreatThreshholdValue;                   // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoThreatThressholdValue;                       // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ThreatLevelSubtractedPerSecond;                // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HighestThreatAllowed;                          // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RequiredThreatValueIfTargeted;                 // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ThreatSurgeThreshold;                          // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MediumThreatVolumeFadeTime;                    // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkRtpc*                                     MediumThreatRtpc;                              // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsPlus1;         // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsPlus2;         // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsPlus3;         // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsPlus4;         // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsPlus5;         // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsMinus1;        // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsMinus2;        // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsMinus3;        // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsMinus4;        // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyThreatMultiplierWhenLevelIsMinus5;        // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyDamagesPlayerWeight;                      // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ThreatFromShieldDown;                          // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinLongestTimeCombatMusicPlays;                // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxLongestTimeCombatMusicPlays;                // 0x00B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinTimeBeforeCombatMusicStartsAgain;           // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxTimeBeforeCombatMusicStartsAgain;           // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CombatMusicManagerUpdateFrequency;             // 0x00C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TimeAllowedToReachFullThreat;                  // 0x00C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeBackToFullVolumeTime;                      // 0x00C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TimeBetweenShieldDownThreats;                  // 0x00CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StateChangeDelay;                              // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnemyNotTargetingPlayerTimeout;                // 0x00D4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CombatMusicParameters");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ConstantDesignerAttributeValueResolver
// 0x0000 (0x0058 - 0x0058)
class UConstantDesignerAttributeValueResolver : public UAttributeValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ConstantDesignerAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CoordinatedEffectDefinition
// 0x00D8 (0x0058 - 0x0130)
class UCoordinatedEffectDefinition : public UGBXDefinition
{
public:
	class UMaterialInterface*                          OverrideMaterial;                              // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UParticleSystem*                             CriticialHitParticle;                          // 0x0060 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FCoordinatedParticleSystemDefinition> ParticleEffects;                               // 0x0068 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCoordinatedScalarParameter>   MaterialScalarParameters;                      // 0x0078 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCoordinatedVectorParameter>   MaterialVectorParameters;                      // 0x0088 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FName>                         InheritedMaterialParameters;                   // 0x0098 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCoordinatedAudioDefinition>   AudioEffects;                                  // 0x00A8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              EffectDuration;                                // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ParticleSpeedMultiplier;                       // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UCoordinatedEffectDefinition*                NextEffect;                                    // 0x00C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       MutexName;                                     // 0x00C8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MutexPriority;                                 // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInfiniteDuration : 1;                         // 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCensored : 1;                                 // 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bReplicated : 1;                               // 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bRemoveShadows : 1;                            // 0x00D4 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bHideInstanceDataParticles : 1;                // 0x00D4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bHidePawnWeaponParticleAttachments : 1;        // 0x00D4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bFreezeActor : 1;                              // 0x00D4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bDissolve : 1;                                 // 0x00D4 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bUnfreezeActor : 1;                            // 0x00D4 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bShatterActor : 1;                             // 0x00D4 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bShatterFromHitLocation : 1;                   // 0x00D4 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	class UMaterialInterface*                          ChunkMaterial;                                 // 0x00D8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          BrokenChunkMaterial;                           // 0x00E0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FCoordinatedChunkScalarParameter> ChunkMaterialScalarParameters;                 // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCoordinatedChunkVectorParameter> ChunkMaterialVectorParameters;                 // 0x00F8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCoordinatedChunkTextureParameter> ChunkMaterialTextureParameters;                // 0x0108 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              ChunkScale;                                    // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ChunkThickness;                                // 0x011C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicsResponseDefinition*                  ShatterPhysicsResponse;                        // 0x0120 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ShatterVelocityScale;                          // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CoordinatedEffectDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CreditsDataProviderGFxObject
// 0x0010 (0x00D8 - 0x00E8)
class UCreditsDataProviderGFxObject : public UGFxObject
{
public:
	class UCreditsGFxDefinition*                       CreditsDef;                                    // 0x00D8 (0x0008) [0x0000000000000000]               
	uint8_t                                            bShouldAvoidAccentedLetters;                   // 0x00E0 (0x0001) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CreditsDataProviderGFxObject");
		}

		return uClassPointer;
	};

	int32_t extGetLengthOfData();
	class UGFxObject* extGetClipDataAt(int32_t Index);
};

// Class WillowGame.CreditsGFxObject
// 0x0010 (0x00D8 - 0x00E8)
class UCreditsGFxObject : public UGFxObject
{
public:
	class UCreditsGFxDefinition*                       CreditsDef;                                    // 0x00D8 (0x0008) [0x0000000000000000]               
	float                                              CachedDelta;                                   // 0x00E0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CreditsGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CreditsLineDefinition
// 0x0010 (0x0058 - 0x0068)
class UCreditsLineDefinition : public UGBXDefinition
{
public:
	class FString                                      LinkageName;                                   // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CreditsLineDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CurrencyAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UCurrencyAttributeValueResolver : public UAttributeValueResolver
{
public:
	ECurrencyType                                      FormOfCurrency;                                // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CurrencyAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CurrencyListDefinition
// 0x0010 (0x0058 - 0x0068)
class UCurrencyListDefinition : public UGBXDefinition
{
public:
	class TArray<struct FCurrencyPresentation>         Currencies;                                    // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CurrencyListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CurrentProficiencySkillAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UCurrentProficiencySkillAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CurrentProficiencySkillAttributeContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.CustomSkeletalMeshComponent
// 0x0010 (0x0980 - 0x0990)
class UCustomSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class USkeletalMesh*                               DefaultSkeletalMesh;                           // 0x0980 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                           UnknownData00[0x8];                            // 0x0988 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomSkeletalMeshComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DamageOverTimeManager
// 0x0028 (0x0058 - 0x0080)
class UDamageOverTimeManager : public UObject
{
public:
	class TArray<struct FSourceObjectData>             SourceObjects;                                 // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FDamageOnlyOnceData>           DamageOnlyOnceActors;                          // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            UniqueId;                                      // 0x0078 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DamageOverTimeManager");
		}

		return uClassPointer;
	};

	void eventDoTakeRadiusDamage(class AActor* HurtActor, class UDamageTypeDefinition* DamageTypeDef, bool bCanDamageFriendlies, bool bCanDamageInstigator, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, class AController* InstigatedByController, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class UIDamageCauser* DamageCauser);
	void AddSourceObject(class UObject* SourceObject, const struct FVector& SourceLocation, class AController* InstigatedByController, class UExplosionDefinition* ExplosionDef, int32_t ExplosionScaleIndex, class UIDamageBehavior* DamageContext, float InitialDamageRadius, float Damage, bool bFullDamage, float Momentum, class UClass* DamageSource, class UDamageTypeDefinition* DamageTypeDef, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, bool bCanDamageInstigator, class UIDamageCauser* DamageCauser, bool bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, const class TArray<class AActor*>& ActorsHurt);
};

// Class WillowGame.DamageTypeAttributeValueResolver
// 0x0030 (0x0058 - 0x0088)
class UDamageTypeAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                             // 0x0058 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FDamageTypeSelectorData>       DamageTypes;                                   // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DamageTypeAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DebugArrowComponent
// 0x0000 (0x0370 - 0x0370)
class UDebugArrowComponent : public UArrowComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DebugArrowComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DeferredDataProviderGFxObject
// 0x0018 (0x00D8 - 0x00F0)
class UDeferredDataProviderGFxObject : public UGFxObject
{
public:
	class UGFxMoviePlayer*                             BaseOwningMovie;                               // 0x00D8 (0x0008) [0x0000000000000000]               
	class TArray<class UGFxObject*>                    CachedObjects;                                 // 0x00E0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DeferredDataProviderGFxObject");
		}

		return uClassPointer;
	};

	int32_t GetLength();
	void eventInvalidate(int32_t Length);
	void EmptyData();
	class UGFxObject* RequestItemRange(int32_t StartIndex, int32_t EndIndex, class UGFxObject* Scope, const class FString& Callback);
	class UGFxObject* RequestItemAt(int32_t Index, class UGFxObject* Scope, const class FString& Callback);
	void Init();
};

// Class WillowGame.DesignerAttributeContextResolver
// 0x0028 (0x0058 - 0x0080)
class UDesignerAttributeContextResolver : public UAttributeContextResolver
{
public:
	struct FName                                       ValueName;                                     // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                BaseValue;                                     // 0x0060 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DesignerAttributeContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.DesignerAttributeDefinition
// 0x0040 (0x0080 - 0x00C0)
class UDesignerAttributeDefinition : public UAttributeDefinition
{
public:
	EDesignerAttributeReplicationStrategy              ReplicationStrategy;                           // 0x0080 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDesignerAtttributeScope                           Scope;                                         // 0x0081 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ValueName;                                     // 0x0084 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                BaseValue;                                     // 0x0090 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      GlobalScopeResolverClass;                      // 0x00B0 (0x0008) [0x0000000000000000]               
	class UClass*                                      DesignerAttributeResolverClass;                // 0x00B8 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DesignerAttributeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DesignerAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UDesignerAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UProperty*                                   CachedProperty;                                // 0x0058 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DesignerAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DevelopmentDownloadableContentEnumerator
// 0x0000 (0x00C0 - 0x00C0)
class UDevelopmentDownloadableContentEnumerator : public UDownloadableContentEnumerator
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DevelopmentDownloadableContentEnumerator");
		}

		return uClassPointer;
	};

	void InstallAllDLC();
};

// Class WillowGame.DialogNameTagExpressionEvaluator
// 0x0010 (0x0058 - 0x0068)
class UDialogNameTagExpressionEvaluator : public UExpressionEvaluator
{
public:
	uint32_t                                           bWantExactMatch : 1;                           // 0x0058 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class UWillowDialogNameTag*                        NameTag;                                       // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DialogNameTagExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.DLCLegacyPlayerClassIdentifierDefinition
// 0x0020 (0x0058 - 0x0078)
class UDLCLegacyPlayerClassIdentifierDefinition : public UGBXDefinition
{
public:
	class TArray<struct FLegacyCustomizationItemData>  CharacterCustomizations;                       // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      AssociatedPlayerClassIdentifierPath;           // 0x0068 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DLCLegacyPlayerClassIdentifierDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DownloadableContentDefinition
// 0x0028 (0x0058 - 0x0080)
class UDownloadableContentDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UDownloadablePackageDefinition*              PackageDef;                                    // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ContentId;                                     // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            LicenseMask;                                   // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      ContentDisplayName;                            // 0x0070 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableContentDefinition");
		}

		return uClassPointer;
	};

	struct FDlcContentId GetFullContentId();
	bool CanConsume(class APlayerController* optionalController);
	bool IsInstalled();
	bool IsLicensed(class APlayerController* optionalController);
};

// Class WillowGame.DownloadableCharacterDefinition
// 0x0000 (0x0080 - 0x0080)
class UDownloadableCharacterDefinition : public UDownloadableContentDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableCharacterDefinition");
		}

		return uClassPointer;
	};

	bool CanPlayAs(class APlayerController* optionalController);
};

// Class WillowGame.DownloadableCustomizationSetDefinition
// 0x0008 (0x0080 - 0x0088)
class UDownloadableCustomizationSetDefinition : public UDownloadableContentDefinition
{
public:
	int32_t                                            ProductId;                                     // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumCustomizations;                             // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableCustomizationSetDefinition");
		}

		return uClassPointer;
	};

	bool CanUse(class APlayerController* optionalController);
};

// Class WillowGame.DownloadableExpansionDefinition
// 0x0028 (0x0080 - 0x00A8)
class UDownloadableExpansionDefinition : public UDownloadableContentDefinition
{
public:
	class ULevelDependencyList*                        LevelDependencyList;                           // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FPlayThroughData>              RegionBalanceData;                             // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UCurrencyListDefinition*                     Currencies;                                    // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPlayerTrainingMessageListDefinition*        TrainingMessageListDef;                        // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableExpansionDefinition");
		}

		return uClassPointer;
	};

	bool IsLevelTravelAccessible();
	bool CanTravelTo(class APlayerController* optionalController);
};

// Class WillowGame.DownloadableItemSetDefinition
// 0x0030 (0x0080 - 0x00B0)
class UDownloadableItemSetDefinition : public UDownloadableContentDefinition
{
public:
	class UAttributePresentationListDefinition*        DefaultAttributePresentation;                  // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ItemAttributePresentationOverride;             // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ArtifactAttributePresentationOverride;         // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ClassModAttributePresentationOverride;         // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ShieldAttributePresentationOverride;           // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        WeaponAttributePresentationOverride;           // 0x00A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableItemSetDefinition");
		}

		return uClassPointer;
	};

	class FString GetDLCRestrictedMessage(bool bShort);
	bool CanUse(class APlayerController* optionalController);
};

// Class WillowGame.DownloadablePackageDefinition
// 0x0050 (0x0058 - 0x00A8)
class UDownloadablePackageDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	int32_t                                            PackageId;                                     // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            PackageMask;                                   // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      PackageDisplayName;                            // 0x0068 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DLCName;                                       // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            SeasonPassId;                                  // 0x0088 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UDownloadablePackageLicenseItem*> LicenseItems;                                  // 0x0090 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            bUsesExtendedLicensing;                        // 0x00A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadablePackageDefinition");
		}

		return uClassPointer;
	};

	bool IsFullyInstalled();
	bool IsFullyLicensed();
	class UDownloadableContentDefinition* GetContentDefinitionById(int32_t ContentId);
};

// Class WillowGame.DownloadablePackageLicenseItem
// 0x0008 (0x0058 - 0x0060)
class UDownloadablePackageLicenseItem : public UObject
{
public:
	int32_t                                            LicenseMask;                                   // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadablePackageLicenseItem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.EffectCollectionDefinition
// 0x0010 (0x0058 - 0x0068)
class UEffectCollectionDefinition : public UGBXDefinition
{
public:
	class TArray<struct FConditionalParticleEffectData> ParticleEffects;                               // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EffectCollectionDefinition");
		}

		return uClassPointer;
	};

	class UParticleSystem* GetParticleEffect(class UObject* ContextObject);
};

// Class WillowGame.EnvironmentTagDefinition
// 0x0000 (0x0058 - 0x0058)
class UEnvironmentTagDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EnvironmentTagDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.EquippedInventoryAttributeContextResolver
// 0x0008 (0x0058 - 0x0060)
class UEquippedInventoryAttributeContextResolver : public UAttributeContextResolver
{
public:
	EEquipmentLoc                                      EquipmentLocation;                             // 0x0058 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EquippedInventoryAttributeContextResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ExperienceFeedbackMessage
// 0x0010 (0x0068 - 0x0078)
class UExperienceFeedbackMessage : public ULocalMessage
{
public:
	class FString                                      IsNowLevel;                                    // 0x0068 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ExperienceFeedbackMessage");
		}

		return uClassPointer;
	};

	static ELocalMessageType GetMsgType(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class WillowGame.ExperienceResourcePool
// 0x0048 (0x0170 - 0x01B8)
class UExperienceResourcePool : public UResourcePool
{
public:
	float                                              ExpCombatPointsScale;                          // 0x0170 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ExpCombatPointsScaleBaseValue;                 // 0x0174 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ExpCombatPointsScaleModifierStack;             // 0x0178 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ExpMissionPointsScale;                         // 0x0188 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ExpMissionPointsScaleBaseValue;                // 0x018C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ExpMissionPointsScaleModifierStack;            // 0x0190 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ExpAllPointsScale;                             // 0x01A0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ExpAllPointsScaleBaseValue;                    // 0x01A4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ExpAllPointsScaleModifierStack;                // 0x01A8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ExperienceResourcePool");
		}

		return uClassPointer;
	};

	void ApplyExpPointsToExpLevel(bool optionalBCheated);
};

// Class WillowGame.ExplosionCollectionDefinition
// 0x0010 (0x0058 - 0x0068)
class UExplosionCollectionDefinition : public UGBXDefinition
{
public:
	class TArray<struct FConditionalExplosionData>     Explosions;                                    // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ExplosionCollectionDefinition");
		}

		return uClassPointer;
	};

	class UExplosionDefinition* GetExplosion(class UObject* ContextObject);
};

// Class WillowGame.ExplosionDefinition
// 0x0080 (0x0058 - 0x00D8)
class UExplosionDefinition : public UGBXDefinition
{
public:
	class UAkEvent*                                    ExplosionAkEvent;                              // 0x0058 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UAkEvent*                                    MultipleExplosionsAkEvent;                     // 0x0060 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UParticleSystem*                             ExplosionPSTemplate;                           // 0x0068 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              DrawScale;                                     // 0x0070 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class TArray<struct FExplosionScaleData>           ExplosionScale;                                // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UCameraAnim*                                 CameraAnim;                                    // 0x0088 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              MinCameraEffectDistance;                       // 0x0090 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              MaxCameraEffectDistance;                       // 0x0094 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UForceFeedbackWaveform*                      FFWaveform;                                    // 0x0098 (0x0008) [0x0000000024000002] (CPF_Const | CPF_EditInline | CPF_Deprecated)
	class UDamageTypeDefinition*                       DamageTypeDef;                                 // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSkipTraceTest : 1;                            // 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyZeroDamage : 1;                          // 0x00A8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	class UWillowExplosionImpactDefinition*            ImpactEffect;                                  // 0x00B0 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              ImpactTraceLength;                             // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FRecentExplosion>              RecentExplosionTracker;                        // 0x00C0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              ExplosionSoundStackingPreventionDelay;         // 0x00D0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExplosionSoundStackingMaxDistanceSquared;      // 0x00D4 (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ExplosionDefinition");
		}

		return uClassPointer;
	};

	bool DidAnExplosionForThisInstigatorJustGoOff(class UObject* Context, struct FVector& Location);
	void MakeExplodyShakes(int32_t ExplosionScaleIndex, class AWillowPlayerController* WPC, const struct FVector& PawnLocation, const struct FVector& ExplosionLocation, float MinEffectDistance, float MaxEffectDistance, float EffectRange);
	void PlayExplosionCameraAnim(int32_t ExplosionScaleIndex, const struct FVector& ExplosionLocation, bool bShouldReplicate);
	void PlayImpactEffects(int32_t ExplosionScaleIndex, class AActor* SourceActor, const struct FVector& ExplosionLocation, const struct FVector& ExplosionNormal);
	void PlayMultipleExplosionsSound(class UObject* SourceObject, bool optionalBReplicate);
	void eventPlayExplosion(class UObject* SourceObject, float DamageRadius, float Damage, bool bFullDamage, float Momentum, class UClass* DamageSource, class UDamagePipeline* Pipeline, const struct FVector& optionalLocation, const struct FVector& optionalNormal, bool optionalBReplicate, bool optionalBNoSound, const struct FVector& optionalOffset, class UIDamageCauser* optionalDamageCauser, bool optionalBOverrideSkipTraceTest, class UObject* optionalHitObject, EOpinion optionalAllegianceFilter);
	static bool IsExplosionDebugEnabled();
	static void ToggleExplosionDebug();
};

// Class WillowGame.FastTravelStationGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UFastTravelStationGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStationGFxObject");
		}

		return uClassPointer;
	};

	void SetCurrentWaypoint(int32_t WaypointIndex);
	void SetSortMode(int32_t SortMode, const class FString& Header);
	void SendLocationData(const class TArray<class FString>& LocationDisplayNames, const class TArray<class FString>& LocationStationNames, int32_t InitialSelectionIndex, int32_t CurrentWaypointIndex);
	void ScrollLocationListDown();
	void ScrollLocationListUp();
	void RegisterMapLocationBlob(class UGFxObject* MapBlobClip);
	void CacheLocationMissionData(int32_t LocationIndex, const class TArray<class FString>& MissionNames, const class TArray<int32_t>& MissionTypes);
	void AddDLCMapLocations(const class FString& DLCMapLocationsMovie);
};

// Class WillowGame.FiringModeDefinition
// 0x01C0 (0x0058 - 0x0218)
class UFiringModeDefinition : public UGBXDefinition
{
public:
	EWillowWeaponFireType                              FireType;                                      // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ELightBeamLock                                     BeamLockBehavior;                              // 0x0059 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowDamageTypeDefinition*                 DamageTypeDefinition;                          // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     ImpactDefinition;                              // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UProjectileDefinition*                       ProjectileDefinition;                          // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MuzzleFlashSocket;                             // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExplosionCollectionDefinition*              ExplosionOverrideDefinition;                   // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ExplosionOverideInstanceDataName;              // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             PartSysTemplate;                               // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UEffectCollectionDefinition*                 ConditionalPartSysTemplate;                    // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnAnyImpact;                                   // 0x00A8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FBulletImpactEventData>        ImpactResponses;                               // 0x00B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              Lifetime;                                      // 0x00C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TraceInterval;                                 // 0x00CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSuppressImpactEffects : 1;                    // 0x00D0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bPenetratePawn : 1;                            // 0x00D0 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bParameterizedSourceLocation : 1;              // 0x00D0 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamCanAcquireLock : 1;                       // 0x00D0 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamChooseRandomBone : 1;                     // 0x00D0 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamPenetratesTargetables : 1;                // 0x00D0 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamPenetratesWorld : 1;                      // 0x00D0 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamSpawnPenetrationImpacts : 1;              // 0x00D0 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamDamageDirectTargetOnce : 1;               // 0x00D0 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamTraceFromSourceViewPoint : 1;             // 0x00D0 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bBeamAttachToViewModel : 1;                    // 0x00D0 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bFireRandomlyFromPattern : 1;                  // 0x00D0 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bResetPatternAfterEachShot : 1;                // 0x00D0 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bSuppressWeaponSpread : 1;                     // 0x00D0 (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bScalePatternByWeaponSpread : 1;               // 0x00D0 (0x0004) [0x0000000000000003] [0x00004000] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             OverchargedImpactTemplate;                     // 0x00D8 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FInterpCurveFloat                           DistanceDamageFalloff;                         // 0x00E0 (0x0018) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            NumRicochets;                                  // 0x00F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Speed;                                         // 0x00FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     Acceleration;                                  // 0x0100 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     WaveFreq;                                      // 0x010C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     WaveAmp;                                       // 0x0118 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     WavePhase;                                     // 0x0124 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RicochetFriction;                              // 0x0130 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AirFriction;                                   // 0x0134 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FBulletTimerEvent>             TimerEvents;                                   // 0x0138 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FBulletEventResponse                        RicochetResponse;                              // 0x0148 (0x0030) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FVector                                     TraceExtent;                                   // 0x0178 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       LightProjectileSourceLocationName;             // 0x0184 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamMaxLockOnDistance;                         // 0x018C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamMaxLength;                                 // 0x0190 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamSourceTangentStrengthOverDistance;         // 0x0194 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamTargetTangentStrengthOverDistance;         // 0x0198 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamApproxRepUpdateTime;                       // 0x019C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            BeamTraceNumSteps;                             // 0x01A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamSourceLocationName;                        // 0x01A4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamSourceTangentName;                         // 0x01AC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamSourceStrengthName;                        // 0x01B4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamTargetLocationName;                        // 0x01BC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamTargetTangentName;                         // 0x01C4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamTargetStrengthName;                        // 0x01CC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamDirectionName;                             // 0x01D4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamChainDelay;                                // 0x01DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            BeamChainNum;                                  // 0x01E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamChainMaxDistance;                          // 0x01E4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamChainBreakDistance;                        // 0x01E8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamRandomBoneTimeMin;                         // 0x01EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BeamRandomBoneTimeMax;                         // 0x01F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFiringModeSoundDefinition*                  SoundDefinition;                               // 0x01F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FFiringPatternLine>            FiringPatternLines;                            // 0x0200 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              BasePatternSpread;                             // 0x0210 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinPatternScale;                               // 0x0214 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FiringModeDefinition");
		}

		return uClassPointer;
	};

	float GetShieldPenetrationPercentage(class AActor* Instigator);
	int32_t GetDamageTags();
	float ComputeDistanceDamageFalloff(float Distance);
	bool IsPenetratingBeam();
	class UParticleSystem* GetParticleSystemTemplate(class UObject* ContextObject);
	void NotifyFiringPatternWhenShotComplete(int32_t& NextFiringPatternIndex);
	int32_t GetFiringPatternAdjustments(float WeaponSpread, struct FRotator& InputAimAdjustment, struct FRotator& OutputAimAdjustment, struct FWaveMotionData& CustomWaveMotion, int32_t& NextFiringPatternIndex);
	void RunBehaviorsForImpact(int32_t ResponseIndex, const struct FImpactInfo& ImpactData, class UObject* SelfObject, class UObject* optionalMyInstigatorObject, class UObject* optionalOtherEventParticipantObject, const struct FBehaviorParameters& optionalEventData, class UObject* optionalOtherInstigatorObject);
	int32_t GetImpactResponseIndex(EDamageSurfaceType DamageSurfaceType);
};

// Class WillowGame.FiringModeSoundDefinition
// 0x0070 (0x0058 - 0x00C8)
class UFiringModeSoundDefinition : public UGBXDefinition
{
public:
	class TArray<struct FConditionalSoundData>         FireSounds;                                    // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalSoundData>         FireTailSounds;                                // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UWillowImpactDefinition*                     ShellCasingImpact;                             // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ShellCasingDelay;                              // 0x0080 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bShellCasingImpactOnLeft : 1;                  // 0x0084 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    TravelingSoundEvent;                           // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FConditionalSoundData>         BulletWhipSounds;                              // 0x0090 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              BulletWhipRadius;                              // 0x00A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    BeamSoundEvent;                                // 0x00A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    BeamStopSoundEvent;                            // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    BeamImpactSoundEvent;                          // 0x00B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    RicochetAkEvent;                               // 0x00C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FiringModeSoundDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FixedMarker
// 0x0018 (0x0250 - 0x0268)
class AFixedMarker : public ATrigger
{
public:
	uint32_t                                           DisplayOnCompass : 1;                          // 0x0250 (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	class UTexture2D*                                  MarkerTexture;                                 // 0x0258 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      MarkerColor;                                   // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MarkerScale;                                   // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FixedMarker");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class WillowGame.FlyerBlockingVolume
// 0x0000 (0x0290 - 0x0290)
class AFlyerBlockingVolume : public ABlockingVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FlyerBlockingVolume");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
};

// Class WillowGame.FocusCameraDefinition
// 0x0010 (0x0058 - 0x0068)
class UFocusCameraDefinition : public UGBXDefinition
{
public:
	float                                              CamReturnTime;                                 // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CamMovementThreshold;                          // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CamMovementSpeed_Fast;                         // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CamMovementSpeed_Slow;                         // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FocusCameraDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FractalViewWanderingDefinition
// 0x0018 (0x0058 - 0x0070)
class UFractalViewWanderingDefinition : public UGBXDefinition
{
public:
	class TArray<struct FVector2D>                     PseudoRandomPoints;                            // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            NumberOfOctaves;                               // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FractalViewWanderingDefinition");
		}

		return uClassPointer;
	};

	void GenerateNewRandomPoints();
};

// Class WillowGame.FromContextFlagValueResolver
// 0x0008 (0x0058 - 0x0060)
class UFromContextFlagValueResolver : public UFlagValueResolver
{
public:
	class UFlagDefinition*                             MyFlagDef;                                     // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FromContextFlagValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GameBalanceDefinition
// 0x0010 (0x0058 - 0x0068)
class UGameBalanceDefinition : public UGBXDefinition
{
public:
	class TArray<struct FRegionBalanceData>            BalanceByRegion;                               // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GameBalanceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GameReleaseDefinition
// 0x0010 (0x0058 - 0x0068)
class UGameReleaseDefinition : public UGBXDefinition
{
public:
	struct FName                                       WorldDiscoveryStatID;                          // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumWorldDiscoveryAreas;                        // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GameReleaseDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GearboxAccountGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UGearboxAccountGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GearboxAccountGFxObject");
		}

		return uClassPointer;
	};

	int32_t SelectIsEnabled();
	void ClearKeyCode();
	void TrySetKeyCode(const class FString& KeyCode);
	void ConfigureForViewOffers();
	void ConfigureForRedeemCode();
	int32_t IsDisplayingOffers();
	void SetOfferData(const class TArray<class UGFxObject*>& OfferData);
	void ScrollMessageDown();
	void ScrollMessageUp();
	int32_t HasReadTermsOfService();
	void SetTermsOfService(const class FString& TermsOfService);
	int32_t HasReadPrivacyPolicy();
	void SetPrivacyPolicy(const class FString& PrivacyPolicy);
	void SetTooltips(const class FString& Tooltips);
	void SetFocusedConsoleCodeSegment(const class FString& CodeSegment);
	void SetConfirmPassword(const class FString& Password);
	void SetPassword(const class FString& Password);
	void SetEmail(const class FString& Email);
	class FString GetConfirmPassword();
	class FString GetPassword();
	class FString GetKeyCode();
	class FString GetEmail();
	int32_t GetAgeYear();
	int32_t GetAgeDay();
	int32_t GetAgeMonth();
	void SetCurrentDate(int32_t Month, int32_t Day, int32_t Year);
	bool OffersBoxIsChecked();
	void RefreshWelcomeScreen();
	void DisplayScreen(const class FString& Screen);
};

// Class WillowGame.GenericReviveMessageDefinition
// 0x0020 (0x0058 - 0x0078)
class UGenericReviveMessageDefinition : public UGBXDefinition
{
public:
	class FString                                      Message_Self;                                  // 0x0058 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Message_Other;                                 // 0x0068 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GenericReviveMessageDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GFxMovieInteractiveObject
// 0x0000 (0x03F8 - 0x03F8)
class UGFxMovieInteractiveObject : public UGearboxGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GFxMovieInteractiveObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GFxTextListContainer
// 0x0070 (0x0058 - 0x00C8)
class UGFxTextListContainer : public UObject
{
public:
	class TArray<struct FOneTimeDataElement>           OneTimeArray;                                  // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        CategoryLabelsArray;                           // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSortableDataElement>          SortableArray;                                 // 0x0078 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FGFxTextEntry>                 TextEntries;                                   // 0x0088 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UGFxMovie*                                   ParentMovie;                                   // 0x0098 (0x0008) [0x0000000000000000]               
	int32_t                                            HighlightedEntry;                              // 0x00A0 (0x0004) [0x0000000000000000]               
	int32_t                                            IndexOfTopEntry;                               // 0x00A4 (0x0004) [0x0000000000000000]               
	int32_t                                            NumberEntriesPerPage;                          // 0x00A8 (0x0004) [0x0000000000000000]               
	int32_t                                            SavedHighlightedEntry;                         // 0x00AC (0x0004) [0x0000000000000000]               
	int32_t                                            SavedIndexOfTopEntry;                          // 0x00B0 (0x0004) [0x0000000000000000]               
	class UGFxTextListDefinition*                      ListDef;                                       // 0x00B8 (0x0008) [0x0000000000000000]               
	uint32_t                                           bHighlightBarNormal : 1;                       // 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GFxTextListContainer");
		}

		return uClassPointer;
	};

	int32_t GetIndexOfNextCategory();
	int32_t GetIndexOfPreviousCategory();
	void SetMoreBars(bool bMoreUp, bool bMoreDown);
	void UpdateTextEntries();
	void MoveHighlightBar(int32_t Frame);
	int32_t GetTextEntryIndexOfFirstRealEntry();
	bool GetTextAndIconAtIndex(int32_t Idx, class FString& Text, class FString& Icon);
	EArrayKind GetTextEntryKindAtIndex(int32_t Idx);
	class UObject* GetObjectAtIndexW(int32_t Idx);
	void RemoveObject(class UObject* anObject);
	void ScrollToBottomOfList();
	void SetIconOverrideFor(class UObject* anObject, const class FString& IconOverride);
	void SetObjectHighlighted(class UObject* anObject);
	int32_t FindObjectIndex(class UObject* anObject);
	void SetHighlightBarOff();
	void SetHighlightBarNormal();
	void SetHighlightBarSelected();
	void UnHighlightAll();
	void PositionHighlightBar();
	void ResetState();
	void RestoreState();
	void SaveState();
	class FString GetHighlightedText();
	class UObject* GetHighlightedObject();
	bool IsSlotValid(int32_t Slot);
	bool SelectSlot(int32_t Slot);
	void RepositionToFitIndex(int32_t IndexToFit);
	class UObject* Move(ETextListMoveDir Dir);
	void UpdateEntriesPerPage(int32_t NewSize);
	void AddDataEntry(class UObject* Entry, const class FString& LocalizedText, const struct FColor& UnselectedTextColor, const class FString& optionalIconFrameLabel);
	void EmptyData();
	void Init(class UGFxMovie* Parent, class UGFxTextListDefinition* Def);
};

// Class WillowGame.GFxTextListContent
// 0x0010 (0x0058 - 0x0068)
class UGFxTextListContent : public UObject
{
public:
	class TArray<struct FFlashTextEntry>               TextListContent;                               // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GFxTextListContent");
		}

		return uClassPointer;
	};

	class UObject* GetObjectForIndexW(int32_t Index);
	void GetTextAndLabelForIndex(int32_t Index, class FString& Text, class FString& Icon);
	void AddEntry(struct FFlashTextEntry& NewEntry);
	int32_t GetLength();
	void Empty();
};

// Class WillowGame.GFxTextListDefinition
// 0x0080 (0x0058 - 0x00D8)
class UGFxTextListDefinition : public UGBXDefinition
{
public:
	class FString                                      ContainerName;                                 // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      FunctionPath;                                  // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      MoreUpName;                                    // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      MoreDownName;                                  // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      CategoryPrefix;                                // 0x0098 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      CategoryPostfix;                               // 0x00A8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      CategoryIconLabel;                             // 0x00B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FColor                                      TextNormalColor;                               // 0x00C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      TextHighlightColor;                            // 0x00CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            InitialEntryCount;                             // 0x00D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GFxTextListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GlobalAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UGlobalAttributeValueResolver : public UAttributeValueResolver
{
public:
	EGlobalAttributes                                  GlobalAttribute;                               // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GlobalAttributeValueResolver");
		}

		return uClassPointer;
	};

	static float GetGlobalAttributeValue(EGlobalAttributes Attribute);
	static void SetGlobalAttributeValue(EGlobalAttributes Attribute, float Value);
};

// Class WillowGame.GlobalsDefinition
// 0x0AD8 (0x0238 - 0x0D10)
class UGlobalsDefinition : public UGearboxGlobalsDefinition
{
public:
	int32_t                                            BulletReflectionRadius;                        // 0x0238 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BulletReflectionSpeedAdjustment;               // 0x023C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             BulletReflectionParticle;                      // 0x0240 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                BulletReflectionInaccuracyFormula;             // 0x0248 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             BulletPenetratedEnemyParticle;                 // 0x0268 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    BulletPenetratedEnemyAkEvent;                  // 0x0270 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       DualWieldSwitchName;                           // 0x0278 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       DualWieldSprintSwitchName;                     // 0x0280 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       DualWieldLeftSideControl;                      // 0x0288 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GeneralSkillPointsPerLevelUp;                  // 0x0290 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GeneralSkillPointsTotalForCurrentLevel;        // 0x02B0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                SpecialistSkillPointsPerLevelUp;               // 0x02D0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                CostToResetSkillPoints;                        // 0x02F0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class USkillDefinition*>              WeaponProficiencySkills;                       // 0x0310 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                BaseEnemyExperienceFormula;                    // 0x0320 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FDamageTypeExpModifier>        DamageTypeExpModifiers;                        // 0x0340 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FLevelBasedExpScale>           ExpScaleByLevelDifference;                     // 0x0350 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FExpAwardWeight>               ExpAwardWeights;                               // 0x0360 (0x0010) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink)
	struct FAttributeInitializationData                ExpPointsRequiredForLevel;                     // 0x0370 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                WorldDiscoveryExperienceFormula;               // 0x0390 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    EchoInitalizeEchoAkEvent;                      // 0x03B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    EchoInitalizeLiveAkEvent;                      // 0x03B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    EchoStartedAkEvent;                            // 0x03C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    EchoEndedAkEvent;                              // 0x03C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ShieldLowWarningStartAkEvent;                  // 0x03D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ShieldLowWarningStopAkEvent;                   // 0x03D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ShieldRecoveringAkEvent;                       // 0x03E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ShieldRecoveredAkEvent;                        // 0x03E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ShieldDownAkEvent;                             // 0x03F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    OvershieldAppliedAkEvent;                      // 0x03F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    OvershieldDownAkEvent;                         // 0x0400 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TinnitusEffectDecayRate;                       // 0x0408 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     TinnitusEffectStrengthRTPC;                    // 0x0410 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     TinnitusSourcePannerRTPC;                      // 0x0418 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     TinnitusSourceStrengthRTPC;                    // 0x0420 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    TinnitusAkEvent;                               // 0x0428 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    VOVolumeStartAkEvent;                          // 0x0430 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    VOVolumeStopAkEvent;                           // 0x0438 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    SFXVolumeStartAkEvent;                         // 0x0440 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    SFXVolumeStopAkEvent;                          // 0x0448 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MusicVolumeStartAkEvent;                       // 0x0450 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MusicVolumeStopAkEvent;                        // 0x0458 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UAkEvent*>                      SoundsToAlwaysReference;                       // 0x0460 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              PlayerInteractionDistance;                     // 0x0470 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         GrenadeAmmoDefinition;                         // 0x0478 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UProjectileDefinition*                       StandardGrenadeDefinition;                     // 0x0480 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     EchoDistortionAkRtpc;                          // 0x0488 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MissionAcceptEchoDelay;                        // 0x0490 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_RepeaterPistol;                 // 0x0498 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_RevolverPistol;                 // 0x04A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_Shotgun;                        // 0x04A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_SMG;                            // 0x04B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_CombatRifle;                    // 0x04B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_SniperRifle;                    // 0x04C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoDefinition_RocketLauncher;                 // 0x04C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FRarityLevelColor>             RarityLevelColors;                             // 0x04D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            MissionItemRarityLevel;                        // 0x04E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FPlayThroughData>              RegionBalanceData;                             // 0x04E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                GameStageIncreaseAbovePlayer;                  // 0x04F8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              OtherPlayerDiedCostMultiplier;                 // 0x0518 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAIDamageScale;                           // 0x0520 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAIWeaponDamageScale;                     // 0x0540 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAIPistolWeaponDamageScale;               // 0x0560 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAIShotgunWeaponDamageScale;              // 0x0580 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAISmgWeaponDamageScale;                  // 0x05A0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAISniperWeaponDamageScale;               // 0x05C0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAIAssaultWeaponDamageScale;              // 0x05E0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalAIRocketWeaponDamageScale;               // 0x0600 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FLevelBasedDamageScale>        PlayerDamageScaleByLevelDifference;            // 0x0620 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FLevelBasedDamageScale>        AIDamageScaleByLevelDifference;                // 0x0630 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              SelfInflictedDamageMultiplier;                 // 0x0640 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                GlobalFallingDamageScale;                      // 0x0648 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FriendlyDamageModifier;                        // 0x0668 (0x0004) [0x0000000020000003] (CPF_Edit | CPF_Const | CPF_Deprecated)
	class UCombatMusicParameters*                      CombatMusicProperties;                         // 0x0670 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              BigDamageThreshold;                            // 0x0678 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinBigDamageTime;                              // 0x067C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinSmallDamageTime;                            // 0x0680 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            BigDamageShakeMagnitude;                       // 0x0684 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SmallDamageShakeMagnitude;                     // 0x0688 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      BigDamageShake;                                // 0x0690 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class UForceFeedbackWaveform*                      SmallDamageShake;                              // 0x0698 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class UDamageTypeDefinition*                       HealingDamageTypeDefinition;                   // 0x06A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     HealingImpactDefinition;                       // 0x06A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            AnnouncePickupRarityThreshold;                 // 0x06B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupRadius;                                  // 0x06B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CoopRange;                                     // 0x06B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DropImpactEffectMax;                           // 0x06BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DropImpactEffectDelay;                         // 0x06C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DropImpactEffectThreshold;                     // 0x06C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     DropImpactEffectVelocityAkRtpc;                // 0x06C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UItemPoolDefinition*                         LevelTransitionItemPool;                       // 0x06D0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUsePC360Buttons : 1;                          // 0x06D8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class UTextMarkupDictionary*                       TheTextMarkupDictionary;                       // 0x06E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ElementalFrameNames[0xA];                      // 0x06E8 (0x0050) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        DefaultAttributePresentation;                  // 0x0738 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ItemAttributePresentationOverride;             // 0x0740 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ArtifactAttributePresentationOverride;         // 0x0748 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ClassModAttributePresentationOverride;         // 0x0750 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        ShieldAttributePresentationOverride;           // 0x0758 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationListDefinition*        WeaponAttributePresentationOverride;           // 0x0760 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      AttributePresentationTranslation;              // 0x0768 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UAttributePresentationDefinition*            EmptyConstraint;                               // 0x0778 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAttributePresentationDefinition*            MissingPresentation;                           // 0x0780 (0x0008) [0x0000000000000002] (CPF_Const)   
	class ULevelDependencyList*                        LevelDependencyList;                           // 0x0788 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlayerAirControl;                              // 0x0790 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UKeyedItemPoolDefinition*>      CustomizationsToUnlockForLoyalCustomers;       // 0x0798 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            MaxAllowedPlayThroughs;                        // 0x07A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             PartItemHoverFade;                             // 0x07B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             PartItemHover;                                 // 0x07B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             PartPickup;                                    // 0x07C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             PartLootable;                                  // 0x07C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     PartLootableHoverOffset;                       // 0x07D0 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     PartPickupHoverOffset;                         // 0x07DC (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HoverWidthPickup;                              // 0x07E8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HoverWidthLootable;                            // 0x07EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ItemHoverProjectionHeight;                     // 0x07F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         ItemPickupCardMovie;                           // 0x07F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UMaterialInterface*                          HoverIconMaterial;                             // 0x0800 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CardHeightPitchFactor;                         // 0x0808 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            CardHeightPitchDeadZone;                       // 0x080C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CardHeightDistanceFactor;                      // 0x0810 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CardHeightCombatFactor;                        // 0x0814 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupSpinHMin;                                // 0x0818 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupSpinHMax;                                // 0x081C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupSpinVMin;                                // 0x0820 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupSpinVMax;                                // 0x0824 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DayNightCycleRate;                             // 0x0828 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FInputContextData>             InputContexts;                                 // 0x0830 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UInputDeviceCollectionDefinition*            InputDeviceCollection;                         // 0x0840 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UInputButtonDefinition*>        InputButtonDefinitions;                        // 0x0848 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UInputRemappingDefinition*>     ControllerPresetsPS3;                          // 0x0858 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UInputRemappingDefinition*>     ControllerPresetsXbox360;                      // 0x0868 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              MinutesBetweenShopResets;                      // 0x0878 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ShopResetCost;                                 // 0x0880 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      DefaultShieldColor;                            // 0x08A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FloatingCombatTextParticleSizeMinDist;         // 0x08A4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FloatingCombatTextParticleSizeMaxDist;         // 0x08A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinDistanceToUseSocketLocationForText;         // 0x08AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            FloatingCombatTextSortPriority;                // 0x08B0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxTrackedAggregateDamageEvents;               // 0x08B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StandardModeParticleLifetime;                  // 0x08B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AggregateModeParticleLifetime;                 // 0x08BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FloatingCombatTextParticleSpeedStandard;       // 0x08C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FloatingCombatTextParticleSpeedAggregate;      // 0x08C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxTimeForAggregatedDamageNumbers;             // 0x08C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       FloatingCombatTextSpawnSocketName;             // 0x08CC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             HealthDamageFX;                                // 0x08D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ShieldDamageFX;                                // 0x08E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             OvershieldDamageFX;                            // 0x08E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             HealthHealedFX;                                // 0x08F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ShieldHealedFX;                                // 0x08F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             OvershieldHealedFX;                            // 0x0900 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLocalizedFloatingCombatTextParticle        ImmuneTextFX;                                  // 0x0908 (0x0018) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FLocalizedFloatingCombatTextParticle        CriticalHitTextFX;                             // 0x0920 (0x0018) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FName                                       CombatTextParticleDamageParamName;             // 0x0938 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleColorParamName;              // 0x0940 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleSizeParamName;               // 0x0948 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleSpeedParamName;              // 0x0950 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextLocalizedMaterialParamName;          // 0x0958 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleSpawnStandardDamageParamName;// 0x0960 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleSpawnStandardCritParamName;  // 0x0968 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleStandardLifetimeParamName;   // 0x0970 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleSpawnAggregateDamageParamName;// 0x0978 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleSpawnAggregateCritParamName; // 0x0980 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       CombatTextParticleAggregateLifetimeParamName;  // 0x0988 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                PawnDamageColor;                               // 0x0990 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                ShieldDamageColor;                             // 0x09A0 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                OvershieldDamageColor;                         // 0x09B0 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                PawnHealColor;                                 // 0x09C0 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                ShieldHealColor;                               // 0x09D0 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                OvershieldHealedColor;                         // 0x09E0 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                BuffResistedColor;                             // 0x09F0 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MinFramesBetweenReflections;                   // 0x0A00 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinTimeBetweenReflections;                     // 0x0A04 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         MissionAcceptDefinition;                       // 0x0A08 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         PauseMenuDefinition;                           // 0x0A10 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         OnlineMessageMovieDefinition;                  // 0x0A18 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         TextChatMovieDefinition;                       // 0x0A20 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         HUDScaleGuideMovieDefinition;                  // 0x0A28 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         ItemInspectionMovieDefinition;                 // 0x0A30 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FPostProcessSettings                        PPOverride;                                    // 0x0A38 (0x0118) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                MissionCreditRewardFormula;                    // 0x0B50 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MissionReadyToTurnInAkEvent;                   // 0x0B70 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ActiveMissionChangedAkEvent;                   // 0x0B78 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MissionObjectiveCompleteAkEvent;               // 0x0B80 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MissionObjectiveIncrementedAkEvent;            // 0x0B88 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MissionObjectiveClearedAkEvent;                // 0x0B90 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MissionTurnedInAkEvent;                        // 0x0B98 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    NewMissionAcceptedAkEvent;                     // 0x0BA0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MissionAvailabilityTimer;                      // 0x0BA8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            LevelDifference_Impossible;                    // 0x0BAC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            LevelDifference_Hard;                          // 0x0BB0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            LevelDifference_Tough;                         // 0x0BB4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            LevelDifference_Normal;                        // 0x0BB8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MissionGlowColorParameter;                     // 0x0BBC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWeaponBalanceDefinition*                    DefaultWeapon;                                 // 0x0BC8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             MissionDirectorParticleSystem;                 // 0x0BD0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MissionDirectorParticleSocket;                 // 0x0BD8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MissionDirectorIconSelectParameterName;        // 0x0BE0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MissionDirectorEligibleMissionsParameter;      // 0x0BE8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MissionDirectorRedeemableMissionsParameter;    // 0x0BEC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MissionDirectorIconColorParameterName;         // 0x0BF0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     MissionDirectorIconColor;                      // 0x0BF8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MissionDirectorIconSizeParameterName;          // 0x0C04 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     MissionDirectorIconSize;                       // 0x0C0C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupDirectorIconOffset;                      // 0x0C18 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       FocusSocketName;                               // 0x0C1C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MissionPickupFailsafeSeconds;                  // 0x0C24 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MissionPickupFailsafeZ;                        // 0x0C28 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       WaypointSocketName;                            // 0x0C2C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxTimeBetweenSpreeKills;                      // 0x0C34 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              QuickshotTimer;                                // 0x0C38 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PointBlankDistance;                            // 0x0C3C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ShotgunLongshot;                               // 0x0C40 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LauncherLongshot;                              // 0x0C44 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PistolLongshot;                                // 0x0C48 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumLevelUpKillStatThreshold;                   // 0x0C4C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UHUDDefinition*                              HUDDefinition;                                 // 0x0C50 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Use;                   // 0x0C58 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Talk;                  // 0x0C60 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Heal;                  // 0x0C68 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Shop;                  // 0x0C70 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Computer;              // 0x0C78 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Smash;                 // 0x0C80 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_CannotUse;             // 0x0C88 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_Objective;             // 0x0C90 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_PickUp;                // 0x0C98 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_Default_CannotPickUp;          // 0x0CA0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  InteractionIcon_AlreadyDiscoveredObject;       // 0x0CA8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGenericReviveMessageDefinition*             KillReviveDefinition;                          // 0x0CB0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultFOV;                                    // 0x0CB8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             OverchargedLightProjectileImpactTemplate;      // 0x0CC0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             OverchargedProjectileTrailTemplate;            // 0x0CC8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCoordinatedEffectDefinition*                DigistructInWeaponEffect;                      // 0x0CD0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCoordinatedEffectDefinition*                DigistructOutWeaponEffect;                     // 0x0CD8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFractalViewWanderingDefinition*             FractalWanderDef;                              // 0x0CE0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DawnTime;                                      // 0x0CE8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DuskTime;                                      // 0x0CEC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxDollars;                                    // 0x0CF0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxEridium;                                    // 0x0CF4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCurrencyListDefinition*                     Currencies;                                    // 0x0CF8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BinkMovieVolumeScaleFactor;                    // 0x0D00 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UInputActionDefinition*                      InputAction_Pause_ShowMenu;                    // 0x0D08 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GlobalsDefinition");
		}

		return uClassPointer;
	};

	class UInputButtonDefinition* FindInputButtonDefinition(const struct FName& ButtonName);
	void ApplySpinToPickup(class UMeshComponent* Mesh);
	bool ShouldUsePC360Buttons();
	class UAttributePresentationDefinition* GetAttributePresentationForAttribute(class UAttributeDefinition* Attribute, class UAttributePresentationListDefinition* optionalOverrideList);
	EDropLifeSpanType GetDropLifeSpanType(int32_t DropRarityLevel);
	struct FColor GetRarityColorForRarityRating(EItemRarity Rating);
	struct FColor GetRarityColorForLevel(int32_t Level);
	EItemRarity GetRarityForLevel(int32_t Level);
};

// Class WillowGame.HashDisplayGFxDefinition
// 0x0030 (0x0100 - 0x0130)
class UHashDisplayGFxDefinition : public UGFxMovieDefinition
{
public:
	class UGFxTextListDefinition*                      LeftSideDef;                                   // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      EmptySlotColor;                                // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CardCellWidth;                                 // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CardCellHeight;                                // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CardTextureWidth;                              // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CardTextureHeight;                             // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      Card1ExternalTextureMap;                       // 0x0120 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HashDisplayGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HealthBarGFxObject
// 0x0008 (0x00D8 - 0x00E0)
class UHealthBarGFxObject : public UGFxObject
{
public:
	int32_t                                            CachedCurrentHealth;                           // 0x00D8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HealthBarGFxObject");
		}

		return uClassPointer;
	};

	void __SetHealth(int32_t CurrentHealth, int32_t MaxHealth);
	void SetHealth(int32_t CurrentHealth, int32_t MaxHealth);
};

// Class WillowGame.HealthStateExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UHealthStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	uint32_t                                           bHealthy : 1;                                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsAtFullHealth : 1;                           // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInjured : 1;                                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDead : 1;                                     // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bIsAtFullHeatlh : 1;                           // 0x0058 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bMisspelledHealthVarMigrated : 1;              // 0x0058 (0x0004) [0x0000000000000000] [0x00000020] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HealthStateExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.HitReactionDefinition
// 0x0000 (0x0058 - 0x0058)
class UHitReactionDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HitReactionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HitRegionHelper
// 0x0010 (0x0058 - 0x0068)
class UHitRegionHelper : public UObject
{
public:
	class TArray<struct FHitRegionDamage>              HitRegionDamageList;                           // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HitRegionHelper");
		}

		return uClassPointer;
	};

	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, class UDamagePipeline* optionalPipeline, const struct FName& optionalModifierName, bool optionalBReplicate, struct FTraceHitInfo& HitInfo);
	void RecordActivatedDamageTriggeredReactionsOnOwner(class AActor* Owner, class UBodyHitRegionDefinition* HitRegion, class TArray<int32_t>& NewlyTriggeredDamageReactions);
	void GetActivatedDamageTriggeredReactionsForOwner(class AActor* Owner, class TArray<struct FName>& OutTriggeredReactions);
	void ResetHitRegionHealth(class AActor* Owner, class UBodyHitRegionDefinition* HitRegion);
	void HealDamageOnHitRegion(class AActor* Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary& DamageSummary);
	struct FName GetBoneNameFromHitComponent(class UPrimitiveComponent* HitComponent, class USkeletalMeshComponent* Mesh);
	class UBodyHitRegionDefinition* GetHitRegionFromInstanceData(class UPrimitiveComponent* HitComponent, struct FInstanceData2& InstanceState);
	class UBodyHitRegionDefinition* GetHitRegionFromBoneName(const struct FName& BoneName, class UBodyHitRegionDefinition* DefaultRegion, class TArray<class UBodyHitRegionDefinition*>& HitRegionList);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, class USkeletalMeshComponent* Mesh, class UBodyHitRegionDefinition* DefaultHitRegion, struct FTraceHitInfo& HitInfo, struct FInstanceData2& InstanceDataState, class TArray<class UBodyHitRegionDefinition*>& HitRegionList);
	void GetHealthValuesForOwner(class AActor* Owner, float& Health, float& MaxHealth);
	void AddDamageToHitRegion(class AActor* Owner, class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, float HitRegionHealthScale, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FBehaviorConsumerHandle& ConsumerHandle, struct FDamageEventSummary& DamageSummary);
	void RecordRecentDamageToHitRegion(class UBodyHitRegionDefinition* HitRegion, float Damage);
	void PlayHealing(class UIHitRegionConsumer* Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int32_t HealIndex, class AController* InstigatedBy);
	void PlayDamage(class UIHitRegionConsumer* Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int32_t DamageIndex, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitMomentum, bool bDead);
	void PlayReplicatedDamage(class UIHitRegionConsumer* Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int32_t DamageIndices, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitMomentum);
	void GetHitRegionHealthValues(class AActor* Owner, class UBodyHitRegionDefinition* HitRegion, float HitRegionHealthMultiplier, float& Health, float& MaxHealth);
};

// Class WillowGame.HUDDefinition
// 0x00B8 (0x0058 - 0x0110)
class UHUDDefinition : public UGBXDefinition
{
public:
	int32_t                                            MaxDamageIndicators;                           // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DamageIndicatorLifetime;                       // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ItemCardAwarenessRange;                        // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PickupRange;                                   // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CompassIconScaleMax;                           // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CompassIconScaleMin;                           // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CompassIconScaleMaxRange;                      // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CompassIconScaleMinRange;                      // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributePresentationDefinition*            CustomAttributePresentation;                   // 0x0078 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              MaximumPainRotation;                           // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaximumPainOffset;                             // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaximumPainFOV;                                // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaximumDamage;                                 // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PainLength;                                    // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         ModularHUDMovieDefinition;                     // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         HUDMovieDefinition;                            // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         StatusMenuDefinition;                          // 0x00A8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            QUICKSLOT_SELECTED;                            // 0x00B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            QUICKSLOT_LOCKED;                              // 0x00B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            QUICKSLOT_AVAILABLE;                           // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         P1QuickSlotTextures;                           // 0x00C0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FName>                         P2QuickSlotTextures;                           // 0x00D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            QUICKSLOT_TEX_WIDTH;                           // 0x00E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            QUICKSLOT_TEX_HEIGHT;                          // 0x00E4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       P1ItemCardTexture;                             // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       P2ItemCardTexture;                             // 0x00F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       PlayerNameBone;                                // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlayerNameHeightOffset;                        // 0x0100 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HealthAnimationTime;                           // 0x0104 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    AutosaveAkEvent;                               // 0x0108 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDScalingAnchorDefinition
// 0x0008 (0x0058 - 0x0060)
class UHUDScalingAnchorDefinition : public UGBXDefinition
{
public:
	struct FVector2D                                   AnchorPosition;                                // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDScalingAnchorDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IAIBehavior
// 0x0000 (0x0058 - 0x0058)
class UIAIBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IAIBehavior");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IAnimProvider
// 0x0000 (0x0058 - 0x0058)
class UIAnimProvider : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IAnimProvider");
		}

		return uClassPointer;
	};

	void GetAnims(class TArray<class UGearboxAnimDefinition*>& OutAnims);
};

// Class WillowGame.IAttachableActor
// 0x0000 (0x0058 - 0x0058)
class UIAttachableActor : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IAttachableActor");
		}

		return uClassPointer;
	};

	class AActor* GetAttachedToActor();
	struct FVector GetAttachmentNormal();
	void AttachToActor(class AActor* ActorToAttachTo, const struct FVector& HitNormal, const struct FVector& HitLocation, const struct FName& BoneName);
	bool IsAttached();
};

// Class WillowGame.IAttributeEffectBehavior
// 0x0000 (0x0058 - 0x0058)
class UIAttributeEffectBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IAttributeEffectBehavior");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IBehaviorAliasProvider
// 0x0000 (0x0058 - 0x0058)
class UIBehaviorAliasProvider : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IBehaviorAliasProvider");
		}

		return uClassPointer;
	};

	class UBehaviorAliasLookupDefinition* BehaviorAlias_GetLookupDefinition();
};

// Class WillowGame.IChallengeRecipient
// 0x0000 (0x0058 - 0x0058)
class UIChallengeRecipient : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IChallengeRecipient");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IChangeUsabilityBehavior
// 0x0000 (0x0058 - 0x0058)
class UIChangeUsabilityBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IChangeUsabilityBehavior");
		}

		return uClassPointer;
	};

	void Behavior_ChangeUsabilityCost(EChangeStatus ChangeType, ECurrencyType CostType, int32_t CostAmount, EUsabilityType UsedType);
	void Behavior_ChangeUsability(EChangeStatus ChangeType, class UPrimitiveComponent* UsedComponent, EUsabilityType UsedType);
};

// Class WillowGame.IDamageable
// 0x0000 (0x0058 - 0x0058)
class UIDamageable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDamageable");
		}

		return uClassPointer;
	};

	EDamageSurfaceType GetDamageSurfaceTypeFromHit(struct FTraceHitInfo& HitInfo);
	float GetIntrinsicArmor();
	void OnShieldDepleted(class AController* DamageInstigator, EDamageType DamageType);
	void SetShieldStrength(float ShieldValue, bool optionalBResetRegeneration);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	void NotifyDamageTaken(struct FDamageEventSummary& DamageSummary);
};

// Class WillowGame.IDamageSurface
// 0x0000 (0x0058 - 0x0058)
class UIDamageSurface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDamageSurface");
		}

		return uClassPointer;
	};

	bool IsFullyArmored();
	EDamageSurfaceType GetDamageSurfaceTypeFromHit(struct FTraceHitInfo& HitInfo);
	EDamageSurfaceType GetDefaultDamageSurfaceType();
};

// Class WillowGame.IDesignerAttributeProvider
// 0x0000 (0x0058 - 0x0058)
class UIDesignerAttributeProvider : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDesignerAttributeProvider");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IDlcLicensableObject
// 0x0000 (0x0058 - 0x0058)
class UIDlcLicensableObject : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDlcLicensableObject");
		}

		return uClassPointer;
	};

	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
};

// Class WillowGame.IDlcLicenseObject
// 0x0000 (0x0058 - 0x0058)
class UIDlcLicenseObject : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDlcLicenseObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IDrunkenProjectile
// 0x0000 (0x0058 - 0x0058)
class UIDrunkenProjectile : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDrunkenProjectile");
		}

		return uClassPointer;
	};

	void SetDrunkenRandomNumberSeed(int32_t RandomNumberSeed);
};

// Class WillowGame.IDynamicObstacle
// 0x0000 (0x0058 - 0x0058)
class UIDynamicObstacle : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IDynamicObstacle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IExtraImpactEffects
// 0x0000 (0x0058 - 0x0058)
class UIExtraImpactEffects : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IExtraImpactEffects");
		}

		return uClassPointer;
	};

	void PlayExtraImpactEffects(EBulletFromClip BulletFromClip, struct FImpactInfo& InImpactInfo);
	void SetExtraImpactEffect(EBulletFromClip BulletFromClip, class UWillowImpactDefinition* Definition);
};

// Class WillowGame.IFireShotBehavior
// 0x0000 (0x0058 - 0x0058)
class UIFireShotBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IFireShotBehavior");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IFocusable
// 0x0000 (0x0058 - 0x0058)
class UIFocusable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IFocusable");
		}

		return uClassPointer;
	};

	struct FVector GetFocusScreenOffset();
	float GetFocusRadius();
	struct FVector GetFocusLocation();
	void EndFocus(class APawn* User);
	void BeginFocus(class APawn* User);
};

// Class WillowGame.IGFxMenuScreenTickable
// 0x0000 (0x0058 - 0x0058)
class UIGFxMenuScreenTickable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IGFxMenuScreenTickable");
		}

		return uClassPointer;
	};

	void OnTick();
};

// Class WillowGame.IHealable
// 0x0000 (0x0058 - 0x0058)
class UIHealable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IHealable");
		}

		return uClassPointer;
	};

	void FullyReplenishShields();
	void FullyReplenishLife();
};

// Class WillowGame.IHijackBehavior
// 0x0000 (0x0058 - 0x0058)
class UIHijackBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IHijackBehavior");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IHitRegionConsumer
// 0x0000 (0x0058 - 0x0058)
class UIHitRegionConsumer : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IHitRegionConsumer");
		}

		return uClassPointer;
	};

	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* optionalPipeline, bool optionalBFriendlyNoDamage);
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary& DamageSummary);
	void PlayHealingReaction(struct FDamageReactionData& Data);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData& Data, struct FVector& HitLocation, struct FVector& HitMomentum);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int32_t GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary& DamageSummary);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float& Health, float& MaxHealth);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
};

// Class WillowGame.IHitRegionInfoProvider
// 0x0000 (0x0058 - 0x0058)
class UIHitRegionInfoProvider : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IHitRegionInfoProvider");
		}

		return uClassPointer;
	};

	void GetHitRegions(class TArray<class UBodyHitRegionDefinition*>& Regions, class UBodyHitRegionDefinition*& DefaultRegion);
};

// Class WillowGame.IStatusEffectTarget
// 0x0000 (0x0058 - 0x0058)
class UIStatusEffectTarget : public UIHitRegionInfoProvider
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IStatusEffectTarget");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IInventoryOwner
// 0x0000 (0x0058 - 0x0058)
class UIInventoryOwner : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IInventoryOwner");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IItemCardable
// 0x0000 (0x0058 - 0x0058)
class UIItemCardable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IItemCardable");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ILevelChallengeObject
// 0x0000 (0x0058 - 0x0058)
class UILevelChallengeObject : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ILevelChallengeObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ILiftBehavior
// 0x0000 (0x0058 - 0x0058)
class UILiftBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ILiftBehavior");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ILightProjectileManagerOwner
// 0x0000 (0x0058 - 0x0058)
class UILightProjectileManagerOwner : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ILightProjectileManagerOwner");
		}

		return uClassPointer;
	};

	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
};

// Class WillowGame.IMaterialFadeBehavior
// 0x0000 (0x0058 - 0x0058)
class UIMaterialFadeBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IMaterialFadeBehavior");
		}

		return uClassPointer;
	};

	void Behavior_UseMaterialScalarFadeForGoreDeath(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime, bool bDestroyActorAfterGoreEffect);
	void Behavior_MaterialScalarFade(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime);
};

// Class WillowGame.IMeleeAttacker
// 0x0000 (0x0058 - 0x0058)
class UIMeleeAttacker : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IMeleeAttacker");
		}

		return uClassPointer;
	};

	struct FVector GetMeleeEffectsImpactDirection(const struct FName& RefName);
	bool ShouldIgnoreInstigatorVelocity();
	void GetMeleeState(float& StartTime, float& LastTime, struct FVector& StartLoc, struct FRotator& StartRot);
	bool HasActorAlreadyBeenHitByMelee(class AActor* HitActor);
	void AddActorToListOfHitActors(class AActor* HitActor);
	void EndMeleeOverTime();
	void BeginMeleeOverTime(class UMeleeDefinition* MeleeDefinition, float optionalOverrideEffectsClockFaceDirection, const struct FName& optionalOverrideStartSocket);
	float GetMeleeAttackerMass();
	void GetMeleeTraceSourceLocationAndRotation(struct FVector& OutTraceStart, struct FRotator& OutTraceStartRotation);
	class APawn* GetMeleeInstigator();
	class AActor* GetMeleeTraceSourceActor();
};

// Class WillowGame.IMultitypeScrollingList
// 0x0000 (0x0058 - 0x0058)
class UIMultitypeScrollingList : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IMultitypeScrollingList");
		}

		return uClassPointer;
	};

	void Move(int32_t Delta);
	void SetRendererInfo(int32_t DataIndex, int32_t RendererType, int32_t RendererIndex);
};

// Class WillowGame.InjuredDefinition
// 0x0000 (0x0058 - 0x0058)
class UInjuredDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InjuredDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.INPCBehavior
// 0x0000 (0x0058 - 0x0058)
class UINPCBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.INPCBehavior");
		}

		return uClassPointer;
	};

	class UProjectileDefinition* GetCurrentProjectile();
};

// Class WillowGame.InputActionDefinition
// 0x0030 (0x0058 - 0x0088)
class UInputActionDefinition : public UGBXDefinition
{
public:
	class TArray<class UBehaviorBase*>                 OnBegin;                                       // 0x0058 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnEnd;                                         // 0x0068 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bAlwaysAvailable : 1;                          // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FName                                       ActionName;                                    // 0x007C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputActionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InputBindingsClipGFxObject
// 0x0008 (0x00D8 - 0x00E0)
class UInputBindingsClipGFxObject : public UGFxObject
{
public:
	uint32_t                                           bIsShown : 1;                                  // 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputBindingsClipGFxObject");
		}

		return uClassPointer;
	};

	void SetCustomizeTip(const class FString& Label);
	class UGFxObject* AddKeyData(const class FString& _tag, const class FString& _caption, const class FString& _value);
	void EmptyKeyData();
	void InvalidateKeyData();
	void SetKeybindMode();
	void SetControllerMode(const class FString& Label);
	void _SetVisible(bool bVisible);
};

// Class WillowGame.InputButtonDefinition
// 0x0058 (0x0058 - 0x00B0)
class UInputButtonDefinition : public UGBXDefinition
{
public:
	struct FName                                       ButtonName;                                    // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      DisplayTextXbox;                               // 0x0060 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      DisplayTextPlaystation;                        // 0x0070 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      DisplayTextPC;                                 // 0x0080 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      DisplayTextPC360;                              // 0x0090 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      DisplayTextVita;                               // 0x00A0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputButtonDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InputContextDefinition
// 0x0020 (0x0058 - 0x0078)
class UInputContextDefinition : public UGBXDefinition
{
public:
	class TArray<class UInputActionDefinition*>        InputActions;                                  // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UInputSetDefinition*>           InputSets;                                     // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputContextDefinition");
		}

		return uClassPointer;
	};

	bool ContainsInputAction(class UInputActionDefinition* Action);
};

// Class WillowGame.WillowPlayerController
// 0x0770 (0x0710 - 0x0E80)
class AWillowPlayerController : public AGearboxPlayerController
{
public:
	struct FPointer                                    VfTable_IIUpdatePostProcessOverride;           // 0x0710 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IISkillBehavior;                       // 0x0718 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIGFxMovieLocator;                     // 0x0720 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPlayerBehavior;                      // 0x0728 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIScreenParticle;                      // 0x0730 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIChallengeRecipient;                  // 0x0738 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFlagProvider;                        // 0x0740 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITinnitusTarget;                      // 0x0748 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIStreamingDataEvent;                  // 0x0750 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_FCallbackEventDevice;                  // 0x0758 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class AWillowPlayerStateInfo*                      WillowPSI;                                     // 0x0760 (0x0008) [0x0000000000002000] (CPF_Transient)
	EWeaponHand                                        WeaponHandPreference;                          // 0x0768 (0x0001) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	EWeaponHand                                        WeaponHand;                                    // 0x0769 (0x0001) [0x0000000000000000]               
	uint8_t                                            bCachedCanBeUsed[0x2];                         // 0x076A (0x0002) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            bCachedHasPrompt[0x2];                         // 0x076C (0x0002) [0x0000000000002000] (CPF_Transient)
	EThreePlayerSplitDirectionOptions                  PreferredThreePlayerSplit;                     // 0x076E (0x0001) [0x0000000000000000]               
	EBackButtonScreen                                  LastActiveStatusMenuScreen;                    // 0x076F (0x0001) [0x0000000000000000]               
	EBackButtonScreen                                  QuickAccessScreen;                             // 0x0770 (0x0001) [0x0000000000000000]               
	EBackButtonScreen                                  ContextualPromptScreen;                        // 0x0771 (0x0001) [0x0000000000000000]               
	EMissionSortType                                   LastMissionSortType;                           // 0x0772 (0x0001) [0x0000000000000000]               
	EOnlineMessageType                                 CurrentOnlineMessageType;                      // 0x0773 (0x0001) [0x0000000000000000]               
	uint32_t                                           bCenteredWeaponFire : 1;                       // 0x0774 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bIsTyping : 1;                                 // 0x0774 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAlwaysLookDownCamera : 1;                     // 0x0774 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bViewingThirdPersonMenu : 1;                   // 0x0774 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bSuppressingThirdPersonMenu : 1;               // 0x0774 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bLandingShake : 1;                             // 0x0774 (0x0004) [0x0000000000044000] [0x00000020] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bHideAmmoOnHUD : 1;                            // 0x0774 (0x0004) [0x0000000000000020] [0x00000040] (CPF_Net)
	uint32_t                                           bHideCompassOnHUD : 1;                         // 0x0774 (0x0004) [0x0000000000000020] [0x00000080] (CPF_Net)
	uint32_t                                           bHideSkillsOnHUD : 1;                          // 0x0774 (0x0004) [0x0000000000000020] [0x00000100] (CPF_Net)
	uint32_t                                           bHideXPOnHUD : 1;                              // 0x0774 (0x0004) [0x0000000000000020] [0x00000200] (CPF_Net)
	uint32_t                                           HasStartedVehicleCameraAction : 1;             // 0x0774 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bSuspendHUDReInitOnPossession : 1;             // 0x0774 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bPerformingMeleeAttack : 1;                    // 0x0774 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bThrowingGrenade : 1;                          // 0x0774 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bConsoleController : 1;                        // 0x0774 (0x0004) [0x0000000000000020] [0x00004000] (CPF_Net)
	uint32_t                                           bDisableEchoVideos : 1;                        // 0x0774 (0x0004) [0x0000000000004000] [0x00008000] (CPF_Config)
	uint32_t                                           ShouldDisplaySkillTooltip : 1;                 // 0x0774 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           SummedDamageOnlyAffectedShield : 1;            // 0x0774 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bHUDDamageIndicatorAdded : 1;                  // 0x0774 (0x0004) [0x0000000000002000] [0x00040000] (CPF_Transient)
	uint32_t                                           bShowBasicPlayerDebugInfo : 1;                 // 0x0774 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bDebugDisplayActorInfo : 1;                    // 0x0774 (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	uint32_t                                           bDebugDisplayLocked : 1;                       // 0x0774 (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	uint32_t                                           bShowDenInfo : 1;                              // 0x0774 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bWasActionSkillRunning : 1;                    // 0x0774 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bWasHealthy : 1;                               // 0x0774 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bWasCinematic : 1;                             // 0x0774 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bReadyForCommit : 1;                           // 0x0774 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bReadyForPlay : 1;                             // 0x0774 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bPendingZoom : 1;                              // 0x0774 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bDoDOFOnReload : 1;                            // 0x0774 (0x0004) [0x0000000000044000] [0x20000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bViewPointDirty : 1;                           // 0x0774 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bEnableGamepadWalkRunMovement : 1;             // 0x0774 (0x0004) [0x0000000000000000] [0x80000000] 
	uint32_t                                           bForceInputContextUpdate : 1;                  // 0x0778 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bIsTargetingSomething : 1;                     // 0x0778 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bWantsToShowPauseMenu : 1;                     // 0x0778 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bWantsToSprint : 1;                            // 0x0778 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bClientIsSprinting : 1;                        // 0x0778 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bPressedSprint : 1;                            // 0x0778 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bSaveGameLoaded : 1;                           // 0x0778 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bSaveBeforeInviteJoin : 1;                     // 0x0778 (0x0004) [0x0000000000004000] [0x00000080] (CPF_Config)
	uint32_t                                           bWriteProfileInProgress : 1;                   // 0x0778 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           CurrentbEchoProcessingEnabled : 1;             // 0x0778 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bCurrentEchoPSCDesiredVisibility : 1;          // 0x0778 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bAwaitingRespawnDontSetCinematicMode : 1;      // 0x0778 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bHideTeleportTunnel : 1;                       // 0x0778 (0x0004) [0x0000000000004000] [0x00001000] (CPF_Config)
	uint32_t                                           bDisplayTradeIcon : 1;                         // 0x0778 (0x0004) [0x0000000000002020] [0x00002000] (CPF_Net | CPF_Transient)
	uint32_t                                           bDisplayTradeDisabledIcon : 1;                 // 0x0778 (0x0004) [0x0000000000002020] [0x00004000] (CPF_Net | CPF_Transient)
	uint32_t                                           AutoAimSetting : 1;                            // 0x0778 (0x0004) [0x0000000000002000] [0x00008000] (CPF_Transient)
	uint32_t                                           bZoomSnapToTargetEnabled : 1;                  // 0x0778 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bCrouchToggle : 1;                             // 0x0778 (0x0004) [0x0000000000004000] [0x00020000] (CPF_Config)
	uint32_t                                           bZoomToggle : 1;                               // 0x0778 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bUseDriftCameraLock : 1;                       // 0x0778 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bUseInvertedReverseSteering : 1;               // 0x0778 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bItemRotationNew : 1;                          // 0x0778 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bPreferVerticalSplit : 1;                      // 0x0778 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bResurrectAll : 1;                             // 0x0778 (0x0004) [0x0000000000000020] [0x00800000] (CPF_Net)
	uint32_t                                           bShowDelayedRewardForAllMissions : 1;          // 0x0778 (0x0004) [0x0000000000004000] [0x01000000] (CPF_Config)
	uint32_t                                           bUseRealTimeForWeaponZoom : 1;                 // 0x0778 (0x0004) [0x0000000000002000] [0x02000000] (CPF_Transient)
	uint32_t                                           bAllowPerShotForceFeedback : 1;                // 0x0778 (0x0004) [0x0000000000004000] [0x04000000] (CPF_Config)
	uint32_t                                           bAwaitingFastForwardPrompt : 1;                // 0x0778 (0x0004) [0x0000000000002000] [0x08000000] (CPF_Transient)
	uint32_t                                           bWantsToDisableLoadingMovie : 1;               // 0x0778 (0x0004) [0x0000000000002000] [0x10000000] (CPF_Transient)
	uint32_t                                           bPlayingTeleporterSound : 1;                   // 0x0778 (0x0004) [0x0000000000002020] [0x20000000] (CPF_Net | CPF_Transient)
	uint32_t                                           bWaitingForAsyncCharacterLoad : 1;             // 0x0778 (0x0004) [0x0000000000002000] [0x40000000] (CPF_Transient)
	uint32_t                                           bCustomizationUnlocksInitialized : 1;          // 0x0778 (0x0004) [0x0000000000002000] [0x80000000] (CPF_Transient)
	uint32_t                                           bAsyncInProgress : 1;                          // 0x077C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSetOnlineStatusNextTick : 1;                  // 0x077C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bHasPausedGameOnServer : 1;                    // 0x077C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bCloseHUDNextTick : 1;                         // 0x077C (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bTextureMovieIsPaused : 1;                     // 0x077C (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bStopgapBlockForDeferredMovies : 1;            // 0x077C (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bWasSprintingInStatePlayerWalking : 1;         // 0x077C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bWasSprintingInStatePlayerWalking_StartFire : 1;// 0x077C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bCinematicHideHUD : 1;                         // 0x077C (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	class UWillowAutoAimStrategy*                      AutoAimStrategy;                               // 0x0780 (0x0008) [0x0000000000000000]               
	class UClass*                                      AutoAimStrategyClass;                          // 0x0788 (0x0008) [0x0000000000000000]               
	float                                              LastCameraTimeStamp;                           // 0x0790 (0x0004) [0x0000000000000000]               
	class AActor*                                      CalcViewActor;                                 // 0x0798 (0x0008) [0x0000000000000000]               
	class APawn*                                       CalcViewPawn;                                  // 0x07A0 (0x0008) [0x0000000000000000]               
	struct FVector                                     CalcViewActorLocation;                         // 0x07A8 (0x000C) [0x0000000000000000]               
	struct FVector                                     CalcViewLocation;                              // 0x07B4 (0x000C) [0x0000000000000000]               
	struct FRotator                                    CalcViewRotation;                              // 0x07C0 (0x000C) [0x0000000000000000]               
	int32_t                                            LastVehicleSeatIndex;                          // 0x07CC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastVehicleFOV;                                // 0x07D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x07D8 (0x0008) [0x0000000100000020] (CPF_Net)     
	class UPlayerInteractionClient*                    InteractionClient;                             // 0x07E0 (0x0008) [0x0000000000000000]               
	class UIUsable*                                    CurrentUsableObject_Object;                    // 0x07E8 (0x0008) [0x0000000000000020] (CPF_Net)
	class UIUsable*                                    CurrentUsableObject_Interface;                 // 0x07F0 (0x0008) [0x0000000000000020] (CPF_Net)     
	struct FInteractionIconWithOverrides               CurrentInteractionIcon[0x2];                   // 0x07F8 (0x0040) [0x0000000100000020] (CPF_Net)     
	class UIFocusable*                                 FocusObject_Object;                            // 0x0838 (0x0008) [0x0000000000000000] 
	class UIFocusable*                                 FocusObject_Interface;                         // 0x0840 (0x0008) [0x0000000000000000]               
	float                                              FocusFOVAngle;                                 // 0x0848 (0x0004) [0x0000000000000000]               
	float                                              FocusCamReturnTime;                            // 0x084C (0x0004) [0x0000000000000000]               
	struct FRotator                                    FocusCamRot;                                   // 0x0850 (0x000C) [0x0000000000000000]               
	struct FVector                                     FocusCamLoc;                                   // 0x085C (0x000C) [0x0000000000000000]               
	float                                              FocusCamTimestamp;                             // 0x0868 (0x0004) [0x0000000000000000]               
	struct FVector                                     SummedDamageDirection;                         // 0x086C (0x000C) [0x0000000000000000]               
	struct FReplicatedDamageScreenParticle             RecentDamageScreenParticle;                    // 0x0878 (0x0090) [0x0000000100402020] (CPF_Net | CPF_Transient | CPF_NeedCtorLink)
	struct FName                                       DebugTraceHitActor;                            // 0x0908 (0x0008) [0x0000000000000000]               
	struct FName                                       DebugTraceHitActorSubLevel;                    // 0x0910 (0x0008) [0x0000000000000000]               
	int32_t                                            DebugTraceDistanceUnits;                       // 0x0918 (0x0004) [0x0000000000000000]               
	float                                              FOVModifierSpeed;                              // 0x091C (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              FOVModifierSpeedBaseValue;                     // 0x0920 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            FOVModifierSpeedModifierStack;                 // 0x0928 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              CachedFOVAngle;                                // 0x0938 (0x0004) [0x0000000000000000]               
	float                                              LastFOVAngleUpdateTime;                        // 0x093C (0x0004) [0x0000000000000000]               
	float                                              FOVAspectRatioScalar_View;                     // 0x0940 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FOVAspectRatioScalar_Fore;                     // 0x0944 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FOVScalar_VertSplit_View;                      // 0x0948 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVScalar_VertSplit_Fore;                      // 0x094C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVScalar_HorzSplit_View;                      // 0x0950 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVScalar_HorzSplit_Fore;                      // 0x0954 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            LastCheckedGameFrame;                          // 0x0958 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CachedSafeAreaMultiplier;                      // 0x095C (0x0004) [0x0000000000002000] (CPF_Transient)
	class UWillowAIDebugCamera*                        WillowAIDebugCam;                              // 0x0960 (0x0008) [0x0000000000002000] (CPF_Transient)
	class APawn*                                       LastPawn;                                      // 0x0968 (0x0008) [0x0000000000000000]               
	class TArray<struct FPostProcessOverlayInfo>       PostProcessOverlayList;                        // 0x0970 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              PostProcessDurationMultiplier;                 // 0x0980 (0x0004) [0x4000000100000020] (CPF_Net)     
	class UUberPostProcessEffect*                      UberDOFEffect;                                 // 0x0988 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InitialDOFFocusDistance;                       // 0x0990 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FPostProcessChainRecord>       PostProcessChainRecords;                       // 0x0998 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FName                                       LostShieldHealthParamName;                     // 0x09A8 (0x0008) [0x0000000000000000]               
	class UMaterialInstance*                           LostShieldMaterialInstanceConstant;            // 0x09B0 (0x0008) [0x0000000000000000]               
	float                                              RcpWeaponSpread;                               // 0x09B8 (0x0004) [0x4000000000000000]               
	int32_t                                            PlayerMovementType;                            // 0x09BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ScorpioDamageTypeSelector;                     // 0x09C0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ScorpioDamageTypeSelectorBaseValue;            // 0x09C4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ScorpioDamageTypeSelectorModifierStack;        // 0x09C8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            LoadedCharPlayTime;                            // 0x09D8 (0x0004) [0x0000000000000000]               
	class UWillowGFxDialogBox*                         ControllerRemovedDlg;                          // 0x09E0 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FPlatformUserId                             ControllerRemovedUserId;                       // 0x09E8 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FPlatformUserId                             ControllerPairingUserId;                       // 0x09F0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class FString>                        LoadedLevelsList;                              // 0x09F8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UWillowGFxDialogBox*                         SaveProfileDlg;                                // 0x0A08 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              SaveProfileDlgMinTime;                         // 0x0A10 (0x0004) [0x0000000000004000] (CPF_Config)  
	class AActor*                                      ActiveEchoActor;                               // 0x0A18 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FAkPlayingInfo                              ActiveEchoPlayingInfo;                         // 0x0A20 (0x0010) [0x0000000000082000] (CPF_Transient | CPF_Component)
	class AActor*                                      CurrentEchoActor;                              // 0x0A30 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UDialogEmoteDefinition*                      CurrentEchoEmote;                              // 0x0A38 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UTextureMovie*                               CurrentEchoMovie;                              // 0x0A40 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UParticleSystem*                             CurrentEchoParticleSystem;                     // 0x0A48 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UParticleSystemComponent*                    CurrentEchoPSC;                                // 0x0A50 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              CurrentEchoPSCFadeStartTime;                   // 0x0A58 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UTextureMovie*                               CurrentEchoVideoMovie;                         // 0x0A60 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentEchoOpacity;                            // 0x0A68 (0x0004) [0x4000000000000000]               
	float                                              EchoPSCFadeTime;                               // 0x0A6C (0x0004) [0x0000000000004000] (CPF_Config)  
	class TArray<struct FAppliedAttributeEffect>       SprintModifiers;                               // 0x0A70 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              SprintFOVAngle;                                // 0x0A80 (0x0004) [0x0000000000000000]               
	float                                              SprintDesiredFOV;                              // 0x0A84 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentStreamingDebugPage;                     // 0x0A88 (0x0004) [0x0000000000000000]               
	class TArray<struct FScreenParticleRecord>         ScreenParticleRecords;                         // 0x0A90 (0x0010) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	class TArray<struct FScreenParticleModifier>       HoldingCellScreenParticleModifiers;            // 0x0AA0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UMaterialInterface*                          HoldingCellMaterialInterface;                  // 0x0AB0 (0x0008) [0x0000000000000000]               
	struct FName                                       HoldingCellMatParamName;                       // 0x0AB8 (0x0008) [0x0000000000000000]               
	float                                              LoadingMovieShutoffTime;                       // 0x0AC0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              UsableObjectUpdateTime;                        // 0x0AC4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UIUsable*                                    CachedUsableObject_Object;                     // 0x0AC8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UIUsable*                                    CachedUsableObject_Interface;                  // 0x0AD0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UPrimitiveComponent*                         CachedUsableHitComponent;                      // 0x0AD8 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              UsableObjectUpdateRate;                        // 0x0AE0 (0x0004) [0x0000000000000000]               
	class APawnInteractionProxy*                       CachedTradeProxy;                              // 0x0AE8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              UseProgressStartTime;                          // 0x0AF0 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FReplicatedProgressBarData                  UseProgressBar;                                // 0x0AF4 (0x000C) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class UWillowGFxUIManager*                         GFxUIManager;                                  // 0x0B00 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxMovieDefinition*                         PauseMenuDefinition;                           // 0x0B08 (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      BinkLoadingMovieName;                          // 0x0B10 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      ScaleformLoadingMovieName;                     // 0x0B20 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	float                                              LastZoomTime;                                  // 0x0B30 (0x0004) [0x0000000000000000]               
	float                                              HUDScaleX;                                     // 0x0B34 (0x0004) [0x0000000000000000]               
	float                                              HUDScaleY;                                     // 0x0B38 (0x0004) [0x0000000000000000]               
	float                                              HUDScaleE;                                     // 0x0B3C (0x0004) [0x0000000000000000]               
	class UObject*                                     ContextualPromptContextObject;                 // 0x0B40 (0x0008) [0x0000000000000000]               
	float                                              ContextualPromptDuration;                      // 0x0B48 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MissionRestrictionTextDuration;                // 0x0B4C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ClientLoadingMovieShutoffDelay;                // 0x0B50 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FVector                                     TransitionEntryLocation;                       // 0x0B54 (0x000C) [0x0000000000000000]               
	class TArray<struct FOnlineFriend>                 currentFriendsList;                            // 0x0B60 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FRegionGameStageData>          RegionGameStages;                              // 0x0B70 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     CurrentThirdPersonMenuCamLoc;                  // 0x0B80 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    CurrentThirdPersonMenuCamRot;                  // 0x0B8C (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentThirdPersonMenuCamFOV;                  // 0x0B98 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class APlayerStandIn*>                PlayerStandIns;                                // 0x0BA0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FTaggedGFxMovie>               TaggedGFxMovies;                               // 0x0BB0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      DefaultMapName;                                // 0x0BC0 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UWillowGFxThirdPersonMovie*                  CurrentThirdPersonMovie;                       // 0x0BD0 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FFlagProviderData                           FlagProviderData;                              // 0x0BD8 (0x0070) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              TinnitusStrength;                              // 0x0C48 (0x0004) [0x4000000000000000]               
	struct FVector                                     CustomWaypointLocation;                        // 0x0C4C (0x000C) [0x0000000000002000] (CPF_Transient)
	class FString                                      IntroMovieName;                                // 0x0C58 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	float                                              WaitTimeToDisableLoadingMovie;                 // 0x0C68 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UTextChatGFxMovie*                           TextChatMovie;                                 // 0x0C70 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FAkPlayingInfo                              VOVolumePlayInfo;                              // 0x0C78 (0x0010) [0x0000000000082000] (CPF_Transient | CPF_Component)
	struct FAkPlayingInfo                              SFXVolumePlayInfo;                             // 0x0C88 (0x0010) [0x0000000000082000] (CPF_Transient | CPF_Component)
	struct FAkPlayingInfo                              MusicVolumePlayInfo;                           // 0x0C98 (0x0010) [0x0000000000082000] (CPF_Transient | CPF_Component)
	struct FAkPlayingInfo                              TeleporterSoundInfo;                           // 0x0CA8 (0x0010) [0x0000000000082000] (CPF_Transient | CPF_Component)
	class UClass*                                      TravelToSearchClass;                           // 0x0CB8 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FPlatformSessionData                        TravelToPlatformSpecificInfo;                  // 0x0CC0 (0x0084) [0x0000000000002000] (CPF_Transient)
	class TArray<class UResourcePoolDefinition*>       ClientExpectedResourcePools;                   // 0x0D48 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AWillowSpectatorPoint*                       CurrentSpectatorPoint;                         // 0x0D58 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FCustomizationUnlockData>      CustomizationUnlocks;                          // 0x0D60 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FMap_Mirror                                 UnlockedCustomizationCountMap;                 // 0x0D70 (0x0050) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class TArray<struct FLockoutData>                  LockoutList;                                   // 0x0DC0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ClientLockoutTimeAdjust;                       // 0x0DD0 (0x0004) [0x0000000000000000]               
	float                                              EasterEgg1;                                    // 0x0DD4 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg2;                                    // 0x0DD8 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg3;                                    // 0x0DDC (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg4;                                    // 0x0DE0 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg5;                                    // 0x0DE4 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg6;                                    // 0x0DE8 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg7;                                    // 0x0DEC (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg8;                                    // 0x0DF0 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg9;                                    // 0x0DF4 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EasterEgg10;                                   // 0x0DF8 (0x0004) [0x4000000000002000] (CPF_Transient)
	class TArray<int32_t>                              LevelChallengeUnlocks;                         // 0x0E00 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FOneOffLevelChallengeData>     OneOffLevelChallengeCompletion;                // 0x0E10 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            NumChallengePrestiges;                         // 0x0E20 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SavedMapScaleVal;                              // 0x0E24 (0x0004) [0x0000000000002000] (CPF_Transient)
	class USkillDefinition*                            SavedSkillTreeSkill;                           // 0x0E28 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SavedBranchNavPref;                            // 0x0E30 (0x0004) [0x0000000000000000]               
	int32_t                                            SavedCellNavPref;                              // 0x0E34 (0x0004) [0x0000000000000000]               
	int32_t                                            NumQuickSlotsFlourished;                       // 0x0E38 (0x0004) [0x0000000000000000]               
	class UWillowPauseTicker*                          PauseTicker;                                   // 0x0E40 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UClass*                                      GFxUIManagerClass;                             // 0x0E48 (0x0008) [0x0000000000000000]               
	int32_t                                            CharacterLoadMessageId;                        // 0x0E50 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            GameMessageId;                                 // 0x0E54 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ProfileMessageId;                              // 0x0E58 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            UpdatingSessionMessageId;                      // 0x0E5C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             SetPauseDelegate;                              // 0x0E60 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UGearboxGFxMovie*                            PauseMovie;                                    // 0x0E70 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0x8];                            // 0x0E78 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerController");
		}

		return uClassPointer;
	};

	void GiveCurrency(ECurrencyType FormOfCurrency, int32_t Amount);
	void GiveCash(int32_t Amount);
	void DemiGod(bool optionalBEnable);
	void God();
	void SaveProfileTimerComplete();
	void SimulateInputButton(const struct FName& ButtonName, ESimulatedInputEvent EventType);
	int32_t GetExpLevel();
	void Leviathan_InviteFailed(const struct FPlatformUserId& UserId, const class FString& Reason);
	void Leviathan_AcceptInviteStrict(const struct FPlatformUserId& UserId);
	bool ShouldSkipTitleScreenStartupProcess();
	void ResetFocusCam();
	struct FName TranslateLevelToBaseName(const struct FName& LevelName);
	void eventTakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& HitDirection, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	bool AllowTextMessage(const class FString& msg);
	void ResetViewKick();
	void ResetViewWandering(float optionalSmoothInTime);
	void RandomizeFractalWanderPoints();
	void InitializeViewWanderingFor(class UWeaponTypeDefinition* WeaponDef);
	void UnlockCustomizationListFromKeyedPool(const class TArray<class UKeyedItemPoolDefinition*>& KeyedPoolList);
	void UnlockLoyalCustomerCustomizations();
	void OnEntitlementsUpdated(class UGearboxAccountData* GbxAccount);
	void OnSparkInitialized(const struct FPlatformUserId& InUserId, EInitializedResult InitializedResult, class UGearboxData* Data);
	void ServerSkipMatinee();
	void SkipMatinee();
	void Behavior_Destroy();
	void ServerComputeLockoutTimeAdjust(int32_t ClientPackedSystemTime);
	void eventClientSetLockout(class ULockoutDefinition* LockoutDef);
	int32_t ComputeLockoutTimeAdjust(int32_t ClientPackedSystemTime);
	void SetLockout(class ULockoutDefinition* LockoutDef);
	void eventClientStartFade(float InFadeOpacity, float InFadeDuration, const struct FColor& optionalInFadeColor);
	void DisplaySubtitle(const class FString& msg);
	void OnCausePlayerDeath(class USeqAct_CausePlayerDeath* inAction);
	void eventCausePlayerDeath(bool bInstaKill);
	void UnregisterPlayerStandIn(class APlayerStandIn* StandIn);
	void RegisterPlayerStandIn(class APlayerStandIn* StandIn);
	void ClientCloseProjectedMenus();
	void ShowMarketplaceUI(const class FString& optionalOfferId);
	void ConditionalShowHUDForAllPlayers();
	void HideAsyncCharacterLoadDialog();
	void ShowAsyncCharacterLoadDialog();
	void ClearWaitingForAsyncCharacterLoadAndHideBusyDialog();
	void SetWaitingForAsyncCharacterLoadAndShowBusyDialog();
	static bool AreAnyPlayersWaitingOnAsyncCharacterLoad();
	bool ErrorDialogClicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	void HideOptionsMovie();
	void eventNotifyUIRefresh();
	void EndUpdatingSession();
	void BeginUpdatingSession();
	void OnUpdateComplete(const struct FName& SessionName, EOnlineSubsystemResult Result);
	void ServerViewPrevSpectatorPoint();
	void ViewPrevSpectatorPoint();
	void ServerViewNextSpectatorPoint();
	void ViewNextSpectatorPoint();
	void ServerViewFirstSpectatorPoint();
	void ViewFirstSpectatorPoint();
	class UGFxMoviePlayer* GetAGFxMovie();
	class UIGFxUIManager* GetAGFxUIManager();
	class AWillowMind* GetAWillowMind();
	class AWillowPlayerController* GetAWillowPlayerController();
	class AController* GetABaseController();
	void eventPreClientTravel(const class FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel);
	void eventGetSeamlessTravelActorList(bool bToEntry, class TArray<class AActor*>& ActorList);
	void eventClientForceCancelMapChange();
	void CinematicAutoSkip(const class FString& optionalArg);
	bool ToggleCinematicAutoSkip();
	void SetCinematicAutoSkip(bool bInSkip);
	void DebugEnablePCSplitscreen(bool bEnabled);
	void OnJoinTravelToSessionComplete(const struct FName& SessionName, EOnlineSubsystemResult Result);
	void OnDestroyForTravelComplete(const struct FName& SessionName, EOnlineSubsystemResult Result);
	void ClientTravelToSession(const struct FName& SessionName, class UClass* SearchClass, const struct FPlatformSessionData& PlatformSpecificInfo);
	void StopLoopingSound(const struct FAkPlayingInfo& Sound, class UAkEvent* StopAkEvent);
	bool IsSoundPlaying(const struct FAkPlayingInfo& Sound);
	void StopMusicVolumeSound();
	void PlayMusicVolumeSound();
	void StopSFXVolumeSound();
	void PlaySFXVolumeSound();
	void StopVOVolumeSound();
	void PlayVOVolumeSound();
	void HideGameMessage();
	void ClientDisplayWaitingMessage(class APlayerReplicationInfo* OtherPri);
	void DisplayGameMessage(EOnlineMessageType MessageType, float Duration, const class FString& Message, const class FString& Subtitle, bool optionalBShowProfileImage);
	void PushToTalkStop();
	void PushToTalkStart();
	void StartTeamTextChat();
	void StartTextChat();
	class UTextChatGFxMovie* GetTextChatMovie();
	void ClientKickedPartyKill();
	void ClientGenericPlayerInitialization();
	void TryRegisterStandIns();
	void SharedPlayerInitialization();
	void GenericPlayerInitialization();
	bool OnFastForward_Clicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	bool CanPromptForFastForward();
	bool eventIsFastForwardPromptValid();
	void eventTryPromptForFastForward();
	void TurnOffCinematicMode();
	class UGFxMoviePlayer* GetModularHUDMovie();
	int32_t GetSkillGradeByDef(class USkillDefinition* SkillDef);
	void eventClientYouNeedThisPackage(const class FString& PackageString);
	void ClientWhatPackagesHaveYou();
	bool CanDrop(class AWillowInventory* Inv);
	void OnUpdatePropertyFOVAngle();
	void DebugDiscoverAllAreasInCurrentMap();
	void eventServerAwardExperienceForWorldDiscovery(class AWorldDiscoveryArea* DiscoveryArea);
	void eventHandleWorldDiscoveryCompletion(class ULevelDependencyList* SourceList);
	void ClientSetCurrentMapFullyExplored();
	void DebugSetFullyExploredMap(const struct FName& MapName);
	void eventActionSkillCooldownComplete();
	void SetUseRealTimeForWeaponZoom(bool bUseRealTime);
	void SetWindowTitle(const class FString& NewTitle);
	void ChangeWindowTitle(const class FString& NewTitle);
	void SaveThirdPersonMenuTabView();
	void ToggleThirdPersonMenuMode();
	void ToggleThirdPersonMenuControl();
	class UWillowGFxThirdPersonMovie* GetThirdPersonMovie();
	bool WantsThirdPersonMenu();
	void NotifyDamageDealt(class APawn* DamagedPawn, struct FDamageEventSummary& DamageSummary);
	void ClientUpdatePosition();
	void PlayUIAkEvent(class UAkEvent* Event);
	bool ResetGameStageForRegion(class URegionDefinition* Region);
	class AWillowPawn* GetAWillowPawn();
	void SetGameStageForRegion(class URegionDefinition* Region, int32_t GameStage);
	int32_t GetGameStageFromRegion(class URegionDefinition* Region);
	void NavMeshWalking();
	void ServerDebugActionSkill();
	void DebugActionSkill();
	void ServerResetCooldown();
	void ResetCooldown();
	bool SelectInputContext();
	struct FName GetCurrentInputContext();
	void UpdateInputContext();
	void SortMarketplaceContentByOfferId(bool optionalBDescending, class TArray<struct FMarketplaceContent>& ContentList);
	void ServerInitClientFlags();
	void ClientFlagSet(const struct FName& ClientFlag, bool optionalBEnable);
	void NotifyDesignerAttribute(const struct FName& Attribute, float Value);
	void GetFullInventory(class TArray<class AWillowInventory*>& FullInv);
	void FastAI();
	void ClientReceiveInteractiveObjectDefinition_HACK(class AWillowInteractiveObject* InteractiveObject, class UInteractiveObjectDefinition* Definition);
	void ServerSendInteractiveObjectDefinition_HACK(class AWillowInteractiveObject* InteractiveObject);
	void MigrateFrontendMovie(class AWillowPlayerController* PreviousPrimaryPC);
	static bool GameHasNonLocalPlayers();
	bool GetFriend(const struct FUniqueNetId& UniqueId, struct FOnlineFriend& out_Friend);
	void SetResurrectionRule();
	void UnpauseEcho();
	void PauseEcho();
	bool SetPause(bool bPause, const struct FScriptDelegate& optionalCanUnpauseDelegate);
	void SetTextureMoviePauseState(bool bShouldPause);
	bool VerifySkillRespec_Clicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	void VerifySkillRespec();
	void ResetPlayerInputToDefault();
	void TestTrainingText(const class FString& optionalTrainingText);
	bool CanUnpauseExternalUI();
	void UpdateAmmoCounts(bool bSilent);
	void ForceUnloadStreamingLevels();
	bool GetFriendByName(const class FString& friendname, struct FOnlineFriend& Friend);
	void eventTeamMessage(class APlayerReplicationInfo* PRI, const class FString& S, const struct FName& Type, float optionalMsgLifeTime);
	void ListNetPackages();
	void ListStations();
	void OnPrimaryPlayerBusyDelay(class USeqAct_PrimaryPlayerBusyDelay* Action);
	void SetActionSkillTime();
	void DumpAIPawns();
	void ServerHurtOthers(int32_t Amount);
	void HurtOthers(int32_t optionalAmount);
	void ServerHurtSelf(int32_t Amount);
	void HurtSelf(int32_t optionalAmount);
	void KillHUD();
	bool CanSetResourcePoolValues(class UClass* ResourcePoolClass);
	class UIResourcePoolProvider* GetResourcePoolProvider();
	void PauseDayCycle();
	bool ShouldAllowExternalUIPause();
	void OnExternalUIChanged(bool bIsOpening);
	void CheckCanPauseFromExternalUINow();
	void MarkLog(const class FString& optionalTagString);
	ELoginStatus eventGetLoginStatus();
	class AWeapon* GetActiveOrBestWeapon();
	void ModalGameMenuClosing();
	void ModalGameMenuOpening();
	void SetViewDistance(int32_t Value);
	void SetGlobalViewDistance(EProfileViewDistanceOptions ViewDistance);
	void SetZoomToggle(bool bEnabled);
	void SetCrouchToggle(bool bEnabled);
	void SetZoomSnapToTarget(bool bEnabled);
	void SetAutoAim(bool bEnabled);
	void eventDisplayCompatDlcAvailable();
	int32_t eventGetSplitscreenIndex();
	int32_t GetCurrentPlaythrough();
	class FString GetCharacterDefaultNameFromClassDefinition(class UPlayerClassDefinition* PlayerClassDef);
	class FString GetCharacterClassDefaultName();
	void GFxMenuClosed();
	void GFxMenuOpened();
	void TickTargets();
	void ResetActionSkill();
	void Behavior_ResetActionSkillCooldown();
	void ConditionalResetInterruptedActionSkill(bool optionalBIsPawnDead);
	void eventClientFindPlayMovie(const struct FName& LevelName);
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	class APawn* GetInstanceDataPawn();
	void ServerUnlockAchievementForAllPlayers(int32_t AchievementId, int32_t MinimumPlayersRequired);
	void Behavior_UnlockAchievementForAllPlayers(int32_t AchievementId, int32_t MinimumPlayersRequired);
	void Behavior_UnlockAchievement(int32_t AchievementId);
	bool IsSprinting();
	void EndSprint();
	void BeginSprint();
	float CalculateInverseFlexibleFOVModifier(float InModifier);
	float CalculateInverseFlexibleFOV(float InVFOV);
	float CalculateFlexibleFOVModifier(float InModifier);
	float CalculateFlexibleFOV(float InVFOV);
	static float GetVerticalDefaultDefaultFOV();
	static float GetDefaultDefaultFOV();
	float eventGetUnmodifiedFOVAngle();
	void StopMovie();
	void PlayMovie(const class FString& optionalMovieName);
	void ServerSendMessageToPlayersW(bool bShouldSendToInstigator, class UClass* SendMsgClass, class APlayerReplicationInfo* PRI);
	void Behavior_SendMessageToPlayersW(bool bShouldSendToInstigator, class UClass* SendMsgClass);
	bool CanReceiveTrainingMessage();
	void eventWarmupPause(bool bDesiredPauseState);
	bool CanUnpauseWarmup();
	void SetLoadingMovieSkipEnabled(bool bEnabled);
	void eventClientPlayBinkMovie(const class FString& MovieName, bool optionalBStreamed, bool optionalBLooping, bool optionalBForceNoSkip);
	void eventWillowClientDisableLoadingMovie();
	void eventWillowClientShowLoadingMovie(const class FString& MovieName, bool bShowMovie, bool optionalBPauseAfterHide, float optionalPauseDuration, float optionalKeepPlayingDuration, bool optionalOverridePreviousDelays, bool optionalNoLooping);
	static void WillowShowLoadingMovie(const class FString& MovieName, bool bShowMovie, bool optionalBPauseAfterHide, float optionalPauseDuration, float optionalKeepPlayingDuration, bool optionalNoLooping);
	void InitializeGFxUIManager();
	void ClientSetHUD(class UClass* newHUDType);
	void ClientGFxStopMovie(const struct FName& MovieTag);
	void ClientGFxPlayMovie(class UGFxMovieDefinition* MovieDefinition, class UObject* optionalOtherObject, const struct FName& optionalMovieTag);
	void ClientGFxChangeState(class UIGFxActorMovie* TargetActor, const struct FName& State, EChangeStatus Change, bool optionalBAllPlayers);
	void ClientDamageShake(int32_t Damage);
	void UpdateVisibilityOfAllActiveScreenParticles();
	bool ScreenParticlesShouldBeVisible();
	void HideScreenParticle(class UParticleSystem* Template, const struct FName& optionalParticleTag, bool optionalBAllowParticleToFinish);
	void ApplyScreenParticleModifiers(class UParticleSystem* Template, const class TArray<struct FScreenParticleModifier>& ScreenParticleModifiers);
	int32_t FindScreenParticleRecordIndexByTag(const struct FName& ParticleTag);
	int32_t FindScreenParticleRecordIndexByTemplate(class UParticleSystem* Template);
	void OnScreenParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void ShowImpactScreenParticle(const struct FScreenParticleInitParams& InitParams, const struct FVector& optionalReferenceLocation, float optionalParticleScale);
	class UParticleSystemComponent* ShowScreenParticle(const struct FScreenParticleInitParams& InitParams, const struct FVector& optionalReferenceLocation, float optionalParticleScale);
	void TickScreenParticleModifiers();
	void NotifyTargetedActionSkillImpact();
	void NotifyPetKilledEnemy();
	void NotifyActionSkillRunTime(int32_t Runtime);
	void eventClientUnlockAvatarAward(EWillowAvatarAwards AvatarAward);
	void eventClientUnlockAchievement(int32_t AchievementId);
	void OnUnlockAchievement(class USeqAct_UnlockAchievement* Action);
	void UnPauseGFxMovie(const class FString& MoviePath);
	void PauseGFxMovie(const class FString& MoviePath);
	void CloseGfxMovie(const class FString& MoviePath);
	void StartPausedGfxMovie(const class FString& MoviePath);
	void PlayGfxMovie(const class FString& MoviePath);
	void PlayGfxMovieDefinition(const class FString& MovieDefinitionName);
	void SetHearOptionalPlayerVO(bool bValue);
	void EnterStartState();
	void InnerSetOnlineStatus();
	void ClientSetOnlineStatus();
	void ClientSetOnlineStatusAllPlayers();
	int32_t GetNumPlayers();
	void OnStopCameraAnim(class UWillowSeqAct_StopCameraAnim* inAction);
	void OnPlayCameraAnim(class UWillowSeqAct_PlayCameraAnim* inAction);
	void TeleportPlayersToTravelStation();
	void FindTravelStationByDefinition(const class FString& StationDefinitionName);
	void TeleportPlayersToStation(const class FString& StationDefinitionName);
	void UpdatePlayerName();
	void ServerSetPlayerName(const class FString& PlayerName);
	void RegisterCustomPlayerDataStores();
	void InvertMouseLook(bool InvertMouse);
	void InvertGamepadLook(bool InvertGamepad);
	bool IsPendingLevelPlayerController();
	void eventReceivedPlayer();
	void PostUserIdChange();
	void PreUserIdChange();
	void OpenFrontendMovie();
	float GetInviteDisplayTime();
	void OnStartupReadProfile(const struct FPlatformUserId& UserId);
	void SetVoiceVolumeFromProfile(class UWillowProfile* Profile);
	void SetAudioGroupVolumesFromProfile(class UWillowProfile* Profile);
	void db_ServerAutoUpgradeSkill(const class FString& SkillName);
	void db_ServerAddSkillPoint();
	void db_unmute();
	void db_mute();
	void SetAudioProfileAkRtpc(class UAkRtpc* Rtpc, float Value, int32_t optionalTransitionTimeInMS);
	void UpdateFOVAspectRatioScalar();
	void SetVerticalSplit(bool bEnable);
	void SetSplitDirectionFromProfile(class UWillowProfile* Profile);
	void SetPlayerFOVFromProfile(class UWillowProfile* Profile);
	void SetGammaFromProfile(class UWillowProfile* Profile);
	void CheckDeferredOperations();
	void SetCheckDeferredOperations();
	void GetHUDScale(float& OutHUDScaleX, float& OutHUDScaleY, float& OutHUDScaleE);
	void SetHUDScaleFromProfile(class UWillowProfile* Profile);
	void ServerSetInvertedReverseSteering(bool bInUseInvertedReverseSteering);
	void ClientSendProfileSettingsToServer();
	void SetSprintToggleFromProfile(class UWillowProfile* Profile);
	void SetSettingsFromProfile();
	void SetControllerRebinding(const class FString& ControllerRebindingString);
	void ApplyControllerRebinding(const class FString& ControllerRebindingString);
	void SetKeyRebinding(const class FString& KeyRebindingString);
	void ApplyKeyRebinding(const class FString& KeyRebindingString);
	void SetControllerPreset(const struct FName& PresetName);
	bool ApplyControllerPreset(const struct FName& PresetName);
	void SetupInputDevices();
	void ClientSetupInputDevices();
	void SetPlayerMovementType(int32_t NewType);
	void DirtyViewPoint();
	void SetGFxMoviesNeedMatrixUpdate();
	void UpdateScaleformHUDVisibility();
	void OnToggleHUD(class USeqAct_ToggleHUD* inAction);
	int32_t SetCinematicMode(const struct FCinematicModeOptions& Options, bool optionalBIsRestoringMode);
	void ClientSetCinematicMode(const struct FCinematicModeOptions& Options);
	void eventSetMapChangeCinematicMode();
	class AWillowPawn* eventGetPlayerBodyPawn();
	bool IsTrainingEnabled();
	void eventDisplayHUDMessage(ELocalMessageType MsgType, const class FString& MessageString, float Duration, const struct FColor& DrawColor, class UClass* optionalInMessageClass, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class UObject* optionalOptionalObject);
	void OnArrivedInNewLevel();
	void eventDestroyed();
	void StopTeleporterSound();
	void PlayTeleporterSound();
	bool eventReleaseHolding();
	void HoldingReleaseTimerExpired();
	void TeleportPlayerToHoldingCell(class AActor* HoldingActor, class AActor* FinalDestActor, bool bUpdateRotation);
	void OnTeleport(class USeqAct_Teleport* Action);
	bool AllDestinationLevelsAreVisible(const struct FVector& DestLoc);
	void ClientSetPawnLocation(class APawn* aPawn, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	static bool NoFailSetPawnLocation(class APawn* aPawn, const struct FVector& NewLocation);
	bool TeleportPlayer(const struct FVector& TeleportLocation, const struct FRotator& TeleportRotation, bool optionalBSuppressNotifyTeleported, bool optionalBHideTeleportEffect, bool optionalBPreserveVerticalMomentum);
	void aa_SetLockEnabled(bool bEnabled);
	void aa_SetTargetSet(ETargetableListSearchType Type);
	void tl_DumpList();
	void Behavior_CameraAnim(class UCameraAnim* Anim);
	void Behavior_ViewShake(const struct FGearboxViewShakeInfo& ShakeInfo);
	void Behavior_StopForceFeedback();
	void Behavior_ForceFeedback(class UForceFeedbackWaveform* FFWaveform, bool optionalForWeaponFiring);
	bool IsShotForceFeedbackAllowedByPlayerProfile();
	class AWillowProjectile* Behavior_SpawnCurrentProjectile(class UProjectileDefinition* optionalCurrentProjectile, bool optionalBLeftHand, bool optionalBConsumeResource, bool optionalBNoVelocity);
	void Behavior_SetCurrentProjectile(class UProjectileDefinition* CurrentProjectile);
	class APawn* GetSpawnInstigator();
	void DetachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void AttachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_DetachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_AttachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	class AActor* GetAutoAimTargetActor();
	void PerformReload(bool optionalBOnlyReloadIfNeeded);
	void Behavior_Reload();
	void DebugProjectiles();
	void ToggleDebugProjectiles();
	void QueryRestricted();
	bool CanHoldWeapon(class APawn* Holder, class AWeapon* TestWeapon, bool bHoldInOffHand);
	bool CanPurchaseContent();
	bool CanPlayOnline();
	bool CanCommunicate();
	void ClientCanSplitscreenJoin(const struct FPlatformUserId& UserId, bool bCanJoin);
	void ServerCanSplitscreenJoin(const struct FPlatformUserId& UserId);
	void DebugSplitLeave();
	void DebugSplitJoin();
	void OnResurrectPlayer(class UWillowSeqAct_ResurrectPlayer* Action);
	void ServerResurrect(EResurrectReason optionalResurrectReason);
	void Respawn();
	void Resurrect();
	void UpdateLostShieldEffect();
	void EndLostShield();
	void BeginLostShield(const struct FName& HealthParamName, const struct FName& MaterialEffectName, float UpdateRate, class UPostProcessChain* InChain);
	void eventPopPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	void ApplyMaterialEffectModifiers(class UPostProcessChain* InChain, const class TArray<struct FMaterialEffectModifier>& MaterialEffectModifiers);
	void PushPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	int32_t FindPostProcessChainRecordIndex(class UPostProcessChain* InChain);
	void ClearPostProcessChains();
	void SendClientInteractionMessage(class UClass* ClientType, int32_t MessageValue, class UObject* optionalData);
	void SendServerInteractionMessage(class UClass* ClientType, int32_t MessageValue, class UObject* optionalData);
	void eventEndInteraction();
	void StartInteraction(class UClass* ClientType, int32_t MessageValue);
	void pip_sendmessage(int32_t MessageValue);
	void UpdatePlayerPostProcessOverlay(float DeltaTime);
	void ClearPostProcessOverlayQueue(int32_t IndexToSave);
	void SetupPostProcessOverlay(int32_t Index, bool bReset);
	int32_t GetPostProcessOverlayIndex(const struct FName& OverlayName);
	int32_t AddPostProcessOverlay(const struct FPostProcessOverlay& NewPostProcessOverlay);
	void DisplayDebugControllers(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebugProficiencySkills(class AHUD* HUD, float& out_YL, float& out_YPos);
	class UWillowAIDebugCamera* GetWillowAIDebugCam();
	bool ShouldCheckRemoteControlCheckbox(uint8_t CheckBoxName, class AHUD* optionalHUD);
	void ShowPlayerInfo();
	void AITree();
	void ToggleWillowInspectorStats();
	void ToggleAccuracyDebug();
	void AIToggleShowTimers();
	void AIDebugSetPawn(class AGearboxPawn* NewPawn);
	void AILog();
	void AIDebugNextBotOnTeam(int32_t TeamIndex, const class FString& optionalCharacterName);
	void AIDebugNextBot(const class FString& optionalCharacterName);
	void ShowRotation();
	void AIDebugSetPawnByName(const struct FName& NewPawnName);
	void debugpawn();
	void aisetp(const struct FName& NewPawnName);
	void NotifyGameUnPaused();
	void NotifyGamePaused();
	bool IsTriggerUsable(const struct FVector& PlayerCameraLoc, const struct FRotator& PlayerCameraRot, class ATrigger* TriggerActor, bool bAimToInteract, bool bUseTriggerInteractDistance, float optionalTriggerInteractDistance);
	bool IsTriggerUsableByPlayer(class ATrigger* TriggerActor, bool bAimToInteract, bool bUseTriggerInteractDistance, float optionalTriggerInteractDistance);
	void GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, class TArray<class ATrigger*>& out_useList);
	void UpdateInteractionIcon(const struct FInteractionIconWithOverrides& Icon, EUsabilityType UsabilityType);
	struct FRotator Get3rdPersonAimRotation(class AWeapon* W, const struct FVector& StartFireLoc);
	void InitAccuracyFromWeapon(class AWillowWeapon* TheWeapon);
	void GetAccuracyExtremes(bool bOffHand, float& MinAccuracy, float& MaxAccuracy, float& CurrentAccuracy);
	float GetBaseAccuracy(bool optionalBOffHand);
	class FString GetNextString(class FString& Args);
	void eventInitInputSystem();
	void DisplayDebugRecentlyResistedAttacks(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebugAllResourcePools(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayInventoryDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	class AWillowInventory* DEBUGGetComparisonInventory();
	class AWillowInventory* DEBUGGetSelectedInventory();
	void SwitchDisplayDebugPage(const struct FName& ActiveDebugCategory, bool Forward);
	void DisplayAudioDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayLevelTransitionState(class AHUD* HUD, float& out_YL, float& out_YPos);
	void SetCMMEnabled(bool bEnabled);
	void SetCMMThreat(float threat);
	void ClientCloseMenu();
	void ShowStatusMenu_Logs();
	void ShowStatusMenu_Challenges();
	void ShowStatusMenu_Skills();
	void ShowStatusMenu_Inventory();
	void ShowMap();
	void ServerSetStatusMenuOpen(bool bNewValue);
	void SetStatusMenuOpen(bool bNewValue);
	void ShowStatusMenu();
	bool CanShowModalMenu(uint8_t& bDisplayFailureWarning);
	void ShowDebugMenu();
	void ZoomIfPending();
	void ClearPendingZoom();
	void SetPendingZoom();
	bool IsZoomed();
	void ForceUnzoom(bool optionalBClearInput);
	class UWillowGameViewportClient* eventGetPlayerViewportClient();
	void CloseControllerDisconnectedDialog();
	void ControllerPairingUpdated(bool bWasSuccessful, const struct FPlatformUserId& SelectedUserId);
	bool ControllerRemovedClicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	void ShowControllerDisconnectedDialog(const struct FPlatformUserId& UserId);
	class UWillowGFxUIManager* GetUIManager(bool optionalBWantPrimaryManager);
	class AWillowPlayerController* GetPrimaryPlayer();
	bool CheckAllControllersConnected(struct FPlatformUserId& DisconnectedId);
	void OnControllerChanged(const struct FPlatformUserId& UserId, bool bIsConnected);
	bool CanShowPauseMenu();
	bool IsPauseMenuOpen();
	void GFxPauseMenuClosed();
	void GFxPauseMenu(bool optionalBShowBacking);
	void SetGFxPauseMenuOpenState(bool bIsOpen);
	void ShowPauseMenu(bool optionalBShowBacking);
	void ShowMenu();
	void Pause();
	void FixFOV();
	void AdjustFOV(float DeltaTime);
	void OnDefaultFOVChanged();
	void SetPlayerFOV(float HFOV);
	void FOV(float HFOV);
	static float ToHFOV(float FFOV);
	static float ToVFOV(float HFOV);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void PreTransitionCleanup();
	void HideHUD();
	void DisplayHUD(bool optionalBDeferred);
	void AddAccuracyImpulse(float Delta, bool bOffHand);
	void eventUnPressButtons();
	void FinishUncrouch();
	void ClientUnDuck();
	void CheckJumpOrDuck();
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	float AimHelpDistance();
	bool AimingHelp(bool bInstantHit);
	void ServerToggleEquipInventory(class AWillowInventory* InventoryObject);
	void ToggleEquipInventory(class AWillowInventory* InventoryObject);
	void GetCoopPawns(class TArray<class APawn*>& CoopPawns);
	void ServerUpdatePickupFailsFull();
	void ServerThrowPawnActiveWeapon();
	bool LandingShake();
	void CheckBulletWhip(class UAkEvent* BulletWhipAkEvent, const struct FVector& FireLocation, const struct FVector& FireDir, const struct FVector& HitLocation);
	static int32_t GetMaxExpLevel();
	int32_t GetExpPoints();
	static int32_t GetExpPointsRequiredForLevel(int32_t Level);
	static float StaticGetExpPercentToNextLevel(float CurrXp, class APawn* P, int32_t& PointsTowardLevel, int32_t& PointsRequiredTolevel);
	void eventClientOnExpLevelChange(int32_t ExpLevel);
	void OnExpLevelChange(bool bFeedback, bool bNaturalLevelup, bool optionalBFirstStat);
	void eventExpLevelUp(bool optionalBCheated);
	void ResetAndChangeExpLevel(int32_t NewExpLevel);
	void ExpFunc(const class FString& Args);
	void ServerBalanceMe(int32_t GameStage, int32_t AwesomeLevel);
	void BalanceMe(int32_t optionalGameStage, int32_t optionalAwesomeLevel);
	void eventClientSetSkillGrade(class USkillDefinition* Skill, uint8_t NewSkillPoints, uint8_t Grade);
	void ServerSkillSaveGameDataCompleted();
	void ServerSetSkillSaveGameData(class USkillDefinition* Skill, uint8_t Grade);
	void ServerUpgradeSkill(class USkillDefinition* Skill);
	void CheckSkillActivation(class USkillDefinition* Skill);
	void eventClientResetSkillTree(bool bIgnoreProficiencies);
	int32_t ResetSkillTree(bool bIgnoreProficiencies, bool optionalBIsCharacterLoad);
	void ClientPurchaseSkillTreeResetFailed();
	void ServerPurchaseSkillTreeReset();
	int32_t GetSkillTreeResetCost();
	class AController* Behavior_GetSkillInstigatorController();
	void Behavior_UpgradeSkill(class USkillDefinition* SkillToUpgrade, int32_t NumberOfLevelsToRaise, int32_t MaximumLevelToRaiseSkill, bool bPostSharedEventMessageIfSkillUpgraded);
	void ServerDeactivateSkill(class USkillDefinition* SkillToDeactivate, bool optionalBIgnoreSkillInstigator, bool optionalBDeactivateAllInstances, bool optionalBForceDeactivate, class AActor* optionalBuffInstigator);
	void Behavior_DeactivateSkill(class USkillDefinition* SkillToDeactivate, bool optionalBIgnoreSkillInstigator, bool optionalBDeactivateAllInstances, bool optionalBForceDeactivate, class AActor* optionalBuffInstigator);
	void ServerActivateSkill(class USkillDefinition* SkillToActivate, class UObject* optionalAdditionalSkillTarget, int32_t optionalSkillGrade, class AActor* optionalBuffInstigator);
	void Behavior_ActivateSkill(class USkillDefinition* SkillToActivate, class UObject* optionalAdditionalSkillTarget, int32_t optionalSkillGrade, class AActor* optionalBuffInstigator);
	class ASkillEffectManager* GetSkillManager();
	void eventOnPlayerClassChange();
	void ApplyCharacterClassDefaults();
	class UCharacterClassDefinition* GetCharacterClass();
	void InitializeWorldMissionState();
	void ServerSetResourceSaveGameData(int32_t Index, class UResourceDefinition* ResDefinition, class UResourcePoolDefinition* PoolDefinition, float Amount, int32_t UpgradeLevel);
	void ServerSetSaveGameData(int32_t ClientExpLevel, int32_t ClientExpPoints, int32_t ClientGeneralSkillPoints, int32_t ClientSpecialistSkillPoints, float CurrencyOnHand, int32_t PlaythroughsCompleted);
	class AWillowInventoryManager* GetPawnInventoryManager();
	class APawn* GetInventoryPawn();
	void CheckEquipDefaultWeapon();
	void StartNewPlaySession();
	void ShortServerMove(float TimeStamp, const struct FVector& ClientLoc, uint8_t NewFlags, uint8_t ClientRoll, int32_t View, uint8_t AnalogPct);
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, uint8_t ClientRoll, int32_t View, class USavedMove* OldMove);
	void NextWeapon();
	void PrevWeapon();
	float ScaleFOV(float InFOV, float TangentScalar);
	int32_t BlendRot(float DeltaTime, int32_t BlendC, int32_t NewC);
	float CalculatePercentMissionsComplete();
	void SayIdleTimeOut();
	void ServerSecondaryUse();
	void ServerUse();
	void UseSecondary();
	void ServerSpectate();
	void QuickLookPlayerMove(float DeltaTime);
	void ClientSetPause(bool bPause);
	void ServerSetPause(bool bPause);
	void NotifyTakeHit(class AController* InstigatedBy, class APawn* HitPawn, const struct FVector& HitLocation, float Damage, class UClass* DamageType, const struct FVector& Momentum, class UDamagePipeline* optionalPipeline);
	bool UsingFirstPersonCamera();
	void eventClientReset();
	void Reset();
	void TestViewShake(float OffsetX, float OffsetY, float OffsetZ, float OffsetRate, float OffsetTime, float RotX, float RotY, float RotZ, float RotRate, float RotTime, float FOVMag, float FOVRate, float FOVTime);
	void ViewShake(float DeltaTime);
	void ClientShakeView(const struct FGearboxViewShakeInfo& ShakeInfo);
	void ShakeView(const struct FGearboxViewShakeInfo& NewViewShake);
	void AddPainCameraShake(const struct FVector& LocOffset, const struct FRotator& RotOffset, float FOVOffset, float MaxLocationOffset, float MaxRotOffset, float MaxFOVOffset, float Duration);
	void CameraShake(float Duration, const struct FVector& newRotAmplitude, const struct FVector& newRotFrequency, const struct FVector& newLocAmplitude, const struct FVector& newLocFrequency, float newFOVAmplitude, float newFOVFrequency);
	void AddWeaponKick(float Amount, int32_t ShotId, class UWeaponTypeDefinition* WeaponTypeDef);
	void RaiseFirstPersonHands();
	void LowerFirstPersonHands();
	void UpdateForegroundFOV();
	void SetViewingThirdPersonMenu(bool bNewViewingThirdPersonMenu, bool bIsStatusMenu);
	void SetContentDebugger();
	void ClearContentDebugger();
	void SoakPause(class APawn* P);
	void Typing(bool bTyping);
	void AcknowledgePossession(class APawn* P);
	void UnPossess();
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void GivePawn(class APawn* NewPawn);
	void SetHand(EWeaponHand NewWeaponHand);
	void ServerSetHand(EWeaponHand NewWeaponHand);
	void ServerPlayerPreferences(EWeaponHand NewWeaponHand, bool bNewCenteredWeaponFire);
	void eventResetMapChangeTeleportFlags();
	void eventReadyForPlay();
	void eventReadyForCommit();
	void NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon, bool optionalBOffHandWeapon);
	void TickPostProcessChainModifiers(float DeltaTime);
	void UpdateDebugDisplayActorInfo();
	void ResetActorDebugMenu();
	void ShowActorDebugMenu();
	void DrawCoopRangeDebug();
	void ClientAddTinnitusSource(class UAkEvent* TinnitusEvent, float Strength, const struct FVector& VToSource);
	void TriggerTinnitus(float Strength, class UAkEvent* optionalTinnitusEvent, struct FVector& VToSource);
	void TriggerTinnitusFromLocation(float Radius, float StrengthModifier, class UAkEvent* optionalOverrideTinnitusEvent, struct FVector& SourceLocation);
	void ShutDownEchoPSC();
	void TickEchoPSCOpacity();
	void ClientAckInfoClassInitialization();
	void PlayerTick(float DeltaTime);
	void PayForUsedObject(class UIUsable* UsedObject, EUsabilityType UsabilityType);
	bool CanAffordToUseUsableObject(class UIUsable* UsedObject, EUsabilityType UsabilityType);
	void OnRep_UseProgressBar(struct FReplicatedProgressBarData& PrevData);
	bool PerformedSecondaryUseAction();
	bool ServerCancelUseWithoutConfirmation();
	bool ServerUseWithoutConfirmation();
	bool PerformedCancelUseAction();
	bool PerformedUseAction();
	bool DoesObjectCostToUse(class UIUsable* UsableObject, EUsabilityType UsabilityType, ECurrencyType& CurrencyType, int32_t& CostsAmount);
	void enum_targetables(ETargetableListSearchType Type);
	void ServerToggleHLQ();
	void ServerToggleGhost();
	class UWillowGlobals* GetWillowGlobals();
	void PawnDied(class APawn* P);
	void eventReplicatedEvent(const struct FName& VarName);
	void eventClientMessage(const class FString& S, const struct FName& optionalType, float optionalMsgLifeTime);
	void eventInviteFriendByIndex(int32_t FriendIndex);
	void SortFriends();
	void PostBeginPlay();
	void Initialize();
	bool eventIsInPublicOnlineGame();
	struct FName GetOutermostLevelName();
	bool ShouldEnterLobbySpectatorMode();
	int32_t GetPlayerIndex();
	void ClientConsoleCommand(const class FString& Command);
	void ServerRCon(const class FString& Command);
	void RCon(const class FString& Command);
	void RelevanceUtility(bool TurnOn);
	void SynchronizeLocalDataPackagesWithServer();
	void UpdateOnDemandPackageStatus(const class FString& PackageString, bool bIsLoaded);
	void ServerUpdateOnDemandPackageStatus(const class FString& PackageString, bool bIsLoaded);
	void eventClientUnloadOnDemandPackage(const class FString& PackageString);
	void eventClientLoadOnDemandPackage(const class FString& PackageString);
	bool HasPlayerEarnedAnySkillPoints();
	static void StopAnyBinkMovie();
	static bool IsBinkMoviePlaying(const class FString& MovieName);
	static bool UseScaleformLoadingMovie();
	static bool IsAnyBinkMoviePlaying();
	static bool IsLoadingMoviePlaying();
	void MarkStationsAsVisited();
	void NativeFindActiveStation();
};

// Class WillowGame.InputContextSelectorBase
// 0x0000 (0x0058 - 0x0058)
class UInputContextSelectorBase : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputContextSelectorBase");
		}

		return uClassPointer;
	};

	struct FName SelectContext();
};

// Class WillowGame.DefaultInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class UDefaultInputContextSelector : public UInputContextSelectorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DefaultInputContextSelector");
		}

		return uClassPointer;
	};

	struct FName SelectContext();
};

// Class WillowGame.InputDeviceCollectionDefinition
// 0x0030 (0x0058 - 0x0088)
class UInputDeviceCollectionDefinition : public UGBXDefinition
{
public:
	class TArray<class UInputDeviceDefinition*>        XboxInputDevices;                              // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UInputDeviceDefinition*>        PS3InputDevices;                               // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UInputDeviceDefinition*>        PCInputDevices;                                // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputDeviceCollectionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InputDeviceDefinition
// 0x0030 (0x0058 - 0x0088)
class UInputDeviceDefinition : public UGBXDefinition
{
public:
	class TArray<struct FInputDeviceAxisData>          Axes;                                          // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FLookAxisDefinitionData                     LookAxisDefinitions;                           // 0x0068 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FInputDeviceButtonData>        Buttons;                                       // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputDeviceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InputRemappingDefinition
// 0x0040 (0x0058 - 0x0098)
class UInputRemappingDefinition : public UGBXDefinition
{
public:
	struct FName                                       PresetTag;                                     // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      PresetCaption;                                 // 0x0060 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bShowInPresetMenu : 1;                         // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class TArray<struct FInputRemappingAxisData>       RemappedAxes;                                  // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FInputRemappingButtonData>     RemappedButtons;                               // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputRemappingDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InputSetDefinition
// 0x0010 (0x0058 - 0x0068)
class UInputSetDefinition : public UGBXDefinition
{
public:
	class TArray<class UInputActionDefinition*>        InputActions;                                  // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InputSetDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InRangeOfInjuredPlayerExpressionEvaluator
// 0x0000 (0x0058 - 0x0058)
class UInRangeOfInjuredPlayerExpressionEvaluator : public UExpressionEvaluator
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InRangeOfInjuredPlayerExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.InstanceDataContextResolver
// 0x0008 (0x0058 - 0x0060)
class UInstanceDataContextResolver : public UAttributeContextResolver
{
public:
	struct FName                                       InstanceDataName;                              // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InstanceDataContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.InstancedDesignerAttribute
// 0x0078 (0x0058 - 0x00D0)
class UInstancedDesignerAttribute : public UObject
{
public:
	class UDesignerAttributeDefinition*                Definition;                                    // 0x0058 (0x0008) [0x0000000000000000]               
	struct FName                                       AttributeName;                                 // 0x0060 (0x0008) [0x0000000000000000]               
	EAttributeDataType                                 AttributeDataType;                             // 0x0068 (0x0001) [0x0000000000000000]               
	float                                              Value;                                         // 0x006C (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ValueBaseValue;                                // 0x0070 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ValueModifierStack;                            // 0x0078 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            IntValue;                                      // 0x0088 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            IntValueBaseValue;                             // 0x008C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            IntValueModifierStack;                         // 0x0090 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            BoolValue;                                     // 0x00A0 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            BoolValueBaseValue;                            // 0x00A4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BoolValueModifierStack;                        // 0x00A8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class FString                                      DesignerAttributeDefinitionPathName;           // 0x00B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            IndexInReplicationArray;                       // 0x00C8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InstancedDesignerAttribute");
		}

		return uClassPointer;
	};

	void SetBaseValue(const struct FAttributeInitializationData& InitializationData, class AActor* ContextSource);
	void InitializeByName(const struct FName& InName, class AActor* ContextSource, EAttributeDataType InAttributeDataType);
	void Initialize(class UDesignerAttributeDefinition* InDefinition, class AActor* ContextSource);
};

// Class WillowGame.InteractionIconDefinition
// 0x0040 (0x0058 - 0x0098)
class UInteractionIconDefinition : public UEngineInteractionIconDefinition
{
public:
	EInteractionIcons                                  Icon;                                          // 0x0058 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FString                                      Action;                                        // 0x0060 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      Text;                                          // 0x0070 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      UsingText;                                     // 0x0080 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class USwfMovie*                                   SecondaryIcon;                                 // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InteractionIconDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InteractionProxy
// 0x0020 (0x0250 - 0x0270)
class AInteractionProxy : public ATrigger
{
public:
	struct FPointer                                    VfTable_IIUsable;                              // 0x0250 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UWillowPawnInteractionDefinition*            Definition;                                    // 0x0258 (0x0008) [0x0000000000000000]               
	uint32_t                                           bPassEventsToKismet : 1;                       // 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bCostsToUse : 1;                               // 0x0260 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCostsToSecondaryUse : 1;                      // 0x0260 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSecondaryUsable : 1;                          // 0x0260 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	ECurrencyType                                      CostsToUseType;                                // 0x0264 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ECurrencyType                                      CostsToSecondaryUseType;                       // 0x0265 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CostsToUseAmount;                              // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CostsToSecondaryUseAmount;                     // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InteractionProxy");
		}

		return uClassPointer;
	};

	bool AllowTouchEvent(class AActor* Other);
	bool UsedBy(class APawn* User, bool optionalBSimulateUnuse);
	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventBaseChange();
	void eventDestroyed();
	void Initialize(class UPawnInteractionDefinition* InDefinition, class AActor* InInstigator);
	bool AllowUseEvent(EUsabilityType UsabilityType);
	static bool IsInteractionDebugEnabled();
	static void ToggleInteractionDebug();
};

// Class WillowGame.PawnInteractionProxy
// 0x0008 (0x0270 - 0x0278)
class APawnInteractionProxy : public AInteractionProxy
{
public:
	uint32_t                                           bDisableDuringTrade : 1;                       // 0x0270 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bDisableDuringVehicleUse : 1;                  // 0x0270 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PawnInteractionProxy");
		}

		return uClassPointer;
	};

	bool eventOutsideWorldBounds();
	bool AllowUseEvent(EUsabilityType UsabilityType);
	bool AllowTouchEvent(class AActor* Other);
	void Initialize(class UPawnInteractionDefinition* InDefinition, class AActor* InInstigator);
};

// Class WillowGame.InteractiveObjectBalanceDefinition
// 0x0080 (0x0058 - 0x00D8)
class UInteractiveObjectBalanceDefinition : public UBaseBalanceDefinition
{
public:
	class UInteractiveObjectDefinition*                DefaultInteractiveObject;                      // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DefaultExpLevel;                               // 0x0060 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      DefaultDisplayName;                            // 0x0080 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class TArray<class USpawnedActorTagDefinition*>    ActorTags;                                     // 0x0090 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UInteractiveObjectLootListDefinition*> DefaultIncludedLootLists;                      // 0x00A0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FLootConfigurationData>        DefaultLoot;                                   // 0x00B0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UAttributeInitializationDefinition*          DefaultLootGameStageVarianceFormula;           // 0x00C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FInteractiveObjectGameStageGradeWeightData> Grades;                                        // 0x00C8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InteractiveObjectBalanceDefinition");
		}

		return uClassPointer;
	};

	bool SetupInteractiveObjectLoot(class AWillowInteractiveObject* SpawnedInteractiveObject, int32_t GradeIndex);
	class UInteractiveObjectDefinition* GetInteractiveObjectDefinitionForGrade(int32_t GradeIndex);
	class UInteractiveObjectDefinition* GetInteractiveObjectDefinitionForGameStage(int32_t GameStage, int32_t AwesomeLevel);
};

// Class WillowGame.InteractiveObjectDefinition
// 0x0210 (0x0058 - 0x0268)
class UInteractiveObjectDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBodyProvider;                        // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0060 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;               // 0x0068 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDialogEditorHelper;                  // 0x0070 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFeatureProvider;                     // 0x0078 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UBodyProviderDefinition*                     BodyProviderDefinition;                        // 0x0080 (0x0008) [0x0000000000000000]               
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0088 (0x0008) [0x0000000000000000]               
	uint32_t                                           bCreditDamageCausedByThisObjectToWhateverDamagedIt : 1;// 0x0090 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanBeKilled : 1;                              // 0x0090 (0x0004) [0x0000000020000002] [0x00000002] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bIsKilledWhenHealthEqualsZero : 1;             // 0x0090 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bDestroyWhenKilled : 1;                        // 0x0090 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTakeDirectDamage : 1;                      // 0x0090 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTakeRadiusDamage : 1;                      // 0x0090 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bCollideAsEncroacher : 1;                      // 0x0090 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsePlayerInteractionDistanceForTriggerRadius : 1;// 0x0090 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bProjTarget : 1;                               // 0x0090 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bUsableFromVehicle : 1;                        // 0x0090 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bSecondaryUsableFromVehicle : 1;               // 0x0090 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bOnlyTouchTargetables : 1;                     // 0x0090 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bCanTouchCombatHiddenPawns : 1;                // 0x0090 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bAllowUsabilityPassThrough : 1;                // 0x0090 (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsSoldierTurretShield : 1;                    // 0x0090 (0x0004) [0x0000000020000000] [0x00004000]  CPF_Deprecated)
	uint32_t                                           bAlwaysRelevant : 1;                           // 0x0090 (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsPossibleHomingTarget : 1;                   // 0x0090 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bTargetable : 1;                               // 0x0090 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bTargetableByAI : 1;                           // 0x0090 (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bDoNotBlockBased : 1;                          // 0x0090 (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           bCanBeDamageByFriendlies : 1;                  // 0x0090 (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           DoNotBlockWeaponFireFromFriendlies : 1;        // 0x0090 (0x0004) [0x0000000000000003] [0x00200000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseOwnerAllegiance : 1;                       // 0x0090 (0x0004) [0x0000000000000003] [0x00400000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDoNotBlockPawns : 1;                          // 0x0090 (0x0004) [0x0000000000000003] [0x00800000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDoNotBlockFriendlyPawns : 1;                  // 0x0090 (0x0004) [0x0000000000000003] [0x01000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDynamicLightEnvironment : 1;                  // 0x0090 (0x0004) [0x0000000000000003] [0x02000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bCastShadows : 1;                              // 0x0090 (0x0004) [0x0000000000000003] [0x04000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDynamic : 1;                                  // 0x0090 (0x0004) [0x0000000000000003] [0x08000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bShadowFromEnvironment : 1;                    // 0x0090 (0x0004) [0x0000000000000003] [0x10000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAffectedBySmallDynamicLights : 1;             // 0x0090 (0x0004) [0x0000000000000003] [0x20000000] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MaxHealth;                                     // 0x0098 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UMeshComponent*                              Mesh;                                          // 0x00B8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	ECollisionType                                     CollisionType;                                 // 0x00C0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EInteractionIcons                                  HUDIcon;                                       // 0x00C1 (0x0001) [0x0000000020000000]  CPF_Deprecated)
	ERadarIconType                                     CompassIcon;                                   // 0x00C2 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EUsabilityPriority                                 InteractionPriority;                           // 0x00C3 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETickingGroup                                      TickGroup;                                     // 0x00C4 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ERelevanceDistance                                 RelevanceDistance;                             // 0x00C5 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x00C8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FInstanceData2                              InstanceData;                                  // 0x00D8 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UInteractionIconDefinition*                  HUDIconDef;                                    // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  HUDIconDefSecondary;                           // 0x00F0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              TriggerRadius;                                 // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TriggerHeight;                                 // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      StatusMenuMapInfoBoxHeader;                    // 0x0100 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      StatusMenuMapInfoBoxDescription;               // 0x0110 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	float                                              VehicleTriggerRadius;                          // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FUseActionData                              UseAction;                                     // 0x0128 (0x0098) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         StatusEffectSockets;                           // 0x01C0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UParticleSystem*                             StatusEffectsParticleSystem;                   // 0x01D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      InteractiveObjectClass;                        // 0x01D8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              TargetPriority;                                // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPawnAllegiance*                             Allegiance;                                    // 0x01E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       TargetableSocket;                              // 0x01F0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     TargetableOffset;                              // 0x01F8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              AIAvoidRadius;                                 // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            bBlockOnTakeDamageWhenDamageEqualZero;         // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FocusRadius;                                   // 0x020C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     FocusOffset;                                   // 0x0210 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBodyHitRegionDefinition*                    DefaultHitRegionDefinition;                    // 0x0220 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBodyHitRegionDefinition*>      HitRegionDefinitions;                          // 0x0228 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              LightingBoundsScale;                           // 0x0238 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                AmbientGlow;                                   // 0x023C (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SkelUpdate_ThrottleDistance;                   // 0x024C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Skelupdate_ThrottleTime;                       // 0x0250 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpawnPointDefinition*                       SpawnPointDefinition;                          // 0x0258 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFeatureProviderDefinition*                  FeatureProviderDefinition;                     // 0x0260 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InteractiveObjectDefinition");
		}

		return uClassPointer;
	};

	void GetHitRegions(class TArray<class UBodyHitRegionDefinition*>& Regions, class UBodyHitRegionDefinition*& DefaultRegion);
	void OnKilledEnemy(class UObject* KilledObject, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledFriendly(class UObject* KilledObject, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledNeutral(class UObject* KilledObject, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUserStopUseAction(class UObject* User, bool bInterrupted, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUserStartUseAction(class UObject* User, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnStopUseAction(bool bInterrupted, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnStartUseAction(struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnAllPickupsDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPickupDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDispense(class UObject* Recipient, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnClosing(class UObject* PlayerClosing, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnMissionTurnedIn(class UObject* PlayerTurningInMission, class UObject* MissionTurnedIn, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTimerEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilled(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHealthDepleted(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTakeDamage(class UObject* Instigator, float Damage, class UObject* DamageSource, class UObject* DamageType, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUserCouldNotAffordSecondary(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUserCouldNotAfford(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnSecondaryCancelUsedBy(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnCancelUsedBy(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnSecondaryUsedBy(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUsedBy(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUnTouch(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTouch(EOnTouchEventOutputs EventOutput, class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnSpawn(struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.InteractiveObjectLootListDefinition
// 0x0010 (0x0058 - 0x0068)
class UInteractiveObjectLootListDefinition : public UGBXDefinition
{
public:
	class TArray<struct FLootConfigurationData>        LootData;                                      // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InteractiveObjectLootListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InterpTrackBehaviors
// 0x0028 (0x00A0 - 0x00C8)
class UInterpTrackBehaviors : public UInterpTrack
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x00A0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FName                                       LastAddedKeyFrameName;                         // 0x00A8 (0x0008) [0x0000000000000000]               
	class TArray<struct FBehaviorKeyFrameEventData>    BehaviorEvents;                                // 0x00B0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x00C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InterpTrackBehaviors");
		}

		return uClassPointer;
	};

	void BehaviorKeyFrameEvent(const struct FName& SpecializedEventName, class AActor* GroupActor, struct FBehaviorConsumerHandle& InConsumerHandle);
};

// Class WillowGame.InterpTrackInstBehaviors
// 0x0010 (0x0058 - 0x0068)
class UInterpTrackInstBehaviors : public UInterpTrackInst
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              LastUpdatePosition;                            // 0x0060 (0x0004) [0x0000000000000000]               
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x0064 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InterpTrackInstBehaviors");
		}

		return uClassPointer;
	};

	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
};

// Class WillowGame.InventoryAttributeContextResolver
// 0x0010 (0x0058 - 0x0068)
class UInventoryAttributeContextResolver : public UAttributeContextResolver
{
public:
	class UWillowInventoryDefinition*                  InventoryDefinition;                           // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bOnlyConsiderEquippedItems : 1;                // 0x0060 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryAttributeContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.InventoryAttributeDefinition
// 0x0000 (0x0080 - 0x0080)
class UInventoryAttributeDefinition : public UAttributeDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryAttributeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryBalanceDefinition
// 0x0050 (0x0058 - 0x00A8)
class UInventoryBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                 // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bInterpolateExpLevel : 1;                      // 0x0060 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class UWillowInventoryDefinition*                  InventoryDefinition;                           // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInventoryBalanceDefinition*                 BaseDefinition;                                // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FInventoryManufacturerBalanceData> Manufacturers;                                 // 0x0078 (0x0010) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink)
	class TArray<struct FInventoryGameStageGradeWeightData> Grades;                                        // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UDownloadableItemSetDefinition*              DlcItemSet;                                    // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                 // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryBalanceDefinition");
		}

		return uClassPointer;
	};

	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
	class UWillowInventoryDefinition* GetInventoryDefinitionForManufacturerGrade(class UManufacturerDefinition* Manufacturer, int32_t ManufacturerGradeIndex);
	class UWillowInventoryDefinition* HACKGetVehicleInventoryDefinition();
	int32_t GetExpLevelFromManufacturerData(class UManufacturerDefinition* Manufacturer, int32_t ManufacturerGradeIndex);
	class UPlayerClassIdentifierDefinition* GetRequiredPlayerClassId();
	class UWillowInventoryDefinition* GetInventoryDefinition();
};

// Class WillowGame.WeaponBalanceDefinition
// 0x0000 (0x00A8 - 0x00A8)
class UWeaponBalanceDefinition : public UInventoryBalanceDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponBalanceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryDataProviderElement
// 0x0008 (0x00D8 - 0x00E0)
class UInventoryDataProviderElement : public UGFxObject
{
public:
	EArrayKind                                         Kind;                                          // 0x00D8 (0x0001) [0x0000000000000000]               
	int32_t                                            LightweightIdx;                                // 0x00DC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryDataProviderElement");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryDefinitionAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UInventoryDefinitionAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryDefinitionAttributeContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.IPhysicsAffector
// 0x0000 (0x0058 - 0x0058)
class UIPhysicsAffector : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IPhysicsAffector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IPlayerBehavior
// 0x0000 (0x0058 - 0x0058)
class UIPlayerBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IPlayerBehavior");
		}

		return uClassPointer;
	};

	void Behavior_UnlockAchievementForAllPlayers(int32_t AchievementId, int32_t MinimumPlayersRequired);
	void Behavior_DetachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_AttachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_UnlockAchievement(int32_t AchievementId);
	void Behavior_SendMessageToPlayersW(bool bShouldSendToInstigator, class UClass* SendMsgClass);
	void Behavior_CameraAnim(class UCameraAnim* Anim);
	void Behavior_ViewShake(const struct FGearboxViewShakeInfo& ShakeInfo);
	void Behavior_StopForceFeedback();
	void Behavior_ForceFeedback(class UForceFeedbackWaveform* FFWaveform, bool optionalForWeaponFiring);
	class AWillowProjectile* Behavior_SpawnCurrentProjectile(class UProjectileDefinition* optionalCurrentProjectile, bool optionalBLeftHand, bool optionalBConsumeResource, bool optionalBNoVelocity);
	void Behavior_SetCurrentProjectile(class UProjectileDefinition* CurrentProjectile);
	void Behavior_Reload();
};

// Class WillowGame.IPlayerListOwner
// 0x0000 (0x0058 - 0x0058)
class UIPlayerListOwner : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IPlayerListOwner");
		}

		return uClassPointer;
	};

	void PlayUISound(const struct FName& UIEvent);
	class UWillowGFxMovie3DDefinition* GetPlayerDetailsMovieDef();
	void AppendTooltipString(const class FString& StringToAppend, bool optionalBDisabled, class FString& TooltipString);
	bool IsPlayerOwner(const struct FPlatformUserId& UserId);
	class AWillowPlayerController* GetWPCOwner();
};

// Class WillowGame.IPlayerObserver
// 0x0000 (0x0058 - 0x0058)
class UIPlayerObserver : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IPlayerObserver");
		}

		return uClassPointer;
	};

	void PlayerLeftGame(class APlayerController* PC);
	void PlayerEnteredGame(class APlayerController* PC);
};

// Class WillowGame.IProjectileBehavior
// 0x0000 (0x0058 - 0x0058)
class UIProjectileBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IProjectileBehavior");
		}

		return uClassPointer;
	};

	void SetFollowingSpline(class ASplineActor* InSpline, float InTurnRate, const struct FAIRange& InOffsetRange, const struct FAIRange& InDistRange);
	void StopFollowingSpline();
	bool IsFollowingSpline();
	void Behavior_TagPayloadType(EProjectilePayloadType PayloadType);
	void Behavior_LevelOffTrajectory(float ZHeight, float TurnSpeed);
	void Behavior_SetExplosionDefinition(class UExplosionDefinition* MyExplosionDef);
	void Behavior_SetDamageTypeDefinition(class UWillowDamageTypeDefinition* DamageTypeDef);
	void Behavior_SetStickyGrenade();
	void SetSpeed(float NewSpeed);
	void SetProximity(float ProximityRadius, float ProximityHeight);
	bool IsLevelingNow();
	void SetHomingRotationOffset(const struct FRotator& RotationOffset);
	struct FVector GetHomingTargetLocation();
	EHomingTargetType GetHomingTargetByType();
	void SetHomingTarget(class AActor* NewTarget, const struct FVector& optionalTargetOffset, const struct FReplicatedBodyItem& optionalNewComponent);
	void FindHomingTarget(EHomingTargetType TargetType, float TargetSearchRange, float TargetSearchFOVAngle, bool bNotInstigator, bool bIgnoreFOVZTest, bool bBestForwardTarget, bool bRetryIfTargetNotFound, bool bUniqueTarget, const struct FVector& TargetOffset);
	void Detonate();
	bool SetVelocity(const struct FVector& ProjectileVelocity);
	bool GetVelocity(struct FVector& ProjectileVelocity);
};

// Class WillowGame.IProjectileReflector
// 0x0000 (0x0058 - 0x0058)
class UIProjectileReflector : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IProjectileReflector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IProtectionTimer
// 0x0000 (0x0058 - 0x0058)
class UIProtectionTimer : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IProtectionTimer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IPursuitBehavior
// 0x0000 (0x0058 - 0x0058)
class UIPursuitBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IPursuitBehavior");
		}

		return uClassPointer;
	};

	void Behavior_SetPreferredNodeType(const struct FName& NodeType);
};

// Class WillowGame.IRBCollisionListener
// 0x0000 (0x0058 - 0x0058)
class UIRBCollisionListener : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IRBCollisionListener");
		}

		return uClassPointer;
	};

	void NotifyRigidBodyCollision(class UObject* ContextObject, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactSide, struct FCollisionImpactData& RigidCollisionData);
};

// Class WillowGame.IResourcePoolOwner
// 0x0000 (0x0058 - 0x0058)
class UIResourcePoolOwner : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IResourcePoolOwner");
		}

		return uClassPointer;
	};

	bool CanSetResourcePoolValues(class UClass* ResourcePoolClass);
};

// Class WillowGame.IScreenParticle
// 0x0000 (0x0058 - 0x0058)
class UIScreenParticle : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IScreenParticle");
		}

		return uClassPointer;
	};

	void UpdateVisibilityOfAllActiveScreenParticles();
	bool ScreenParticlesShouldBeVisible();
	void HideScreenParticle(class UParticleSystem* Template, const struct FName& optionalParticleTag, bool optionalBAllowParticleToFinish);
	class UParticleSystemComponent* ShowScreenParticle(const struct FScreenParticleInitParams& InitParams, const struct FVector& optionalReferenceLocation, float optionalScale);
};

// Class WillowGame.ISeeTargetable
// 0x0000 (0x0058 - 0x0058)
class UISeeTargetable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ISeeTargetable");
		}

		return uClassPointer;
	};

	struct FVector GetViewLocation();
	class AActor* GetWorldBody();
	bool AddTargetable(class AActor* NewTarget, bool bSeeTarget, bool bHearThreat, bool bSmellTarget);
};

// Class WillowGame.ISimpleAnimPlayer
// 0x0000 (0x0058 - 0x0058)
class UISimpleAnimPlayer : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ISimpleAnimPlayer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ISkillBehavior
// 0x0000 (0x0058 - 0x0058)
class UISkillBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ISkillBehavior");
		}

		return uClassPointer;
	};

	class AController* Behavior_GetSkillInstigatorController();
	void Behavior_UpgradeSkill(class USkillDefinition* SkillToUpgrade, int32_t NumberOfLevelsToRaise, int32_t MaximumLevelToRaiseSkill, bool bPostSharedEventMessageIfSkillUpgraded);
	void Behavior_DeactivateSkill(class USkillDefinition* SkillToDeactivate, bool optionalBIgnoreSkillInstigator, bool optionalBDeactivateAllInstances, bool optionalBForceDeactivate, class AActor* optionalBuffInstigator);
	void Behavior_ActivateSkill(class USkillDefinition* SkillToActivate, class UObject* optionalAdditionalSkillTarget, int32_t optionalSkillGrade, class AActor* optionalBuffInstigator);
};

// Class WillowGame.ISkillInstigator
// 0x0000 (0x0058 - 0x0058)
class UISkillInstigator : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ISkillInstigator");
		}

		return uClassPointer;
	};

	void OnSkillEvent(class USkillDefinition* SkillDef, ESkillEventType EventType, class AActor* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject);
	EeSkillCastStyle GetActionSkillCastingStyle();
	bool IsAnyActionSkillRunning();
	void EndActionSkillSlot(int32_t SlotIndex);
	class UPlayerSkillTree* GetPlayerSkillTree();
	bool IsHumanPlayer();
	int32_t GetSkillGrade(class USkillDefinition* Skill);
	class AActor* GetActionSkillTarget();
	class AActor* GetSkillInstigatorActor();
};

// Class WillowGame.ISkillTreeListener
// 0x0000 (0x0058 - 0x0058)
class UISkillTreeListener : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ISkillTreeListener");
		}

		return uClassPointer;
	};

	void HandleSkillTreeReset(int32_t SkillPointsReturned);
};

// Class WillowGame.ItemPool
// 0x0000 (0x0058 - 0x0058)
class UItemPool : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPool");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPoolDefinition
// 0x0068 (0x0058 - 0x00C0)
class UItemPoolDefinition : public UGBXDefinition
{
public:
	struct FAttributeInitializationData                CheatSpawnLevel;                               // 0x0058 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisablePhysicsDrop : 1;                       // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAutoReadyItems : 1;                           // 0x0078 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bSupportsGameStageVariance : 1;                // 0x0078 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bShopsHaveInfiniteQuantity : 1;                // 0x0078 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	class TArray<struct FBalancedInventoryData>        BalancedItems;                                 // 0x0080 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                Quantity;                                      // 0x0090 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributeDefinition*                        MinGameStageRequirement;                       // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributeDefinition*                        MaxGameStageRequirement;                       // 0x00B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPoolDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.KeyedItemPoolDefinition
// 0x0008 (0x00C0 - 0x00C8)
class UKeyedItemPoolDefinition : public UItemPoolDefinition
{
public:
	int32_t                                            Key;                                           // 0x00C0 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.KeyedItemPoolDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPoolListDefinition
// 0x0020 (0x0058 - 0x0078)
class UItemPoolListDefinition : public UGBXDefinition
{
public:
	class TArray<class UItemPoolListDefinition*>       ItemPoolIncludedLists;                         // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FItemPoolInfo>                 ItemPools;                                     // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPoolListDefinition");
		}

		return uClassPointer;
	};

	void AddToItemPoolList(class TArray<struct FItemPoolInfo>& Out_ItemPoolList);
};

// Class WillowGame.ITinnitusTarget
// 0x0000 (0x0058 - 0x0058)
class UITinnitusTarget : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ITinnitusTarget");
		}

		return uClassPointer;
	};

	void TriggerTinnitus(float Strength, class UAkEvent* optionalOverrideTinnitusEvent, struct FVector& VToSource);
	void TriggerTinnitusFromLocation(float Radius, float StrengthModifier, class UAkEvent* optionalOverrideTinnitusEvent, struct FVector& SourceLocation);
};

// Class WillowGame.ITwoPanelInterface
// 0x0000 (0x0058 - 0x0058)
class UITwoPanelInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ITwoPanelInterface");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IUISubMenuNavigation
// 0x0000 (0x0058 - 0x0058)
class UIUISubMenuNavigation : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IUISubMenuNavigation");
		}

		return uClassPointer;
	};

	void ActivateLastSubMenu();
	void ActivateFirstSubMenu();
};

// Class WillowGame.IUpdatePostProcessOverride
// 0x0000 (0x0058 - 0x0058)
class UIUpdatePostProcessOverride : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IUpdatePostProcessOverride");
		}

		return uClassPointer;
	};

	void EndLostShield();
	void BeginLostShield(const struct FName& HealthParamName, const struct FName& MaterialEffectName, float UpdateRate, class UPostProcessChain* InChain);
	void PopPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	void PushPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	void ClearPostProcessOverlayQueue(int32_t IndexToSave);
	void SetupPostProcessOverlay(int32_t Index, bool bReset);
	int32_t GetPostProcessOverlayIndex(const struct FName& OverrideName);
	int32_t AddPostProcessOverlay(const struct FPostProcessOverlay& NewPostProcessOverlay);
};

// Class WillowGame.IUsable
// 0x0000 (0x0058 - 0x0058)
class UIUsable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IUsable");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IWeaponBoneController
// 0x0000 (0x0058 - 0x0058)
class UIWeaponBoneController : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IWeaponBoneController");
		}

		return uClassPointer;
	};

	void Reset();
	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval);
	void EndFire(float SpinDownDuration);
	void BeginFire(float SpinUpDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};

// Class WillowGame.IWeatherBehavior
// 0x0000 (0x0058 - 0x0058)
class UIWeatherBehavior : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IWeatherBehavior");
		}

		return uClassPointer;
	};

	void DestroyWeatherSystem();
	void CreateWeatherSystem(class UParticleSystem* WeatherSystemTemplate, class UParticleSystem* NewScreenEffectsTemplate);
};

// Class WillowGame.IWillowScrollingListDataProvider
// 0x0000 (0x0058 - 0x0058)
class UIWillowScrollingListDataProvider : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IWillowScrollingListDataProvider");
		}

		return uClassPointer;
	};

};

// Class WillowGame.IWillowStorable
// 0x0000 (0x0058 - 0x0058)
class UIWillowStorable : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.IWillowStorable");
		}

		return uClassPointer;
	};

	bool Put(class AInventory* Thing);
	bool Get(class AWillowInventory* Thing);
	bool Swap(class AWillowInventory* ThingA, class AWillowInventory* ThingB);
};

// Class WillowGame.LevelDependencyList
// 0x0028 (0x0058 - 0x0080)
class ULevelDependencyList : public UGBXDefinition
{
public:
	struct FName                                       LoaderMap;                                     // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FPersistentMapDependencies>    LevelList;                                     // 0x0060 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FName                                       LevelWorldDiscoveryStatID;                     // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            TotalNumWorldDiscoveryAreas;                   // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelDependencyList");
		}

		return uClassPointer;
	};

	class FString GetFriendlyLevelNameFromMapName(const struct FName& PersistentMapName);
};

// Class WillowGame.LevelLandmarkAnchor
// 0x0030 (0x0260 - 0x0290)
class ALevelLandmarkAnchor : public ALevelLandmark
{
public:
	class UTexture2D*                                  Texture;                                       // 0x0260 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Opacity;                                       // 0x0268 (0x0004) [0x0000000200000001] (CPF_Edit)    
	int32_t                                            TextureSizeX;                                  // 0x026C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            TextureSizeY;                                  // 0x0270 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      MapFrame;                                      // 0x0278 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UGFxMovieInfo*                               DLCMap;                                        // 0x0288 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelLandmarkAnchor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LevelLandmarkAnchorRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class ULevelLandmarkAnchorRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelLandmarkAnchorRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LevelStreamingVolumeDynamic
// 0x0000 (0x02A8 - 0x02A8)
class ALevelStreamingVolumeDynamic : public ALevelStreamingVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelStreamingVolumeDynamic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LocalizedStringDefinition
// 0x0010 (0x0058 - 0x0068)
class ULocalizedStringDefinition : public UGBXDefinition
{
public:
	class FString                                      Text;                                          // 0x0058 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalizedStringDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LockoutDefinition
// 0x0018 (0x0058 - 0x0070)
class ULockoutDefinition : public UGBXDefinition
{
public:
	ELockoutStyle                                      Style;                                         // 0x0058 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Days;                                          // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Hours;                                         // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Minutes;                                       // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UDownloadableExpansionDefinition*            DlcExpansion;                                  // 0x0068 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LockoutDefinition");
		}

		return uClassPointer;
	};

	static int32_t ComputePackedSystemTime();
};

// Class WillowGame.LookAxisDefinition
// 0x0018 (0x0058 - 0x0070)
class ULookAxisDefinition : public UGBXDefinition
{
public:
	float                                              Speed;                                         // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomSpeed;                                     // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelThreshold;                                // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelRate;                                     // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelSpeed;                                    // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AccelWarmup;                                   // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LookAxisDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LookingAtInjuredPlayerExpressionEvaluator
// 0x0000 (0x0058 - 0x0058)
class ULookingAtInjuredPlayerExpressionEvaluator : public UExpressionEvaluator
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LookingAtInjuredPlayerExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.LootConfigurationDefinition
// 0x0030 (0x0058 - 0x0088)
class ULootConfigurationDefinition : public UGBXDefinition
{
public:
	class TArray<struct FLootData>                     Loot;                                          // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FAttributeInitializationData                Probability;                                   // 0x0068 (0x0020) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LootConfigurationDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ManufacturerAttributeValueResolver
// 0x0030 (0x0058 - 0x0088)
class UManufacturerAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                             // 0x0058 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FManufacturerSelectorData>     Manufacturers;                                 // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ManufacturerAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MeleeDefinition
// 0x01E8 (0x0058 - 0x0240)
class UMeleeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                        // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0060 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPhysicsAffector;                     // 0x0068 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FAttributeInitializationData                Damage;                                        // 0x0070 (0x0020) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      DamageSource;                                  // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       DamageTypeDefinitionOverride;                  // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UDamageTypeDefinition*                       DamageTypeDefinition;                          // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x00A8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UImpactDefinition*                           ImpactDefinition;                              // 0x00B0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAttributeInitializationData                StatusEffectDamage;                            // 0x00B8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectChance;                            // 0x00D8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageAllHitRegions : 1;                   // 0x00F8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyZeroDamage : 1;                          // 0x00F8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bZeroHitStartPitch : 1;                        // 0x00F8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bFixedUpHitStartDirection : 1;                 // 0x00F8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bFixedUpRadiusCanDamageAllHitRegions : 1;      // 0x00F8 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bMeleeOverPeriodOfTime : 1;                    // 0x00F8 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bHitEachTargetOnlyOnce : 1;                    // 0x00F8 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bStopMeleeOnLanded : 1;                        // 0x00F8 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bAffectEnemy : 1;                              // 0x00F8 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bAffectFriendly : 1;                           // 0x00F8 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bAffectNeutral : 1;                            // 0x00F8 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bUseDamageRadius : 1;                          // 0x00F8 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bExpandRadiusOverTime : 1;                     // 0x00F8 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bFindTargetedHitRegion : 1;                    // 0x00F8 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bIgnoreWorldGeometry : 1;                      // 0x00F8 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bUseTargetCone : 1;                            // 0x00F8 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bProjEffectsImpactDirectionPerpToKnockback : 1;// 0x00F8 (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	struct FName                                       HitStartSocketOrBone;                          // 0x00FC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     HitStartOffset;                                // 0x0104 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxMeleeDuration;                              // 0x0110 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	struct FAttributeInitializationData                MaxMeleeDurationFormula;                       // 0x0118 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AttackInterval;                                // 0x0138 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	struct FAttributeInitializationData                AttackIntervalFormula;                         // 0x0140 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DamageRadius;                                  // 0x0160 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	struct FAttributeInitializationData                DamageRadiusFormula;                           // 0x0168 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DamageHeight;                                  // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageConeAngle;                               // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageHeightOffset;                            // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       PreferredHitLocation;                          // 0x0194 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ConeAngle;                                     // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TraceDistance;                                 // 0x01A0 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	struct FAttributeInitializationData                TraceDistanceFormula;                          // 0x01A8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnHitEnemy;                                    // 0x01C8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnHitEnemyHealth;                              // 0x01D8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnHitEnemyShield;                              // 0x01E8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnHitFriendly;                                 // 0x01F8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnHitEnemyOrFriendly;                          // 0x0208 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnKilledEnemy;                                 // 0x0218 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	EMeleeEffectsDirectionSource                       EffectsDirectionSource;                        // 0x0228 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       EffectsImpactDirectionSocket;                  // 0x022C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EffectsClockFaceDirection;                     // 0x0234 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0238 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MeleeDefinition");
		}

		return uClassPointer;
	};

	void OnKilledEnemyObject(class UObject* MeleeInstigator, class UObject* KilledObject, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitDamagableObject(EMeleeOnHitOutputs EventOutput, class UObject* MeleeInstigator, class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t DamageSurfaceType, class UAkSwitch* MaterialAkSwitch, struct FBehaviorConsumerHandle& ConsumerHandle);
	void DamageResult_KilledNeutral(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledFriendly(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledEnemy(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_DamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void DamageResult_DamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags);
	void DamageResult_DamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	static bool IsMeleeDebugEnabled();
	static void ToggleMeleeDebug();
	bool MeleeAttack(class UObject* ContextObject, bool optionalBTest, float optionalOverrideEffectsClockFaceDirection, const struct FName& optionalOverrideStartSocket);
};

// Class WillowGame.MontageGFxObject
// 0x0038 (0x00D8 - 0x0110)
class UMontageGFxObject : public UGFxObject
{
public:
	class AWillowPlayerController*                     WPCOwner;                                      // 0x00D8 (0x0008) [0x0000000000000000]               
	class UCreditsGFxDefinition*                       CreditsDef;                                    // 0x00E0 (0x0008) [0x0000000000000000]               
	class FString                                      LinkageName;                                   // 0x00E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            MontageIdx;                                    // 0x00F8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bShouldShowImages : 1;                         // 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bMontageTexturesLoaded : 1;                    // 0x00FC (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class TArray<class UTexture2D*>                    MontageTextures;                               // 0x0100 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MontageGFxObject");
		}

		return uClassPointer;
	};

	void extFadeOutComplete();
	void extFadeInComplete();
	void FadeOut();
	void FadeIn();
	void StartNewTexture();
	bool StartNextTexture();
	void Close();
	void eventOnMontageTexturesLoaded();
	void Init(class UCreditsGFxDefinition* CreditsDefinition, const class FString& TextureLinkageName);
	void SetShouldShowImages();
	void ClearMontageTextures();
	void AddMontageTextures();
};

// Class WillowGame.MovementComponent
// 0x0000 (0x0090 - 0x0090)
class UMovementComponent : public UActorComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MovementComponent");
		}

		return uClassPointer;
	};

	void Init();
};

// Class WillowGame.DrunkenBaseComponent
// 0x0040 (0x0090 - 0x00D0)
class UDrunkenBaseComponent : public UMovementComponent
{
public:
	float                                              StartApproachDistance;                         // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StartDelayTime;                                // 0x0094 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EaseInTime;                                    // 0x0098 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StartTime;                                     // 0x009C (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bInitialized : 1;                              // 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	int32_t                                            RandomNumberSeed;                              // 0x00A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0x8];                            // 0x00A8 (0x0008) MISSED OFFSET
	struct FQuat                                       LastVelocityRotOffset;                         // 0x00B0 (0x0010) [0x0000000000002000] (CPF_Transient)
	struct FQuat                                       LastAccelRotOffset;                            // 0x00C0 (0x0010) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DrunkenBaseComponent");
		}

		return uClassPointer;
	};

	void GenerateRandomNumberSeed();
	void SetRandomNumberSeed(int32_t InRandomNumberSeed);
	void Init();
};

// Class WillowGame.DrunkenRandomComponent
// 0x0040 (0x00D0 - 0x0110)
class UDrunkenRandomComponent : public UDrunkenBaseComponent
{
public:
	float                                              PathCorrectionInterval;                        // 0x00D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TurnSpeed;                                     // 0x00D4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ApproachTurnSpeed;                             // 0x00D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxSpreadAngle;                                // 0x00DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxDepartureAngle;                             // 0x00E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LastUpdateTime;                                // 0x00E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastDepartureAngle;                            // 0x00E8 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    LastRotationOffset;                            // 0x00EC (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    TargetRotationOffset;                          // 0x00F8 (0x000C) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0xC];                            // 0x0104 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DrunkenRandomComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DrunkenWaveComponent
// 0x0020 (0x00D0 - 0x00F0)
class UDrunkenWaveComponent : public UDrunkenBaseComponent
{
public:
	float                                              MaxRandomWaveOffsetTime;                       // 0x00D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FDrunkenWaveFormData>          Waves;                                         // 0x00D8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              GlobalWaveScale;                               // 0x00E8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WaveOffsetTime;                                // 0x00EC (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DrunkenWaveComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.NPCLoadBalancer
// 0x0028 (0x0058 - 0x0080)
class UNPCLoadBalancer : public UObject
{
public:
	class TArray<struct FNPCList>                      TheList;                                       // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              LastPathTime;                                  // 0x0068 (0x0004) [0x0000000000000000]               
	int32_t                                            NumberNPCsMoving;                              // 0x006C (0x0004) [0x0000000000000000]               
	float                                              LastUpdateTime;                                // 0x0070 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxNumberPathing;                              // 0x0074 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              TimeBetweenUpdates;                            // 0x0078 (0x0004) [0x0000000000004000] (CPF_Config)  
	uint32_t                                           NumberPathingReducedByPlayerCount : 1;         // 0x007C (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.NPCLoadBalancer");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	bool CheckPathing(class AWillowMind* InMind);
	bool WantsToPath(class AWillowMind* InMind);
	void PathFailed(class AWillowMind* InMind);
	void ClearList();
	void OnPerch(class AWillowMind* InMind, bool bOnPerch);
	void IsPathing(class AWillowMind* InMind, bool bPathing);
	bool CanContinuePath(class AWillowMind* InMind);
	bool CanStartPath(class AWillowMind* InMind);
};

// Class WillowGame.NumberWeaponsEquippedExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UNumberWeaponsEquippedExpressionEvaluator : public UExpressionEvaluator
{
public:
	int32_t                                            NumberOfWeapons;                               // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.NumberWeaponsEquippedExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.NxFootForceFieldComponent
// 0x0000 (0x03F0 - 0x03F0)
class UNxFootForceFieldComponent : public UNxForceFieldRadialComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.NxFootForceFieldComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.OptionsGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UOptionsGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.OptionsGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PersonalTeleporterDefinition
// 0x0030 (0x0058 - 0x0088)
class UPersonalTeleporterDefinition : public UGBXDefinition
{
public:
	class UParticleSystem*                             ParticleEffect;                                // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             PlayerTeleportedEffect;                        // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlayerTeleportedEffectLifespan;                // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SpawnDistance;                                 // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ReturnTeleporterLocationOffset;                // 0x0070 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              CollisionRadius;                               // 0x007C (0x0004) [0x0000000000000000]               
	float                                              CollisionHeight;                               // 0x0080 (0x0004) [0x0000000000000000]               
	float                                              ExitPointDistance;                             // 0x0084 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PersonalTeleporterDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PhaseLockDefinition
// 0x0030 (0x0058 - 0x0088)
class UPhaseLockDefinition : public UGBXDefinition
{
public:
	float                                              DropTime;                                      // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HeightFromGround;                              // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExpressionEvaluator*                        CanPlayDropAnims;                              // 0x0060 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class USpecialMove_PhaseLock*                      LiftAnim;                                      // 0x0068 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class USpecialMove_PhaseLock*                      LoopAnim;                                      // 0x0070 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class USpecialMove_PhaseLock*                      DropAnim;                                      // 0x0078 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class USpecialMove_PhaseLock*                      LandAnim;                                      // 0x0080 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PhaseLockDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlaceableDynamicSMActor
// 0x0000 (0x0290 - 0x0290)
class APlaceableDynamicSMActor : public ADynamicSMActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlaceableDynamicSMActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerActionExpressionEvaluator
// 0x0010 (0x0058 - 0x0068)
class UPlayerActionExpressionEvaluator : public UExpressionEvaluator
{
public:
	class TArray<struct FEvalActionData>               EvalActions;                                   // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerActionExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.PlayerBehaviorBase
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehaviorBase : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehaviorBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_CameraAnim
// 0x0008 (0x0070 - 0x0078)
class UPlayerBehavior_CameraAnim : public UPlayerBehaviorBase
{
public:
	class UCameraAnim*                                 Anim;                                          // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_CameraAnim");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_ForceFeedback
// 0x0010 (0x0070 - 0x0080)
class UPlayerBehavior_ForceFeedback : public UPlayerBehaviorBase
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                    // 0x0070 (0x0008) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	uint32_t                                           ForWeaponFiring : 1;                           // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_ForceFeedback");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_HideCrosshair
// 0x0008 (0x0070 - 0x0078)
class UPlayerBehavior_HideCrosshair : public UPlayerBehaviorBase
{
public:
	uint32_t                                           bHide : 1;                                     // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_HideCrosshair");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_Reload
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_Reload : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_Reload");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_SetCurrentProjectile
// 0x0008 (0x0070 - 0x0078)
class UPlayerBehavior_SetCurrentProjectile : public UPlayerBehaviorBase
{
public:
	class UProjectileDefinition*                       CurrentProjectile;                             // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_SetCurrentProjectile");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_SpawnCurrentProjectile
// 0x0030 (0x0070 - 0x00A0)
class UPlayerBehavior_SpawnCurrentProjectile : public UPlayerBehaviorBase
{
public:
	class UProjectileDefinition*                       ProjectileToSpawn;                             // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bConsumeResource : 1;                          // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnFromLeftHand : 1;                        // 0x0078 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bNoVelocity : 1;                               // 0x0078 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bSaveProjectileReference : 1;                  // 0x0078 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InstanceDataContext;                           // 0x0080 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SavedReferenceName;                            // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_SpawnCurrentProjectile");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_StopForceFeedback
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_StopForceFeedback : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_StopForceFeedback");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_ToggleMeleeWeapon
// 0x0008 (0x0070 - 0x0078)
class UPlayerBehavior_ToggleMeleeWeapon : public UPlayerBehaviorBase
{
public:
	uint32_t                                           bAttach : 1;                                   // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyToFirstPerson : 1;                       // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyToThirdPerson : 1;                       // 0x0070 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_ToggleMeleeWeapon");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_UnlockAchievement
// 0x0008 (0x0070 - 0x0078)
class UPlayerBehavior_UnlockAchievement : public UPlayerBehaviorBase
{
public:
	EAchievementList                                   Achievement;                                   // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_UnlockAchievement");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_UnlockAchievementForAllPlayers
// 0x0008 (0x0070 - 0x0078)
class UPlayerBehavior_UnlockAchievementForAllPlayers : public UPlayerBehaviorBase
{
public:
	EAchievementList                                   Achievement;                                   // 0x0070 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinimumPlayersRequired;                        // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_UnlockAchievementForAllPlayers");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBehavior_ViewShake
// 0x0048 (0x0070 - 0x00B8)
class UPlayerBehavior_ViewShake : public UPlayerBehaviorBase
{
public:
	struct FGearboxViewShakeInfo                       ShakeInfo;                                     // 0x0070 (0x0044) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_ViewShake");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.PlayerBlockingVolume
// 0x0000 (0x0290 - 0x0290)
class APlayerBlockingVolume : public ABlockingVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBlockingVolume");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
};

// Class WillowGame.ExecuteBlockingVolume
// 0x0000 (0x0290 - 0x0290)
class AExecuteBlockingVolume : public APlayerBlockingVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ExecuteBlockingVolume");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
};

// Class WillowGame.PlayerClassAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UPlayerClassAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                 // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerClassAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerClassCountAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UPlayerClassCountAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                 // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerClassCountAttributeValueResolver");
		}

		return uClassPointer;
	};

	static void ResetPlayerClassCountOverride();
	static void SetPlayerClassCountOverride(class UPlayerClassIdentifierDefinition* PlayerClassIdToOverride, int32_t Override);
};

// Class WillowGame.PlayerClassIdentifierDefinition
// 0x0060 (0x0058 - 0x00B8)
class UPlayerClassIdentifierDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                 // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class FString                                      ClassName;                                     // 0x0060 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      LocalizedClassName;                            // 0x0070 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      LocalizedClassNameNonCaps;                     // 0x0080 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	struct FName                                       StatPlayerFirstSkillPoint;                     // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDownloadableCharacterDefinition*            DlcCharacterDef;                               // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributeInitializationDefinition*          ClassDropInitializationDefinition;             // 0x00A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FCustomizationItemData>        CharacterCustomizations;                       // 0x00A8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerClassIdentifierDefinition");
		}

		return uClassPointer;
	};

	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
};

// Class WillowGame.PlayerControllerAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UPlayerControllerAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerControllerAttributeContextResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerInteractionClient
// 0x0000 (0x0058 - 0x0058)
class UPlayerInteractionClient : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerInteractionClient");
		}

		return uClassPointer;
	};

	void eventSendMessageW(int32_t MessageData, class UObject* Data);
	void HandleMessage(int32_t MessageData, class UObject* optionalData);
	void ShutDown();
	void Initialize(int32_t MessageData);
};

// Class WillowGame.WillowGameInfo
// 0x01A8 (0x0428 - 0x05D0)
class AWillowGameInfo : public AGearboxGameInfo
{
public:
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;           // 0x0428 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UClass*                                      SkillEffectManagerClass;                       // 0x0430 (0x0008) [0x0000000000000000]               
	uint32_t                                           bWeaponStay : 1;                               // 0x0438 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDemoMode : 1;                                 // 0x0438 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bConsoleServer : 1;                            // 0x0438 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bResurrectAllPlayersWhenOneDies : 1;           // 0x0438 (0x0004) [0x0000000000004000] [0x00000008] (CPF_Config)
	uint32_t                                           bBossesRegenHealthOnReset : 1;                 // 0x0438 (0x0004) [0x0000000000004000] [0x00000010] (CPF_Config)
	uint32_t                                           bEnemiesForgetDownedPlayers : 1;               // 0x0438 (0x0004) [0x0000000000004000] [0x00000020] (CPF_Config)
	uint32_t                                           bEnemiesCannotDoCloseAttacksOnDownedPlayers : 1;// 0x0438 (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	uint32_t                                           bIgnoreFriendlyFire : 1;                       // 0x0438 (0x0004) [0x0000000000004000] [0x00000080] (CPF_Config)
	uint32_t                                           bIgnoreNPCFriendlyFire : 1;                    // 0x0438 (0x0004) [0x0000000000004000] [0x00000100] (CPF_Config)
	uint32_t                                           bFromSeamlessTravel : 1;                       // 0x0438 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	float                                              AdjustedDifficulty;                            // 0x043C (0x0004) [0x0000000000000000]               
	class AActor*                                      LastPlayerStartSpot;                           // 0x0440 (0x0008) [0x0000000000000000]               
	class AActor*                                      LastStartSpot;                                 // 0x0448 (0x0008) [0x0000000000000000]               
	class UGlobalsDefinition*                          MyGlobals;                                     // 0x0450 (0x0008) [0x0000000000000000]               
	class ASkillEffectManager*                         GlobalSkillManager;                            // 0x0458 (0x0008) [0x0000000000000000]               
	class UPlayerInteractionManager*                   GlobalPlayerInteractionManager;                // 0x0460 (0x0008) [0x0000000000000000]               
	class UCombatMusicManager*                         GlobalCombatMusicManager;                      // 0x0468 (0x0008) [0x0000000000000000]               
	class TArray<class UInstancedDesignerAttribute*>   DesignerAttributes;                            // 0x0470 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AWillowPersonalTeleporter*                   ReturnTeleporter;                              // 0x0480 (0x0008) [0x0000000000000000]               
	class AWillowPersonalTeleporter*                   PersonalTeleporter;                            // 0x0488 (0x0008) [0x0000000000000000]               
	struct FName                                       TeleporterDestinationName;                     // 0x0490 (0x0008) [0x0000000000000000]               
	class TArray<class UIPlayerObserver*>              PlayerObservers;                               // 0x0498 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      MapChangeInitiated;                            // 0x04A8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangePlayerDown;                           // 0x04B8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangePlayerInMenu;                         // 0x04C8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeYouAreInMenu;                         // 0x04D8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCountdown;                            // 0x04E8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCanceledPlayerDown;                   // 0x04F8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCanceledPlayerMenu;                   // 0x0508 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangePlayerIsSaving;                       // 0x0518 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCanceledPlayerIsSaving;               // 0x0528 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangePlayerJoining;                        // 0x0538 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeUnknownPlayerJoining;                 // 0x0548 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCanceledPlayerJoining;                // 0x0558 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCanceledUnknownPlayerJoining;         // 0x0568 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangePlayerRespawn;                        // 0x0578 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MapChangeCanceledPlayerRespawn;                // 0x0588 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            TravelCountdownTime;                           // 0x0598 (0x0004) [0x0000000000000000]               
	int32_t                                            TravelPostCountdownTime;                       // 0x059C (0x0004) [0x0000000000000000]               
	class UBehavior_CheckMapChangeConditions*          TravelBehavior;                                // 0x05A0 (0x0008) [0x0000000000000000]               
	class UIBehaviorConsumer*                          TravelEventInterface_Object;                   // 0x05A8 (0x0008) [0x0000000000000000] 
	class UIBehaviorConsumer*                          TravelEventInterface_Interface;                // 0x05B0 (0x0008) [0x0000000000000000]               
	class AWillowPlayerController*                     TravelInstigator;                              // 0x05B8 (0x0008) [0x0000000000000000]               
	class TArray<class FString>                        RecordedDialogEvents;                          // 0x05C0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGameInfo");
		}

		return uClassPointer;
	};

	void RegisterSpawnedActor(class AActor* SpawnedActor);
	void PawnReceivedDamage(class AController* Victim, class AController* Attacker, class UIDamageCauser* DamageCauser, class UClass* DamageType, class UDamagePipeline* Pipeline);
	void CheckAllClientsLoaded();
	void eventPostSeamlessTravel();
	void eventGetSeamlessTravelActorList(bool bToEntry, class TArray<class AActor*>& ActorList);
	void GenericPlayerInitialization(class AController* C);
	void RegisterServer();
	void ClearRemainingProjectiles();
	bool TravelPostCountdownInProcess();
	bool TravelCountdownInProcess();
	void ClearTravelData();
	void TravelPostCountdown();
	void TravelCountdown();
	void InitiateTravel(class APlayerController* InstigatingPlayer, const struct FName& optionalStationDefinitionName, class UBehavior_CheckMapChangeConditions* optionalBehavior, class UIBehaviorConsumer* optionalEventInterface);
	bool CanAllPlayersTravelToDlcDestination(class UDownloadableExpansionDefinition* ExpansionDef);
	class TArray<class AWillowPlayerController*> GetDlcCannotTravelPlayerList(class UDownloadableExpansionDefinition* ExpansionDef);
	void TravelToFastTravelStation(const struct FName& StationDefinitionName);
	void TeleportToFinalDestinationAfterLoad();
	void TravelToRealDestinationLevel();
	void CommitTravelToNewLevel();
	void TravelToStation(bool optionalBForceLevelLoad);
	bool eventCheckMapChangeConditions(class APlayerController* optionalInstigatingPlayer);
	bool ShouldSpawnAtStartSpot(class AController* Player);
	void eventEndGameHack(class APlayerReplicationInfo* Winner, const class FString& Reason);
	void DelayedEndGame();
	void InitGameReplicationInfo();
	void eventPostCommitMapChange();
	void PlayerLeftGameNotification(class APlayerController* PC);
	void PlayerEnteredGameNotification(class APlayerController* PC);
	void UpdatePlayerObservers();
	void RemovePlayerObserver(class UIPlayerObserver* Observer);
	void AddPlayerObserver(class UIPlayerObserver* Observer);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	void InitiatePlayerPawnDataLoad(class AController* NewPlayer);
	void ResurrectAllPlayers(class APawn* DeadPlayer);
	void HandlePlayerDeathResurrection(class APawn* DeadPlayer, EResurrectReason optionalResurrectReason);
	void ResetAI();
	static bool ShouldCensorContent();
	bool IsEditor();
	class UCombatMusicManager* GetCombatMusicManager();
	class UPlayerInteractionManager* GetPlayerInteractionManager();
	class ASkillEffectManager* GetSkillManager();
	class APlayerController* eventLogin(const class FString& Portal, const class FString& Options, const struct FUniqueNetId& UniqueId, class FString& ErrorMessage);
	void AwardCombatExperience(class AWillowPlayerController* KillerWPC, class AActor* KilledActor, float TotalExpPoints);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, class UDamagePipeline* Pipeline);
	class AActor* FindPlayerStart(class AController* Player, uint8_t optionalInTeam, const class FString& optionalIncomingName);
	float RatePlayerStart(class APlayerStart* P, uint8_t Team, class AController* Player);
	class FString DecodeEvent(const struct FName& EventType, int32_t TeamNo, const class FString& InstigatorName, const class FString& AdditionalName, class UClass* AdditionalObj);
	void eventRestartPlayer(class AController* NewPlayer);
	void SyncKismetSetProperties(class AWillowPlayerController* PC);
	void EndGame(class APlayerReplicationInfo* Winner, const class FString& Reason);
	void OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI);
	void Logout(class AController* Exiting);
	void eventPostLogin(class APlayerController* NewPlayer);
	void DiscardInventory(class APawn* Other, class AController* optionalKiller);
	bool ShouldPawnDropWeaponOnDeath(class APawn* P);
	void ApplyGlobalPlayerMovementSettings(class APawn* PlayerPawn);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	void eventInitGame(const class FString& Options, class FString& ErrorMessage);
	void PostBeginPlay();
	void PreBeginPlay();
};

// Class WillowGame.PlayerInteractionManager
// 0x0018 (0x0058 - 0x0070)
class UPlayerInteractionManager : public UObject
{
public:
	class TArray<struct FActiveInteraction>            Interactions;                                  // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              TickDelay;                                     // 0x0068 (0x0004) [0x0000000000000000]               
	float                                              TimeToTick;                                    // 0x006C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerInteractionManager");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float out_YL, float out_YPos);
	void GetInteractionPlayers(class UPlayerInteractionServer* ForServer, class TArray<class AWillowPlayerController*>& Players);
	bool IsInInteraction(class AWillowPlayerController* Player);
	class UPlayerInteractionServer* GetServerForPlayer(class AWillowPlayerController* Player);
	class AWillowPlayerController* GetInstigator(class UPlayerInteractionServer* Server);
	void RelayMessage(class AWillowPlayerController* FromPlayer, class UClass* ClientType, int32_t MessageValue, class UObject* optionalData);
	bool StartInteraction(class UPlayerInteractionServer* NewServer, const class TArray<class AWillowPlayerController*>& Players, class AWillowPlayerController* optionalInteractionInstigator);
};

// Class WillowGame.PlayerInteractionServer
// 0x0008 (0x0058 - 0x0060)
class UPlayerInteractionServer : public UObject
{
public:
	uint32_t                                           bIsDone : 1;                                   // 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              TimeoutTime;                                   // 0x005C (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerInteractionServer");
		}

		return uClassPointer;
	};

	bool IsValid();
	bool CanReceiveMessages();
	void MarkDone();
	void eventHandleInteractionEnded();
	void BroadcastMessage(int32_t MessageData, class UObject* optionalData);
	void SendMessageW(class AWillowPlayerController* Player, int32_t MessageData, class UObject* optionalData);
	bool UsesClientType(class UClass* ClientType);
	void HandleMessage(class AWillowPlayerController* FromPlayer, int32_t MessageData, class UObject* optionalData);
	class UClass* GetClientType();
	int32_t GetInitialMessageForPlayer(class AWillowPlayerController* WPC);
	void Initialize();
};

// Class WillowGame.PlayerKillVolume
// 0x0008 (0x0288 - 0x0290)
class APlayerKillVolume : public AVolume
{
public:
	uint32_t                                           bKillPlayers : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bKillAIPawns : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInstaKill : 1;                                // 0x0288 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerKillVolume");
		}

		return uClassPointer;
	};

	void KillAIPawn(class AWillowPawn* WAP);
	class AController* GetBestKillerFor(class APawn* P);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};

// Class WillowGame.PlayerNameIdentifierDefinition
// 0x0068 (0x0058 - 0x00C0)
class UPlayerNameIdentifierDefinition : public UGBXDefinition
{
public:
	class FString                                      CharacterName;                                 // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class FString                                      LocalizedCharacterName;                        // 0x0068 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      LocalizedCharacterDescription;                 // 0x0078 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      LocalizedActionSkillDescription;               // 0x0088 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      LocalizedPreferredWeaponDescription;           // 0x0098 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            XlastCharacterIdOffset;                        // 0x00A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPlayerClassIdentifierDefinition*            CharacterClassId;                              // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            UISortOrder;                                   // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           IsDefaultNewCharacter : 1;                     // 0x00BC (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerNameIdentifierDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerReplicationInfoAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UPlayerReplicationInfoAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerReplicationInfoAttributeContextResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerSkillAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UPlayerSkillAttributeValueResolver : public UAttributeValueResolver
{
public:
	class USkillDefinition*                            AssociatedSkill;                               // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerSkillAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerSkillTree
// 0x00B0 (0x0058 - 0x0108)
class UPlayerSkillTree : public UObject
{
public:
	int32_t                                            SkillTreeRootIndex;                            // 0x0058 (0x0004) [0x0000000000000000]               
	class TArray<struct FPlayerSkillTreeBranchData>    Branches;                                      // 0x0060 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FPlayerSkillTreeTierData>      Tiers;                                         // 0x0070 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FPlayerSkillTreeSkillData>     Skills;                                        // 0x0080 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                           UnknownData00[0x50];                           // 0x0090 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.PlayerSkillTree.SkillDefinitionToIndex
	int32_t                                            FirstSkillTypeIndex[0x5];                      // 0x00E0 (0x0014) [0x0000000000000000]               
	uint32_t                                           bSuppressNotifications : 1;                    // 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bInitialized : 1;                              // 0x00F4 (0x0004) [0x0000000000000000] [0x00000002] 
	class TArray<class UISkillTreeListener*>           SkillTreeListeners;                            // 0x00F8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerSkillTree");
		}

		return uClassPointer;
	};

	void PlayerLeveledUp(int32_t NewExpLevel);
	int32_t GetSkillPointsSpentInTree();
	void UnRegisterListener(class UISkillTreeListener* listener);
	void RegisterListener(class UISkillTreeListener* listener);
	void Initialize(class USkillTreeDefinition* SkillTreeDef);
	bool HasTrainedASkillOfType(ESkillType SkillType);
	class USkillDefinition* GetActionSkill();
	bool GetTierLayout(class USkillTreeBranchDefinition* BranchDef, int32_t TierNumber, struct FSkillTreeTierLayoutData& OutTierLayout);
	bool GetTierState(class USkillTreeBranchDefinition* BranchDef, int32_t TierNumber, struct FSkillTreeTierStateData& OutTierState);
	bool GetBranchState(class USkillTreeBranchDefinition* BranchDef, struct FSkillTreeBranchStateData& OutBranchState);
	bool GetSkillState(class USkillDefinition* SkillDef, struct FSkillTreeSkillStateData& OutSkillState);
	void DumpTree();
	bool SetSkillGrade(class USkillDefinition* Skill, int32_t SkillGrade);
	bool UpgradeSkill(class USkillDefinition* Skill);
};

// Class WillowGame.PlayerStandIn
// 0x0000 (0x0240 - 0x0240)
class APlayerStandIn : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerStandIn");
		}

		return uClassPointer;
	};

	int32_t GetPlayerIndex();
};

// Class WillowGame.PlayerStateInfoAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UPlayerStateInfoAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerStateInfoAttributeContextResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayThroughCountAttributeValueResolver
// 0x0000 (0x0058 - 0x0058)
class UPlayThroughCountAttributeValueResolver : public UAttributeValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayThroughCountAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PostureStateExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UPostureStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	uint32_t                                           bStanding : 1;                                 // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCrouched : 1;                                 // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInjured : 1;                                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSprinting : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PostureStateExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.ProjectileBehaviorBase
// 0x0000 (0x0070 - 0x0070)
class UProjectileBehaviorBase : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehaviorBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ProjectileBehavior_Attach
// 0x0030 (0x0070 - 0x00A0)
class UProjectileBehavior_Attach : public UProjectileBehaviorBase
{
public:
	class UAkEvent*                                    AttachAkEvent;                                 // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      HitActor;                                      // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     HitNormal;                                     // 0x0080 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     HitLocation;                                   // 0x008C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            BoneIndex;                                     // 0x0098 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_Attach");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_Bounce
// 0x0038 (0x0070 - 0x00A8)
class UProjectileBehavior_Bounce : public UProjectileBehaviorBase
{
public:
	class UAkEvent*                                    BounceAkEvent;                                 // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ElasticityScaleFormula;                        // 0x0078 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     HitNormal;                                     // 0x0098 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ElasticityScale;                               // 0x00A4 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_Bounce");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_Detonate
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_Detonate : public UProjectileBehaviorBase
{
public:
	ETargetAllegiance                                  TargetAllegiance;                              // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_Detonate");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_FindHomingTarget
// 0x0020 (0x0070 - 0x0090)
class UProjectileBehavior_FindHomingTarget : public UProjectileBehaviorBase
{
public:
	EHomingTargetType                                  TargetType;                                    // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TargetSearchFOVAngle;                          // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TargetSearchRange;                             // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bNotInstigator : 1;                            // 0x007C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bIgnoreFOVZTest : 1;                           // 0x007C (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bBestForwardTarget : 1;                        // 0x007C (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bRetryIfTargetNotFound : 1;                    // 0x007C (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bUniqueTarget : 1;                             // 0x007C (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	struct FVector                                     TargetOffset;                                  // 0x0080 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_FindHomingTarget");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_FollowSpline
// 0x0030 (0x0070 - 0x00A0)
class UProjectileBehavior_FollowSpline : public UProjectileBehaviorBase
{
public:
	uint32_t                                           bFollowSpline : 1;                             // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              TurnRate;                                      // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        Spline;                                        // 0x0078 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    OffsetRange;                                   // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    DistanceRange;                                 // 0x0098 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_FollowSpline");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_LevelOff
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_LevelOff : public UProjectileBehaviorBase
{
public:
	float                                              DesiredWorldZToLevelOff;                       // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurnSpeed;                                     // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_LevelOff");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_SetDamageTypeDefinition
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_SetDamageTypeDefinition : public UProjectileBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 DamageTypeDefinition;                          // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_SetDamageTypeDefinition");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_SetExplosionDefinition
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_SetExplosionDefinition : public UProjectileBehaviorBase
{
public:
	class UExplosionDefinition*                        ExplosionDefinition;                           // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_SetExplosionDefinition");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_SetHomingTarget
// 0x0020 (0x0070 - 0x0090)
class UProjectileBehavior_SetHomingTarget : public UProjectileBehaviorBase
{
public:
	class AActor*                                      AssignedTarget;                                // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     AssignedTargetLocation;                        // 0x0078 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     AssignedTargetLocationOffset;                  // 0x0084 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_SetHomingTarget");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_SetProximity
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_SetProximity : public UProjectileBehaviorBase
{
public:
	float                                              ProximityRadius;                               // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ProximityHeight;                               // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_SetProximity");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_SetSpeed
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_SetSpeed : public UProjectileBehaviorBase
{
public:
	float                                              NewSpeed;                                      // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SpeedMultiplier;                               // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_SetSpeed");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_SetStickyGrenade
// 0x0000 (0x0070 - 0x0070)
class UProjectileBehavior_SetStickyGrenade : public UProjectileBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_SetStickyGrenade");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileBehavior_TagPayloadType
// 0x0008 (0x0070 - 0x0078)
class UProjectileBehavior_TagPayloadType : public UProjectileBehaviorBase
{
public:
	EProjectilePayloadType                             PayloadType;                                   // 0x0070 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileBehavior_TagPayloadType");
		}

		return uClassPointer;
	};

	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo& KernelInfo);
};

// Class WillowGame.ProjectileDefinition
// 0x02E0 (0x0058 - 0x0338)
class UProjectileDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBodyProvider;                        // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0060 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPhysicsAffector;                     // 0x0068 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UMeshComponent*                              Mesh;                                          // 0x0070 (0x0008) [0x000000000408000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UAkEvent*                                    AmbientAkEvent;                                // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             InFlightEffects;                               // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        InFlightEffectsOverrideContext;                // 0x0088 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       InFlightEffectsOverrideName;                   // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              InFlightEffectsScale;                          // 0x00A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             OverchargedPSCTemplate;                        // 0x00B0 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class ATemporalField*                              TemporalField;                                 // 0x00B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        DamageTypeOverrideContext;                     // 0x00C0 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       DamageTypeOverrideName;                        // 0x00D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowDamageTypeDefinition*                 DefaultDamageTypeDefinition;                   // 0x00E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     BounceImpact;                                  // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     BounceImpactAkRtpc;                            // 0x00F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBehaviorContextData                        ExplosionOverrideContext;                      // 0x00F8 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ExplosionOverrideName;                         // 0x0110 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExplosionDefinition*                        DefaultExplosionDefinition;                    // 0x0118 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       DamageTypeParameterName;                       // 0x0120 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowRigidBodyImpactEffect : 1;               // 0x0128 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseCustomAimDirection : 1;                    // 0x0128 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bAlwaysOrientInDirectionOfMovement : 1;        // 0x0128 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bReplicateMovement : 1;                        // 0x0128 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bInheritVehicleVelocity : 1;                   // 0x0128 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bIgnoreRigidBodyPawns : 1;                     // 0x0128 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bTreatVehicleHitsAsTouch : 1;                  // 0x0128 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTouchInstigator : 1;                       // 0x0128 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bCollideActors : 1;                            // 0x0128 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bCollideWorld : 1;                             // 0x0128 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTouchCombatHiddenPawns : 1;                // 0x0128 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bStickyProjectilesDontChangeCollisionSize : 1; // 0x0128 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnNoCollisionFail : 1;                     // 0x0128 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bClientIgnoreHitAndTouch : 1;                  // 0x0128 (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAlsoUseZeroExtentTrace : 1;                   // 0x0128 (0x0004) [0x0000000000000003] [0x00004000] (CPF_Edit | CPF_Const)
	uint32_t                                           bTouchTargetablesOnce : 1;                     // 0x0128 (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bComplexCollision : 1;                         // 0x0128 (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanBeReflected : 1;                           // 0x0128 (0x0004) [0x0000000000000003] [0x00020000] (CPF_Edit | CPF_Const)
	uint32_t                                           bLagCompensatedCollision : 1;                  // 0x0128 (0x0004) [0x0000000000000003] [0x00040000] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTakeDirectDamage : 1;                      // 0x0128 (0x0004) [0x0000000000000003] [0x00080000] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanTakeRadiusDamage : 1;                      // 0x0128 (0x0004) [0x0000000000000003] [0x00100000] (CPF_Edit | CPF_Const)
	uint32_t                                           bTargetedImpactRadiusDamage : 1;               // 0x0128 (0x0004) [0x0000000000000003] [0x00200000] (CPF_Edit | CPF_Const)
	uint32_t                                           CanTarget : 1;                                 // 0x0128 (0x0004) [0x0000000000000003] [0x00400000] (CPF_Edit | CPF_Const)
	uint32_t                                           bWaitForEffects : 1;                           // 0x0128 (0x0004) [0x0000000000000003] [0x00800000] (CPF_Edit | CPF_Const)
	uint32_t                                           bTreatProjectileAsEnemy : 1;                   // 0x0128 (0x0004) [0x0000000000000003] [0x01000000] (CPF_Edit | CPF_Const)
	uint32_t                                           SmoothHomingReplication : 1;                   // 0x0128 (0x0004) [0x0000000000000001] [0x02000000] (CPF_Edit)
	uint32_t                                           bHomingRoll : 1;                               // 0x0128 (0x0004) [0x0000000000000001] [0x04000000] (CPF_Edit)
	uint32_t                                           bHomingCollisionAvoidance : 1;                 // 0x0128 (0x0004) [0x0000000000000001] [0x08000000] (CPF_Edit)
	uint32_t                                           bStopIfPastTarget : 1;                         // 0x0128 (0x0004) [0x0000000000000003] [0x10000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAdjustHomingZVelocity : 1;                    // 0x0128 (0x0004) [0x0000000000000003] [0x20000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bRetryIfTargetInvalid : 1;                     // 0x0128 (0x0004) [0x0000000000000003] [0x40000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanHomePhaselockedTargets : 1;                // 0x0128 (0x0004) [0x0000000000000003] [0x80000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAutoAimTarget : 1;                            // 0x012C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDynamicLightEnvironment : 1;                  // 0x012C (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bCastShadows : 1;                              // 0x012C (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bDynamic : 1;                                  // 0x012C (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bShadowFromEnvironment : 1;                    // 0x012C (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bAffectedBySmallDynamicLights : 1;             // 0x012C (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bDontDestroyIfVisible : 1;                     // 0x012C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bAICanAvoid : 1;                               // 0x012C (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bHitBulletListeners : 1;                       // 0x012C (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsPossibleHomingTarget : 1;                   // 0x012C (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	float                                              RigidBodyImpactEffectThreshold;                // 0x0130 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              RigidBodyImpactEffectDelay;                    // 0x0134 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     CustomAimDirection;                            // 0x0138 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UpwardVelocityBonus;                           // 0x0144 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                SpeedFormula;                                  // 0x0148 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Speed;                                         // 0x0168 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	EPhysics                                           PhysicsMode;                                   // 0x016C (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EAutoAimProfile                                    AutoAimProfile;                                // 0x016D (0x0001) [0x0000000000000001] (CPF_Edit)    
	EProjectileType                                    ProjectileType;                                // 0x016E (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              AtRestSpeedThreshold;                          // 0x0170 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              GravityScaling;                                // 0x0174 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FAttributeInitializationData                GravityScalingFormula;                         // 0x0178 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     WaveAmp;                                       // 0x0198 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     WaveFreq;                                      // 0x01A4 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     WavePhase;                                     // 0x01B0 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBulletListenerComponent*                    BulletListenerComponent;                       // 0x01C0 (0x0008) [0x000000000408000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              StickyChildSpawnCollisionIgnoreTime;           // 0x01C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                Damage;                                        // 0x01D0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DamageRadius;                                  // 0x01F0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                FuseTime;                                      // 0x0210 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                NumberOfChildProjectiles;                      // 0x0230 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x0250 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxLifespan;                                   // 0x0258 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FAttributeInitializationData                MaxLifespanFormula;                            // 0x0260 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPawnAllegiance*                             Allegiance;                                    // 0x0280 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ViewGuideDistance;                             // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ViewGuideLockOnAngle;                          // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SearchRadius;                                  // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurningRadius;                                 // 0x0294 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurnThresholdTight;                            // 0x0298 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurnThresholdWide;                             // 0x029C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HomingRollAmt;                                 // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HomingRollSpeed;                               // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FHomingThresholdEvent>         HomingThresholdEvents;                         // 0x02A8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FRotator                                    HomingRotationRate;                            // 0x02B8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      ProjectileClass;                               // 0x02C8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UResourceDefinition*                         Resource;                                      // 0x02D0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAttributeInitializationData                ResourceCost;                                  // 0x02D8 (0x0020) [0x0000000000000001] (CPF_Edit)    
	float                                              ExpPoints;                                     // 0x02F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LightingBoundsScale;                           // 0x02FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLinearColor                                AmbientGlow;                                   // 0x0300 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AIAvoidRadius;                                 // 0x0310 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      FlashIconName;                                 // 0x0318 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UBodyProviderDefinition*                     BodyProviderDefinition;                        // 0x0328 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0330 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProjectileDefinition");
		}

		return uClassPointer;
	};

	void OnReachedSplineEnd(class ASplineActor* Spline, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHomingThresholdEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHomingTargetChanged(EHomingTargetChangeType EventOutput, class AActor* TargetObject, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnReflected(class UObject* HitObject, const struct FVector& ReflectedDirection, const struct FVector& HitLocation, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTouchProximity(EProjectileOnHitOutputs EventOutput, class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t DamageSurfaceType, int32_t BoneIndex, class UAkSwitch* MaterialAkSwitch, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitTheWorld(class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, class UAkSwitch* HitMaterialAkSwitch, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitDamagableObject(EProjectileOnHitOutputs EventOutput, class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t DamageSurfaceType, int32_t BoneIndex, class UAkSwitch* MaterialAkSwitch, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledEnemy(class UObject* KilledObject, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledFriendly(class UObject* KilledObject, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledNeutral(class UObject* KilledObject, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnCounterEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTimerEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTookDirectOrRadiusDamage(class UObject* DamageCauser, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTookRadiusDamage(class UObject* DamageCauser, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTookDirectDamage(class UObject* DamageCauser, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnComeToRest(const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitWall(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitShields(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t BoneIndex, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitArmor(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t BoneIndex, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitFleshOrArmor(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t BoneIndex, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitFlesh(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t BoneIndex, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTouched(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int32_t BoneIndex, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnHitWater(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnExplode(class APawn* Instigator, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnSpawn(class APawn* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.ProximityActor
// 0x0018 (0x0240 - 0x0258)
class AProximityActor : public AActor
{
public:
	float                                              ProximityRadius;                               // 0x0240 (0x0004) [0x0000000000000000]               
	float                                              ProximityHeight;                               // 0x0244 (0x0004) [0x0000000000000000]               
	uint32_t                                           bInheritOwnerMoveTraceFlags : 1;               // 0x0248 (0x0004) [0x0000000000000000] [0x00000001] 
	class UCylinderComponent*                          ProximityCylinder;                             // 0x0250 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ProximityActor");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetProximitySize(float NewProximityRadius, float NewProximityHeight);
};

// Class WillowGame.PS3InvitesPopupGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UPS3InvitesPopupGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PS3InvitesPopupGFxObject");
		}

		return uClassPointer;
	};

	void Hide();
	void Show();
	void Refresh();
	void SelectionDown();
	void SelectionUp();
	void SetSelectedInviteIndex(int32_t Index);
	int32_t GetSelectedInviteIndex();
	void ClearInvites();
	void AddInvite(const class FString& InviterName, const class FString& Message);
};

// Class WillowGame.QSortComparer
// 0x0000 (0x0058 - 0x0058)
class UQSortComparer : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.QSortComparer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryUIStatComparer
// 0x0008 (0x0058 - 0x0060)
class UInventoryUIStatComparer : public UQSortComparer
{
public:
	int32_t                                            StatIndex;                                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSortBestToWorst : 1;                          // 0x005C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryUIStatComparer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.QSortAttributeComparer
// 0x0010 (0x0058 - 0x0068)
class UQSortAttributeComparer : public UQSortComparer
{
public:
	class UAttributeDefinition*                        Attribute;                                     // 0x0058 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bBiggerIsBetter : 1;                           // 0x0060 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.QSortAttributeComparer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponTypeComparer
// 0x0000 (0x0058 - 0x0058)
class UWeaponTypeComparer : public UQSortComparer
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponTypeComparer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.RallyPoint
// 0x0000 (0x0240 - 0x0240)
class ARallyPoint : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.RallyPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ReferenceSet
// 0x0010 (0x0058 - 0x0068)
class UReferenceSet : public UObject
{
public:
	class TArray<struct FObjectReference>              References;                                    // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ReferenceSet");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ResourcePoolAttributeDefinition
// 0x0008 (0x0080 - 0x0088)
class UResourcePoolAttributeDefinition : public UAttributeDefinition
{
public:
	class UResourceDefinition*                         Resource;                                      // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ResourcePoolAttributeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ResourcePoolStateAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UResourcePoolStateAttributeValueResolver : public UAttributeValueResolver
{
public:
	EResourcePoolState                                 PoolState;                                     // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ResourcePoolStateAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.RotationArrowComponent
// 0x0000 (0x0370 - 0x0370)
class URotationArrowComponent : public UArrowComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.RotationArrowComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ScrollingListGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UScrollingListGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ScrollingListGFxObject");
		}

		return uClassPointer;
	};

	void eventSetSelectedIndex(int32_t SelectedIndex);
	void ScrollToIndex(int32_t ScrollToIndex);
	void Init();
};

// Class WillowGame.MultitypeScrollingListGFxObject
// 0x0018 (0x00D8 - 0x00F0)
class UMultitypeScrollingListGFxObject : public UScrollingListGFxObject
{
public:
	class UIMultitypeScrollingList*                    ParentPanel_Object;                            // 0x00D8 (0x0008) [0x0000000000000000] 
	class UIMultitypeScrollingList*                    ParentPanel_Interface;                         // 0x00E0 (0x0008) [0x0000000000000000]               
	uint32_t                                           bInitialInitComplete : 1;                      // 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MultitypeScrollingListGFxObject");
		}

		return uClassPointer;
	};

	void ContinueInitialInit();
	void extGameScroll(int32_t Delta);
	class UGFxObject* getRendererAt(int32_t Index);
	void SetEquippingState(bool bEquipping);
	void extSetRendererInfo(int32_t DataIndex, int32_t RendererType, int32_t RendererIndex);
	void Init();
	void InitMultitype(class UIMultitypeScrollingList* InParentPanel);
};

// Class WillowGame.SeqAct_AllPlayersInMesh
// 0x0018 (0x00E8 - 0x0100)
class USeqAct_AllPlayersInMesh : public USequenceAction
{
public:
	class TArray<class ADynamicSMActor*>               Meshes;                                        // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bAllActorsInMesh : 1;                          // 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_AllPlayersInMesh");
		}

		return uClassPointer;
	};

	bool AllPlayersInMesh();
	bool MeshEncompassesActor(class APlayerController* CurActor, class ADynamicSMActor* CurMesh);
	bool PlayerIsInAMesh(class APlayerController* PC);
};

// Class WillowGame.SeqAct_AttachPlayerPawnToBase
// 0x0028 (0x00E8 - 0x0110)
class USeqAct_AttachPlayerPawnToBase : public USequenceAction
{
public:
	uint32_t                                           bDetach : 1;                                   // 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHardAttach : 1;                               // 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseRelativeOffset : 1;                        // 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseRelativeRotation : 1;                      // 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FName                                       BoneName;                                      // 0x00EC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     RelativeOffset;                                // 0x00F4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RelativeRotation;                              // 0x0100 (0x000C) [0x0000000000000001] (CPF_Edit)    
	EPhysics                                           PhysicsMode;                                   // 0x010C (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_AttachPlayerPawnToBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_CausePlayerDeath
// 0x0008 (0x00E8 - 0x00F0)
class USeqAct_CausePlayerDeath : public USequenceAction
{
public:
	uint32_t                                           bInstaKill : 1;                                // 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_CausePlayerDeath");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_ConditionallyLoadCommons
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ConditionallyLoadCommons : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_ConditionallyLoadCommons");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_DiscardInventory
// 0x0008 (0x00E8 - 0x00F0)
class USeqAct_DiscardInventory : public USequenceAction
{
public:
	uint32_t                                           bSpawnPickupsForOldInventory : 1;              // 0x00E8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bRepopulateInventory : 1;                      // 0x00E8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_DiscardInventory");
		}

		return uClassPointer;
	};

	void eventOnActivated(class AWillowPawn* WPawn);
};

// Class WillowGame.SeqAct_DisplayTrainingDefinitionMessage
// 0x0008 (0x00E8 - 0x00F0)
class USeqAct_DisplayTrainingDefinitionMessage : public USequenceAction
{
public:
	float                                              Duration;                                      // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_DisplayTrainingDefinitionMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_DisplayTrainingMessage
// 0x0040 (0x00E8 - 0x0128)
class USeqAct_DisplayTrainingMessage : public USequenceAction
{
public:
	class FString                                      Key;                                           // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      TitleKey;                                      // 0x00F8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              Duration;                                      // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      HUDInitializationFrame;                        // 0x0110 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           PausesGame : 1;                                // 0x0120 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bMandatory : 1;                                // 0x0120 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              PauseContinueDelay;                            // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_DisplayTrainingMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_DisplayWillowHUDMessage
// 0x0020 (0x00E8 - 0x0108)
class USeqAct_DisplayWillowHUDMessage : public USequenceAction
{
public:
	ELocalMessageType                                  MessageType;                                   // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FString                                      MarkupString;                                  // 0x00F0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              Duration;                                      // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_DisplayWillowHUDMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_ExecuteSkill
// 0x0010 (0x00E8 - 0x00F8)
class USeqAct_ExecuteSkill : public USequenceAction
{
public:
	uint32_t                                           bAllowMultipleInstancesOfSkill : 1;            // 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsSkillActive : 1;                            // 0x00E8 (0x0004) [0x0000000000000000] [0x00000002] 
	class USkillDefinition*                            SkillEffect;                                   // 0x00F0 (0x0008) [0x0000000004000001] (CPF_Edit | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_ExecuteSkill");
		}

		return uClassPointer;
	};

	bool eventExecuteSkill(class AController* InstigatorController, class USkillDefinition* Definition, EExecuteSkillSequenceInput SequenceInput);
};

// Class WillowGame.SeqAct_GetAttributeValue
// 0x0010 (0x00E8 - 0x00F8)
class USeqAct_GetAttributeValue : public USequenceAction
{
public:
	class UAttributeDefinition*                        AttributeDef;                                  // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ResultValue;                                   // 0x00F0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_GetAttributeValue");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_GetInstanceData
// 0x0018 (0x00E8 - 0x0100)
class USeqAct_GetInstanceData : public USequenceAction
{
public:
	struct FName                                       InstanceDataName;                              // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     InObject;                                      // 0x00F0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UObject*                                     OutObject;                                     // 0x00F8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_GetInstanceData");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class WillowGame.SeqAct_IsInVolume
// 0x0028 (0x00E8 - 0x0110)
class USeqAct_IsInVolume : public USequenceAction
{
public:
	class TArray<class AVolume*>                       Volumes;                                       // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class AActor*>                        Actors;                                        // 0x00F8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bAllActorsInVolumes : 1;                       // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsTrue : 1;                                   // 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_IsInVolume");
		}

		return uClassPointer;
	};

	bool ActorIsInAnyVolumes(class AActor* inActor);
};

// Class WillowGame.SeqAct_LoadingMovie
// 0x0020 (0x00E8 - 0x0108)
class USeqAct_LoadingMovie : public USequenceAction
{
public:
	class FString                                      MovieName;                                     // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bShowMovie : 1;                                // 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPauseAfterHide : 1;                           // 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              PauseDuration;                                 // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              KeepPlayingDuration;                           // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_LoadingMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_MathBase
// 0x0008 (0x00E8 - 0x00F0)
class USeqAct_MathBase : public USequenceAction
{
public:
	ESeqAct_MathOperation                              Operation;                                     // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_MathBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_MathFloat
// 0x0010 (0x00F0 - 0x0100)
class USeqAct_MathFloat : public USeqAct_MathBase
{
public:
	float                                              ValueA;                                        // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Result;                                        // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_MathFloat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_MathInteger
// 0x0010 (0x00F0 - 0x0100)
class USeqAct_MathInteger : public USeqAct_MathBase
{
public:
	int32_t                                            ValueA;                                        // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Result;                                        // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_MathInteger");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_ModifyHUDElement
// 0x0010 (0x00E8 - 0x00F8)
class USeqAct_ModifyHUDElement : public USequenceAction
{
public:
	EHUDElement                                        HUDElement;                                    // 0x00E8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisplayOnHUD : 1;                             // 0x00EC (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class UResourcePoolDefinition*                     ResPoolDefinition;                             // 0x00F0 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_ModifyHUDElement");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_PlayBinkMovie
// 0x0018 (0x0100 - 0x0118)
class USeqAct_PlayBinkMovie : public USeqAct_Latent
{
public:
	class FString                                      BinkMovieName;                                 // 0x0100 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           PlayStreamed : 1;                              // 0x0110 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           BlockUntilFinished : 1;                        // 0x0110 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           LoopPlayback : 1;                              // 0x0110 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_PlayBinkMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_PossessForPlayer
// 0x0008 (0x00E8 - 0x00F0)
class USeqAct_PossessForPlayer : public USequenceAction
{
public:
	uint32_t                                           bDestroyOldPawn : 1;                           // 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHideOldPawn : 1;                              // 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_PossessForPlayer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_PrimaryPlayerBusyDelay
// 0x0008 (0x0100 - 0x0108)
class USeqAct_PrimaryPlayerBusyDelay : public USeqAct_Latent
{
public:
	class AWillowPlayerController*                     PrimaryPlayer;                                 // 0x0100 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_PrimaryPlayerBusyDelay");
		}

		return uClassPointer;
	};

	bool eventUpdate(float DeltaTime);
};

// Class WillowGame.SeqAct_ProceduralSwitch
// 0x0010 (0x00E8 - 0x00F8)
class USeqAct_ProceduralSwitch : public USequenceAction
{
public:
	class TArray<EChoiceProbability>                   Possibilities;                                 // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_ProceduralSwitch");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_ProceduralSwitchNumeric
// 0x0010 (0x00E8 - 0x00F8)
class USeqAct_ProceduralSwitchNumeric : public USequenceAction
{
public:
	class TArray<float>                                Possibilities;                                 // 0x00E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_ProceduralSwitchNumeric");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_SetInstanceData
// 0x0018 (0x00E8 - 0x0100)
class USeqAct_SetInstanceData : public USequenceAction
{
public:
	struct FName                                       InstanceDataName;                              // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class AActor*>                        InstanceData;                                  // 0x00F0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_SetInstanceData");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class WillowGame.SeqAct_TimedMessage
// 0x0008 (0x0110 - 0x0118)
class USeqAct_TimedMessage : public USeqAct_Log
{
public:
	float                                              MessageTime;                                   // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_TimedMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_UnlockAchievement
// 0x0008 (0x00E8 - 0x00F0)
class USeqAct_UnlockAchievement : public USequenceAction
{
public:
	EAchievementList                                   AchievementId;                                 // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinimumPlayersRequired;                        // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_UnlockAchievement");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class WillowGame.SeqCond_IsPlayerCharacterClass
// 0x0000 (0x00C8 - 0x00C8)
class USeqCond_IsPlayerCharacterClass : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqCond_IsPlayerCharacterClass");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqEvent_SeamlessTravelComplete
// 0x0000 (0x0118 - 0x0118)
class USeqEvent_SeamlessTravelComplete : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqEvent_SeamlessTravelComplete");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqEvent_TakeHitRegionDamage
// 0x0060 (0x0118 - 0x0178)
class USeqEvent_TakeHitRegionDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                               // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageThreshold;                               // 0x011C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           UsePercentOfMaxHealthLimit : 1;                // 0x0120 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class UClass*>                        DamageTypes;                                   // 0x0128 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UDamageTypeDefinition*>         DamageTypeDefinitions;                         // 0x0138 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UClass*>                        IgnoreDamageTypes;                             // 0x0148 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UDamageTypeDefinition*>         IgnoreDamageTypeDefinitions;                   // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UBodyHitRegionDefinition*                    DamageHitRegion;                               // 0x0168 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentDamage;                                 // 0x0170 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqEvent_TakeHitRegionDamage");
		}

		return uClassPointer;
	};

	void Reset();
	void HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, class UDamageTypeDefinition* inDamageTypeDefinition, int32_t inAmount, class UBodyHitRegionDefinition* HitRegion);
	bool IsValidDamageTypeDefinition(class UDamageTypeDefinition* inDamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion);
	bool IsValidDamageType(class UClass* inDamageType, class UBodyHitRegionDefinition* HitRegion);
};

// Class WillowGame.SeqEvent_TrainingMessage
// 0x0008 (0x0118 - 0x0120)
class USeqEvent_TrainingMessage : public USequenceEvent
{
public:
	class UObject*                                     TrainingMessageDefinition;                     // 0x0118 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqEvent_TrainingMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqEvent_WorldDiscoveryArea
// 0x0000 (0x0118 - 0x0118)
class USeqEvent_WorldDiscoveryArea : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqEvent_WorldDiscoveryArea");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqVar_PrimaryLocalPlayer
// 0x0000 (0x00A0 - 0x00A0)
class USeqVar_PrimaryLocalPlayer : public USeqVar_Object
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqVar_PrimaryLocalPlayer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SharedEventProviderDefinition
// 0x0010 (0x0058 - 0x0068)
class USharedEventProviderDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0060 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SharedEventProviderDefinition");
		}

		return uClassPointer;
	};

	void TranslateEventToBehaviorEvent(int32_t EventOutput, struct FBehaviorConsumerHandle& TheConsumerHandle, struct FSharedEventMessageData& MsgData);
};

// Class WillowGame.ShieldBarGFxObject
// 0x0008 (0x00D8 - 0x00E0)
class UShieldBarGFxObject : public UGFxObject
{
public:
	int32_t                                            CachedCurrentShield;                           // 0x00D8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ShieldBarGFxObject");
		}

		return uClassPointer;
	};

	void __SetHealth(int32_t CurrentShield, int32_t MaxShield);
	void SetShield(int32_t CurrentShield, int32_t MaxShield);
};

// Class WillowGame.ShieldResourcePool
// 0x0000 (0x0170 - 0x0170)
class UShieldResourcePool : public UResourcePool
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ShieldResourcePool");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SimpleVolume
// 0x0000 (0x0288 - 0x0288)
class ASimpleVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SimpleVolume");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
};

// Class WillowGame.SkelControlHandModifier
// 0x0060 (0x00F0 - 0x0150)
class USkelControlHandModifier : public USkelControlBase
{
public:
	class UAnimSequence*                               HandAnimSeq;                                   // 0x00F0 (0x0008) [0x0000000000000000]               
	struct FName                                       CurrentSequenceName;                           // 0x00F8 (0x0008) [0x0000000000000000]               
	uint8_t                                           UnknownData00[0x50];                           // 0x0100 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.SkelControlHandModifier.ActiveBoneMap

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkelControlHandModifier");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkelControlLeftHandGripWeapon
// 0x0010 (0x0158 - 0x0168)
class USkelControlLeftHandGripWeapon : public USkelControlLimb
{
public:
	uint32_t                                           bEditWeaponHoldIKInfo : 1;                     // 0x0158 (0x0004) [0x0000000800002001] [0x00000001] (CPF_Edit | CPF_Transient)
	class UBodyClassDefinition*                        CachedBodyClass;                               // 0x0160 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkelControlLeftHandGripWeapon");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Skill
// 0x00D8 (0x0058 - 0x0130)
class USkill : public UObject
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class USkillDefinition*                            Definition;                                    // 0x0060 (0x0008) [0x0000000000000000]               
	class TArray<struct FAppliedSkillEffect>           SkillEffects;                                  // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            Grade;                                         // 0x0078 (0x0004) [0xA000000000002000] (CPF_Transient)
	int32_t                                            GradeBaseValue;                                // 0x007C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            GradeModifierStack;                            // 0x0080 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BonusGradePointsOnExpConversion;               // 0x0090 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BonusGradePointsOnExpConversionBaseValue;      // 0x0094 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BonusGradePointsOnExpConversionModifierStack;  // 0x0098 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              Duration;                                      // 0x00A8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              DurationBaseValue;                             // 0x00AC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            DurationModifierStack;                         // 0x00B0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              Range;                                         // 0x00C0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              RangeBaseValue;                                // 0x00C4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            RangeModifierStack;                            // 0x00C8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              StartTime;                                     // 0x00D8 (0x0004) [0x4000000000000000]               
	float                                              ActivatedTime;                                 // 0x00DC (0x0004) [0x0000000000002000] (CPF_Transient)
	ESkillState                                        SkillState;                                    // 0x00E0 (0x0001) [0x0000000000000000]               
	float                                              NextContextUpdateTime;                         // 0x00E4 (0x0004) [0x0000000000000000]               
	uint32_t                                           bForceRefreshModifiersNextTick : 1;            // 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bWantsToDeactivate : 1;                        // 0x00E8 (0x0004) [0x0000000000000000] [0x00000002] 
	class UISkillInstigator*                           SkillInstigator_Object;                        // 0x00F0 (0x0008) [0x0000000000000000] 
	class UISkillInstigator*                           SkillInstigator_Interface;                     // 0x00F8 (0x0008) [0x0000000000000000]               
	class UObject*                                     AdditionalSkillTarget;                         // 0x0100 (0x0008) [0x0000000000000000]               
	class AActor*                                      BuffInstigator;                                // 0x0108 (0x0008) [0x0000000000000000]               
	class AActionSkill*                                CachedActionSkill;                             // 0x0110 (0x0008) [0x0000000000000000]               
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x0118 (0x0004) [0x0000000000000000]               
	struct FScriptDelegate                             __OnSkillStateChanged__Delegate;               // 0x0120 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Skill");
		}

		return uClassPointer;
	};

	class AActionSkill* GetActionSkill();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	int32_t GetGrade();
	void GetSkillDebug(class TArray<class FString>& DebugInfo);
	void eventRunSkillEventResponses(ESkillEventType EventType, class AController* EventRecipient);
	void NotifySkillDamagedEvent(ESkillEventType EventType, class AActor* EventRecipient, class UClass* DamageSource, class UDamagePipeline* optionalPipeline);
	void NotifySkillEvent(ESkillEventType EventType, class AActor* EventRecipient, class UClass* optionalDamageSource, class UDamagePipeline* optionalPipeline, class UObject* optionalContextObject);
	int32_t GetSkillGradeForResponseData(const struct FSkillActionData& ActionData);
	static float CalculateModifierValueFromDefinitionEffectArray(class USkillDefinition* InDefinition, int32_t EffectIndex, int32_t AttributeIndex, int32_t SkillGrade, class UObject* ContextSource);
	static float CalculateModifierValue(int32_t SkillGrade, class UObject* ContextSource, struct FSkillEffectAttributeData& EffectData);
	void ClearSkillEffectModifiers();
	void AdjustModifiers(EAdjustModifierMode AdjustMode, bool optionalBSuppressNotify);
	void GetAttributeContexts(class UISkillInstigator* EffectInstigator, struct FAppliedSkillEffect& SkillEffect, struct FSkillEffectGroupData& EffectData);
	class UISkillInstigator* GetEffectInstigator();
	bool IsSkillForInstigator(class UISkillInstigator* Instigator);
	void UpdateGrade(int32_t NewGrade);
	ESkillState CalculateStateBasedOnConstraints(bool optionalBIsOnActivation);
	class UISkillInstigator* GetSkillInstigator();
	ESkillState GetSkillState();
	void eventResume();
	void eventPause();
	void eventDeactivate(bool optionalBForceDeactivate);
	bool eventActivate();
	void BuildSkillEffects();
	class AWorldInfo* GetWorldInfo();
	void OnSkillStateChanged(class USkill* AffectedSkill, bool bActivated);
};

// Class WillowGame.SkillAttributeContextResolver
// 0x0040 (0x0058 - 0x0098)
class USkillAttributeContextResolver : public UAttributeContextResolver
{
public:
	class USkillDefinition*                            AssociatedSkill;                               // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FNameBasedObjectPath                        AssociatedSkillPathName;                       // 0x0060 (0x0034) [0x0000000000020002] (CPF_Const | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillAttributeContextResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillDamageEventConstraints
// 0x0020 (0x0058 - 0x0078)
class USkillDamageEventConstraints : public UObject
{
public:
	EDamageType                                        CoreDamageTypeConstraint;                      // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDamageTypeDefinition*                       DamageTypeConstraint;                          // 0x0060 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UClass*                                      DamageSourceConstraint;                        // 0x0068 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bMustBeCriticalDamage : 1;                     // 0x0070 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bMustBeOneShotKill : 1;                        // 0x0070 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bMustBeFromFront : 1;                          // 0x0070 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bMustBeFromSide : 1;                           // 0x0070 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bMustBeFromBehind : 1;                         // 0x0070 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bMustBeFromFirstBullet : 1;                    // 0x0070 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bMustBeFromLastBullet : 1;                     // 0x0070 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillDamageEventConstraints");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillDefinition
// 0x0178 (0x0058 - 0x01D0)
class USkillDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bAutoUpdateContexts : 1;                       // 0x0060 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanBeToggledOff : 1;                          // 0x0060 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bDoNotShiftPastCurrentTime : 1;                // 0x0060 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bSubjectToGradeRules : 1;                      // 0x0060 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	float                                              SkillEffectUpdateIterval;                      // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      SkillName;                                     // 0x0068 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SkillDescription;                              // 0x0078 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ScaleformFrameName;                            // 0x0088 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	ESkillType                                         SkillType;                                     // 0x0098 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EEffectDurationType                                DurationType;                                  // 0x0099 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ETrackedSkillType                                  TrackedSkillType;                              // 0x009A (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            TrackedSkillHUDSlot;                           // 0x009B (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                InitialDuration;                               // 0x00A0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BaseRange;                                     // 0x00C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       EffectSourceInstanceDataName;                  // 0x00C4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FSkillEffectData>              SkillEffectDefinitions;                        // 0x00D0 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FSkillEffectGroupData>         SkillEffectGroups;                             // 0x00E0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSkillConstraintData>          SkillConstraints;                              // 0x00F0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UAttributePresentationDefinition*> SkillEffectPresentations;                      // 0x0100 (0x0010) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class AActionSkill*                                ActionSkillArchetype;                          // 0x0110 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FSkillActionData>              SkillActivationActions;                        // 0x0118 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSkillActionData>              SkillDeactivationActions;                      // 0x0128 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSkillEventResponseData>       EventResponses;                                // 0x0138 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            DefaultStartingGrade;                          // 0x0148 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxGrade;                                      // 0x014C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            PlayerLevelRequirement;                        // 0x0150 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USwfMovie*                                   SkillIcon;                                     // 0x0158 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributeDefinition*                        CustomStackCount;                              // 0x0160 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USkillDefinition*                            TrackedActiveSkill;                            // 0x0168 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class TArray<class USkillDefinition*>              TrackedActiveSkills;                           // 0x0170 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UClass*                                      SkillClass;                                    // 0x0180 (0x0008) [0x0000000000000002] (CPF_Const)   
	class FString                                      LockedSkillDetailStr;                          // 0x0188 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class TArray<struct FNamedSkillEvent>              CustomEvents;                                  // 0x0198 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSkillDamageEventData>         DamageEvents;                                  // 0x01A8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FSkillKillEventData>           KillEvents;                                    // 0x01B8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x01C8 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillDefinition");
		}

		return uClassPointer;
	};

	class AActionSkill* GetActionSkillArchetype();
	class AActionSkill* GetActionSkill(class AController* InController);
	void FireCustomEvent(const struct FName& EventName, class AController* InController, class UObject* optionalOtherParticipant);
	bool DoesSkillPassMinGradeTest(int32_t SkillGrade);
	void GetSkillEffectPresentations(int32_t SkillGrade, class UObject* ContextSource, class TArray<struct FModifierValuePresentationData>& EffectPresentations);
	class FString GetHumanReadableSkillEffects(int32_t SkillGrade, class UObject* ContextSource);
	void OnStatusEffectTypeEnd(class AActor* SkillInstigator, int32_t EffectType, float TotalDamageDealtToHealth, float TotalDamageDealtToShields, float TotalDuration, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnStatusEffectTypeBegin(class AActor* SkillInstigator, int32_t EffectType, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnBledOut(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDownStateEnd(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDownStateBegin(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnAppliedStatusEffectToEnemy(class AActor* SkillInstigator, class AActor* Enemy, class UObject* StatusEffect, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedEnemyWithMeleeFromBehind(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Enemy, const struct FVector& HitLocation, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedUnawareEnemy(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Enemy, const struct FVector& HitLocation, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnActionSkillActiveAbilityActivated(class AActor* SkillInstigator, class AActor* AutoAimTarget, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnActionSkillCooldownAbilityActivated(class AActor* SkillInstigator, class AActor* AutoAimTarget, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPlayerResurrected(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPlayerRecoveredFromDownState(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPlayerDeathAverted(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnMissedWeaponShot(struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedByFriendly(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Friendly, bool bWasCrit, float InitialDamage, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedByEnemy(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Enemy, bool bWasCrit, float InitialDamage, float HealthDamageDone, float ShieldDamageDone, class UClass* DamageSource, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedFriendly(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Friendly, bool bWasCrit, float InitialDamage, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDamagedEnemy(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Enemy, bool bWasCrit, float InitialDamage, float HealthDamageDone, float ShieldDamageDone, bool bWasInjured, const struct FVector& HitLocation, float ExcessDamageDone, int32_t PenetrationCount, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponStartReload(class AActor* SkillInstigator, class UObject* WeaponReloading, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledByEnemy(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnKilledEnemy(const struct FName& SpecializedEventName, class AActor* SkillInstigator, class AActor* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnShieldFull(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnShieldDepleted(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnShieldDepletedAfterBeingFull(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponSwapped(class AActor* SkillInstigator, class UObject* NewWeapon, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponManuallyReloaded(class AActor* SkillInstigator, class UObject* WeaponReloaded, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponReloaded(class AActor* SkillInstigator, class UObject* WeaponReloaded, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponFired(class AActor* SkillInstigator, class UObject* WeaponFired, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponUnzoomed(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnWeaponZoomed(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnThrowGrenadeOverrideSkillActivated(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnMeleeOverrideSkillActivated(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnResumed(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPaused(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDeactivated(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnExecuted(class AActor* SkillInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnActivated(class AActor* SkillInstigator, class AActor* BuffInstigator, struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.SkillEffectManager
// 0x0038 (0x0240 - 0x0278)
class ASkillEffectManager : public AActor
{
public:
	uint32_t                                           bAllowSkillActivation : 1;                     // 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUpdatingSkills : 1;                           // 0x0240 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAddedHUDTrackedSkillsLastTick : 1;            // 0x0240 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class TArray<struct FDeferredSkillActivationData>  DeferredSkillActivationList;                   // 0x0248 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class USkill*>                        ActiveSkills;                                  // 0x0258 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class USkill*>                        DeactivatedSkills;                             // 0x0268 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillEffectManager");
		}

		return uClassPointer;
	};

	void NotifySkillShieldEvent(EShieldEvent ShieldEvent, class AActor* EventInstigator);
	void TriggerTakeHitEvents(class UITargetable* Victim, class UISkillInstigator* InstigatedBy, class AController* VictimController, class UClass* DamageType, class UDamagePipeline* optionalPipeline);
	void DisplaySkillsDebug(class UWillowCheatManager* WCM, class AHUD* HUD, float& out_YL, float& out_YPos);
	void PreviousDebugPage(class UWillowCheatManager* WCM);
	void NextDebugPage(class UWillowCheatManager* WCM);
	void DisplayBadassSkill(class UWillowCheatManager* WCM, class UISkillInstigator* SkillInstigator, class AHUD* HUD, bool bShowAll, float& out_YL, float& out_YPos);
	void DisplayDebugVerbose(class UWillowCheatManager* WCM, class UISkillInstigator* SkillInstigator, class AHUD* HUD, bool bShowAll, float& out_YL, float& out_YPos);
	void DisplayDebugControllerSkillStates(class AWillowPlayerController* WPC, class AHUD* HUD, bool PreserveSpace, float& out_YL, float& out_YPos);
	void WriteColumnText(class AHUD* HUD, const class FString& Text, int32_t ColumnSize, int32_t& Counter, float& SavedX, float& SavedY, float& MaxY);
	void AdvanceColumn(class AHUD* HUD, float& SavedX, float& SavedY, float& MaxY);
	class USkill* GetActiveSkillForInstigatorByDefinition(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition);
	class USkill* GetActiveSkillForInstigator(class UISkillInstigator* SkillInstigator, const struct FName& SkillFName);
	bool UpdateSkillGrade(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition, int32_t Grade);
	void NotifySkillDamagedEvent(ESkillEventType EventType, class UISkillInstigator* EventInstigator, class AActor* EventRecipient, class UClass* DamageSource, class UDamagePipeline* optionalPipeline);
	void NotifySkillEvent(ESkillEventType EventType, class UISkillInstigator* EventInstigator, class AActor* EventRecipient, class UClass* optionalDamageSource, class UDamagePipeline* optionalPipeline, class UObject* optionalContextObject);
	bool IsSkillActive(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition);
	bool IsSkillPaused(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition);
	void eventDeactivateSkill(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition, bool optionalBIgnoreSkillInstigator, bool optionalBDeactivateAllInstances, bool optionalBForceDeactivate, class AActor* optionalBuffInstigator);
	bool eventActivateSkill(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition, class UObject* optionalAdditionalSkillTarget, int32_t optionalSkillGrade, class AActor* optionalBuffInstigator, const struct FScriptDelegate& optionalStateChangeDelegate);
	int32_t DeferActivateSkill(class UISkillInstigator* SkillInstigator, class USkillDefinition* Definition, class UObject* AdditionalSkillTarget, int32_t SkillGrade, class AActor* BuffInstigator, const struct FScriptDelegate& StateChangeDelegate);
	void RefreshSkillsAffectingInstigator(class UISkillInstigator* SkillInstigator);
	void RefreshSkillsForInstigator(class UISkillInstigator* SkillInstigator);
	void DeactivateAllSkillTreeSkillsForPlayer(class UISkillInstigator* PlayerSkillInstigator);
	void DeactivateAllSkillsForInstigator(class UISkillInstigator* SkillInstigator);
};

// Class WillowGame.SkillExpressionEvaluator
// 0x0010 (0x0058 - 0x0068)
class USkillExpressionEvaluator : public UExpressionEvaluator
{
public:
	class USkillDefinition*                            Skill;                                         // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESkillRunState                                     SkillState;                                    // 0x0060 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.SkillExpressionEvaluatorDefinition
// 0x0008 (0x0058 - 0x0060)
class USkillExpressionEvaluatorDefinition : public UGBXDefinition
{
public:
	class UExpressionEvaluator*                        Evaluator;                                     // 0x0058 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillExpressionEvaluatorDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillTreeBranchDefinition
// 0x0038 (0x0058 - 0x0090)
class USkillTreeBranchDefinition : public UGBXDefinition
{
public:
	class TArray<class USkillTreeBranchDefinition*>    Children;                                      // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FTier>                         Tiers;                                         // 0x0068 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class USkillTreeBranchLayoutDefinition*            Layout;                                        // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      BranchName;                                    // 0x0080 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillTreeBranchDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillTreeBranchLayoutDefinition
// 0x0010 (0x0058 - 0x0068)
class USkillTreeBranchLayoutDefinition : public UGBXDefinition
{
public:
	class TArray<struct FTierLayout>                   Tiers;                                         // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillTreeBranchLayoutDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillTreeDefinition
// 0x0008 (0x0058 - 0x0060)
class USkillTreeDefinition : public UGBXDefinition
{
public:
	class USkillTreeBranchDefinition*                  Root;                                          // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillTreeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpawnFactoryInteractiveObject
// 0x0038 (0x0078 - 0x00B0)
class USpawnFactoryInteractiveObject : public USpawnFactory
{
public:
	class UInteractiveObjectDefinition*                ObjectDefinition;                              // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInteractiveObjectBalanceDefinition*         ObjectBalanceDefinition;                       // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnObjectOnGround : 1;                      // 0x0088 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bSetGroundAsBase : 1;                          // 0x0088 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         EnabledBehaviorSets;                           // 0x0090 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x00A0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryInteractiveObject");
		}

		return uClassPointer;
	};

	class FString eventGetDescriptionOfFactoryOutput();
	struct FVector GetSpawnLocation(class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, class UInteractiveObjectDefinition* SelectedObjectDefinition, class AActor*& SpawnBase);
	class AWillowInteractiveObject* CreateInteractiveObject(class USpawnMaster* Master, class AActor* SpawnerOwner, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* SpawnBase, int32_t GameStage, int32_t AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition);
	static bool eventShouldSaveSpawnedActor(class USpawnMaster* Master, class AActor* ActorToSave);
	class AWillowInteractiveObject* eventRestoreInteractiveObject(class USpawnMaster* Master, class ASpawner* Spawner, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel);
	class AActor* eventSpawnActor(class USpawnMaster* Master, class ASpawner* Spawner, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel, class UObject* SkinSource);
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds(int32_t GameStage, int32_t AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int32_t GameStage, int32_t AwesomeLevel);
	class UInteractiveObjectDefinition* GetObjectDefinitionW(int32_t GameStage, int32_t AwesomeLevel);
};

// Class WillowGame.SpawnFactoryWillowAIPawn
// 0x0088 (0x0078 - 0x0100)
class USpawnFactoryWillowAIPawn : public USpawnFactory
{
public:
	class AWillowPawn*                                 WillowAIPawnArchetype;                         // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                PawnExpLevel;                                  // 0x0080 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                PawnWeaponLevel;                               // 0x00A0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FFlagDefinitionInitialization> FlagsToSet;                                    // 0x00C0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x00D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FItemPoolInfo>                 ItemPoolList;                                  // 0x00E0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UItemPoolListDefinition*>       ItemPoolIncludedLists;                         // 0x00F0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryWillowAIPawn");
		}

		return uClassPointer;
	};

	class FString eventGetDescriptionOfFactoryOutput();
	class AWillowPawn* eventRestorePopulatedAIPawn(class USpawnMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel);
	static bool eventShouldSaveSpawnedActor(class USpawnMaster* Master, class AActor* ActorToSave);
	static bool eventDestroySpawnedActor(class USpawnMaster* Master, int32_t SpawnerIdx, class AActor* ActorToDestroy, class USpawnFactory* SpawnFactory, int32_t CreationFlags, bool optionalBDontSaveActor);
	class AActor* eventSpawnActor(class USpawnMaster* Master, class ASpawner* Spawner, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel, class UObject* SkinSource);
	void SetupInitialDestination(class AWillowPawn* SpawnedPawn, class UObject* SpawnLocationContextObject);
	void SetupSpawnedActor(class USpawnMaster* Master, class AWillowPawn* SpawnedPawn, class UObject* SpawnLocationContextObject, int32_t GameStage, int32_t AwesomeLevel);
	void SetFlagDefinitions(class AWillowPawn* aPawn);
	void ApplySpawnDefinition(class USpawnMaster* Master, class AWillowPawn* AIPawn);
	class UObject* GetAContextSourceForTheActor(class USpawnMaster* Master);
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds(int32_t GameStage, int32_t AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int32_t GameStage, int32_t AwesomeLevel);
	int32_t eventGetActorSpawnCost(int32_t GameStage, int32_t AwesomeLevel, bool bCanSpawnTest);
	static void eventSetupMatineeForActor(class AActor* aNewActor);
};

// Class WillowGame.SpawnFactoryBalancedAIPawn
// 0x0010 (0x0100 - 0x0110)
class USpawnFactoryBalancedAIPawn : public USpawnFactoryWillowAIPawn
{
public:
	class UAIPawnBalanceDefinition*                    PawnBalanceDefinition;                         // 0x0100 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseInstigatorLevel : 1;                       // 0x0108 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryBalancedAIPawn");
		}

		return uClassPointer;
	};

	float GetSpawnProbabilityAtThisGameStage(int32_t GameStage, int32_t AwesomeLevel);
	class FString eventGetDescriptionOfFactoryOutput();
	class AWillowPawn* SpawnAIPawn(class USpawnMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel, class UObject* SkinSource);
	class AWillowPawn* eventRestorePopulatedAIPawn(class USpawnMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel);
	class AActor* eventSpawnActor(class USpawnMaster* Master, class ASpawner* Spawner, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel, class UObject* SkinSource);
	void ApplyAttributeStartingValues(class AWillowPawn* SpawnedPawn);
	void SetupBalancedActor(class USpawnMaster* Master, class UIBalancedActor* BalancedInstigator, class AWillowPawn* SpawnedPawn, class UObject* SpawnLocationContextObject, int32_t GameStage, int32_t AwesomeLevel);
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds(int32_t GameStage, int32_t AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int32_t GameStage, int32_t AwesomeLevel);
	int32_t eventGetActorSpawnCost(int32_t GameStage, int32_t AwesomeLevel, bool bCanSpawnTest);
	bool CanSpawn(class ASpawner* TestSpawner);
};

// Class WillowGame.SpawnFactoryWillowProjectile
// 0x0030 (0x0078 - 0x00A8)
class USpawnFactoryWillowProjectile : public USpawnFactory
{
public:
	struct FName                                       AttachmentPointName;                           // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDirectionRelativeToParent                         SpawnDirection;                                // 0x0080 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UProjectileDefinition*                       ProjectileDefinition;                          // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     RelativeLocation;                              // 0x0090 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           InheritParentVelocity : 1;                     // 0x009C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              DirectionConeSize;                             // 0x00A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryWillowProjectile");
		}

		return uClassPointer;
	};

	class FString eventGetDescriptionOfFactoryOutput();
	class AWillowProjectile* CreateProjectile(class USpawnMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class UObject* SkinSource);
	static bool eventDestroySpawnedActor(class USpawnMaster* Master, int32_t SpawnerIdx, class AActor* ActorToDestroy, class USpawnFactory* SpawnFactory, int32_t CreationFlags, bool optionalBDontSaveActor);
	class AActor* eventSpawnActor(class USpawnMaster* Master, class ASpawner* Spawner, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t AwesomeLevel, class UObject* SkinSource);
	class UPawnAllegiance* GetActorAllegiance(int32_t GameStage, int32_t AwesomeLevel);
};

// Class WillowGame.SpecialMove_FirstPerson
// 0x0008 (0x0140 - 0x0148)
class USpecialMove_FirstPerson : public UGearboxAnimDefinition
{
public:
	uint32_t                                           bStopWeaponRecoilAnim : 1;                     // 0x0140 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_FirstPerson");
		}

		return uClassPointer;
	};

	void StopWeaponRecoilAnimImp(class USpecialMoveInterface* SMI, bool bStopPrimaryHand, bool bStopOffHand);
	void StopWeaponRecoilAnim(class USpecialMoveInterface* SMI);
	float eventClientStarted(class USpecialMoveInterface* SMI, struct FSpecialMoveData& SMData);
};

// Class WillowGame.SpecialMove_FirstPersonOffHand
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_FirstPersonOffHand : public USpecialMove_FirstPerson
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_FirstPersonOffHand");
		}

		return uClassPointer;
	};

	void StopWeaponRecoilAnim(class USpecialMoveInterface* SMI);
};

// Class WillowGame.SprintDefinition
// 0x0020 (0x0058 - 0x0078)
class USprintDefinition : public UGBXDefinition
{
public:
	float                                              FOVModifier;                                   // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EyeHeightModifier;                             // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BobScalar;                                     // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeEffectData>          AttributeEffects;                              // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SprintDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StaggerDefinition
// 0x0058 (0x0058 - 0x00B0)
class UStaggerDefinition : public UGBXDefinition
{
public:
	class UPhysicalMaterial*                           StaggeredPhysicalMaterial;                     // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StaggeredGravity;                              // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StaggeredRestVelocity;                         // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StaggeredRestTimeMin;                          // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StaggeredRestTimeMax;                          // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StaggeredPhysicsBlendOutSpeed;                 // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StaggeredRestGiveUpTime;                       // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              VehicleStaggerSpeed;                           // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bPrefersOverTheHoodOnVehicleImpact : 1;        // 0x007C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              StaggeredOverHoodMinSpeed;                     // 0x0080 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     MaxStaggerAdjustExtents;                       // 0x0084 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FStaggeredRecoveryRotationData              StaggeredRecoveryRotation;                     // 0x0090 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowAnimDefinition*                       HardFlinchAnimation;                           // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UnstaggerGiveUpTime;                           // 0x00A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StaggerDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StanceTypeDefinition
// 0x0010 (0x0098 - 0x00A8)
class UStanceTypeDefinition : public UStanceDefinition
{
public:
	uint32_t                                           bCanUseTurns : 1;                              // 0x0098 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanUseJumps : 1;                              // 0x0098 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanUseSoftFlinch : 1;                         // 0x0098 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanUseHardFlinch : 1;                         // 0x0098 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowLeftHandIK : 1;                          // 0x0098 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowProvocationAnims : 1;                    // 0x0098 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	float                                              JumpNodeCostMultiplier;                        // 0x009C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTurnDefinition*                             Turns;                                         // 0x00A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StanceTypeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StationTeleporterDestination
// 0x0010 (0x0258 - 0x0268)
class AStationTeleporterDestination : public ATeleporterDestination
{
public:
	float                                              ExitPointRadius;                               // 0x0258 (0x0004) [0x0000000000000000]               
	float                                              ExitPointHeight;                               // 0x025C (0x0004) [0x0000000000000000]               
	uint32_t                                           MoveOwnerOnEditorMove : 1;                     // 0x0260 (0x0004) [0x0000000800000000] [0x00000001] 
	uint32_t                                           OwnerControlsEditorMove : 1;                   // 0x0260 (0x0004) [0x0000000800000000] [0x00000002] 
	uint32_t                                           DetachExitPoints : 1;                          // 0x0260 (0x0004) [0x0000000800000000] [0x00000004] 
	uint32_t                                           ExitPointsReplaced : 1;                        // 0x0260 (0x0004) [0x0000000800000000] [0x00000008] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StationTeleporterDestination");
		}

		return uClassPointer;
	};

	void UpdateExitPointHeights();
	void UpdateExitPointLocations();
	void eventDestroyed();
};

// Class WillowGame.StationTeleporterExitPoint
// 0x0000 (0x0248 - 0x0248)
class AStationTeleporterExitPoint : public AKeypoint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StationTeleporterExitPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatReplicationInfo
// 0x0000 (0x0240 - 0x0240)
class AStatReplicationInfo : public AReplicationInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatReplicationInfo");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TargetableAttributeValueResolver
// 0x0008 (0x0058 - 0x0060)
class UTargetableAttributeValueResolver : public UAttributeValueResolver
{
public:
	ETargetableValue                                   ValueToResolve;                                // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TargetableAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TargetMetaInfoValueResolver
// 0x0008 (0x0058 - 0x0060)
class UTargetMetaInfoValueResolver : public UAttributeValueResolver
{
public:
	struct FName                                       PropertyName;                                  // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TargetMetaInfoValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TeleporterFeedbackMessage
// 0x0020 (0x0068 - 0x0088)
class UTeleporterFeedbackMessage : public ULocalMessage
{
public:
	class FString                                      Teleporter_Disabled;                           // 0x0068 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Teleporter_NoRoom;                             // 0x0078 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TeleporterFeedbackMessage");
		}

		return uClassPointer;
	};

	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class WillowGame.TemporalField
// 0x0028 (0x0240 - 0x0268)
class ATemporalField : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                           // 0x0240 (0x0008) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           fBlockBullets : 1;                             // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class USkillDefinition*                            SkillEffect;                                   // 0x0250 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MyTickMultiplier;                              // 0x0258 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TransitionDistancePercent;                     // 0x025C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             TouchEffectTemplate;                           // 0x0260 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TemporalField");
		}

		return uClassPointer;
	};

	void PlayTouchEffect(const struct FVector& HitLocation);
	float CalculateTickMultiplierForActor(class AActor* AffectedActor);
	void eventDestroyed();
	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventPostBeginPlay();
	struct FVector GetFieldNormal(const struct FVector& HitLocation);
	static bool IsTemporalFieldDebugEnabled();
	static void ToggleTemporalFieldDebug();
};

// Class WillowGame.TestMapsListDefinition
// 0x0010 (0x0058 - 0x0068)
class UTestMapsListDefinition : public UGBXDefinition
{
public:
	class TArray<struct FTestMapsListDatum>            ListItems;                                     // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TestMapsListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TextMarkupDictionary
// 0x0018 (0x0058 - 0x0070)
class UTextMarkupDictionary : public UGBXDefinition
{
public:
	class TArray<struct FTextMarkupEntry>              Dictionary;                                    // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bInitializedMarkupTags : 1;                    // 0x0068 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TextMarkupDictionary");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TransformedExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UTransformedExpressionEvaluator : public UExpressionEvaluator
{
public:
	EAITransformed                                     Transform;                                     // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ETransformedOption                                 Option;                                        // 0x0059 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TransformedExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.TurningExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UTurningExpressionEvaluator : public UExpressionEvaluator
{
public:
	uint32_t                                           bTurningTrue : 1;                              // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TurningExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.UserInterfaceActionDefinition
// 0x0030 (0x0058 - 0x0088)
class UUserInterfaceActionDefinition : public UGBXDefinition
{
public:
	struct FName                                       ActionName;                                    // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInputButtonDefinition*                      InputBindingKeyboard;                          // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInputButtonDefinition*                      InputBindingXbox360;                           // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInputButtonDefinition*                      InputBindingXboxOne;                           // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInputButtonDefinition*                      InputBindingDualShock3;                        // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInputButtonDefinition*                      InputBindingDualShock4;                        // 0x0080 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.UserInterfaceActionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ValueGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UValueGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ValueGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleFamilySelectorGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UVehicleFamilySelectorGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleFamilySelectorGFxObject");
		}

		return uClassPointer;
	};

	void TryScrollDown();
	void TryScrollUp();
	void SetSelectedVehicleFamilyIndex(int32_t SelectedIndex);
	void EndAddCells();
	void AddCell(const class FString& Caption, const class FString& IconMoviePath);
	void BeginAddCells();
};

// Class WillowGame.VehiclePassengerExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UVehiclePassengerExpressionEvaluator : public UExpressionEvaluator
{
public:
	uint32_t                                           bNotInVehicle : 1;                             // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDriver : 1;                                   // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPassenger : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAttachedRider : 1;                            // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehiclePassengerExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.WeaponActionAvailableExpressionEvaluator
// 0x0000 (0x0058 - 0x0058)
class UWeaponActionAvailableExpressionEvaluator : public UExpressionEvaluator
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponActionAvailableExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.WeaponAmmoResourceAttributeValueResolver
// 0x0030 (0x0058 - 0x0088)
class UWeaponAmmoResourceAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                             // 0x0058 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FWeaponAmmoResourceSelectorData> AmmoResources;                                 // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponAmmoResourceAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponEquippedExpressionEvaluator
// 0x0008 (0x0058 - 0x0060)
class UWeaponEquippedExpressionEvaluator : public UExpressionEvaluator
{
public:
	EWeaponType                                        WeaponType;                                    // 0x0058 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponEquippedExpressionEvaluator");
		}

		return uClassPointer;
	};

	bool Evaluate(class UObject* ContextSource);
};

// Class WillowGame.WeaponGlowEffectDefinition
// 0x0018 (0x0058 - 0x0070)
class UWeaponGlowEffectDefinition : public UGBXDefinition
{
public:
	struct FInterpCurveFloat                           GlowScaleCurve;                                // 0x0058 (0x0018) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponGlowEffectDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponPartDefinition
// 0x01E8 (0x00E0 - 0x02C8)
class UWeaponPartDefinition : public UWillowInventoryPartDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x00E0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<class UWeaponNamePartDefinition*>     TitleList;                                     // 0x00E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UWeaponNamePartDefinition*>     PrefixList;                                    // 0x00F8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UWillowDamageTypeDefinition*                 CustomDamageTypeDefinition;                    // 0x0108 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFiringModeDefinition*                       CustomFiringModeDefinition;                    // 0x0110 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FAttributeEffectData>          ExternalAttributeEffects;                      // 0x0118 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeEffectData>          WeaponAttributeEffects;                        // 0x0128 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeEffectData>          ZoomExternalAttributeEffects;                  // 0x0138 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeEffectData>          ZoomWeaponAttributeEffects;                    // 0x0148 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributePriorityData>        WeaponCardAttributes;                          // 0x0158 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UAttributePresentationDefinition*> CustomPresentations;                           // 0x0168 (0x0010) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	EWeaponPartType                                    PartType;                                      // 0x0178 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EWeaponPartVariation                               PartVariation;                                 // 0x0179 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            NumPhysicalBarrelsToFireFrom;                  // 0x017A (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FWeaponBoneControllerData>     BoneControllers;                               // 0x0180 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FName>                         VisibleAmmoBoneNames;                          // 0x0190 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FName                                       LeftHandIKHoldName;                            // 0x01A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsSpinningEnabled : 1;                        // 0x01A8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bFlapsEnabled : 1;                             // 0x01A8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bOverrideShellCasing : 1;                      // 0x01A8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseWeaponMelee : 1;                           // 0x01A8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bScoped : 1;                                   // 0x01A8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                SpinUpDuration;                                // 0x01B0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                SpinDownDuration;                              // 0x01D0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StartingSpinUpFireIntervalMultiplier;          // 0x01F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                FlapsExpandDuration;                           // 0x01F8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                FlapsCollapseDuration;                         // 0x0218 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ShellCasingPSCTemplate;                        // 0x0238 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ShellCasingSocket;                             // 0x0240 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ScopedShellCasingOffset;                       // 0x0248 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    OffHandShellCasingRotOffset;                   // 0x0254 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UEffectCollectionDefinition*                 MuzzleFlashPSTemplates;                        // 0x0260 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         AltMuzzleFlashSockets;                         // 0x0268 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UWillowImpactDefinition*                     WeaponImpact;                                  // 0x0278 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystemComponent*                    FirstPersonParticle;                           // 0x0280 (0x0008) [0x000000000408000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       FirstPersonParticleSocketName;                 // 0x0288 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       FirstPersonParticleInstanceDataName;           // 0x0290 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0298 (0x0008) [0x0000000000000000]               
	class UManufacturerDefinition*                     ManufacturerDefinitionForScopeMovie;           // 0x02A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomedFOVLerpPct;                              // 0x02A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UMaterialInterface*                          SightFXCrosshairMaterial;                      // 0x02B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SightFXCrosshairParamName;                     // 0x02B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SightFXCrosshairRefractionParamName;           // 0x02C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponPartDefinition");
		}

		return uClassPointer;
	};

	void OnAbortReload(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomOut(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomIn(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUnequip(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnEquip(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnCreate(struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.WeaponNamePartDefinition
// 0x0038 (0x02C8 - 0x0300)
class UWeaponNamePartDefinition : public UWeaponPartDefinition
{
public:
	uint32_t                                           bNameIsUnique : 1;                             // 0x02C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class FString                                      PartName;                                      // 0x02D0 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class TArray<struct FAttributeExpressionData>      Expressions;                                   // 0x02E0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            MinExpLevelRequirement;                        // 0x02F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxExpLevelRequirement;                        // 0x02F4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Priority;                                      // 0x02F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponNamePartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponProficiencyFeedbackMessage
// 0x0010 (0x0068 - 0x0078)
class UWeaponProficiencyFeedbackMessage : public ULocalMessage
{
public:
	class FString                                      IsNowLevel;                                    // 0x0068 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponProficiencyFeedbackMessage");
		}

		return uClassPointer;
	};

	static ELocalMessageType GetMsgType(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class WillowGame.WeaponShotDebug
// 0x0018 (0x0240 - 0x0258)
class AWeaponShotDebug : public AActor
{
public:
	class UArrowComponent*                             AimArrow;                                      // 0x0240 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UArrowComponent*                             ShotArrow;                                     // 0x0248 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UArrowComponent*                             SpreadShotArrow;                               // 0x0250 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponShotDebug");
		}

		return uClassPointer;
	};

	void FinalizeComponentInitialization(bool optionalBHideAimArrow, bool optionalBHideShotArrow, bool optionalBHideSpreadArrow);
};

// Class WillowGame.WeaponSightDefinition
// 0x00E8 (0x0058 - 0x0140)
class UWeaponSightDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0060 (0x0008) [0x0000000000000000]               
	uint32_t                                           bApplyZoomAttributesWhenFullyZoomed : 1;       // 0x0068 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bScoped : 1;                                   // 0x0068 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseScopeSocket : 1;                           // 0x0068 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bOverrideTunnelVision : 1;                     // 0x0068 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeEffectData>          ZoomExternalAttributeEffects;                  // 0x0070 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeEffectData>          ZoomWeaponAttributeEffects;                    // 0x0080 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              ZoomFireRateScale;                             // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FWeaponZoomLevel>              ZoomLevels;                                    // 0x0098 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FName                                       EyeSocket;                                     // 0x00A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       FrontScopeSocket;                              // 0x00B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       FrontSightSocket;                              // 0x00B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       RearSightSocket;                               // 0x00C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FConditionalAnimationData>     ZoomInAnimations;                              // 0x00C8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     ZoomedAnimations;                              // 0x00D8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     ZoomOutAnimations;                             // 0x00E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              ZoomedRecoilAnimScale;                         // 0x00F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              KickZoomMultiplier;                            // 0x00FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DOFKernelSize;                                 // 0x0100 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DOFInnerRadius;                                // 0x0104 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DOFFixedFocusDistance;                         // 0x0108 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DOFTunnelVisionScale;                          // 0x010C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DOFTunnelVisionYOffset;                        // 0x0110 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SightFXCrosshairParamName;                     // 0x0114 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       SightFXCrosshairRefractionParamName;           // 0x011C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ScopedMuzzleFlashOffset;                       // 0x0124 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ScopedShellCasingOffset;                       // 0x0130 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomFireShakeScale;                            // 0x013C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponSightDefinition");
		}

		return uClassPointer;
	};

	void OnZoomedOut(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomedIn(class UObject* Instigator, int32_t ZoomLevel, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomingOut(class UObject* Instigator, int32_t ZoomLevel, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomingIn(class UObject* Instigator, int32_t ZoomLevel, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUnequip(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnEquip(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.WeaponTracerManager
// 0x0010 (0x0058 - 0x0068)
class UWeaponTracerManager : public UObject
{
public:
	class TArray<struct FWeaponTracerInst>             Tracers;                                       // 0x0058 (0x0010) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponTracerManager");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void AddTracer(const struct FVector& StartLocation, const struct FVector& EndLocation, class UFiringModeDefinition* FiringModeDefinition, class AWillowWeapon* WeaponOwner);
};

// Class WillowGame.WeaponTypeAttributeValueResolver
// 0x0030 (0x0058 - 0x0088)
class UWeaponTypeAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                             // 0x0058 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FWeaponTypeSelectorData>       WeaponTypes;                                   // 0x0078 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponTypeAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponTypeDefinition
// 0x0698 (0x0240 - 0x08D8)
class UWeaponTypeDefinition : public UWillowInventoryDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x0240 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBodyProvider;                        // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	EWeaponType                                        WeaponType;                                    // 0x0250 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EBarrelSpinMode                                    BarrelSpinMode;                                // 0x0251 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            InventoryGroup;                                // 0x0252 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EGbxWeaponLock                                     WeaponLockType;                                // 0x0253 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      ScaleformFrameName;                            // 0x0258 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class USwfMovie*                                   ScaleformDLCClip;                              // 0x0268 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourceDefinition*                         AmmoResource;                                  // 0x0270 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            StartingAmmoCount;                             // 0x0278 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MaxStoredAmmo;                                 // 0x027C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ShotCost;                                      // 0x0280 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ClipSize;                                      // 0x0284 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            TapedClipCount;                                // 0x0288 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AmmoRegenerationRate;                          // 0x028C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSendAmmoChangedEvents : 1;                    // 0x0290 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseOverheatBehavior : 1;                      // 0x0290 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseHeatAsAmmo : 1;                            // 0x0290 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanFireWhenOverheated : 1;                    // 0x0290 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanOverheat : 1;                              // 0x0290 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisplayHeatInUI : 1;                          // 0x0290 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bRegenerateClipAmmo : 1;                       // 0x0290 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bScaleAccuracyWhenZoomed : 1;                  // 0x0290 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bShotAccuracyCurveEnabled : 1;                 // 0x0290 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bLinkFireRecoilToFireInterval : 1;             // 0x0290 (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bRemoveBaseAccuracyFromRecoilScale : 1;        // 0x0290 (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           AltFireRespectsPrimaryFireInterval : 1;        // 0x0290 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bForceZoomWhenFiring : 1;                      // 0x0290 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAutoBurstFire : 1;                            // 0x0290 (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bSingleFeedReload : 1;                         // 0x0290 (0x0004) [0x0000000000000003] [0x00004000] (CPF_Edit | CPF_Const)
	uint32_t                                           bZoomWanderEnabled : 1;                        // 0x0290 (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAlternativeKickEnabled : 1;                   // 0x0290 (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAlwaysDoKickRecovery : 1;                     // 0x0290 (0x0004) [0x0000000000000003] [0x00020000] (CPF_Edit | CPF_Const)
	uint32_t                                           bSightDataConverted : 1;                       // 0x0290 (0x0004) [0x0000000000000002] [0x00040000] (CPF_Const)
	uint32_t                                           bMuzzleFlashPSCLoops : 1;                      // 0x0290 (0x0004) [0x0000000000000003] [0x00080000] (CPF_Edit | CPF_Const)
	uint32_t                                           bGlowEnabled : 1;                              // 0x0290 (0x0004) [0x0000000000000003] [0x00100000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAkimboStyle : 1;                              // 0x0290 (0x0004) [0x0000000000000003] [0x00200000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAlwaysFirePrimaryWeaponFirst : 1;             // 0x0290 (0x0004) [0x0000000000000003] [0x00400000] (CPF_Edit | CPF_Const)
	uint32_t                                           bPlayBodyFiringAnimationsForEveryWeapon : 1;   // 0x0290 (0x0004) [0x0000000000000003] [0x00800000] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisableReloadMessages : 1;                    // 0x0290 (0x0004) [0x0000000000000003] [0x01000000] (CPF_Edit | CPF_Const)
	float                                              HeatCoolDownRate;                              // 0x0294 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              OverheatCoolDownDelay;                         // 0x0298 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HeatCoolDownDelay;                             // 0x029C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HeatPerShot;                                   // 0x02A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       HeatMaterialParamName;                         // 0x02A4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StartCooldownEffectThreshold;                  // 0x02AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StopCooldownEffectThreshold;                   // 0x02B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClipRegenRate;                                 // 0x02B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EmptyClipRegenDelay;                           // 0x02B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FireClipRegenDelay;                            // 0x02BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                InstantHitDamage;                              // 0x02C0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      InstantHitDamageType;                          // 0x02E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowDamageTypeDefinition*                 DefaultDamageTypeDefinition;                   // 0x02E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                InstantHitMomentum;                            // 0x02F0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x0310 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ProjectilesPerShot;                            // 0x0318 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                MeleeDamage;                                   // 0x0320 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Spread;                                        // 0x0340 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PerShotAccuracyImpulse;                        // 0x0344 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ShotAccuracyCurveResetTime;                    // 0x0348 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FInterpCurveFloat                           ShotAccuracyCurve;                             // 0x0350 (0x0018) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FName                                       BodyWeaponHoldName;                            // 0x0368 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FConditionalAnimationData>     WeaponIdleAnimations;                          // 0x0370 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponFireAnimations;                          // 0x0380 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponReloadAnimations;                        // 0x0390 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponStartReloadAnimations;                   // 0x03A0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponEndReloadAnimations;                     // 0x03B0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponEquipAnimations;                         // 0x03C0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponPutDownAnimations;                       // 0x03D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalAnimationData>     WeaponZoomInAnimations;                        // 0x03E0 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FConditionalAnimationData>     WeaponZoomedAnimations;                        // 0x03F0 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FConditionalAnimationData>     WeaponZoomOutAnimations;                       // 0x0400 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	struct FName                                       AnimNodeSlotName;                              // 0x0410 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ZoomAnimNodeSlotName;                          // 0x0418 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       WeaponGrabAnimation;                           // 0x0420 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinFireAnimDuration;                           // 0x0428 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumberOfShotsToAdvanceCylinder;                // 0x042C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       AnimThresholdValues;                           // 0x0430 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FInterpCurveFloat                           RecoilAnimScaleCurve;                          // 0x0440 (0x0018) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              ZoomedRecoilAnimScale;                         // 0x0458 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class UFiringModeDefinition*                       DefaultFiringModeDefinition;                   // 0x0460 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFiringModeDefinition*                       DefaultZoomedFiringModeDefinition;             // 0x0468 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Range;                                         // 0x0470 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FireRate;                                      // 0x0474 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     FireOffset;                                    // 0x0478 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      FiringForceFeedback;                           // 0x0488 (0x0008) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FAttributeBaseValueData>       ProjectileBaseValues;                          // 0x0490 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                ExtraShotDelay;                                // 0x04A0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ShortFireIntervalModPower;                     // 0x04C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LongFireIntervalModPower;                      // 0x04C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AutoBurstIntervalScale;                        // 0x04C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BurstInterval;                                 // 0x04CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            AutomaticBurstCount;                           // 0x04D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BurstShotAccuracyImpulseScale;                 // 0x04D4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinBarrelSpinUpPctToFire;                      // 0x04D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ReloadTime;                                    // 0x04DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ReloadCompletePercent;                         // 0x04E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              StartReloadTime;                               // 0x04E4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EndReloadTime;                                 // 0x04E8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TapedClipReloadTime;                           // 0x04EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TapedClipReloadCompletePercent;                // 0x04F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SingleFeedIncrement;                           // 0x04F4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EquipTime;                                     // 0x04F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PutDownTime;                                   // 0x04FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              GrabEquipTime;                                 // 0x0500 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LeadingSpeed;                                  // 0x0504 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ViewModelLeadPivotName;                        // 0x0508 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ViewModelRotationOriginOffset;                 // 0x0510 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ViewModelRotationAmt;                          // 0x051C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ViewModelTranslationAmt;                       // 0x0520 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LeadingZoomedScale;                            // 0x0524 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FWeaponZoomLevel>              ZoomLevels;                                    // 0x0528 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	float                                              MaxPitchLead;                                  // 0x0538 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxYawLead;                                    // 0x053C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     PlayerViewOffset;                              // 0x0540 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FirstPersonMeshFOV;                            // 0x054C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       ZoomSocketPreferred;                           // 0x0550 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       ZoomSocketFallback;                            // 0x0558 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       FrontScopeSocket;                              // 0x0560 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       FrontSightSocket;                              // 0x0568 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       RearSightSocket;                               // 0x0570 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              FractalWanderSpeed;                            // 0x0578 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FractalWanderLacunarity;                       // 0x057C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FractalWanderPersistence;                      // 0x0580 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FractalWanderDiscWidth;                        // 0x0584 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FractalWanderDiscHeight;                       // 0x0588 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomWanderSmoothingSpeed;                      // 0x058C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomWanderSmoothInTime_OnZoom;                 // 0x0590 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ZoomWanderSmoothInTime_OnFire;                 // 0x0594 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ScopedMuzzleFlashOffset;                       // 0x0598 (0x000C) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       BoneToHideOnMesh;                              // 0x05A4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       AdditionalBoneToHideOnMesh;                    // 0x05AC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickSpeed;                               // 0x05B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickRecoveryTime;                        // 0x05B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickRecoveryDelayTime;                   // 0x05BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickZoomMultiplier;                      // 0x05C0 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              WeaponKickUp;                                  // 0x05C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickDown;                                // 0x05C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinimumVerticalPercentage;                     // 0x05CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickLeft;                                // 0x05D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              WeaponKickRight;                               // 0x05D4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinimumHorizontalPercentage;                   // 0x05D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                AlternativeWeaponKick;                         // 0x05E0 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWeaponSightDefinition*                      Sight;                                         // 0x0600 (0x0008) [0x000000000640000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline)
	float                                              DOFKernelSize;                                 // 0x0608 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              DOFZoomRate;                                   // 0x060C (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              DOFInnerRadius;                                // 0x0610 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       SightFXCrosshairParamName;                     // 0x0614 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FName                                       SightFXCrosshairRefractionParamName;           // 0x061C (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              ZoomedViewModelFOVOffset;                      // 0x0624 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              MuzzleFlashDuration;                           // 0x0628 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MuzzleFlashSocket;                             // 0x062C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FGearboxViewShakeInfo                       FireShake;                                     // 0x0634 (0x0044) [0x0000000000000001] (CPF_Edit)    
	class UCameraAnim*                                 MeleeCameraAnim;                               // 0x0678 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     DroppedImpact;                                 // 0x0680 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ScopedShellCasingOffset;                       // 0x0688 (0x000C) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FRotator                                    OffHandShellCasingRotOffset;                   // 0x0694 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       GlowScaleMaterialParamName;                    // 0x06A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxGlowImpulseScale;                           // 0x06A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              GlowImpulseDecayDelay;                         // 0x06AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              GlowImpulseDecayRate;                          // 0x06B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FiringGlowImpulse;                             // 0x06B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              InventoryWeight;                               // 0x06B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FConditionalSoundData>         FireSounds;                                    // 0x06C0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalSoundData>         FireTailSounds;                                // 0x06D0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalSoundData>         EquipSounds;                                   // 0x06E0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalSoundData>         PutDownSounds;                                 // 0x06F0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalSoundData>         DryFireSounds;                                 // 0x0700 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FConditionalSoundData>         BarrelStartSpinningUpSounds;                   // 0x0710 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FConditionalSoundData>         BarrelStopSpinningUpSounds;                    // 0x0720 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FConditionalSoundData>         BarrelFullySpunUpSounds;                       // 0x0730 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FConditionalSoundData>         BarrelStopSpinningSounds;                      // 0x0740 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class UAkRtpc*                                     BarrelSpinRtpc;                                // 0x0750 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	struct FWeaponBarrelSpinSoundData                  BarrelSpinSound;                               // 0x0758 (0x0030) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FWeaponHeatSoundData                        HeatSound;                                     // 0x0788 (0x0030) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkRtpc*                                     FireIntervalRtpc;                              // 0x07B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LockRequiredTime;                              // 0x07C0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LockCoolDownTime;                              // 0x07C4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LockRequiredDotProduct;                        // 0x07C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    LockAttemptStartedAkEvent;                     // 0x07D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    LockAcquiredAkEvent;                           // 0x07D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    LockLostAkEvent;                               // 0x07E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AIAimError;                                    // 0x07E8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    AIBurstCount;                                  // 0x07EC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    AIBurstDelay;                                  // 0x07F4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlayerBonusAIAimError;                         // 0x07FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeEffectData>          ExternalAttributeEffects;                      // 0x0800 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeEffectData>          WeaponAttributeEffects;                        // 0x0810 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeEffectData>          ZoomExternalAttributeEffects;                  // 0x0820 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FAttributeEffectData>          ZoomWeaponAttributeEffects;                    // 0x0830 (0x0010) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FAttributePriorityData>        WeaponCardAttributes;                          // 0x0840 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class UAttributePresentationDefinition*> CustomPresentations;                           // 0x0850 (0x0010) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	struct FWeaponPartAttachmentData                   AttachmentData;                                // 0x0860 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     WeaponImpact;                                  // 0x0880 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      CrosshairFrame;                                // 0x0888 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class USwfMovie*                                   CrosshairMovieOverride;                        // 0x0898 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxDistSqr;                                    // 0x08A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxAngleCos;                                   // 0x08A4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BonusToCurrentTargetScore;                     // 0x08A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UpdateRate;                                    // 0x08AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaintainTargetTime;                            // 0x08B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FName>                         VantageTagNames;                               // 0x08B8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x08C8 (0x0008) [0x0000000000000000]               
	class UBodyProviderDefinition*                     BodyProviderDefinition;                        // 0x08D0 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponTypeDefinition");
		}

		return uClassPointer;
	};

	void OnAbortReload(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnAmmoChanged(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnStopOverheat(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnStartOverheat(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnProjectileFired(class UObject* Instigator, class UObject* Projectile, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTargetLockAcquired(class UObject* Instigator, class UObject* Target, class UObject* Weapon, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnAltFireTriggered(class UObject* Instigator, class UObject* Weapon, class APlayerController* PlayerController, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomedOut(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomedIn(class UObject* Instigator, int32_t ZoomLevel, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomingOut(class UObject* Instigator, int32_t ZoomLevel, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnZoomingIn(class UObject* Instigator, int32_t ZoomLevel, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUnequip(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnEquip(class UObject* Instigator, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnCreate(struct FBehaviorConsumerHandle& ConsumerHandle);
	struct FName GetWeaponTypeName();
	uint8_t GetHolsteredWeaponSizeType();
};

// Class WillowGame.WillowAccessControl
// 0x0000 (0x0360 - 0x0360)
class AWillowAccessControl : public AAccessControl
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAccessControl");
		}

		return uClassPointer;
	};

	bool ForceKickPlayer(class APlayerController* C, const class FString& KickReason);
};

// Class WillowGame.WillowActionSequencePawn
// 0x0030 (0x0298 - 0x02C8)
class UWillowActionSequencePawn : public UActionSequencePawn
{
public:
	class UWillowAIComponent*                          WillowAI;                                      // 0x0298 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UWillowNavigationHandle*                     MyNavHandle;                                   // 0x02A0 (0x0008) [0x0000000000000000]               
	class AWillowMind*                                 MyWillowMind;                                  // 0x02A8 (0x0008) [0x0000000000000000]               
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x02B0 (0x0008) [0x0000000000000000]               
	class UWillowMindTargetInfo*                       TargetRec;                                     // 0x02B8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowMindTargetInfo*                       ParentTargetRec;                               // 0x02C0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowActionSequencePawn");
		}

		return uClassPointer;
	};

	static struct FVector GetPointOnGround(const struct FVector& StartPoint, float optionalTolerance);
	bool FinishPath();
	void eventActivateEvent(const struct FName& EventName);
	bool IsCurrentlyFlying();
	bool IsFixingFlying();
	bool IsFlying();
	void eventInit();
	void BuildPathCostModifiers();
};

// Class WillowGame.Action_AimAtInstanceData
// 0x0018 (0x02C8 - 0x02E0)
class UAction_AimAtInstanceData : public UWillowActionSequencePawn
{
public:
	struct FName                                       InstanceDataName;                              // 0x02C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    AimTime;                                       // 0x02D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      InstanceDataActor;                             // 0x02D8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_AimAtInstanceData");
		}

		return uClassPointer;
	};

	class AActor* GetInstanceDataActor();
	void eventStop();
	void eventStart();
	struct FName eventCanRun();
};

// Class WillowGame.Action_AimAtScanRange
// 0x0020 (0x02C8 - 0x02E8)
class UAction_AimAtScanRange : public UWillowActionSequencePawn
{
public:
	float                                              YawAngle;                                      // 0x02C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScanSpeed;                                     // 0x02CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointDelay;                                    // 0x02D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FAIRange                                    YawVariance;                                   // 0x02D4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAIRange                                    PitchVariance;                                 // 0x02DC (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentYawAngle;                               // 0x02E4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_AimAtScanRange");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_AimAtThreat
// 0x0000 (0x02C8 - 0x02C8)
class UAction_AimAtThreat : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_AimAtThreat");
		}

		return uClassPointer;
	};

	void eventStart();
	struct FName eventCanRun();
};

// Class WillowGame.Action_ShootThreatWhenInView
// 0x0000 (0x02C8 - 0x02C8)
class UAction_ShootThreatWhenInView : public UAction_AimAtThreat
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_ShootThreatWhenInView");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_CoverAttack
// 0x0050 (0x02C8 - 0x0318)
class UAction_CoverAttack : public UWillowActionSequencePawn
{
public:
	class TArray<class UGBXPathConstraint*>            Limits;                                        // 0x02C8 (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              LineOfSightTime;                               // 0x02D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    StayInCoverTime;                               // 0x02DC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UnawareAttackTime;                             // 0x02E4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FindCoverInterval;                             // 0x02E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class UGBXPathConstraint*>            FullLimits;                                    // 0x02F0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UCoverSlotComponent*                         MyCover;                                       // 0x0300 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              LastFindCoverTime;                             // 0x0308 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FAIRange                                    IdleTimeRange;                                 // 0x030C (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_CoverAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_FlyAnimAttack
// 0x0030 (0x02C8 - 0x02F8)
class UAction_FlyAnimAttack : public UWillowActionSequencePawn
{
public:
	EAimType                                           AimType;                                       // 0x02C8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              VisionAngle;                                   // 0x02CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    Range;                                         // 0x02D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bShootTarget : 1;                              // 0x02D8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAttackFromOppositeSideOfMaster : 1;           // 0x02D8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bTargetHeld : 1;                               // 0x02D8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class USpecialMoveDefinition*                      AttackAnim;                                    // 0x02E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CheckRate;                                     // 0x02E8 (0x0004) [0x0000000000000000]               
	struct FAIRange                                    ActualRange;                                   // 0x02EC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_FlyAnimAttack");
		}

		return uClassPointer;
	};

	bool ValidAttackLoc(const struct FVector& TestLoc);
	struct FVector GetAttackLoc();
	void AttackFinished();
	struct FVector GetMoveToTargetGoal();
	void CheckStateTransition();
	struct FName GetDesiredState();
	void eventActivateEvent(const struct FName& EventName);
	void eventStop();
	void eventStart();
	struct FName eventCanRun();
	void eventInit();
};

// Class WillowGame.Action_FlyLeapAttack
// 0x0050 (0x02F8 - 0x0348)
class UAction_FlyLeapAttack : public UAction_FlyAnimAttack
{
public:
	struct FTrajectoryData                             Options;                                       // 0x02F8 (0x0024) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMove_LeapAttack*                     LeapAnim;                                      // 0x0320 (0x0008) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	struct FAIRange                                    LeapTargetRange;                               // 0x0328 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    LeapTargetAngle;                               // 0x0330 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPathingObstacleInfo*                        TargetObstacleInfo;                            // 0x0338 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UGBXPathConstraint_LineOfSight*              LineOfSightConstraint;                         // 0x0340 (0x0008) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_FlyLeapAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_GenericAttack
// 0x0050 (0x02C8 - 0x0318)
class UAction_GenericAttack : public UWillowActionSequencePawn
{
public:
	uint32_t                                           bShootTarget : 1;                              // 0x02C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanShootWhileMoving : 1;                      // 0x02C8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bMoveUntilCanShootIf : 1;                      // 0x02C8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bFinishUponArrival : 1;                        // 0x02C8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bLockCurrentTarget : 1;                        // 0x02C8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bFailIfTargetLost : 1;                         // 0x02C8 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseDefaultUnawareResponse : 1;                // 0x02C8 (0x0004) [0x0000000000000002] [0x00000040] (CPF_Const)
	uint32_t                                           bCanPath : 1;                                  // 0x02C8 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bLimitedMovement : 1;                          // 0x02C8 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bMigrated : 1;                                 // 0x02C8 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bWantsCrouchIdle : 1;                          // 0x02C8 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bWantsCrouchMove : 1;                          // 0x02C8 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bWantsFullLOSTrace : 1;                        // 0x02C8 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bCanBeLimitedByDownedPlayers : 1;              // 0x02C8 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	class UExpressionEvaluator*                        CanShootIf;                                    // 0x02D0 (0x0008) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class TArray<class UGBXPathConstraint*>            Limits;                                        // 0x02D8 (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	EAttackType                                        Type;                                          // 0x02E8 (0x0001) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	EUnawareResponse                                   UnawareResponse;                               // 0x02E9 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              UnawareAttackTime;                             // 0x02EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CrouchIdleChance;                              // 0x02F0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CrouchMoveChance;                              // 0x02F4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CrouchUpdateRate;                              // 0x02F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CheckRate;                                     // 0x02FC (0x0004) [0x0000000000000000]               
	struct FAIRange                                    IdleTimeRange;                                 // 0x0300 (0x0008) [0x0000000000000000]               
	class TArray<class UGBXPathConstraint*>            FullLimits;                                    // 0x0308 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_GenericAttack");
		}

		return uClassPointer;
	};

	bool TargetIsDownedPlayer();
	bool HalfExposed();
	void UnclaimMovement();
	void ClaimMovement();
	bool CanMove();
	bool ReachedAttackLocation();
	void CheckStateTransition();
	struct FName GetDesiredState();
	void UpdateCrouched(bool bShouldCrouch);
	void UpdateStance();
	void CheckCrouchState();
	void BuildPathCostModifiers();
	void eventStop();
	void eventStart();
	void eventActivateEvent(const struct FName& EventName);
	struct FName eventCanRun();
};

// Class WillowGame.Action_AnimAttack
// 0x0028 (0x0318 - 0x0340)
class UAction_AnimAttack : public UAction_GenericAttack
{
public:
	EAimType                                           AimType;                                       // 0x0318 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              VisionAngle;                                   // 0x031C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAimBody : 1;                                  // 0x0320 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanBeInterrupted : 1;                         // 0x0320 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bAdjustPlayRate : 1;                           // 0x0320 (0x0004) [0x0000000000000002] [0x00000004] (CPF_Const)
	class USpecialMoveDefinition*                      AttackAnim;                                    // 0x0328 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    PlayRate;                                      // 0x0330 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Aim;                                           // 0x0338 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_AnimAttack");
		}

		return uClassPointer;
	};

	float GetDotToTarget();
	void AttackFinished(bool bInterrupted);
	float GetPlayRate();
	void StopAnimation();
	struct FName GetDesiredState();
	void eventStop();
	void eventInit();
};

// Class WillowGame.Action_AttackLoop
// 0x0040 (0x0340 - 0x0380)
class UAction_AttackLoop : public UAction_AnimAttack
{
public:
	struct FAIRange                                    LoopCount;                                     // 0x0340 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      StartSMD;                                      // 0x0348 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      StopSMD;                                       // 0x0350 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      LoopSMD;                                       // 0x0358 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UExpressionEvaluator*                        LoopCondition;                                 // 0x0360 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class UStanceDefinition*                           LoopAttackStance;                              // 0x0368 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLoopDisableCloaking : 1;                      // 0x0370 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            NumLoops;                                      // 0x0374 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxLoops;                                      // 0x0378 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_AttackLoop");
		}

		return uClassPointer;
	};

	bool PlayAnim(class USpecialMoveDefinition* Anim, const struct FName& CallbackName);
	void FinishAttack();
	void Init();
};

// Class WillowGame.Action_ChargeTarget
// 0x0028 (0x0340 - 0x0368)
class UAction_ChargeTarget : public UAction_AnimAttack
{
public:
	class UChargeDefinition*                           ChargeDef;                                     // 0x0340 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bStartAnimPlaying : 1;                         // 0x0348 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bEndAnimPlaying : 1;                           // 0x0348 (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bHasHitTarget : 1;                             // 0x0348 (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	float                                              SlowStartTime;                                 // 0x034C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     StartChargeLocation;                           // 0x0350 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     HitTargetLocation;                             // 0x035C (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_ChargeTarget");
		}

		return uClassPointer;
	};

	void EndAnimFinished();
	void StartAnimFinished();
};

// Class WillowGame.Action_LeapAttack
// 0x0068 (0x0340 - 0x03A8)
class UAction_LeapAttack : public UAction_AnimAttack
{
public:
	ELeapAttackType                                    LeapType;                                      // 0x0340 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FTrajectoryData                             Options;                                       // 0x0344 (0x0024) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMove_LeapAttack*                     LeapAnim;                                      // 0x0368 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    LeapTargetRange;                               // 0x0370 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    LeapTargetAngle;                               // 0x0378 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bRequiresTarget : 1;                           // 0x0380 (0x0004) [0x0000000000020003] [0x00000001] (CPF_Edit | CPF_Const | CPF_EditConst)
	struct FVector                                     CachedLeapLocation;                            // 0x0384 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UPathingObstacleInfo*                        TargetObstacleInfo;                            // 0x0390 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UGBXPathConstraint_Direct*                   DirectConstraint;                              // 0x0398 (0x0008) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UGBXPathConstraint_LineOfSight*              LineOfSightConstraint;                         // 0x03A0 (0x0008) [0x000000000440200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_LeapAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_MortarAttack
// 0x00A8 (0x0340 - 0x03E8)
class UAction_MortarAttack : public UAction_AnimAttack
{
public:
	float                                              ShotDelay;                                     // 0x0340 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       MortarSocket;                                  // 0x0344 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FTrajectoryData                             Options;                                       // 0x034C (0x0024) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            NumShots;                                      // 0x0370 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       MortarValues;                                  // 0x0378 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UProjectileDefinition*                       MortarProjectile;                              // 0x0388 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USpecialMoveDefinition*                      StartAnim;                                     // 0x0390 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      ShootAnim;                                     // 0x0398 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      StopAnim;                                      // 0x03A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamSocket;                                    // 0x03A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFiringModeDefinition*                       BeamFiringModeDefinition;                      // 0x03B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bStartAnimDefinesSeekTime : 1;                 // 0x03B8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bMoveSeeker : 1;                               // 0x03B8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FVector                                     SeekStartOffset;                               // 0x03BC (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SeekTime;                                      // 0x03C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             TargetParticle;                                // 0x03D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SeekSpeed;                                     // 0x03D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ShotsTaken;                                    // 0x03DC (0x0004) [0x0000000000002000] (CPF_Transient)
	class AEmitter*                                    Effect;                                        // 0x03E0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_MortarAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_TeleportAttack
// 0x0040 (0x0340 - 0x0380)
class UAction_TeleportAttack : public UAction_AnimAttack
{
public:
	ETeleportAttackType                                TeleportType;                                  // 0x0340 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    TeleportRange;                                 // 0x0344 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    TeleportAngle;                                 // 0x034C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    TeleportHeight;                                // 0x0354 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bRequiresTarget : 1;                           // 0x035C (0x0004) [0x0000000000020003] [0x00000001] (CPF_Edit | CPF_Const | CPF_EditConst)
	uint32_t                                           bTeleportSucceeded : 1;                        // 0x035C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bFinishedCloaking : 1;                         // 0x035C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	struct FVector                                     PreAttackLocation;                             // 0x0360 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentTeleportAngle;                          // 0x036C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentTeleportRange;                          // 0x0370 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentTeleportHeight;                         // 0x0374 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UPathingObstacleInfo*                        TargetObstacleInfo;                            // 0x0378 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_TeleportAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Idle
// 0x0020 (0x02C8 - 0x02E8)
class UAction_Idle : public UWillowActionSequencePawn
{
public:
	struct FAIRange                                    IdleTime;                                      // 0x02C8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ECloakOverride                                     CloakBehavior;                                 // 0x02D0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EFollowType                                        FollowType;                                    // 0x02D1 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bLookAtTarget : 1;                             // 0x02D4 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              DistMin;                                       // 0x02D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DistMax;                                       // 0x02DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CheckRate;                                     // 0x02E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Idle");
		}

		return uClassPointer;
	};

	void CheckStateTransition();
	bool ShouldPathToTarget();
	class AActor* GetGoalActor();
	void IdleFinished();
	void eventStop();
	void eventStart();
	struct FName eventCanRun();
};

// Class WillowGame.Action_MoveToFormation
// 0x0038 (0x02C8 - 0x0300)
class UAction_MoveToFormation : public UWillowActionSequencePawn
{
public:
	uint32_t                                           bBurrow : 1;                                   // 0x02C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bShootTarget : 1;                              // 0x02C8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bShootIfLeaderCanShoot : 1;                    // 0x02C8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bCompleteUponArrival : 1;                      // 0x02C8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bCompletionMustRotate : 1;                     // 0x02C8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseSquadRules : 1;                            // 0x02C8 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	float                                              HoldDistance;                                  // 0x02CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       NameTag;                                       // 0x02D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UExpressionEvaluator*>          LeaderPriorityConditions;                      // 0x02D8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class UIAIInterface*                               LeaderAI_Object;                               // 0x02E8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UIAIInterface*                               LeaderAI_Interface;                            // 0x02F0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UFormationComponent*                         MyFormation;                                   // 0x02F8 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_MoveToFormation");
		}

		return uClassPointer;
	};

	void CheckStateTransition();
};

// Class WillowGame.Action_PlayCustomAnimation
// 0x0010 (0x02C8 - 0x02D8)
class UAction_PlayCustomAnimation : public UWillowActionSequencePawn
{
public:
	class USpecialMoveDefinition*                      SpecialMove;                                   // 0x02C8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStopMovement : 1;                             // 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWaitForMovementToStop : 1;                    // 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bStopOnInterrupt : 1;                          // 0x02D0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUninteruptible : 1;                           // 0x02D0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bMovementHeld : 1;                             // 0x02D0 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_PlayCustomAnimation");
		}

		return uClassPointer;
	};

	void eventStop();
	void eventStart();
	struct FName eventCanRun();
};

// Class WillowGame.Action_SetFlight
// 0x0048 (0x02C8 - 0x0310)
class UAction_SetFlight : public UWillowActionSequencePawn
{
public:
	ESetFlightMode                                     Mode;                                          // 0x02C8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USpecialMoveDefinition*                      Anim;                                          // 0x02D0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FBasedPosition                              LandPos;                                       // 0x02D8 (0x0038) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_SetFlight");
		}

		return uClassPointer;
	};

	struct FVector GetLandingLocation();
	void eventStart();
	struct FName eventCanRun();
};

// Class WillowGame.Action_SweepAttack
// 0x0028 (0x02C8 - 0x02F0)
class UAction_SweepAttack : public UWillowActionSequencePawn
{
public:
	uint32_t                                           bShootTarget : 1;                              // 0x02C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              Angle;                                         // 0x02CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Height;                                        // 0x02D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Radius;                                        // 0x02D4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESweepDirection                                    Direction;                                     // 0x02D8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESweepDirection                                    SweepDirection;                                // 0x02D9 (0x0001) [0x0000000000002000] (CPF_Transient)
	float                                              MaxIntervalAngle;                              // 0x02DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     NextLoc;                                       // 0x02E0 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              AngleTraveled;                                 // 0x02EC (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_SweepAttack");
		}

		return uClassPointer;
	};

	void CalcNextLoc();
	void eventStart();
	struct FName eventCanRun();
};

// Class WillowGame.Action_SwoopAttack
// 0x0070 (0x02C8 - 0x0338)
class UAction_SwoopAttack : public UWillowActionSequencePawn
{
public:
	float                                              SwoopFarDistance;                              // 0x02C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SwoopFarHeight;                                // 0x02CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SwoopCloseDistance;                            // 0x02D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SwoopCloseHeight;                              // 0x02D4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SwoopAwayDistance;                             // 0x02D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SwoopAwayHeight;                               // 0x02DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bShootTarget : 1;                              // 0x02E0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseOffset : 1;                                // 0x02E0 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bFoundAttackOffset : 1;                        // 0x02E0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bCacheTargetLoc : 1;                           // 0x02E0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              SwoopAttackDistance;                           // 0x02E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FSwoopAttackData>              SwoopAttackDistances;                          // 0x02E8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              Offset;                                        // 0x02F8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESwoopOffset                                       OffsetDirection;                               // 0x02FC (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESwoopOffset                                       Direction;                                     // 0x02FD (0x0001) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     AttackOffset;                                  // 0x0300 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              ClosestAttackDist;                             // 0x030C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastAttackLocation;                            // 0x0310 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     AwayStartLocation;                             // 0x031C (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     CachedTargetLoc;                               // 0x0328 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_SwoopAttack");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAIComponent
// 0x0040 (0x02F8 - 0x0338)
class UWillowAIComponent : public UAIComponent
{
public:
	class AWillowMind*                                 MyWillowMind;                                  // 0x02F8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              LastHurtTime;                                  // 0x0300 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastAttackedTime;                              // 0x0304 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      LastAttacker;                                  // 0x0308 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FAIHoldData>                   HeadLookHolds;                                 // 0x0310 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FAIHoldData>                   PhaseLockHolds;                                // 0x0320 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              LastTickTime;                                  // 0x0330 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TickThrottleTime;                              // 0x0334 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIComponent");
		}

		return uClassPointer;
	};

	bool IsAIThrottled();
	static bool IsAttackDebugEnabled();
	static void ToggleAttackDebug();
	void DrawAttackDebug();
	bool CanPhaseLock();
	void ReleasePhaseLock(const struct FName& HoldName, class UObject* Tag);
	void HoldPhaseLock(const struct FName& HoldName, class UObject* Tag);
	bool PhaseLockOnHold();
	void ReleaseHeadLook(const struct FName& HoldName, class UObject* Tag);
	void HoldHeadLook(const struct FName& HoldName, class UObject* Tag);
	bool HeadLookOnHold();
	bool OnHold();
	float GetTimeSinceAttacked();
	float GetTimeSinceHurt();
};

// Class WillowGame.WillowAIDebugCamera
// 0x0020 (0x00C0 - 0x00E0)
class UWillowAIDebugCamera : public UAIDebugCamera
{
public:
	class TArray<class AAIDebugDummyBase*>             Dummies;                                       // 0x00C0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UClass*                                      AIDebugDummyClass;                             // 0x00D0 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumDummies;                                    // 0x00D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bShowWillowInspectorStats : 1;                 // 0x00DC (0x0004) [0x0000000000044000] [0x00000001] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bShowAccuracyDebug : 1;                        // 0x00DC (0x0004) [0x0000000000044000] [0x00000002] (CPF_Config | CPF_GlobalConfig)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIDebugCamera");
		}

		return uClassPointer;
	};

	void ToggleAccuracyDebug();
	void ToggleWillowInspectorStats();
	void InitDummies(int32_t NewNumDummies);
	void SetPrevSnapshot();
	void SetNextSnapshot();
	void NotifyGameUnPaused();
	void NotifyGamePaused();
};

// Class WillowGame.WillowAIDefinition
// 0x0020 (0x00B0 - 0x00D0)
class UWillowAIDefinition : public UAIDefinition
{
public:
	class UActionSequence*                             PatrolAction;                                  // 0x00B0 (0x0008) [0x0000000000000000]               
	class UActionSequence*                             ScriptedAction;                                // 0x00B8 (0x0008) [0x0000000000000000]               
	class UExpressionEvaluator*                        WantsFormation;                                // 0x00C0 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	uint32_t                                           bGetTargetsFromParents : 1;                    // 0x00C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIDefinition");
		}

		return uClassPointer;
	};

	void OnRevivedPlayerMaster(struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnDismount(struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.WillowAIMoveNode
// 0x0000 (0x02E0 - 0x02E0)
class AWillowAIMoveNode : public AGearboxAIMoveNode
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIMoveNode");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAkComponent
// 0x0000 (0x0310 - 0x0310)
class UWillowAkComponent : public UGearboxAkComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAkComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimBlendByPosture
// 0x0010 (0x01A0 - 0x01B0)
class UWillowAnimBlendByPosture : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                     // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bMakeCrouched : 1;                             // 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint8_t                                           UnknownData00[0x8];                            // 0x01A8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimBlendByPosture");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimDefinition
// 0x0008 (0x0140 - 0x0148)
class UWillowAnimDefinition : public UGearboxAnimDefinition
{
public:
	uint32_t                                           bAllowLeftHandIK : 1;                          // 0x0140 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStopAI : 1;                                   // 0x0140 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bStopMovement : 1;                             // 0x0140 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bStopLook : 1;                                 // 0x0140 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bStopHeadLook : 1;                             // 0x0140 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bBlocksWeaponActions : 1;                      // 0x0140 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimDefinition");
		}

		return uClassPointer;
	};

	void eventClientFinished(class USpecialMoveInterface* SMI, bool bInterrupted);
	float eventClientStarted(class USpecialMoveInterface* SMI, struct FSpecialMoveData& SMData);
	void eventServerFinished(class USpecialMoveInterface* SMI, bool bInterrupted);
	void eventServerStarted(class USpecialMoveInterface* SMI);
	bool eventAuthorityCanPlay(class USpecialMoveInterface* SMI);
};

// Class WillowGame.SpecialMove_Cringe
// 0x0010 (0x0148 - 0x0158)
class USpecialMove_Cringe : public UWillowAnimDefinition
{
public:
	struct FName                                       CringeAnim;                                    // 0x0148 (0x0008) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              CringeTime;                                    // 0x0150 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_Cringe");
		}

		return uClassPointer;
	};

	float GetAnimLength(class USkeletalMeshComponent* SMC);
	float PlayAnim_FP(class USpecialMoveInterface* SMI, struct FSpecialMoveData& SMData);
	float PlayAnim(class USpecialMoveInterface* SMI, struct FSpecialMoveData& SMData);
};

// Class WillowGame.SpecialMove_Motion
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_Motion : public UWillowAnimDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_Motion");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_Dodge
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_Dodge : public USpecialMove_Motion
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_Dodge");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_PhaseLock
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_PhaseLock : public UWillowAnimDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_PhaseLock");
		}

		return uClassPointer;
	};

	void eventClientFinished(class USpecialMoveInterface* SMI, bool bInterrupted);
	void eventServerFinished(class USpecialMoveInterface* SMI, bool bInterrupted);
	void eventServerStarted(class USpecialMoveInterface* SMI);
	bool eventAuthorityCanPlay(class USpecialMoveInterface* SMI);
};

// Class WillowGame.SpecialMove_Spawned
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_Spawned : public UWillowAnimDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_Spawned");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_WeaponAction
// 0x0028 (0x0148 - 0x0170)
class USpecialMove_WeaponAction : public UWillowAnimDefinition
{
public:
	uint32_t                                           bStopWeaponRecoil : 1;                         // 0x0148 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FName                                       MainHandWeaponAnimName;                        // 0x014C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAnimSet*                                    MainHandWeaponAnimSet;                         // 0x0158 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       OffHandWeaponAnimName;                         // 0x0160 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAnimSet*                                    OffHandWeaponAnimSet;                          // 0x0168 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_WeaponAction");
		}

		return uClassPointer;
	};

	void StopWeaponRecoilImp(class USpecialMoveInterface* SMI, bool bStopPrimaryHand, bool bStopOffHand);
	void StopWeaponRecoil(class USpecialMoveInterface* SMI);
	void eventClientFinished(class USpecialMoveInterface* SMI, bool bInterrupted);
	float eventClientStarted(class USpecialMoveInterface* SMI, struct FSpecialMoveData& SMData);
	bool HasWeaponAnimation();
};

// Class WillowGame.SpecialMove_FirstAndThirdPersonAnimation
// 0x0008 (0x0170 - 0x0178)
class USpecialMove_FirstAndThirdPersonAnimation : public USpecialMove_WeaponAction
{
public:
	class USpecialMove_FirstPerson*                    FirstPersonSM;                                 // 0x0170 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_FirstAndThirdPersonAnimation");
		}

		return uClassPointer;
	};

	void eventClientFinished(class USpecialMoveInterface* SMI, bool bInterrupted);
	float eventClientStarted(class USpecialMoveInterface* SMI, struct FSpecialMoveData& SMData);
};

// Class WillowGame.SpecialMove_WeaponActionOffHand
// 0x0000 (0x0170 - 0x0170)
class USpecialMove_WeaponActionOffHand : public USpecialMove_WeaponAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_WeaponActionOffHand");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNode_AddCameraBone
// 0x0040 (0x0160 - 0x01A0)
class UWillowAnimNode_AddCameraBone : public UAnimNodeBlend
{
public:
	struct FName                                       BoneName;                                      // 0x0160 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BlendWeight;                                   // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<uint8_t>                              LocalToCompReqBones;                           // 0x0170 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FBoneAtom                                   CachedRefBoneCompSpaceTransform;               // 0x0180 (0x0020) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_AddCameraBone");
		}

		return uClassPointer;
	};

	void SetBlendTarget(float BlendTarget, float BlendTime);
};

// Class WillowGame.WillowAnimNode_AimState
// 0x0020 (0x01A0 - 0x01C0)
class UWillowAnimNode_AimState : public UAnimNodeBlendList
{
public:
	class TArray<struct FAimAnimTransitionData>        TransitionAnims;                               // 0x01A0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            CurrentModeChildIndex;                         // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TransitionBlendOutTime;                        // 0x01B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0x8];                            // 0x01B8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_AimState");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNode_Audio
// 0x0010 (0x0150 - 0x0160)
class UWillowAnimNode_Audio : public UAnimNodeBlendBase
{
public:
	class UAkEvent*                                    StartAkEvent;                                  // 0x0150 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    StopAkEvent;                                   // 0x0158 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_Audio");
		}

		return uClassPointer;
	};

	void eventOnCeaseRelevant();
	void eventOnBecomeRelevant();
	bool IsValid();
};

// Class WillowGame.WillowAnimNode_ClimbLadder
// 0x0000 (0x0170 - 0x0170)
class UWillowAnimNode_ClimbLadder : public UAnimNodeScaleRateBySpeed
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_ClimbLadder");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNode_Condition
// 0x0020 (0x0160 - 0x0180)
class UWillowAnimNode_Condition : public UAnimNodeBlend
{
public:
	float                                              BlendTime;                                     // 0x0160 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CheckRate;                                     // 0x0164 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFlagDefinition*                             FlagCondition;                                 // 0x0168 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LastCheckTime;                                 // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0xC];                            // 0x0174 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_Condition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNode_MovementTransition
// 0x0030 (0x01A0 - 0x01D0)
class UWillowAnimNode_MovementTransition : public UAnimNodeBlendList
{
public:
	float                                              LaunchBlendTime;                               // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PostLaunchBlendTime;                           // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StoppingBlendTime;                             // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PostStopBlendTime;                             // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       LaunchAnimName;                                // 0x01B0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       StopAnimName;                                  // 0x01B8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LaunchDelayTime;                               // 0x01C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EMoveState                                         MoveState;                                     // 0x01C4 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bWantsToMove : 1;                              // 0x01C8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              CurrentLaunchDelayTime;                        // 0x01CC (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_MovementTransition");
		}

		return uClassPointer;
	};

	bool NodeIsIdle();
};

// Class WillowGame.WillowAnimNode_Prism
// 0x0030 (0x0150 - 0x0180)
class UWillowAnimNode_Prism : public UAnimNodeBlendBase
{
public:
	class TArray<struct FPrismDataContainer>           PrismData;                                     // 0x0150 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              BlendTime;                                     // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MeshOffsetTurnThreshold;                       // 0x0164 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MeshOffsetTurn;                                // 0x0168 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           MeshOffsetTurnOnlyWhenStopped : 1;             // 0x016C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bBlendDown : 1;                                // 0x016C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            PreviousGroup;                                 // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CurrentGroup;                                  // 0x0174 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentBlendValue;                             // 0x0178 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              EditorSliderValue;                             // 0x017C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_Prism");
		}

		return uClassPointer;
	};

	bool NodeIsActive();
};

// Class WillowGame.WillowAnimNode_Simple
// 0x0050 (0x0170 - 0x01C0)
class UWillowAnimNode_Simple : public UAnimNodeAdditiveBlending
{
public:
	struct FName                                       SimpleAnimName;                                // 0x0170 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BlendInTime;                                   // 0x0178 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BlendOutTime;                                  // 0x017C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlayRate;                                      // 0x0180 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EEndingCondition                                   Style;                                         // 0x0184 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowAnimTree*                             MyTree;                                        // 0x0188 (0x0008) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	uint32_t                                           bAdditive : 1;                                 // 0x0190 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bMirror : 1;                                   // 0x0190 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bDominant : 1;                                 // 0x0190 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class UWillowAnimTree*                             LinkTree;                                      // 0x0198 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       LinkName;                                      // 0x01A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAnimNodeSequence*                           SeqNode;                                       // 0x01A8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UISimpleAnimPlayer*                          CachedAnimPlayer_Object;                       // 0x01B0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UISimpleAnimPlayer*                          CachedAnimPlayer_Interface;                    // 0x01B8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_Simple");
		}

		return uClassPointer;
	};

	void SetBlendTarget(float BlendTarget, float BlendTime);
	static bool PlayingSimpleAnim(class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName, bool optionalBCheckPlayingLastFrame);
	static int32_t GetSimpleAnimIndex(class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName);
	static void StopSimpleAnim(class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName);
	static void PlaySimpleAnim(class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName);
	static void UpdateSimpleAnims(class UISimpleAnimPlayer* AnimPlayer, int32_t NewState);
	static void UncacheSimpleAnims(class UISimpleAnimPlayer* AnimPlayer, class USkeletalMeshComponent* SkelMesh);
	static void CacheSimpleAnims(class UISimpleAnimPlayer* AnimPlayer, class USkeletalMeshComponent* SkelMesh);
	void Stop();
	void Play();
};

// Class WillowGame.WillowAnimNode_WeaponHold
// 0x0010 (0x01A0 - 0x01B0)
class UWillowAnimNode_WeaponHold : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                     // 0x01A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                           UnknownData00[0xC];                            // 0x01A4 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_WeaponHold");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNode_WeaponRecoil
// 0x0010 (0x01D0 - 0x01E0)
class UWillowAnimNode_WeaponRecoil : public UAnimNodeSpecialMoveBlend
{
public:
	uint32_t                                           bOffHandWeapon : 1;                            // 0x01D0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bComputeBaseRecoilScaleOnNextTick : 1;         // 0x01D0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              BaseRecoilScale;                               // 0x01D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0x8];                            // 0x01D8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_WeaponRecoil");
		}

		return uClassPointer;
	};

	float PlayData(const struct FName& optionalAnimNameOverride, float optionalPlayRateScale, float optionalBlendInOverride, float optionalBlendOutOverride, bool optionalBDisableNotifies, float optionalStartTimeOverride, struct FSpecialMoveData& SMData);
};

// Class WillowGame.WillowAnimNodeAimOffset
// 0x0000 (0x0210 - 0x0210)
class UWillowAnimNodeAimOffset : public UGearboxAnimNodeAimOffset
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeAimOffset");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendByAimState
// 0x0010 (0x01A0 - 0x01B0)
class UWillowAnimNodeBlendByAimState : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                     // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCurrentAimAtTarget : 1;                       // 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bEditorAimAtTarget : 1;                        // 0x01A4 (0x0004) [0x0000000800000000] [0x00000002] 
	uint8_t                                           UnknownData00[0x8];                            // 0x01A8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendByAimState");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendByRotationSpeed
// 0x0020 (0x01A0 - 0x01C0)
class UWillowAnimNodeBlendByRotationSpeed : public UAnimNodeBlendList
{
public:
	uint32_t                                           NoSpeedScaling : 1;                            // 0x01A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCallPlayAnimOnSwitch : 1;                     // 0x01A0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              BlendTime;                                     // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ThresholdRate;                                 // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReferenceSpeed;                                // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PreviewRotationRate;                           // 0x01B0 (0x0004) [0x0000000000000000]               
	uint8_t                                           UnknownData00[0xC];                            // 0x01B4 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendByRotationSpeed");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendDirectional
// 0x0020 (0x0150 - 0x0170)
class UWillowAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                           // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SingleAnimAtOrAboveLOD;                        // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTime;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseAcceleration : 1;                          // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseControllerLookDirection : 1;               // 0x015C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              DirAngle;                                      // 0x0160 (0x0004) [0x0000000000000000]               
	uint8_t                                           UnknownData00[0xC];                            // 0x0164 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendDirectional");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendInjured
// 0x0000 (0x01A0 - 0x01A0)
class UWillowAnimNodeBlendInjured : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendInjured");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendList
// 0x0010 (0x01A0 - 0x01B0)
class UWillowAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	class TArray<float>                                ChildBlendInTime;                              // 0x01A0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendList");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNode_Falling
// 0x0040 (0x01B0 - 0x01F0)
class UWillowAnimNode_Falling : public UWillowAnimNodeBlendList
{
public:
	float                                              DelayBeforeStartFalling;                       // 0x01B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinStartFallingVelocity;                       // 0x01B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InterruptEndFallMovementSpeed;                 // 0x01B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InterruptEndFallMovementTime;                  // 0x01BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FName>                         ReplaySynchGroups;                             // 0x01C0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              StartFallingTime;                              // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              StuckFallingTimer;                             // 0x01D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InterruptEndFallMovementTimer;                 // 0x01D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PrevVelocity;                                  // 0x01DC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AirWalkingTimer;                               // 0x01E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bRestartJump : 1;                              // 0x01E4 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint8_t                                           UnknownData00[0x8];                            // 0x01E8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNode_Falling");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendSwitch
// 0x0030 (0x01A0 - 0x01D0)
class UWillowAnimNodeBlendSwitch : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                     // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FName>                         ChildSwitches;                                 // 0x01A8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FName                                       CurrentSwitch;                                 // 0x01B8 (0x0008) [0x0000000000000000]               
	struct FName                                       DesiredSwitch;                                 // 0x01C0 (0x0008) [0x0000000000000000]               
	struct FName                                       DefaultSwitch;                                 // 0x01C8 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendSwitch");
		}

		return uClassPointer;
	};

	void SetCurrentSwitch(const struct FName& NewSwitch);
};

// Class WillowGame.WillowAnimNodeBlendThirdPersonMenu
// 0x0010 (0x01A0 - 0x01B0)
class UWillowAnimNodeBlendThirdPersonMenu : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                     // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bMakeThirdPerson : 1;                          // 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint8_t                                           UnknownData00[0x8];                            // 0x01A8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendThirdPersonMenu");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendTurning
// 0x0020 (0x01A0 - 0x01C0)
class UWillowAnimNodeBlendTurning : public UAnimNodeBlendList
{
public:
	float                                              TurnTransitionDelay;                           // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendUpTime;                                   // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendDownTime;                                 // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           fTurning : 1;                                  // 0x01AC (0x0004) [0x0000000000000000] [0x00000001] 
	int32_t                                            PrevAngle;                                     // 0x01B0 (0x0004) [0x0000000000000000]               
	int32_t                                            PrevDeltaAngle;                                // 0x01B4 (0x0004) [0x0000000000000000]               
	int32_t                                            DeltaAngle;                                    // 0x01B8 (0x0004) [0x0000000000000000]               
	float                                              CurrentTurnTransitionDelay;                    // 0x01BC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendTurning");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendWheeledPawn
// 0x0040 (0x0150 - 0x0190)
class UWillowAnimNodeBlendWheeledPawn : public UAnimNodeBlendBase
{
public:
	struct FDirChangeRateRange                         DirChangeRateMin;                              // 0x0150 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FDirChangeRateRange                         DirChangeRateMax;                              // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTime;                                     // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReferenceSpeed;                                // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeedUpRate;                                   // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeedDownRate;                                 // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BrakeRate;                                     // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleBlendTime;                                 // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseBaseRotation : 1;                          // 0x0178 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsIdle : 1;                                   // 0x0178 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bOneFrameMovementAdded : 1;                    // 0x0178 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              DirAngle;                                      // 0x017C (0x0004) [0x0000000000000000]               
	float                                              CurSpeed;                                      // 0x0180 (0x0004) [0x0000000000000000]               
	uint8_t                                           UnknownData00[0xC];                            // 0x0184 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendWheeledPawn");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeFeatherBlend
// 0x0050 (0x0160 - 0x01B0)
class UWillowAnimNodeFeatherBlend : public UAnimNodeBlend
{
public:
	class TArray<struct FFeatherBoneBlendTarget>       BoneBlendTargets;                              // 0x0160 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bForceLocalSpaceBlend : 1;                     // 0x0170 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class TArray<float>                                Child2PerBoneWeight;                           // 0x0178 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<uint8_t>                              LocalToCompReqBones;                           // 0x0188 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FName                                       MatchBoneName;                                 // 0x0198 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            MatchBoneIndex;                                // 0x01A0 (0x0004) [0x0000000000000000]               
	uint8_t                                           UnknownData00[0xC];                            // 0x01A4 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeFeatherBlend");
		}

		return uClassPointer;
	};

	void SetBlendTarget(float BlendTarget, float BlendTime);
};

// Class WillowGame.WillowAnimNodeSequence
// 0x0020 (0x0190 - 0x01B0)
class UWillowAnimNodeSequence : public UAnimNodeSequence
{
public:
	uint32_t                                           bAutoStart : 1;                                // 0x0190 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLoopLastSequence : 1;                         // 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 
	class TArray<struct FName>                         SeqStack;                                      // 0x0198 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                           UnknownData00[0x8];                            // 0x01A8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeSequence");
		}

		return uClassPointer;
	};

	void eventOnInit();
	void PlayAnimationSet(const class TArray<struct FName>& Sequences, float SeqRate, bool bLoopLast);
	void PlayAnimation(const struct FName& Sequence, float SeqRate, bool bSeqLoop);
};

// Class WillowGame.WillowAnimNodeSequenceAdditiveBlend
// 0x0020 (0x0190 - 0x01B0)
class UWillowAnimNodeSequenceAdditiveBlend : public UAnimNodeSequence
{
public:
	uint32_t                                           bAutoGenerateAdditiveSeqName : 1;              // 0x0190 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	struct FName                                       AddAnimSeqName;                                // 0x0194 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAnimSequence*                               AddAnimSeq;                                    // 0x01A0 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            AddAnimLinkupIndex;                            // 0x01A8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeSequenceAdditiveBlend");
		}

		return uClassPointer;
	};

	void SetAddAnim(const struct FName& Sequence);
	void SetAnim(const struct FName& Sequence);
};

// Class WillowGame.WillowAnimNodeSlot
// 0x0000 (0x0190 - 0x0190)
class UWillowAnimNodeSlot : public UAnimNodeSlot
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeSlot");
		}

		return uClassPointer;
	};

	void StopCustomAnimationOnLastFrame();
};

// Class WillowGame.WillowAnimTree
// 0x0030 (0x01F0 - 0x0220)
class UWillowAnimTree : public UAnimTree
{
public:
	class TArray<struct FName>                         SimpleAnimNames;                               // 0x01F0 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class USkeletalMeshComponent*                      PreviewWeapon;                                 // 0x0200 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       LeftHandAnimation;                             // 0x0208 (0x0008) [0x0000000000000000]               
	struct FVector                                     PreviewFloor;                                  // 0x0210 (0x000C) [0x0000000000002003] (CPF_Edit | CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimTree");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimTreeFactory
// 0x0000 (0x00A0 - 0x00A0)
class UWillowAnimTreeFactory : public UFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimTreeFactory");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAutoAimProfileDefinition
// 0x0030 (0x0058 - 0x0088)
class UWillowAutoAimProfileDefinition : public UGBXDefinition
{
public:
	float                                              MagnetismMin;                                  // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MagnetismMax;                                  // 0x005C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AimSlowdownRadiusMultiplier;                   // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxRotationH;                                  // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxRotationV;                                  // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LockStrengthH;                                 // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LockStrengthV;                                 // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CircleStrafeAssistRadiusMultiplier;            // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HardLockSnapMagnetism;                         // 0x0078 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SnapRadiusMultiplier;                          // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bInterpolateValuesBasedOnDistance : 1;         // 0x0080 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bTargetAlliesInsteadofEnemies : 1;             // 0x0080 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	float                                              MinTargetDistance;                             // 0x0084 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAutoAimProfileDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAutoAimStrategy
// 0x00D8 (0x0058 - 0x0130)
class UWillowAutoAimStrategy : public UObject
{
public:
	class UWillowAutoAimStrategyDefinition*            DataDefinition;                                // 0x0058 (0x0008) [0x0000000000000000]               
	int32_t                                            CurrentFrame;                                  // 0x0060 (0x0004) [0x0000000000000000]               
	int32_t                                            LastFrame;                                     // 0x0064 (0x0004) [0x0000000000000000]               
	float                                              SustainStartTime;                              // 0x0068 (0x0004) [0x0000000000000000]               
	float                                              AcquireStartTime;                              // 0x006C (0x0004) [0x0000000000000000]               
	uint32_t                                           bCanAcquireLock : 1;                           // 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsWithinAcquisitionRadius_InstantaneousTarget : 1;// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsWithinAcquisitionRadius_LockedTarget : 1;   // 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bComputedTargetLastFrame : 1;                  // 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bSnappedToTarget : 1;                          // 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bIgnoreCloakAbility : 1;                       // 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bIgnoreDeadPlayers : 1;                        // 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	class UITargetable*                                LookAtTarget_Object;                           // 0x0078 (0x0008) [0x0000000000000000] 
	class UITargetable*                                LookAtTarget_Interface;                        // 0x0080 (0x0008) [0x0000000000000000]               
	class UITargetable*                                InstantaneousTarget_Object;                    // 0x0088 (0x0008) [0x0000000000000000] 
	class UITargetable*                                InstantaneousTarget_Interface;                 // 0x0090 (0x0008) [0x0000000000000000]               
	class UITargetable*                                LastInstantaneousTarget_Object;                // 0x0098 (0x0008) [0x0000000000000000] 
	class UITargetable*                                LastInstantaneousTarget_Interface;             // 0x00A0 (0x0008) [0x0000000000000000]               
	class UITargetable*                                LockedTarget_Object;                           // 0x00A8 (0x0008) [0x0000000000000000] 
	class UITargetable*                                LockedTarget_Interface;                        // 0x00B0 (0x0008) [0x0000000000000000]               
	class UITargetable*                                CrosshairTarget_Object;                        // 0x00B8 (0x0008) [0x0000000000000000] 
	class UITargetable*                                CrosshairTarget_Interface;                     // 0x00C0 (0x0008) [0x0000000000000000]               
	struct FLockOnProfile                              PrevProfile;                                   // 0x00C8 (0x0030) [0x0000000000000000]               
	struct FLockOnProfile                              CurrentProfile;                                // 0x00F8 (0x0030) [0x0000000000000000]               
	ETargetableListSearchType                          TargetSet;                                     // 0x0128 (0x0001) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAutoAimStrategy");
		}

		return uClassPointer;
	};

	void ChangeStrategy(class UWillowAutoAimStrategyDefinition* NewStrategy);
	void SetTargetSet(ETargetableListSearchType Type);
	void SetLockingEnabled(bool bEnabled);
	void DrawCircle(class AHUD* H, const struct FVector& Center, float Radius, float SegmentSize, float SegmentIncSize, const struct FColor& DrawColor);
	void eventDrawAutoAimDebug(class AWillowPlayerController* Controller, class AHUD* H);
	class UITargetable* GetTargetUnderCrosshair(class APawn* InPlayer);
	void ClearAll();
	bool GetTargetSnapRegion(class AWillowPlayerController* PC, class UITargetable* Targetable, struct FTargetSnapRegion& SnapRegion);
	bool IsTargetHardLocked(class UITargetable* Targetable);
	bool GetTargetSnapLocation(class AWillowPlayerController* PC, class UITargetable* Targetable, struct FVector& SnapLoc);
	int32_t GetTargetableFlags();
};

// Class WillowGame.WillowAutoAimStrategyDefinition
// 0x0018 (0x0058 - 0x0070)
class UWillowAutoAimStrategyDefinition : public UGBXDefinition
{
public:
	float                                              MaxTargetDistance;                             // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinTargetDistance;                             // 0x005C (0x0004) [0x0000000000000002] (CPF_Const)   
	ETargetSnapMethod                                  SnapMethod;                                    // 0x0060 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bHardLock : 1;                                 // 0x0064 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           UseAutoAimWhileZoomed : 1;                     // 0x0064 (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	class UWillowAutoAimProfileDefinition*             DefaultProfile;                                // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAutoAimStrategyDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAutoTestManager
// 0x0000 (0x03F8 - 0x03F8)
class AWillowAutoTestManager : public AGBXAutoTestManager
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAutoTestManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowBehaviorFunctionLibrary
// 0x0000 (0x0058 - 0x0058)
class UWillowBehaviorFunctionLibrary : public UGearboxBehaviorFunctionLibrary
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowBehaviorFunctionLibrary");
		}

		return uClassPointer;
	};

	static class TArray<class UObject*> IOFilter(class TArray<class UObject*>& A);
	static float GetHealth(class UObject* A);
};

// Class WillowGame.WillowCalloutDefinition
// 0x0000 (0x0068 - 0x0068)
class UWillowCalloutDefinition : public UGearboxCalloutDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCalloutDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCharacterClassDefinition
// 0x0080 (0x00F0 - 0x0170)
class UWillowCharacterClassDefinition : public UCharacterClassDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                    // 0x00F0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UWillowCharacterClassDefinition*             AttributeParentClass;                          // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x0100 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FFlagDefinitionInitialization> DesignerFlagStartingValues;                    // 0x0110 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FAttributeCategory>            AttributeStartingValuesNew;                    // 0x0120 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FAttributeInitializationData                BaseCommerceMarkup;                            // 0x0130 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSpawnDamageNumbersAtDamageLocation : 1;       // 0x0150 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                    // 0x0158 (0x0008) [0x0000000000000002] (CPF_Const)   
	class USwfMovie*                                   OverrideUnitKillMessageIcon;                   // 0x0160 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USwfMovie*                                   OverrideUnitKillMessageCircleIcon;             // 0x0168 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCharacterClassDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AIClassDefinition
// 0x0178 (0x0170 - 0x02E8)
class UAIClassDefinition : public UWillowCharacterClassDefinition
{
public:
	class UAIDefinition*                               AIDef;                                         // 0x0170 (0x0008) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	class FString                                      DefaultDisplayName;                            // 0x0178 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      UBMKilledByMessageString;                      // 0x0188 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bWatchPlayerWhenUsed : 1;                      // 0x0198 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bIsCrawler : 1;                                // 0x0198 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bIsTurret : 1;                                 // 0x0198 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAvoidObstacles : 1;                           // 0x0198 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bAimRotationRateIsDifferent : 1;               // 0x0198 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bApplySlowDown : 1;                            // 0x0198 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseSimpleFlight : 1;                          // 0x0198 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bHeloStyle : 1;                                // 0x0198 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bFlyOverrideNavSize : 1;                       // 0x0198 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bDropDefaultWeaponOnDeath : 1;                 // 0x0198 (0x0004) [0x0000000000000002] [0x00000200] (CPF_Const)
	uint32_t                                           bBoss : 1;                                     // 0x0198 (0x0004) [0x0000000000000002] [0x00000400] (CPF_Const)
	uint32_t                                           bUsable : 1;                                   // 0x0198 (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bSecondaryUsable : 1;                          // 0x0198 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bTriggerFootstepEvent : 1;                     // 0x0198 (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bFriendlyFireAlwaysFiresEvents : 1;            // 0x0198 (0x0004) [0x0000000000000003] [0x00004000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAwardKillsToAllPlayers : 1;                   // 0x0198 (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bRootOnlyYawRotation : 1;                      // 0x0198 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	float                                              WatchPlayerTime;                               // 0x019C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CrawlerMeshLerpSpeed;                          // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MoveAtDestinationThreshold;                    // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    AkStartRotation;                               // 0x01A8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    AkStopRotation;                                // 0x01B0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RotationRate;                                  // 0x01B8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	EPhysics                                           Physics;                                       // 0x01C4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EHumanAvoidance                                    HumanAvoidanceType;                            // 0x01C5 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EInteractionIcons                                  UsableIcon;                                    // 0x01C6 (0x0001) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	float                                              AccelRate;                                     // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CrawlerRotationModifier;                       // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    AimRotationRate;                               // 0x01D0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              HumanAvoidanceDot;                             // 0x01DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UGBXPathConstraint*>            PathCostModifiers;                             // 0x01E0 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	float                                              CornerCutDistance;                             // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LookAheadDistance;                             // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LookInterpRate;                                // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathFixMaxDist;                                // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SlowDownDist;                                  // 0x0200 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SlowDownMinPct;                                // 0x0204 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FlyMaxRotationModifier;                        // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlyBlockedDistModifier;                        // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlyLookAheadTime;                              // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlyNavMeshCheckDist;                           // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlyStartSlowPct;                               // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlyStopSlowPct;                                // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlyExtentModifier;                             // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverrideNavSize;                               // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverrideNavHeight;                             // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class USkillDefinition*>              PassiveSkills;                                 // 0x0230 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UInventoryBalanceDefinition*                 DefaultWeapon;                                 // 0x0240 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UPawnInteractionDefinition*                  InteractionDefinition;                         // 0x0248 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CombatMusicTargetingThreat;                    // 0x0250 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UAkState*                                    SpecialCombatMusicState;                       // 0x0258 (0x0008) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SpecialCombatMusicPriority;                    // 0x0260 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UInteractionIconDefinition*                  UsableIconDef;                                 // 0x0268 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UInteractionIconDefinition*                  UsableIconDefSecondary;                        // 0x0270 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnUsedBehaviors;                               // 0x0278 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnUsedBehaviors_NoMission;                     // 0x0288 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnDismissedBehaviors;                          // 0x0298 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnLingeringBehaviors;                          // 0x02A8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	struct FAttributeInitializationData                TimeUntilConsideredLingering;                  // 0x02B8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FocusRadius;                                   // 0x02D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     FocusOffset;                                   // 0x02DC (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AIClassDefinition");
		}

		return uClassPointer;
	};

	void OnAllPickupsDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnPickupDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnFootStep(int32_t Foot, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUnTouch(EOnTouchEventOutputs EventOutput, class UObject* Other, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTouch(EOnTouchEventOutputs EventOutput, class UObject* Other, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUncloak(struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnCloak(struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTakeHeal(class UObject* Instigator, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnVehicleTakeDamage(class UObject* Instigator, class UObject* HitVehicle, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnTakeDamage(class UObject* Instigator, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, bool bWasCrit, float ExcessDamageDone, int32_t DamageTags, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnSpawned(EOnSpawnOutputs EventOutput, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUserCouldNotAffordSecondary(ENPCOnUsedOutputs EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUserCouldNotAfford(ENPCOnUsedOutputs EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnSecondaryUsed(ENPCOnUsedOutputs EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
	void OnUsed(ENPCOnUsedOutputs EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle& ConsumerHandle);
};

// Class WillowGame.PlayerClassDefinition
// 0x00E0 (0x0170 - 0x0250)
class UPlayerClassDefinition : public UWillowCharacterClassDefinition
{
public:
	class FString                                      PawnArchetypePath;                             // 0x0170 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      SkillTreePath;                                 // 0x0180 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              InitialFOVModifierSpeed;                       // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       GotFirstSkillPointStatID;                      // 0x0194 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaximumCoDependentDamageReturnRange;           // 0x019C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    ActionSkillAvailableAkEvent;                   // 0x01A0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourcePoolDefinition*                     ExperiencePoolDefinition;                      // 0x01A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UResourcePoolDefinition*                     MeleeSkillCooldownPoolDefinition;              // 0x01B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnLevelUp;                                     // 0x01B8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnLevelUpNaturally;                            // 0x01C8 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class UParticleSystem*                             BulletReflectionParticle;                      // 0x01D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowGFxUIManagerDefinition*               GFxUIManagerDefinition;                        // 0x01E0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNeedsDualWieldInventoryGuides : 1;            // 0x01E8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              LowHealthPercent;                              // 0x01EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnLowHealth;                                   // 0x01F0 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UBehaviorBase*>                 OnLowHealthRecover;                            // 0x0200 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class UPlayerNameIdentifierDefinition*             CharacterNameId;                               // 0x0210 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FInputContextData>             InputContexts;                                 // 0x0218 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UInputDeviceCollectionDefinition*            InputDeviceCollection;                         // 0x0228 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFocusCameraDefinition*                      FocusDef;                                      // 0x0230 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ExtraClipPostTranslate;                        // 0x0238 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPawnInteractionDefinition*                  TradeInteractionDefinition;                    // 0x0248 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerClassDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCheatManager
// 0x0088 (0x0088 - 0x0110)
class UWillowCheatManager : public UGearboxCheatManager
{
public:
	class FString                                      ClassModPoolDefinitionName;                    // 0x0088 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	float                                              CurrencyBalanceFormulaMultiplier;              // 0x0098 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CurrencyBalanceFormulaLevel;                   // 0x009C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CurrencyBalanceFormulaOffset;                  // 0x00A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            AwesomeLevelBoostForAutoBalancedInventory;     // 0x00A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      BalanceMeItemPoolListDefinitionName;           // 0x00A8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	int32_t                                            BalanceMeAwesomeLevel;                         // 0x00B8 (0x0004) [0x4000000000000000]               
	uint32_t                                           DEBUG_bSkipSkillDependencyCheck : 1;           // 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSkillDebugWatchPlayers : 1;                   // 0x00BC (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bSkillDebugWatchNonPlayers : 1;                // 0x00BC (0x0004) [0x0000000000004000] [0x00000004] (CPF_Config)
	uint32_t                                           bShowTimeOfDay : 1;                            // 0x00BC (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bLevelHacksEnabled : 1;                        // 0x00BC (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bPreHLQNoClipCanTargetCheatState : 1;          // 0x00BC (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bPreHLQNoClipDemigodState : 1;                 // 0x00BC (0x0004) [0x0000000000000000] [0x00000040] 
	class TArray<struct FBalanceMeResourceUpgradePath> ResourceUpgrades;                              // 0x00C0 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FStatusEffectNameMapping>      StatusEffects;                                 // 0x00D0 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class USkillDefinition*>              WatchedSkills;                                 // 0x00E0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class AController*>                   SkillDebugPages;                               // 0x00F0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            LastDebugPageIndex;                            // 0x0100 (0x0004) [0x0000000000000000]               
	float                                              LastSkillDebugPageUpdateTime;                  // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            LastDamagedAmount;                             // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCheatManager");
		}

		return uClassPointer;
	};

	void YUNoJump(float optionalCheckRadius);
	void ToggleForceAIToBeIrrelevant();
	void ToggleAIRelevance();
	void GetRecentlyPlayedWith();
	void MyOnGetRecentlyPlayedWith(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result, const class TArray<struct FFeedStoryRequestData>& ActivityStories);
	void GetTitleNews();
	void MyOnGetTitleNews(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result, const class TArray<struct FFeedStoryRequestData>& ActivityStories);
	void GetTitleFeed();
	void MyOnGetTitleFeed(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result, const class TArray<struct FFeedStoryRequestData>& ActivityStories);
	void GetUserNews();
	void MyOnGetUserNews(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result, const class TArray<struct FFeedStoryRequestData>& ActivityStories);
	void GetUserFeed();
	void MyOnGetUserFeed(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result, const class TArray<struct FFeedStoryRequestData>& ActivityStories);
	void PrintActivityStories(const class TArray<struct FFeedStoryRequestData>& ActivityStories);
	void PostFeedStory_StartGame();
	void PostFeedStory_Store();
	void PostFeedStory_Url();
	void PostFeedStory(const class FString& TestStory);
	void MyOnPostStory(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result, float DelayIntervalInSeconds);
	void ToggleAI();
	void TeleportAI();
	void DrawSkelThrottleDebug(class AWillowHUD* HUD);
	void SkelThrottleDebug();
	void OnReadOnlineAvatarComplete(const struct FUniqueNetId& PlayerID, bool bWasSuccessful, class UTexture2D* ProfileImage);
	void ReadAvatar();
	void ReadEntitlements();
	void OnReadEntitlementsComplete(const struct FPlatformUserId& UserId, EOnlineSubsystemResult Result);
	void SparkDebug();
	void DisableHalloweenEvent();
	void EnableHalloweenEvent();
	void DisplayTargetInventoryDebug(class AActor* Target, EEquipmentLoc EquippedInventoryType, bool bDebugWeaponInstead, class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DumpMissionOrder();
	void ClaptrapIntro();
	void WhatIsThat();
	void SetWeaponReadyMax(int32_t NewMax);
	void ClearLockouts();
	void DisplaySubtitle(const class FString& msg);
	void ResetEasterEggTracking();
	void ForcePush(int32_t optionalMomentum);
	void DestroyAllRagdolls();
	void GoToTravelStation(const struct FName& StationDefName);
	void HurtTarget(int32_t optionalAmount);
	void TestDamageShake(int32_t Damage);
	void TestGFxMovie(class UGFxMovieDefinition* MovieDef);
	void FastTravelUnlock();
	void OverrideWeaponRecoilAnimScale(bool bOverride, float optionalOverrideValue);
	void SkipDialog();
	void SkipEcho();
	void GetAllCurrency();
	void DebugAIObstacles();
	void AIObstacles();
	void TestLevelHacks();
	static class URegionDefinition* GetNearestGameStageAndAwesomeLevel(class APlayerController* PC, int32_t& GameStage, int32_t& AwesomeLevel);
	bool ResetGameStageByName(const class FString& RegionName);
	void ResetAllGameStages();
	void DebugToggleDebugBindCommands();
	void DebugAutoUpgradeSkill(const class FString& SkillName);
	bool UnlockTier(const struct FSkillTreeTierLayoutData& Tier);
	bool HasSkillPointsAvailable();
	class USkillDefinition* GetSkillToUpgrade(const struct FSkillTreeTierLayoutData& Tier);
	void SetDebugBindOverrideKey(const struct FName& KeyName);
	void DebugSetInputContext(const struct FName& ContextName);
	void RunSkill(const class FString& Arg);
	void Skills(const class FString& Args);
	void db_mass_unstagger();
	void db_mass_stagger();
	void DebugRespawn();
	void TestExpPointsForLevel(int32_t StartingLevel, int32_t optionalEndingLevel);
	void SetDayCycleRate(float DayCycleRate);
	void DisplayTimeOfDay();
	void ShowTimeOfDay();
	void SetTimeOfDay(float TimeOfDay);
	void AIDemigod();
	void AIGod();
	void ReleaseAI();
	void HoldAI();
	void NoTargetAllEnemies();
	void AlwaysCrit(const class FString& optionalShouldCrit);
	void DebugUpgradeSkill(const class FString& SkillName);
	void DebugDumpPlayerSkillTree();
	void ResetRespawn();
	void SetMaxActorCost(int32_t NewMaxActorCost);
	void SetRespawnDelay(int32_t Seconds);
	void ExplosionDebug();
	void SetAttributeBaseValue(const class FString& AttributeName, float BaseValue);
	void EvalAttributeBaseValue(const class FString& AttributeName);
	void EvalAttribute(const class FString& AttributeName);
	void ShowDenInfo();
	void HLQNoClipToggle(bool optionalBRestorePreviousCheatState);
	void LevelHimUp(bool optionalBResetHealth);
	void KillHim();
	void GetTargetBalanceData();
	class AActor* DebugGetPlayerTarget();
	void ResetBalance();
	void TestPlayerClassCount(const class FString& PlayerClassName, int32_t OverrideCount);
	void TestAwesomeLevel(int32_t optionalAwesomeLevelOverride);
	void TestGameStage(int32_t optionalGameStageOverride);
	void TestPlayerCount(int32_t optionalTestNumPlayers);
	void MissingAttributeSlotPresentationsDebug(const class FString& optionalArg);
	void AllSpawnTypes(const class FString& optionalArg);
	void ZoomSocketsDebug();
	void ZoomDebug(const class FString& optionalArg);
	void ImpactDebug(const class FString& optionalArg);
	void HomingDebug();
	void TemporalFieldDebug();
	void PawnPursuitDebug();
	void PawnInteractionDebug();
	void LevelRequirementDebug(const class FString& optionalArg);
	void ToggleWeapon();
	void AttackDebug();
	void MeleeDebug();
	void ToggleSloMo(float NewSpeed);
	void ToggleGhost();
	void GodEnemies(bool bEnable);
	void DemiGodAll(bool optionalBEnable);
	void GodAll();
	void SpawnPawn(const class FString& Args);
	void GiveAmmo();
	void TestAmmoPercentage(float Percent, const class FString& Specifier);
	void SetAmmoPercentage(class UResourceDefinition* Resource, float Percent);
	void UpgradeResource(const class FString& ResourceSpecifier, int32_t UpgradeLevel);
	void GiveResource(const class FString& ResourceSpecifier, float Amount);
	void DontTickMind();
	static void BalancePlayerLevelAndInventory(class AWillowPlayerController* PC, int32_t GameStage, int32_t AwesomeLevel);
	void BalanceParty(int32_t optionalGameStage, int32_t optionalAwesomeLevel);
	void SpawnInvBalance(const class FString& Args);
	void ThrowSpawnedInventory(class AWillowInventory* Inv, bool bDisablePhysicsDrop);
	void PlayersOnly();
	void Loaded();
};

// Class WillowGame.WillowClanDefinition
// 0x0020 (0x0058 - 0x0078)
class UWillowClanDefinition : public UGBXDefinition
{
public:
	class TArray<struct FClanMaterialData>             MaterialMap;                                   // 0x0058 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FClanSwitchData>               SwitchData;                                    // 0x0068 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowClanDefinition");
		}

		return uClassPointer;
	};

	void ChangeObjectMaterials(class UObject* MaterialObject);
};

// Class WillowGame.WillowCloakComponent
// 0x0010 (0x00D8 - 0x00E8)
class UWillowCloakComponent : public UCloakComponent
{
public:
	class AWillowPawn*                                 CloakWillowPawn;                               // 0x00D8 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UWillowCloakDefinition*                      WillowCloakDefinition;                         // 0x00E0 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCloakComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCloakDefinition
// 0x0018 (0x0088 - 0x00A0)
class UWillowCloakDefinition : public UCloakDefinition
{
public:
	class UCoordinatedEffectDefinition*                CloakEffect;                                   // 0x0088 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UCoordinatedEffectDefinition*                UnCloakEffect;                                 // 0x0090 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bCloakingRequiresShields : 1;                  // 0x0098 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanShootWhileCloaked : 1;                     // 0x0098 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCloakDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCoopPlayerStart
// 0x0000 (0x0270 - 0x0270)
class AWillowCoopPlayerStart : public APlayerStart
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCoopPlayerStart");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDamageArea
// 0x00C8 (0x0240 - 0x0308)
class AWillowDamageArea : public AActor
{
public:
	ECollisionPrimitive                                CollisionPrimitiveType;                        // 0x0240 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                DamagePerSecond;                               // 0x0248 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectDamage;                            // 0x0268 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                StatusEffectChance;                            // 0x0288 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      DamageSource;                                  // 0x02A8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                          // 0x02B0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UImpactDefinition*                           ImpactDefinition;                              // 0x02B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsResponseDefinition*                  PhysicsResponse;                               // 0x02C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageFriendlies : 1;                      // 0x02C8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bCanDamageInstigator : 1;                      // 0x02C8 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnabled : 1;                                  // 0x02C8 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bApplyBeams : 1;                               // 0x02C8 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bReapplyBeamsEachDamageTick : 1;               // 0x02C8 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bRemoveOldBeamsEachDamageTick : 1;             // 0x02C8 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bBarrelSource : 1;                             // 0x02C8 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bPlantSource : 1;                              // 0x02C8 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bForceTouchingUpdate : 1;                      // 0x02C8 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	float                                              DamageTickFrequency;                           // 0x02CC (0x0004) [0x0000000000000000]               
	float                                              DamageTickTime;                                // 0x02D0 (0x0004) [0x0000000000000000]               
	struct FName                                       BeamSourceSocket;                              // 0x02D4 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       BeamTargetSocket;                              // 0x02DC (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UFiringModeDefinition*                       BeamFiringMode;                                // 0x02E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UITargetable*>                  BeamTargets;                                   // 0x02F0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              BarrelSourceTime;                              // 0x0300 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PlantSourceTime;                               // 0x0304 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDamageArea");
		}

		return uClassPointer;
	};

	void eventDestroyed();
	void OnToggle(class USeqAct_Toggle* Action);
	void DisableArea();
	void EnableArea();
	bool IsEnabled();
	class AWillowLightProjectileManager* eventGetLightProjectileManager();
	void DamageResult_KilledNeutral(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledFriendly(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledEnemy(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_DamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void DamageResult_DamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags);
	void DamageResult_DamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
};

// Class WillowGame.WillowDamageType
// 0x0018 (0x0090 - 0x00A8)
class UWillowDamageType : public UDamageType
{
public:
	uint32_t                                           bDirectDamage : 1;                             // 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSeversHead : 1;                               // 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bCauseConvulsions : 1;                         // 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bUseTearOffMomentum : 1;                       // 0x0090 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bThrowRagdoll : 1;                             // 0x0090 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bLeaveBodyEffect : 1;                          // 0x0090 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bBulletHit : 1;                                // 0x0090 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bVehicleHit : 1;                               // 0x0090 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bCausesBlood : 1;                              // 0x0090 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	float                                              GibPerterbation;                               // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      DamageWeaponClass;                             // 0x0098 (0x0008) [0x0000000000000000]               
	int32_t                                            DamageWeaponFireMode;                          // 0x00A0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDamageType");
		}

		return uClassPointer;
	};

	static void PawnTornOff(class AWillowPawn* DeadPawn);
	static void SpawnHitEffect(class APawn* P, float Damage, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, const struct FVector& HitLocation);
};

// Class WillowGame.WillowDamageSource
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDamageSource : public UWillowDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDamageSource");
		}

		return uClassPointer;
	};

	static bool ShouldDamageSourcePenetrateShields(class UClass* DamageSource, class AController* DamageInstigator);
	static void GetAmmoTheftAmounts(class UClass* DamageSource, class AController* DamageInstigator, class AController* DamageReceiver, int32_t& InstigatedDamageAmmoTheftAmount, int32_t& ReceivedDamageAmmoTheftAmount);
};

// Class WillowGame.WillowDmgSource_Bullet
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Bullet : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Bullet");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_MachineGun
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_MachineGun : public UWillowDmgSource_Bullet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_MachineGun");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Pistol
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Pistol : public UWillowDmgSource_Bullet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Pistol");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Shotgun
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Shotgun : public UWillowDmgSource_Bullet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Shotgun");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Sniper
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Sniper : public UWillowDmgSource_Bullet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Sniper");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_SubMachineGun
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_SubMachineGun : public UWillowDmgSource_Bullet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_SubMachineGun");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_CustomCrate
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_CustomCrate : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_CustomCrate");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Grenade
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Grenade : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Grenade");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Melee
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Melee : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Melee");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_MeleeWithBlade
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_MeleeWithBlade : public UWillowDmgSource_Melee
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_MeleeWithBlade");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Rocket
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Rocket : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Rocket");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Shield
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Shield : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Shield");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_ShieldNova
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_ShieldNova : public UWillowDmgSource_Shield
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_ShieldNova");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_ShieldSpike
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_ShieldSpike : public UWillowDmgSource_Shield
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_ShieldSpike");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Skill
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Skill : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Skill");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_Skill_IgnoreIOs
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_Skill_IgnoreIOs : public UWillowDmgSource_Skill
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_Skill_IgnoreIOs");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDamageTypeDefinition
// 0x00F8 (0x0058 - 0x0150)
class UWillowDamageTypeDefinition : public UDamageTypeDefinition
{
public:
	struct FAttributeInitializationData                FleshDamageModifier;                           // 0x0058 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ArmorDamageModifier;                           // 0x0078 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ShieldDamageModifier;                          // 0x0098 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ShieldPenetrationPercentage;                   // 0x00B8 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAttributeDefinition*                        CharacterDamageTypeModifierAttribute;          // 0x00D8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UBehaviorBase*>                 OnProjectileSpawn;                             // 0x00E0 (0x0010) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bNoBlood : 1;                                  // 0x00F0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bNoPlayerFeedback : 1;                         // 0x00F0 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bNoAlliedPlayerFeedback : 1;                   // 0x00F0 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bCauseHardFlinch : 1;                          // 0x00F0 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	struct FLinearColor                                DamageColor;                                   // 0x00F4 (0x0010) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      HUDDamageColor;                                // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EDamageType                                        DamageType;                                    // 0x0108 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      DamageTypeDisplayName;                         // 0x0110 (0x0010) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class TArray<class UAttributePresentationDefinition*> WeaponCardPresentations;                       // 0x0120 (0x0010) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              MaxDamageRadius;                               // 0x0130 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinDamageRadius;                               // 0x0134 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinDamagePercent;                              // 0x0138 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HardFlinchPercent;                             // 0x013C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FName                                       DamageDealtStatId;                             // 0x0140 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DamageLanguageId;                              // 0x0148 (0x0004) [0x0000000000008002] (CPF_Const | CPF_Localized)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDamageTypeDefinition");
		}

		return uClassPointer;
	};

	static void GetDamageTypeModifiers(class UWillowDamageTypeDefinition* DamageTypeDefinition, class AController* DamageInstigator, float& DamageInstigatorModifier);
	static bool HasPlayerRecentDamageFlags(uint8_t FlagsToCheck, struct FPlayerRecentDamageEventData& DamageEventData);
	float CalcRadiusDamageScale(float Dist, float DamageRadius, const struct FVector& optionalHurtOrigin);
	float GetMinDamagePercent();
	float GetMinDamageRadius();
	float GetMaxDamageRadius();
	float GetShieldPenetrationPercentage(class AController* DamageInstigator);
	float GetPawnDamageTypeModifier(class APawn* PawnTakingDamage);
	float GetSurfaceDamageTypeModifier(uint8_t DamageSurfaceType, class AController* DamageInstigator);
};

// Class WillowGame.WillowDeclarations
// 0x0000 (0x0058 - 0x0058)
class UWillowDeclarations : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDeclarations");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDenSpawner
// 0x0038 (0x04A0 - 0x04D8)
class AWillowDenSpawner : public ADenSpawner
{
public:
	uint32_t                                           bFoundRallyPoints : 1;                         // 0x04A0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class ARallyPoint*                                 CurrentRallyPoint;                             // 0x04A8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class ARallyPoint*>                   RallyPoints;                                   // 0x04B0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FFlag                                       Flag_ShouldRally;                              // 0x04C0 (0x0010) [0x4000000000002000] (CPF_Transient)
	EDenStat                                           TrackedStat;                                   // 0x04D0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            StatValue;                                     // 0x04D4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDenSpawner");
		}

		return uClassPointer;
	};

	void RemoveStat(EDenStat StatType, class AWillowPawn* DenPawn, bool optionalBUpdateLinkedDens);
	void AddStat(EDenStat StatType, class AWillowPawn* DenPawn, bool optionalBUpdateLinkedDens);
	class ARallyPoint* GetRallyPoint();
	void ChooseNewRallyPoint();
	void FindRallyPoints();
};

// Class WillowGame.WillowDialogEmoteDefinition
// 0x0000 (0x0058 - 0x0058)
class UWillowDialogEmoteDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogEmoteDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogNameTag
// 0x0058 (0x0078 - 0x00D0)
class UWillowDialogNameTag : public UGearboxDialogNameTag
{
public:
	uint32_t                                           bShowEchoPortrait : 1;                         // 0x0078 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FEchoPortraitInfo                           DefaultEchoPortrait;                           // 0x0080 (0x0030) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FEmotePortraitInfo>            EmotePortraits;                                // 0x00B0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FEmoteStance>                  EmoteStances;                                  // 0x00C0 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogNameTag");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDodgeComponent
// 0x0010 (0x00E8 - 0x00F8)
class UWillowDodgeComponent : public UDodgeComponent
{
public:
	class AWillowPawn*                                 WillowAIPawn;                                  // 0x00E8 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UWillowDodgeDefinition*                      WillowDodgeDef;                                // 0x00F0 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDodgeComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDodgeDefinition
// 0x0010 (0x00D8 - 0x00E8)
class UWillowDodgeDefinition : public UDodgeDefinition
{
public:
	uint32_t                                           bAllowGrenadeDodges : 1;                       // 0x00D8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              GrenadeDodgeChance;                            // 0x00DC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAIRange                                    GrenadeDodgeDelayTime;                         // 0x00E0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDodgeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDownloadableContentManager
// 0x01C8 (0x01D0 - 0x0398)
class UWillowDownloadableContentManager : public UDownloadableContentManager
{
public:
	class TArray<class UDownloadablePackageDefinition*> ContentPackages;                               // 0x01D0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UDownloadableContentDefinition*> AllContent;                                    // 0x01E0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UDownloadableExpansionDefinition*> Expansions;                                    // 0x01F0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UDownloadableCharacterDefinition*> Characters;                                    // 0x0200 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UDownloadableItemSetDefinition*> Items;                                         // 0x0210 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UDownloadableCustomizationSetDefinition*> Customizations;                                // 0x0220 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            AsyncPackageLoadsPending;                      // 0x0230 (0x0004) [0x0000000000000000]               
	class TArray<class UObjectReferencer*>             DlcFullyLoadedPackageReferencers;              // 0x0238 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	EDlcInstallState                                   CurrentInstallState;                           // 0x0248 (0x0001) [0x0000000000000000]               
	class TArray<class FString>                        LoadedPackages;                                // 0x0250 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                           UnknownData00[0x50];                           // 0x0260 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.WillowDownloadableContentManager.LoadedAudioPackageToId
	uint8_t                                           UnknownData01[0x50];                           // 0x02B0 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.WillowDownloadableContentManager.PackageDefToContentState
	struct FDlcCompatibilityData                       CachedCompatibilityInfo;                       // 0x0300 (0x0010) [0x0000000000000000]               
	struct FDlcCompatibilityData                       CachedSimplePackageLicenseInfo;                // 0x0310 (0x0010) [0x0000000000000000]               
	class TArray<struct FSeasonPassOfferUnion>         SeasonPassOfferIds;                            // 0x0320 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FSeasonPassPackageCount>       SeasonPassPackageCounts;                       // 0x0330 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	int32_t                                            NewOfferVersion;                               // 0x0340 (0x0004) [0x0000000000004000] (CPF_Config)  
	class TArray<class FString>                        NewOfferIds;                                   // 0x0348 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FDLCMissionData>               DLCMissions;                                   // 0x0358 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FCompatibilityVersionInfo                   OnlineCompatibilityInfo;                       // 0x0368 (0x0014) [0x0000000000004000] (CPF_Config)  
	float                                              CompatibilityContentInstallInterval;           // 0x037C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NextDlcContentInstallNotificationTimeRemaining;// 0x0380 (0x0004) [0x0000000000000000]               
	struct FDlcCompatibilityDataEx                     CachedExtendedLicenseInfo;                     // 0x0384 (0x0010) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDownloadableContentManager");
		}

		return uClassPointer;
	};

	bool IsInStartMenu();
	int32_t GetSeasonPassPackageCount(int32_t SeasonPassId);
	bool HasSeasonPassContentToInstall(bool optionalBPreOrder);
	bool HasFutureSeasonPassContentToInstall(bool optionalBPreOrder);
	bool HasCompatibilityData();
	void ResetDlcCompatInstallRemindTimer();
	void TriggerRefreshComplete();
	bool IsNewOffer(const class FString& OfferId);
	class FString GetFreeOfferAssociatedWithPaidOffer(const class FString& PaidOfferId);
	bool OfferBelongsToSeasonPass(const class FString& OfferId, class FString& SeasonPassOfferId);
	static struct FDlcContentId StaticGetDlcContentIdForCurrentMap(bool optionalBForClientConnectInfo);
	static struct FDlcContentId StaticGetDlcContentIdForMap(const struct FName& MapName);
	bool ValidateInstalledContentReachability();
	class UDownloadableContentDefinition* GetDownloadableContentDefinitionFromDlcContentId(const struct FDlcContentId& FullContentId);
	class UDownloadableContentDefinition* GetDownloadableContentDefinitionFromId(int32_t PackageId, int32_t ContentId);
	class UDownloadablePackageDefinition* GetDownloadablePackageDefinitionFromId(int32_t PackageId);
	class UDownloadablePackageDefinition* GetDownloadablePackageDefinitionFromDLCName(const class FString& DLCName);
	class FString GetDlcIniPath();
	bool IsContentInstalled(class UDownloadableContentDefinition* DownloadableContentDef);
	bool IsContentLicensed(class UDownloadableContentDefinition* DownloadableContentDef, class APlayerController* optionalController);
	bool IsPackageFullyInstalled(class UDownloadablePackageDefinition* DownloadablePackageDef);
	bool IsPackageFullyLicensed(class UDownloadablePackageDefinition* DownloadablePackageDef);
	class UDownloadableExpansionDefinition* FindExpansionForMap(const struct FName& MapName);
};

// Class WillowGame.WillowDynamicNavMeshConnectionPoint
// 0x0068 (0x0260 - 0x02C8)
class AWillowDynamicNavMeshConnectionPoint : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshSpecialMove;               // 0x0260 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<struct FDynamicNavMeshConnection>     Connections;                                   // 0x0268 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class AWillowDynamicNavMeshConnectionPoint*> PointsThatConnectToMe;                         // 0x0278 (0x0010) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink)
	struct FBasedPosition                              PositionOnNavMesh;                             // 0x0288 (0x0038) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bIsOnValidNavMesh : 1;                         // 0x02C0 (0x0004) [0x0000000000020001] [0x00000001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bEnabled : 1;                                  // 0x02C0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDynamicNavMeshConnectionPoint");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class WillowGame.WillowDynamicNavMeshConnectionPointRenderingComponent
// 0x0010 (0x0360 - 0x0370)
class UWillowDynamicNavMeshConnectionPointRenderingComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConnectionValidColor;                          // 0x0360 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      ConnectionInvalidColor;                        // 0x0364 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                           UnknownData00[0x8];                            // 0x0368 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDynamicNavMeshConnectionPointRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDynamicPathBlockingVolume
// 0x0020 (0x0288 - 0x02A8)
class AWillowDynamicPathBlockingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshObstacle;                  // 0x0288 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bEnabled : 1;                                  // 0x0290 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class UPawnAllegiance*>               BlockedAllegiances;                            // 0x0298 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDynamicPathBlockingVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class WillowGame.WillowEffectCoordinator
// 0x0090 (0x0058 - 0x00E8)
class UWillowEffectCoordinator : public UObject
{
public:
	int32_t                                            ManagedParticlesReserveLength;                 // 0x0058 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            ManagedAudioReserveLength;                     // 0x005C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            ExternalComponentsReserveLength;               // 0x0060 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bIsDedicatedServer : 1;                        // 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	class TArray<struct FCoordinatedEffectProcess>     Processes;                                     // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UActorComponent*>               ExternalComponents;                            // 0x0078 (0x0010) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UParticleSystemComponent*>      ManagedParticles;                              // 0x0088 (0x0010) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UAkComponent*>                  ManagedAudio;                                  // 0x0098 (0x0010) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<int32_t>                              ManagedAudioFreeList;                          // 0x00A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<int32_t>                              ManagedParticlesFreeList;                      // 0x00B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<int32_t>                              ExternalComponentsFreeList;                    // 0x00C8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnEffectComplete__Delegate;                  // 0x00D8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEffectCoordinator");
		}

		return uClassPointer;
	};

	bool HasEffect(class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner);
	bool PopEffect(class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner, bool optionalIncludeChainedEffects);
	float PushEffect(class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner, float optionalStartingPercent, const struct FName& optionalIgnoreInstanceData, bool optionalBViaReplication, const struct FScriptDelegate& optionalEffectCompleteDelegate);
	bool PopMutex(class UObject* Target, const struct FName& MutexName);
	void PopAllEffects(class UObject* Target);
	void OnEffectComplete(class UObject* Target);
};

// Class WillowGame.WillowEffectNetworkManager
// 0x04B8 (0x0240 - 0x06F8)
class AWillowEffectNetworkManager : public AEffectNetworkManager
{
public:
	struct FBasicEmitterData                           BasicEmitters[0x1E];                           // 0x0240 (0x04B0) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            NextBasicEffectIndex;                          // 0x06F0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEffectNetworkManager");
		}

		return uClassPointer;
	};

	void eventReplicatedArrayEvent(const struct FName& VarName, int32_t ArrayIndex);
};

// Class WillowGame.WillowElevator
// 0x0030 (0x02B0 - 0x02E0)
class AWillowElevator : public AInterpActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x02B0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bMoving : 1;                                   // 0x02B0 (0x0004) [0x0000000000000000] [0x00000002] 
	int32_t                                            FloorIndex;                                    // 0x02B4 (0x0004) [0x0000000000000000]               
	int32_t                                            DestFloorIndex;                                // 0x02B8 (0x0004) [0x0000000000000000]               
	int32_t                                            InitialFloorIndex;                             // 0x02BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FName>                         Floors;                                        // 0x02C0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class AWillowElevatorButton*>         Buttons;                                       // 0x02D0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowElevator");
		}

		return uClassPointer;
	};

	void ButtonsGoToInUseState();
	void eventButtonsGoToEnabledState();
	void OnToggle(class USeqAct_Toggle* Action);
	void SetDestFloorIndex(int32_t NewDestFloorIndex, class AActor* optionalInInstigator);
	void eventButtonPushed(ElevatorButtonUsage Usage, int32_t CallFloor, class AActor* optionalUser);
	void TryGoToInitialState();
	bool ChildEncroachingOn(class AInterpActor* Child, class AActor* Other);
	void PostBeginPlay();
};

// Class WillowGame.WillowElevatorRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowElevatorRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowElevatorRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowEmitter
// 0x0030 (0x0258 - 0x0288)
class AWillowEmitter : public AEmitter
{
public:
	struct FPointer                                    VfTable_IIParticleSystemBehavior;              // 0x0258 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	ESceneViewSeeType                                  EmitterViewSeeType;                            // 0x0260 (0x0001) [0x0000000100000020] (CPF_Net)     
	ESceneViewHideViewportType                         EmitterViewHideViewportType;                   // 0x0261 (0x0001) [0x0000000100000020] (CPF_Net)     
	uint8_t                                            EmitterViewActorFlags;                         // 0x0262 (0x0001) [0x0000000100000020] (CPF_Net)     
	class AActor*                                      PlayerOwner;                                   // 0x0268 (0x0008) [0x0000000100000020] (CPF_Net)     
	class UParticleSystemComponent*                    FirstPersonParticleSystemComponent;            // 0x0270 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	struct FSpawnAttachmentInfo                        SpawnInfo;                                     // 0x0278 (0x000C) [0x0000000100002020] (CPF_Net | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEmitter");
		}

		return uClassPointer;
	};

	void Behavior_ChangeParticleSystemActiveState(EChangeStatus ChangeType);
	void SetDepthPriorityGroupAndSortPriority(ESceneDepthPriorityGroup NewDPG, int32_t optionalSortPriority);
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void eventReplicatedEvent(const struct FName& VarName);
};

// Class WillowGame.WillowReplicatedEmitter
// 0x0420 (0x0288 - 0x06A8)
class AWillowReplicatedEmitter : public AWillowEmitter
{
public:
	struct FPointer                                    VfTable_IIParameterBehavior;                   // 0x0288 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FEmitterTemplateOptions                     EmitterTemplate;                               // 0x0290 (0x0018) [0x0000000100000020] (CPF_Net)     
	struct FReplicatedBeamEndpointData                 BeamEndpoints[0x10];                           // 0x02A8 (0x0380) [0x0000000100000020] (CPF_Net)     
	float                                              ServerLifeSpan;                                // 0x0628 (0x0004) [0x0000000000000000]               
	struct FFloatParameter                             ReplicatedFloatParameters[0x2];                // 0x062C (0x0018) [0x0000000100000020] (CPF_Net)     
	struct FVectorParameter                            ReplicatedVectorParameters[0x2];               // 0x0644 (0x0028) [0x0000000100000020] (CPF_Net)     
	struct FColorParameter                             ReplicatedColorParameters[0x2];                // 0x066C (0x0018) [0x0000000100000020] (CPF_Net)     
	struct FActorParameter                             ReplicatedActorParameters[0x2];                // 0x0688 (0x0020) [0x0000000100000020] (CPF_Net)     

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowReplicatedEmitter");
		}

		return uClassPointer;
	};

	void Behavior_SetObjectParameterValue(class UObject* Param, int32_t& SectionIndex, struct FName& ParameterName);
	bool Behavior_GetObjectParameterValueW(int32_t& SectionIndex, struct FName& ParameterName, class UObject*& Param);
	bool Behavior_GetColorParameterValue(int32_t& SectionIndex, struct FName& ParameterName, struct FLinearColor& Param);
	bool Behavior_GetVectorParameterValue(int32_t& SectionIndex, struct FName& ParameterName, struct FVector& Param);
	bool Behavior_GetFloatParameterValue(int32_t& SectionIndex, struct FName& ParameterName, float& Param);
	void Behavior_SetColorParameterValue(int32_t& SectionIndex, struct FName& ParameterName, struct FLinearColor& Param);
	void Behavior_SetVectorParameterValue(int32_t& SectionIndex, struct FName& ParameterName, struct FVector& Param);
	void Behavior_SetFloatParameterValue(int32_t& SectionIndex, struct FName& ParameterName, float& Param);
	void ApplyActorParameters();
	void ApplyColorParameters();
	void ApplyVectorParameters();
	void ApplyFloatParameters();
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void eventSetTemplate(class UParticleSystem* NewTemplate, bool optionalBDestroyOnFinish);
	void SetTemplateWithCensoredAlternative(class UParticleSystem* DefaultTemplate, class UParticleSystem* CensoredTemplateAlternative, bool bEffectEligibleForCensoring, bool optionalBDestroyOnFinish);
	void eventReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};

// Class WillowGame.WillowEmit_HitEffect
// 0x0008 (0x06A8 - 0x06B0)
class AWillowEmit_HitEffect : public AWillowReplicatedEmitter
{
public:
	struct FName                                       BoneName;                                      // 0x06A8 (0x0008) [0x0000000100000020] (CPF_Net)     

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEmit_HitEffect");
		}

		return uClassPointer;
	};

	void AttachTo(class APawn* P, const struct FName& NewBoneName);
	void eventReplicatedEvent(const struct FName& VarName);
};

// Class WillowGame.WillowEmit_BloodSpray
// 0x0000 (0x06B0 - 0x06B0)
class AWillowEmit_BloodSpray : public AWillowEmit_HitEffect
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEmit_BloodSpray");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowEmit_BodyFlame
// 0x0000 (0x06B0 - 0x06B0)
class AWillowEmit_BodyFlame : public AWillowEmit_HitEffect
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEmit_BodyFlame");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowEmitterServerSide
// 0x0000 (0x06A8 - 0x06A8)
class AWillowEmitterServerSide : public AWillowReplicatedEmitter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEmitterServerSide");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowEmitterPool
// 0x0000 (0x02A0 - 0x02A0)
class AWillowEmitterPool : public AEmitterPool
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEmitterPool");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowExperiencePipeline
// 0x0000 (0x0058 - 0x0058)
class UWillowExperiencePipeline : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowExperiencePipeline");
		}

		return uClassPointer;
	};

	static void AwardCombatExperienceToParty(float ExperiencePoints, class AWillowPlayerController* Killer, class AActor* KilledActor);
	static float CalculateExperiencePointsForKill(class AWillowPlayerController* Killer, class AActor* KilledActor, bool bFatalBlowWasCriticalHit, class UClass* FatalBlowDamageSource, class UDamageTypeDefinition* FatalBlowDamageTypeDefinition);
};

// Class WillowGame.WillowExposureUtilityStrategy
// 0x0000 (0x0058 - 0x0058)
class UWillowExposureUtilityStrategy : public UExposureUtilityStrategy
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowExposureUtilityStrategy");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowFormationComponent
// 0x0000 (0x0380 - 0x0380)
class UWillowFormationComponent : public UFormationComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowFormationComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGameEngine
// 0x0058 (0x0BE0 - 0x0C38)
class UWillowGameEngine : public UGearboxEngine
{
public:
	struct FPointer                                    VfTable_ISparkUpdateCallback;                  // 0x0BE0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class FString                                      SourceMapName;                                 // 0x0BE8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      DestMapName;                                   // 0x0BF8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      LastNonFakeEntrySourceMapName;                 // 0x0C08 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	ELevelChangeState                                  LevelChangeState;                              // 0x0C18 (0x0001) [0x0000000000000000]               
	class TArray<class FString>                        FullyLoadedIniPackages;                        // 0x0C20 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bPauseLostFocusWindowed : 1;                   // 0x0C30 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bWasPaused : 1;                                // 0x0C30 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGameEngine");
		}

		return uClassPointer;
	};

	bool FastTravelIsAccessibleForTime();
	class APersistentTransitionLandmark* eventGetTransitionLandmark(const class FString& Source, const class FString& Dest);
	void eventTeleportPlayer(class APersistentTransitionLandmark* Landmark, class AWillowPawn* PlayerPawn);
	void eventUnpauseForLevelLoad();
	void eventPauseForLevelLoad(class APlayerController* Authority);
	bool CanUnpause();
};

// Class WillowGame.WillowGameMessage
// 0x0040 (0x0068 - 0x00A8)
class UWillowGameMessage : public ULocalMessage
{
public:
	class FString                                      PlayerEnteredGame;                             // 0x0068 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PlayerLeftGame;                                // 0x0078 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CreaturesGrowStronger;                         // 0x0088 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CreaturesWeaken;                               // 0x0098 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGameMessage");
		}

		return uClassPointer;
	};

	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	static void ClientReceive(class APlayerController* P, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class WillowGame.WillowGameReplicationInfo
// 0x0158 (0x0320 - 0x0478)
class AWillowGameReplicationInfo : public AGameReplicationInfo
{
public:
	class AStationTeleporterDestination*               ActiveRespawnCheckpointTeleportActor;          // 0x0320 (0x0008) [0x0000000000000000]               
	uint8_t                                            FastTravelLocationsBitfield[0x10];             // 0x0328 (0x0010) [0x0000000000000020] (CPF_Net)     
	uint8_t                                            CachedBossHasShield;                           // 0x0338 (0x0001) [0x0000000000000000]               
	uint8_t                                            bIsNPCAllyEnabled[0x2];                        // 0x0339 (0x0002) [0x0000000000000020] (CPF_Net)     
	class TArray<struct FName>                         FastTravelLocations;                           // 0x0340 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              TimeOfDay;                                     // 0x0350 (0x0004) [0x4000000000000000]               
	float                                              DayNightCycleRate;                             // 0x0354 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              DayNightCycleRateBaseValue;                    // 0x0358 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            DayNightCycleRateModifierStack;                // 0x0360 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              bAnyPlayerAttemptedFastTravel;                 // 0x0370 (0x0004) [0x4000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            CurrentPlaythrough;                            // 0x0374 (0x0004) [0x0000000100000020] (CPF_Net)     
	int32_t                                            PlaythroughOverride;                           // 0x0378 (0x0004) [0x0000000100000020] (CPF_Net)     
	class TArray<struct FName>                         ReplicatedClientFlags;                         // 0x0380 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            StartGameTimer;                                // 0x0390 (0x0004) [0x0000000000000020] (CPF_Net)     
	uint32_t                                           bHasBossBar : 1;                               // 0x0394 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net)
	uint32_t                                           ReplicatedBossHasShield : 1;                   // 0x0394 (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net)
	class AWillowPawn*                                 BossPawn;                                      // 0x0398 (0x0008) [0x0000000000000020] (CPF_Net)     
	class FString                                      BossName;                                      // 0x03A0 (0x0010) [0x0000000000400020] (CPF_Net | CPF_NeedCtorLink)
	int32_t                                            BossLevel;                                     // 0x03B0 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              ReplicatedBossHealth;                          // 0x03B4 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              ReplicatedBossShield;                          // 0x03B8 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              CachedBossHealth;                              // 0x03BC (0x0004) [0x0000000000000000]               
	float                                              CachedBossShield;                              // 0x03C0 (0x0004) [0x0000000000000000]               
	class AWillowPawn*                                 NPCAllyPawn[0x2];                              // 0x03C8 (0x0010) [0x0000000000000020] (CPF_Net)     
	class FString                                      NPCAllyName[0x2];                              // 0x03D8 (0x0020) [0x0000000000400020] (CPF_Net | CPF_NeedCtorLink)
	struct FVector                                     NPCAllyLocation[0x2];                          // 0x03F8 (0x0018) [0x0000000000000020] (CPF_Net)     
	class TArray<struct FScriptDelegate>               PlayerRemovedDelegates;                        // 0x0410 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FScriptDelegate>               PlayerNameUpdatedDelegates;                    // 0x0420 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FScriptDelegate>               PlayerUidUpdatedDelegates;                     // 0x0430 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UAkState*                                    MusicAkState;                                  // 0x0440 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	struct FScriptDelegate                             __OnPlayerRemoved__Delegate;                   // 0x0448 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerNameUpdated__Delegate;               // 0x0458 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerUidUpdated__Delegate;                // 0x0468 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGameReplicationInfo");
		}

		return uClassPointer;
	};

	void NotifyPlaythroughChanged();
	bool IsNighttime();
	bool IsDaytime();
	void ClearNPCAllies();
	void UpdateNPCAlliesInfo();
	int32_t FindAvailableNPCAllySlot(class AWillowPawn* NPCAllyActor);
	int32_t FindNPCAllyIndex(class AWillowPawn* NPCAllyActor);
	void InitNPCAlly(bool bEnable, class AWillowPawn* NPCAllyActor);
	void NotifyPlayerUidUpdated(class APlayerReplicationInfo* PRI);
	void TriggerPlayerUidUpdatedDelegates(class APlayerReplicationInfo* PRI);
	void ClearPlayerUidUpdatedDelegate(const struct FScriptDelegate& PlayerUidUpdatedDelegate);
	void AddPlayerUidUpdatedDelegate(const struct FScriptDelegate& PlayerUidUpdatedDelegate);
	void OnPlayerUidUpdated(class APlayerReplicationInfo* PRI);
	void NotifyPlayerNameUpdated(class APlayerReplicationInfo* PRI);
	void TriggerPlayerNameUpdatedDelegates(class APlayerReplicationInfo* PRI);
	void ClearPlayerNameUpdatedDelegate(const struct FScriptDelegate& PlayerNameUpdatedDelegate);
	void AddPlayerNameUpdatedDelegate(const struct FScriptDelegate& PlayerNameUpdatedDelegate);
	void OnPlayerNameUpdated(class APlayerReplicationInfo* PRI);
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void TriggerPlayerRemovedDelegates();
	void ClearPlayerRemovedDelegate(const struct FScriptDelegate& PlayerRemovedDelegate);
	void AddPlayerRemovedDelegate(const struct FScriptDelegate& PlayerRemovedDelegate);
	void OnPlayerRemoved();
	bool ClientFlagGet(const struct FName& ClientFlag);
	void ClientFlagSet(const struct FName& ClientFlag, bool optionalBEnable);
	void ClientInitClientFlags();
	void InitClientFlags(class AWillowPlayerController* WPC);
	bool IsStationInList();
	void AddFastTravelLocation();
	void PostBeginPlay();
	void NotifyMissionTrackerCinematicModeChanged();
	void eventReplicatedEvent(const struct FName& VarName);
	void ClearFastTravelLocations();
	int32_t GetCurrPlaythrough();
	void SetPlaythroughOverride(class AWillowPlayerController* PrimaryWPC, int32_t InPlaythroughOverride);
	void SetCurrentPlaythrough(class AWillowPlayerController* PrimaryWPC, int32_t InCurrPlaythrough);
};

// Class WillowGame.WillowGameViewportClient
// 0x00A8 (0x01C8 - 0x0270)
class UWillowGameViewportClient : public UGameViewportClient
{
public:
	class UWillowUIInteraction*                        ViewportUI;                                    // 0x01C8 (0x0008) [0x0000000000000000]               
	uint32_t                                           bCheckedEntry : 1;                             // 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bMainMenuMousePressed : 1;                     // 0x01D0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bAwaitingSplitPC : 1;                          // 0x01D0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bShowConnectionWarning : 1;                    // 0x01D0 (0x0004) [0x0000000000000000] [0x00000008] 
	class UTexture2D*                                  LoadBackground;                                // 0x01D8 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  LoadingImage;                                  // 0x01E0 (0x0008) [0x0000000000000000]               
	struct FSubtitleProfile                            SubtitleProfileDefault;                        // 0x01E8 (0x0010) [0x0000000000004000] (CPF_Config)  
	struct FSubtitleProfile                            SubtitleProfileSplitScreenVertical;            // 0x01F8 (0x0010) [0x0000000000004000] (CPF_Config)  
	struct FSubtitleProfile                            SubtitleProfileSplitScreenHorizontal;          // 0x0208 (0x0010) [0x0000000000004000] (CPF_Config)  
	struct FSubtitleProfile                            SubtitleProfileCinematic;                      // 0x0218 (0x0010) [0x0000000000004000] (CPF_Config)  
	class UWillowPlayerManager*                        PlayerManager;                                 // 0x0228 (0x0008) [0x0000000000000000]               
	class UClass*                                      PlayerManagerClass;                            // 0x0230 (0x0008) [0x0000000000000000]               
	class TArray<struct FScriptDelegate>               SplitscreenJoinCompleteDelegates;              // 0x0238 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UMaterialInstance*                           ConnectionMatInst;                             // 0x0248 (0x0008) [0x0000000000000000]               
	class UMaterial*                                   ConnectionMat;                                 // 0x0250 (0x0008) [0x0000000000000000]               
	float                                              ConnectionMaterialScale;                       // 0x0258 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ConnectionWarningStartTime;                    // 0x025C (0x0004) [0x0000000000000000]               
	struct FScriptDelegate                             __OnSplitscreenJoinComplete__Delegate;         // 0x0260 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGameViewportClient");
		}

		return uClassPointer;
	};

	void OnSplitscreenJoinComplete(const struct FPlatformUserId& UserId, bool bSuccess);
	static void CleanUpPlayerForTitleScreen(class ULocalPlayer* LP, const struct FUniqueNetId& NetId);
	static void SetPCSplitscreenEnabled(bool bEnabled);
	static bool IsPCSplitscreenEnabled();
	static bool PlatformSupportsSplitscreen();
	bool ShouldIgnoreNetworkErrors();
	void UpdateSplitscreenConfiguration();
	void RenderHeader(class UCanvas* Canvas);
	void DrawSparkDebug(class UCanvas* C);
	static bool IsSparkDebugEnabled();
	static void ToggleSparkDebug();
	void eventPostRender(class UCanvas* Canvas);
	void eventGameSessionEnded();
	bool AreHudMoviesVisible();
	void eventGetSubtitleRegion(struct FVector2D& MinPos, struct FVector2D& MaxPos);
	void UpdateActiveSplitscreenType();
	ESplitScreenType CalculateSplitscreenTypeForPlayerCount(int32_t PlayerCount);
	void eventSetSplitscreenConfiguration(ESplitScreenType SplitType);
	void NotifyDlcRefreshComplete();
	bool RemovePlayer(class ULocalPlayer* ExPlayer);
	class ULocalPlayer* CreatePlayer(const struct FPlatformUserId& UserId, bool bSpawnActor, class FString& OutError);
	bool InputAxis(const struct FPlatformUserId& UserId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool InputKey(const struct FPlatformUserId& UserId, const struct FName& Key, EInputEvent EventType, float AmountDepressed, bool optionalBGamepad);
	void eventDlcManagerCreatedInit();
	bool Init(class FString& OutError);
	void OpenMapMenu();
};

// Class WillowGame.WillowGFxClikWidget
// 0x0000 (0x00E8 - 0x00E8)
class UWillowGFxClikWidget : public UGFxClikWidget
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxClikWidget");
		}

		return uClassPointer;
	};

	void OnEvent(const struct FName& EventTag);
	void OnClikEvent(const struct FEventData& Data);
	void AddClikEvent(const class FString& EventType);
};

// Class WillowGame.WillowGFxMovie
// 0x0058 (0x03F8 - 0x0450)
class UWillowGFxMovie : public UGearboxGFxMovie
{
public:
	struct FPointer                                    VfTable_IIGFxMovieLocator;                     // 0x03F8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIAssociated;                          // 0x0400 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bAutoCloseHUD : 1;                             // 0x0408 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bAutoCloseAll : 1;                             // 0x0408 (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	int32_t                                            DefaultRTTSize_PC;                             // 0x040C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            DefaultRTTSize_Console;                        // 0x0410 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      DateFormat;                                    // 0x0418 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      TimeFormat;                                    // 0x0428 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            RebindCount;                                   // 0x0438 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AWillowPlayerController*                     WPCOwner;                                      // 0x0440 (0x0008) [0x0000000000002000] (CPF_Transient)
	EAspectRatio                                       CachedAspectRatio;                             // 0x0448 (0x0001) [0x0000000000002000] (CPF_Transient)
	ESplitScreenType                                   CachedSplitscreenType;                         // 0x0449 (0x0001) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMovie");
		}

		return uClassPointer;
	};

	static class FString GetHumanReadableStringFromSaveDateString(const class FString& SaveDate);
	class UGFxMoviePlayer* GetAGFxMovie();
	class UIGFxUIManager* GetAGFxUIManager();
	class AWillowMind* GetAWillowMind();
	class AWillowPlayerController* GetAWillowPlayerController();
	class AController* GetABaseController();
	void GetRecommendedRTTSizesFor(ERTTType TargetType, int32_t& TexWidth, int32_t& TexHeight, int32_t& CellWidth, int32_t& CellHeight);
	class UTexture* GetRecommendedThumbnail(EThumbnailUpdate UpdateType, ERTTType TargetType, const struct FName& optional_tag);
	void eventFreeGFxThumbnails();
	void eventFreeGFxThumbnail(class UTexture* Tex);
	class UTexture* eventGetGFxThumbnail(int32_t TextureSizeX, int32_t TextureSizeY, EThumbnailUpdate UpdateType, int32_t optionalSizeX, int32_t optionalSizeY, const struct FName& optional_tag);
	static bool IsPoplarPresenceContextMatch(const struct FOnlineFriend& Friend, const class FString& ContextKey);
	static bool IsPresenceContextMatch(const struct FOnlineFriend& Friend, const class FString& ContextKey);
	static EWillowInviteType GetInviteType(class UOnlineGameSettings* GameSettings);
	static int32_t GetCappedDisplayCurrencyAmount(ECurrencyType FormOfCurrency, int32_t Amount);
	class UOnlineGameInterface* GetGameInterface();
	void ShowGamerCardUI(const struct FPlatformUserId& UserId, struct FUniqueNetId& PlayerUniqueId);
	void ShowLivePartyUI();
	void ShowAchievementsUI(const struct FPlatformUserId& UserId);
	void FocusOn(class UGFxObject* Thing);
	struct FPlatformUserId GetUserId();
	class AWillowPlayerController* GetWillowOwner();
	static bool Movie_IsPlaying(const class FString& optionalMovieFileName);
	static void Movie_Stop(float optionalFDelaySeconds, bool optionalBWait);
	static void Movie_Play(const class FString& MovieFileName, bool optionalBIsStreamed);
	bool LocText(const class FString& Section, const class FString& File, class FString& Key);
	class FString GetFallbackLocSection();
	class FString GetFallbackLocFile();
	void UpdateHUDVisibility(class AWillowPlayerController* _WPCOwner, bool bShowHUD);
	void eventOnClose();
	bool eventStart(bool optionalStartPaused);
	void CleanupDestroyedMovies();
};

// Class WillowGame.EndOfGameGFxMovie
// 0x0010 (0x0450 - 0x0460)
class UEndOfGameGFxMovie : public UWillowGFxMovie
{
public:
	class FString                                      ConsoleEvent;                                  // 0x0450 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EndOfGameGFxMovie");
		}

		return uClassPointer;
	};

	void extCancel();
	void extConfirmRestart();
	bool eventStart(bool optionalStartPaused);
};

// Class WillowGame.LevelTransitionGFxMovie
// 0x0000 (0x0450 - 0x0450)
class ULevelTransitionGFxMovie : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelTransitionGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.OnlineMessageGFxMovie
// 0x0020 (0x0450 - 0x0470)
class UOnlineMessageGFxMovie : public UWillowGFxMovie
{
public:
	class TArray<struct FOnlineMessage>                OnlineMessages;                                // 0x0450 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      BlockingSubtitle;                              // 0x0460 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.OnlineMessageGFxMovie");
		}

		return uClassPointer;
	};

	void extOnHideComplete(class UGFxObject* Clip);
};

// Class WillowGame.TextChatGFxMovie
// 0x0020 (0x0450 - 0x0470)
class UTextChatGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  ChatObj;                                       // 0x0450 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bTeamChatOnly : 1;                             // 0x0458 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bTextChatStarted : 1;                          // 0x0458 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bNeedsRefresh : 1;                             // 0x0458 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	int32_t                                            CachedFrameType;                               // 0x045C (0x0004) [0x0000000000002000] (CPF_Transient)
	class FString                                      LastMessage;                                   // 0x0460 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TextChatGFxMovie");
		}

		return uClassPointer;
	};

	void extSetFocusInput(bool bFocus);
	void extTextChatOnClose();
	void extTextChatOnLoad(const class FString& TargetPath);
	bool HandleTextChatInput(const struct FPlatformUserId& UserId, const struct FName& ukey, EInputEvent uevent);
	class FString GetChatObjText();
	void StopTextChatInternal();
	void StartTextChatInternal();
	void UpdateFrameForAspectRatio(EAspectRatio AspectRatio);
	void StartTextChat(bool optionalTeamChat);
	void eventOnClose();
	void eventOnTick();
	bool eventStart(bool optionalStartPaused);
};

// Class WillowGame.WillowGFxBuddyPlane
// 0x0000 (0x0450 - 0x0450)
class UWillowGFxBuddyPlane : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxBuddyPlane");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxDialogBox
// 0x00A8 (0x0450 - 0x04F8)
class UWillowGFxDialogBox : public UWillowGFxMovie
{
public:
	class TArray<struct FButtonData>                   Buttons;                                       // 0x0450 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      DlgCaptionMarkup;                              // 0x0460 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      DlgTextMarkup;                                 // 0x0470 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FName                                       DialogResult;                                  // 0x0480 (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      AutoLocFile;                                   // 0x0488 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      AutoLocSection;                                // 0x0498 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bAutoLocEnabled : 1;                           // 0x04A8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bAllowNonOwnerInput : 1;                       // 0x04A8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bNoCancel : 1;                                 // 0x04A8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bAllowForceClose : 1;                          // 0x04A8 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bFadeInPlaying : 1;                            // 0x04A8 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	class FString                                      InputText;                                     // 0x04B0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FPlatformUserId                             PlayerIdentificationUserId;                    // 0x04C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPlayerController*                     LastActivePC;                                  // 0x04C8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              DisplayStartTime;                              // 0x04D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             __OnButtonClicked__Delegate;                   // 0x04D8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnHandleInputKey__Delegate;                  // 0x04E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxDialogBox");
		}

		return uClassPointer;
	};

	struct FName GetDialogResult();
	class FString GetFallbackLocSection();
	class FString GetFallbackLocFile();
	void extOnFadeInComplete();
	void SetAllowNonOwnerInput(bool InAllowNonOwnerInput);
	void ApplyFlashText();
	void ApplyLayout();
	void ReplaceDialogCaption(const class FString& Replace, const class FString& With);
	void ReplaceDialogText(const class FString& Replace, const class FString& With);
	void AutoLocEnablePrompt(const class FString& File, const class FString& Section, const class FString& Key);
	void AutoLocEnableCaption(const class FString& File, const class FString& Section, const class FString& Key);
	void AutoLocEnable(const class FString& File, const class FString& Section);
	void UpdateButtonVisible(const struct FName& HintTag, bool bVisible);
	void SetText(const class FString& CaptionMarkup, const class FString& TextMarkup);
	bool HandleInputKey(const struct FPlatformUserId& UserId, const struct FName& ukey, EInputEvent uevent);
	void PopulateHintBar();
	void HandleHintInput(const struct FPlatformUserId& UserId, const struct FName& HintTag);
	void GotoAndStop(const class FString& FrameLabel);
	void GotoAndPlay(const class FString& FrameLabel);
	void eventOnClose();
	bool eventStart(bool optionalStartPaused);
	bool OnHandleInputKey(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId, const struct FName& ukey, EInputEvent uevent);
	bool OnButtonClicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
};

// Class WillowGame.WillowGFxTrainingDialogBox
// 0x0008 (0x04F8 - 0x0500)
class UWillowGFxTrainingDialogBox : public UWillowGFxDialogBox
{
public:
	float                                              DelayUntilShowOk;                              // 0x04F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	EBackButtonScreen                                  StatusMenuTab;                                 // 0x04FC (0x0001) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxTrainingDialogBox");
		}

		return uClassPointer;
	};

	void OnClose();
	void OnTick();
	void DisplayDelayedOkBoxForTraining(const class FString& Text, const class FString& Caption, float OkDelay);
	void Accepted(const struct FPlatformUserId& UserId);
	void Cancelled(const struct FPlatformUserId& UserId);
	bool HandleInputKey(const struct FPlatformUserId& UserId, const struct FName& ukey, EInputEvent uevent);
	bool eventStart(bool optionalStartPaused);
};

// Class WillowGame.WillowGFxTrainingDialogBox_NoPause
// 0x0000 (0x0500 - 0x0500)
class UWillowGFxTrainingDialogBox_NoPause : public UWillowGFxTrainingDialogBox
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxTrainingDialogBox_NoPause");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxMovie3D
// 0x0160 (0x0450 - 0x05B0)
class UWillowGFxMovie3D : public UWillowGFxMovie
{
public:
	class UWillowGFxMovie3DDefinition*                 My3DDefinition;                                // 0x0450 (0x0008) [0x0000000000000000]               
	uint32_t                                           bApplyHUDScale : 1;                            // 0x0458 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bNoSplitscreenPanning : 1;                     // 0x0458 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bNoSplitscreenScaling : 1;                     // 0x0458 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bNeedsMatricesUpdated : 1;                     // 0x0458 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bDidHorizontalSplitscreenPanningLastTick : 1;  // 0x0458 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bAlwaysHideInCinematicMode : 1;                // 0x0458 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	struct FVector2D                                   SplitRegionOrg;                                // 0x045C (0x0008) [0x0000000000000000]               
	struct FVector2D                                   SplitRegionExt;                                // 0x0464 (0x0008) [0x0000000000000000]               
	struct FMap_Mirror                                 ChainedObjectMap;                              // 0x0470 (0x0050) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class TArray<class UGFxObject*>                    RedundantClipArray;                            // 0x04C0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UGFxObject*                                  FocusObject;                                   // 0x04D0 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FocusOffset;                                   // 0x04D8 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     InterpFocusOffset;                             // 0x04E4 (0x000C) [0x0000000000002000] (CPF_Transient)
	class TArray<class UGFxObject*>                    SlidingObjects;                                // 0x04F0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UGFxObject*>                    SlidingObjectMetrics;                          // 0x0500 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FVector>                       SlidingObjectOrigins;                          // 0x0510 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FMatrix                                     CachedViewMat;                                 // 0x0520 (0x0040) [0x0000000000002000] (CPF_Transient)
	struct FMatrix                                     CachedProjMat;                                 // 0x0560 (0x0040) [0x0000000000002000] (CPF_Transient)
	struct FVector2D                                   CachedHUDScale;                                // 0x05A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint8_t                                           UnknownData00[0x8];                            // 0x05A8 (0x0008) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMovie3D");
		}

		return uClassPointer;
	};

	void extGenericButtonClicked(const class FString& ActionName);
	void InitForConsole();
	void InitForPC();
	void InitForPlatform();
	bool eventFilterAxisInput(const struct FPlatformUserId& UserId, const struct FName& Key, float Delta, float DeltaTime);
	bool eventFilterButtonInput(const struct FPlatformUserId& UserId, const struct FName& ButtonName, EInputEvent InputEvent);
	float GetDynamicFOVScalar();
	void GetHUDScale(float& HUDScaleX, float& HUDScaleY, float& HUDScaleE);
	class AWillowPlayerController* GetPrimaryPlayerWPC();
	bool IsPropTweening(class UGFxObject* Clip, const class FString& PropertyName);
	struct FASValue GetMaybeTweenedProperty(class UGFxObject* Clip, const class FString& PropertyName);
	struct FVector2D GetViewportScale();
	struct FVector2D GetViewportDimensions();
	class UGameViewportClient* GetViewport();
	struct FVector2D GetMovieDimensions();
	void ClearSplitscreenPanningCache();
	void ResetSlidingObjects();
	void UpdateSlidingObjects();
	void AddSlidingObject(class UGFxObject* Slider, class UGFxObject* Metric);
	void ClampFocusOffset();
	void UpdateFocusOffset();
	void FocusOn(class UGFxObject* Thing);
	class UGFxObject* GetParentClip(class UGFxObject* Thing);
	void AddClipToMap(class UGFxObject* Thing);
	int32_t GetKeyFor(class UGFxObject* Thing);
	bool DoVerticalSplitscreenPanning();
	bool DoHorizontalSplitscreenPanning();
	struct FRotator Get3DRotationOffset();
	struct FVector Get3DLocationOffset();
	void Set3DMatrices();
	void InitFromDefinition();
	void eventOnSetViewport();
	bool eventStart(bool optionalStartPaused);
};

// Class WillowGame.HUDScaleGuideGFxMovie
// 0x0020 (0x05B0 - 0x05D0)
class UHUDScaleGuideGFxMovie : public UWillowGFxMovie3D
{
public:
	class UGFxObject*                                  Arrow_Up;                                      // 0x05B0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  Arrow_Down;                                    // 0x05B8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  Arrow_Left;                                    // 0x05C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  Arrow_Right;                                   // 0x05C8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDScaleGuideGFxMovie");
		}

		return uClassPointer;
	};

	void UpdateFrameForAspectRatio(EAspectRatio AspectRatio);
	void SetScaleForClip(class UGFxObject* Clip);
	void eventOnTick();
	bool eventStart(bool optionalStartPaused);
};

// Class WillowGame.MarketplaceGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UMarketplaceGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MarketplaceGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxMovieCredits
// 0x0060 (0x05B0 - 0x0610)
class UWillowGFxMovieCredits : public UWillowGFxMovie3D
{
public:
	class UCreditsGFxObject*                           Credits;                                       // 0x05B0 (0x0008) [0x0000000000000000]               
	class UMontageGFxObject*                           Montage;                                       // 0x05B8 (0x0008) [0x0000000000000000]               
	class UCreditsDataProviderGFxObject*               DataProvider;                                  // 0x05C0 (0x0008) [0x0000000000000000]               
	class UCreditsGFxDefinition*                       CreditsDef;                                    // 0x05C8 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  MiddlewareTexture;                             // 0x05D0 (0x0008) [0x0000000000000000]               
	class FString                                      MiddlewareTextureLinkageName;                  // 0x05D8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bMiddlewareTextureLoaded : 1;                  // 0x05E8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSplatTextureLoaded : 1;                       // 0x05E8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bClosing : 1;                                  // 0x05E8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class UTexture2D*                                  SplatTexture;                                  // 0x05F0 (0x0008) [0x0000000000000000]               
	class FString                                      SplatTextureLinkageName;                       // 0x05F8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ClosingTimeRemaining;                          // 0x0608 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            AxisResetCounter;                              // 0x060C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMovieCredits");
		}

		return uClassPointer;
	};

	void extCreditsFinished();
	void extOnSplatClipOnLoad(const class FString& TextureLinkageName);
	void eventOnSplatTextureLoaded();
	void extOnMiddlewareClipOnLoad(const class FString& TextureLinkageName);
	void eventOnMiddlewareTextureLoaded();
	void extInitMontage(const class FString& PathToMontageObject, const class FString& TextureLinkageName);
	void extInitCredits(const class FString& PathToCreditsObject);
	void HandleHintInput(const struct FPlatformUserId& UserId, const struct FName& HintTag);
	void PopulateHintBar();
	bool HandleInputAxis(const struct FPlatformUserId& UserId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleInputKey(const struct FPlatformUserId& InUserId, const struct FName& ukey, EInputEvent uevent);
	void eventOnTick();
	void eventOnClose();
	bool eventStart(bool optionalStartPaused);
};

// Class WillowGame.WillowGFxThirdPersonMovie
// 0x00B0 (0x05B0 - 0x0660)
class UWillowGFxThirdPersonMovie : public UWillowGFxMovie3D
{
public:
	class UWillowGFxThirdPersonDefinition*             MyThirdPersonDefinition;                       // 0x05B0 (0x0008) [0x0000000000000000]               
	float                                              CameraYaw;                                     // 0x05B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CameraPitch;                                   // 0x05BC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    CameraRotation;                                // 0x05C0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     CameraLocation;                                // 0x05CC (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CameraSplitOffset;                             // 0x05D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CameraSplitSpread;                             // 0x05DC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FName                                       CameraFocusBoneName;                           // 0x05E0 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              CameraFocusYaw;                                // 0x05E8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastCameraPitchTime;                           // 0x05EC (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bAdjustedCameraLastTick : 1;                   // 0x05F0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bClosing : 1;                                  // 0x05F0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bControlModeAdjustsMenu : 1;                   // 0x05F0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bNeedsCamRotUpdate : 1;                        // 0x05F0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bDoCameraCollision : 1;                        // 0x05F0 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bHideMeshInVertSplit : 1;                      // 0x05F0 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bDraggingMouse_Camera : 1;                     // 0x05F0 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bDoMenuSpring : 1;                             // 0x05F0 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	float                                              MenuYaw;                                       // 0x05F4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MenuPitch;                                     // 0x05F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    MenuRotation;                                  // 0x05FC (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     MenuLocation;                                  // 0x0608 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CloseTime;                                     // 0x0614 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     CloseCamLoc;                                   // 0x0618 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    CloseCamRot;                                   // 0x0624 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              MenuSpringYaw;                                 // 0x0630 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MenuSpringPitch;                               // 0x0634 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    MenuSpringRotation;                            // 0x0638 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FIntPoint                                   DragMouseLoc_Camera;                           // 0x0644 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              MouseDragScale_Camera;                         // 0x064C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MouseDrag_Region_Left;                         // 0x0650 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MouseDrag_Region_Right;                        // 0x0654 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MouseDrag_Region_Top;                          // 0x0658 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MouseDrag_Region_Bottom;                       // 0x065C (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxThirdPersonMovie");
		}

		return uClassPointer;
	};

	void HandleMouseDrag_Camera(int32_t dx, int32_t DY);
	struct FRotator Get3DRotationOffset();
	struct FVector Get3DLocationOffset();
	void ToggleControlMode();
	void EnableControl(bool bEnable);
	void SaveTabView();
	void StopMouseDrag();
	void TryStartMouseDrag();
	bool HandleKeyDefaults(const struct FPlatformUserId& UserId, const struct FName& ukey, EInputEvent uevent);
	bool HandleInputAxisPlayerCameraRotation(const struct FPlatformUserId& UserId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleCameraInputAxis(const struct FPlatformUserId& UserId, const struct FName& ukey, float Delta, float DeltaTime);
	void UpdateDesiredCameraPosition();
	void eventOnClose();
	void eventFinishClosing();
	void eventBeginClosing();
	int32_t eventGetCurrentTab();
	bool eventStart(bool optionalStartPaused);
	bool AmITheStatusMenu();
};

// Class WillowGame.WillowGFxMovie3DDefinition
// 0x0038 (0x0100 - 0x0138)
class UWillowGFxMovie3DDefinition : public UGFxMovieDefinition
{
public:
	float                                              View3DFOV;                                     // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              View3DScale;                                   // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     View3DTrans;                                   // 0x0108 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    View3DRot;                                     // 0x0114 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSetMatricesEveryTick : 1;                     // 0x0120 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              SplitscreenFOVScalar;                          // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SplitscreenSizeScalar;                         // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VerticalSplitscreenPanning;                    // 0x012C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VerticalSplitscreenPanning_Spread;             // 0x0130 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMovie3DDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CreditsGFxDefinition
// 0x0090 (0x0138 - 0x01C8)
class UCreditsGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	class TArray<struct FCreditsLine>                  CreditData;                                    // 0x0138 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	float                                              DefaultSpeed;                                  // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFastForwardSpeed;                           // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxRewindSpeed;                                // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FCreditsTextureInfo>           ImageMontage;                                  // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      ImageMontagePackageName;                       // 0x0168 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            ImageDuration;                                 // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ImageBlankSpace;                               // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InitialBlankSpace;                             // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLoopMontageImages : 1;                        // 0x0184 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class FString                                      MiddlewareLogosPackageName;                    // 0x0188 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      MiddlewareTexturePath;                         // 0x0198 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      SplatPackageName;                              // 0x01A8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      SplatTexturePath;                              // 0x01B8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CreditsGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GammaScreenGFxDefinition
// 0x0078 (0x0138 - 0x01B0)
class UGammaScreenGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	struct FScreenParticleInitParams                   Parameters;                                    // 0x0138 (0x0078) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GammaScreenGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxThirdPersonDefinition
// 0x0038 (0x0138 - 0x0170)
class UWillowGFxThirdPersonDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              CameraInterpSpeed;                             // 0x0138 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CloseInterpTime;                               // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CloseInterpDistSqThreshold;                    // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUsePPOverride : 1;                            // 0x0144 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFixedYaw : 1;                                 // 0x0144 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              PostProcessInterpolationTime;                  // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FThirdPersonMenuView>          TabViews;                                      // 0x0150 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              CameraPitchMin;                                // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraPitchMax;                                // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MenuRotationSpeed;                             // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MenuRotationSmoothingSpeed;                    // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxThirdPersonDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInventoryGFxDefinition
// 0x0048 (0x0170 - 0x01B8)
class UWillowInventoryGFxDefinition : public UWillowGFxThirdPersonDefinition
{
public:
	uint8_t                                            TF_Standard;                                   // 0x0170 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            TF_Trash;                                      // 0x0171 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            TF_Favorite;                                   // 0x0172 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              TweenTime;                                     // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FPanelInfo>                    Panels;                                        // 0x0178 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCardInfo>                     Cards;                                         // 0x0188 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FString>                        ExternalTextureMap;                            // 0x0198 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FString>                        CardExternalTextureMap;                        // 0x01A8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInventoryGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TwoPanelInterfaceGFxDefinition
// 0x0010 (0x01B8 - 0x01C8)
class UTwoPanelInterfaceGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	class FString                                      PathToBackgroundArtClip;                       // 0x01B8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TwoPanelInterfaceGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxMovieStatePlatform
// 0x0018 (0x0080 - 0x0098)
class UWillowGFxMovieStatePlatform : public UGFxMovieState
{
public:
	class TArray<struct FMovieStateData>               PlatformStates;                                // 0x0080 (0x0010) [0x0000000000400041] (CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink)
	uint32_t                                           UseXboxFrameForPCWithGamepad : 1;              // 0x0090 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMovieStatePlatform");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxMovieStateUsable
// 0x0010 (0x0080 - 0x0090)
class UWillowGFxMovieStateUsable : public UGFxMovieState
{
public:
	class TArray<struct FMovieStateData>               UsabilityStates;                               // 0x0080 (0x0010) [0x0000000000400041] (CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMovieStateUsable");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxUIManager
// 0x0068 (0x0058 - 0x00C0)
class UWillowGFxUIManager : public UObject
{
public:
	struct FPointer                                    VfTable_IIGFxUIManager;                        // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UWillowGFxUIManagerDefinition*               MyDefinition;                                  // 0x0060 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPlayerController*                     PlayerOwner;                                   // 0x0068 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     PlayerViewOffset;                              // 0x0070 (0x000C) [0x0000000000002000] (CPF_Transient)
	class TArray<class UGearboxGFxMovie*>              ScreenMovies;                                  // 0x0080 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UGFxMovieDefinition*                         TheLobby;                                      // 0x0090 (0x0008) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bPassAxisInputToScreenMovies : 1;              // 0x0098 (0x0004) [0x0000000800002000] [0x00000001] (CPF_Transient)
	class TArray<struct FQueuedGFxUIAction>            QueuedActions;                                 // 0x00A0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnMovieSpawned__Delegate;                    // 0x00B0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxUIManager");
		}

		return uClassPointer;
	};

	bool IsDialogOpen();
	class TArray<class UGFxObject*> ResolveTargetObjectsForAction(class UGFxUIAction_Base* Action, class UGFxMoviePlayer* Movie);
	class UGFxMoviePlayer* ResolveTargetMovie(class USwfMovie* Movie);
	class UGFxMoviePlayer* ResolveTargetMovieForAction(class UGFxUIAction_Base* Action);
	void RunGFxUIAction(struct FQueuedGFxUIAction& Action);
	void RunGFxUIActions();
	void QueueGFxUIAction(class UGFxUIAction_Base* inAction, class UGFxMoviePlayer* optionalKnownTargetMovie, const class TArray<struct FGFxUIActionParam>& optionalOptParams, bool optionalBRunImmediately);
	void OnMovieSpawned(class UGearboxGFxMovie* Movie);
	void OnRestrictDialogToOwnerViewport(class UGearboxGFxMovie* Movie);
	void ScreenMovie_OnClosed(class UGearboxGFxMovie* Movie);
};

// Class WillowGame.WillowGFxUIManagerDefinition
// 0x00C0 (0x0058 - 0x0118)
class UWillowGFxUIManagerDefinition : public UGBXDefinition
{
public:
	struct FVector                                     MeshTranslation[0x9];                          // 0x0058 (0x006C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    MeshRotation;                                  // 0x00C4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ViewOffsetClamp;                               // 0x00D0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              ViewOffsetScale;                               // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       TextureParameterName;                          // 0x00E0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EGFxRenderTextureMode                              RenderTextureMode;                             // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         DialogBoxDefinition;                           // 0x00F0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         TrainingDialogBoxDefinition;                   // 0x00F8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         TrainingDialogBoxDefinition_NoPause;           // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UGFxMovieDefinition*                         EditDialogBoxDefinition;                       // 0x0108 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            RenderTextureSize;                             // 0x0110 (0x0004) [0x0000000020000000]  CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxUIManagerDefinition");
		}

		return uClassPointer;
	};

	struct FVector GetTranslation(class AWillowPlayerController* PC);
};

// Class WillowGame.WillowGlobals
// 0x0100 (0x01C0 - 0x02C0)
class UWillowGlobals : public UGearboxGlobals
{
public:
	class TArray<class UPlayerClassIdentifierDefinition*> PlayerClassIdentifiers;                        // 0x01C0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UPlayerNameIdentifierDefinition*> PlayerNameIdentifiers;                         // 0x01D0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bEnableSpeech : 1;                             // 0x01E0 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bIsDefaultWorldBodyAvailable : 1;              // 0x01E0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           LoadingMovieShouldPlayToEnd : 1;               // 0x01E0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bSavePipelineHistories : 1;                    // 0x01E0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	class UWorldBody*                                  DefaultWorldBodyStandIn;                       // 0x01E8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class UDamagePipeline*>               DamagePipelinePool;                            // 0x01F0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UWillowAutoAimStrategyDefinition*            AutoAimDefinition;                             // 0x0200 (0x0008) [0x0000000000000000]               
	class FString                                      DefaultGlobalsDefinitionName;                  // 0x0208 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class ULevelDependencyList*                        MasterLevelDependencyList;                     // 0x0218 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class AWillowInteractiveObject*>      ClientInteractiveObjects;                      // 0x0220 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FLoadingMovieExceptionInfo>    LoadingMovieExceptions;                        // 0x0230 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UWillowEffectCoordinator*                    TheEffectsCoordinator;                         // 0x0240 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWeaponTracerManager*                        TheWeaponTracerManager;                        // 0x0248 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowPlayerPawnDataManager*                ThePlayerPawnDataManager;                      // 0x0250 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkBank*                                     PersistentLevelSFXBank;                        // 0x0258 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkBank*                                     PersistentLevelVoiceBank;                      // 0x0260 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class AWillowProjectile*>             ActiveHomingProjectileList;                    // 0x0268 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UNPCLoadBalancer*                            TheNPCLoadBalancer;                            // 0x0278 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UDamageOverTimeManager*                      TheDamageOverTimeManager;                      // 0x0280 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class AWillowSpectatorPoint*>         SpectatorPointList;                            // 0x0288 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FCurrencyPresentation>         KnownCurrencies;                               // 0x0298 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UDLCLegacyPlayerClassIdentifierDefinition*> LegacyPlayerClassIdentifiers;                  // 0x02A8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              SplitScreenEffectPhysicsLifetimeScale;         // 0x02B8 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGlobals");
		}

		return uClassPointer;
	};

	void FindCurrencies();
	void FindCurrenciesIn(class UCurrencyListDefinition* CurrencyList, class TArray<struct FCurrencyPresentation>& Currencies);
	class UDamageOverTimeManager* GetDamageOverTimeManager();
	class UNPCLoadBalancer* GetNPCLoadBalancer();
	class UGameReleaseDefinition* GetCurrentGameReleaseDef();
	class FString GetLocalizedDamageType(EDamageType DamageType);
	bool CheckIfSpawnWillFail(class UClass* SpawnClass, const struct FVector& SpawnLocation);
	class FString PresetGetCaption(const struct FName& PresetName, const struct FName& KeyName);
	bool ApplyControllerPreset(const struct FName& PresetName, class UWillowPlayerInput* WPI);
	class AWillowSpectatorPoint* GetPrevSpectatorPoint(class AWillowSpectatorPoint* CurrentPoint);
	class AWillowSpectatorPoint* GetNextSpectatorPoint(class AWillowSpectatorPoint* CurrentPoint);
	class AWillowSpectatorPoint* GetFirstSpectatorPoint();
	void RemoveSpectatorPoint(class AWillowSpectatorPoint* SpecPoint);
	void AddSpectatorPoint(class AWillowSpectatorPoint* SpecPoint);
	void RemoveActiveHomingProjectile(class AWillowProjectile* HomingProjectile);
	void AddActiveHomingProjectile(class AWillowProjectile* HomingProjectile);
	class UDominantDirectionalLightComponent* GetTimeOfDayDominantDirectionalLightComponent();
	class UWillowPlayerPawnDataManager* GetPlayerPawnDataManager();
	class UPlayerNameIdentifierDefinition* GetPlayerNameIdentifierDefinition(const class FString& CharacterName);
	class UPlayerClassIdentifierDefinition* GetPlayerClassIdentifierDefinition(const class FString& ClassName);
	void SetLoadingMovieFinished();
	class ULevelDependencyList* GetLevelDependencyList();
	void GetFastTravelStationsLookup();
	class UWeaponTracerManager* GetWeaponTracerManager();
	class UWillowEffectCoordinator* GetEffectCoordinator();
	float GetGlobalFallingDamageScale(class UObject* ContextSource);
	float GetGlobalAIRocketWeaponDamageScale();
	float GetGlobalAIAssaultWeaponDamageScale();
	float GetGlobalAISniperWeaponDamageScale();
	float GetGlobalAISmgWeaponDamageScale();
	float GetGlobalAIShotgunWeaponDamageScale();
	float GetGlobalAIPistolWeaponDamageScale();
	float GetGlobalAIWeaponDamageScale();
	float GetGlobalAIDamageScale(class UObject* DamageInstigatorContextSource);
	class UGlobalsDefinition* GetGlobalsDefinition();
	void ReleasePipelineObject(class UGBXPipeline* Pipeline);
	class UDamagePipeline* GetDamagePipelineObject();
	void DeleteWorldBodyStandIn(class UWorldBody*& StandIn);
	class UWorldBody* CreateWorldBodyStandIn();
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void RemoveInteractiveObject(class AWillowInteractiveObject* Object);
	void AddInteractiveObject(class AWillowInteractiveObject* Object);
};

// Class WillowGame.WillowHUD
// 0x0370 (0x0308 - 0x0678)
class AWillowHUD : public AHUD
{
public:
	uint32_t                                           bPawnInspectorUsesAIDebugCam : 1;              // 0x0308 (0x0004) [0x0000000000044002] [0x00000001] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bShowDlcVersionErrors : 1;                     // 0x0308 (0x0004) [0x0000000000044002] [0x00000002] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bShowDlcNeedsEnumerationError : 1;             // 0x0308 (0x0004) [0x0000000000044002] [0x00000004] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bShowBuildInfo : 1;                            // 0x0308 (0x0004) [0x0000000000004000] [0x00000008] (CPF_Config)
	uint32_t                                           bShowHUDRestoreValue : 1;                      // 0x0308 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bAIInspectorEnabled : 1;                       // 0x0308 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bStatusEffectInspectorEnabled : 1;             // 0x0308 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bShowEnemiesEnabled : 1;                       // 0x0308 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bShowViewModelAnimDebug : 1;                   // 0x0308 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              DlcVersionErrorDisplayDuration;                // 0x030C (0x0004) [0x0000000000044002] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	float                                              DlcVersionErrorDisplayStartTime;               // 0x0310 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PlayerInfoHeight;                              // 0x0314 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PlayerInfoMaxDist;                             // 0x0318 (0x0004) [0x0000000000004000] (CPF_Config)  
	class APawn*                                       PawnOwner;                                     // 0x0320 (0x0008) [0x0000000000000000]               
	class AWillowInventory*                            SavedLookAtInventory;                          // 0x0328 (0x0008) [0x0000000000000000]               
	class AActor*                                      CachedBestPickup;                              // 0x0330 (0x0008) [0x0000000000000000]               
	class AActor*                                      CachedHoverPickup;                             // 0x0338 (0x0008) [0x0000000000000000]               
	class AActor*                                      ClientSavedPickup;                             // 0x0340 (0x0008) [0x0000000000000000]               
	class AActor*                                      ClosestPickup;                                 // 0x0348 (0x0008) [0x0000000000000000]               
	class UParticleSystemComponent*                    HoverParticleComponent;                        // 0x0350 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class TArray<struct FFadePickupParticle>           PendingKillHoverComponents;                    // 0x0358 (0x0010) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	class UParticleSystemComponent*                    PickupParticleComponent;                       // 0x0368 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class FString                                      BuildNumber;                                   // 0x0370 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      BuildTag;                                      // 0x0380 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      BuildChangelist;                               // 0x0390 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            BuildInfoXOffset;                              // 0x03A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            BuildInfoYOffset;                              // 0x03A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	class AWillowPlayerController*                     WPlayerOwner;                                  // 0x03A8 (0x0008) [0x0000000000000000]               
	class AWillowPlayerReplicationInfo*                WPRI;                                          // 0x03B0 (0x0008) [0x0000000000000000]               
	class UHUDDefinition*                              HUDDef;                                        // 0x03B8 (0x0008) [0x0000000000000000]               
	class UITargetable*                                CurrentTargetable_Object;                      // 0x03C0 (0x0008) [0x0000000000000000] 
	class UITargetable*                                CurrentTargetable_Interface;                   // 0x03C8 (0x0008) [0x0000000000000000]               
	class UITargetable*                                LastPreferredTargetable_Object;                // 0x03D0 (0x0008) [0x0000000000000000] 
	class UITargetable*                                LastPreferredTargetable_Interface;             // 0x03D8 (0x0008) [0x0000000000000000]               
	float                                              HealthBarFadeStartTime;                        // 0x03E0 (0x0004) [0x0000000000000000]               
	struct FVector                                     LastAutogunTargetLocation;                     // 0x03E4 (0x000C) [0x0000000000000000]               
	float                                              InspectAIOutputStartingXPos;                   // 0x03F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InspectAIOutputStartingYPos;                   // 0x03F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InspectAIOutputIndentSize;                     // 0x03F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InspectAIMaxFlagOutputLineSize;                // 0x03FC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      InspectAIRulesColor;                           // 0x0400 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      InspectAITimersColor;                          // 0x0404 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      InspectAITargetsColor;                         // 0x0408 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      InspectAIFlagIsTrueColor;                      // 0x040C (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      InspectAIFlagIsFalseColor;                     // 0x0410 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InspectStatusEffectOutputStartingXPos;         // 0x0414 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InspectStatusEffectOutputStartingYPos;         // 0x0418 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InspectStatusEffectOutputIndentSize;           // 0x041C (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      InspectStatusEffectTypeName;                   // 0x0420 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FColor                                      ShowEnemiesColor;                              // 0x0430 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            DangerousIconDifference;                       // 0x0434 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            ImpossibleEnemyDifference;                     // 0x0438 (0x0004) [0x0000000000004000] (CPF_Config)  
	class UGFxMoviePlayer*                             ModularHUDMovie;                               // 0x0440 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UMaterialInstance*                           SavingMatInst;                                 // 0x0448 (0x0008) [0x0000000000000000]               
	class UMaterial*                                   SavingMat;                                     // 0x0450 (0x0008) [0x0000000000000000]               
	float                                              SaveDuration;                                  // 0x0458 (0x0004) [0x0000000000000000]               
	float                                              SaveStartTime;                                 // 0x045C (0x0004) [0x0000000000000000]               
	float                                              FadeStartTime;                                 // 0x0460 (0x0004) [0x0000000000000000]               
	float                                              FadeDuration;                                  // 0x0464 (0x0004) [0x0000000000000000]               
	class FString                                      RespawnDialogString;                           // 0x0468 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      RespawnDialogFeeWaivedString;                  // 0x0478 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      RespawnDialogTitleString;                      // 0x0488 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      RespawnDialogOtherDiedString;                  // 0x0498 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      RespawnDialogOtherDiedFeeWaivedString;         // 0x04A8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      RespawnDialogUnknownPlayerString;              // 0x04B8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	float                                              ScreenFadeStartTime;                           // 0x04C8 (0x0004) [0x0000000000000000]               
	float                                              ScreenFadeDuration;                            // 0x04CC (0x0004) [0x0000000000000000]               
	float                                              ScreenFadeStartOpacity;                        // 0x04D0 (0x0004) [0x0000000000000000]               
	float                                              ScreenFadeOpacity;                             // 0x04D4 (0x0004) [0x0000000000000000]               
	struct FColor                                      ScreenFadeColor;                               // 0x04D8 (0x0004) [0x0000000000000000]               
	class FString                                      DuelCountdownString;                           // 0x04E0 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DuelOutOfBoundsString;                         // 0x04F0 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	float                                              DefaultMessageDuration;                        // 0x0500 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      DeathStringPistol;                             // 0x0508 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringShotgun;                            // 0x0518 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringSMG;                                // 0x0528 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringSniperRifle;                        // 0x0538 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringRocketLauncher;                     // 0x0548 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringAssaultRifle;                       // 0x0558 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringFragGrenade;                        // 0x0568 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringProteanGrenade;                     // 0x0578 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringIncendiaryDamage;                   // 0x0588 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringShockDamage;                        // 0x0598 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringExplosiveDamage;                    // 0x05A8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringCorrosiveDamage;                    // 0x05B8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringImpactDamage;                       // 0x05C8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringSuicide;                            // 0x05D8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringUnknown;                            // 0x05E8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DeathStringFallDamage;                         // 0x05F8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	float                                              SavingMaterialScale;                           // 0x0608 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SavingIconXOffset;                             // 0x060C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SavingIconYOffset;                             // 0x0610 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxNumPickups;                                 // 0x0614 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PendingWeaponCardDisplayTime;                  // 0x0618 (0x0004) [0x0000000000044002] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	EHUDEquippedCardType                               ActiveEquippedCardType;                        // 0x061C (0x0001) [0x0000000000002000] (CPF_Transient)
	EHUDPickupCardType                                 ActivePickupCardType;                          // 0x061D (0x0001) [0x0000000000002000] (CPF_Transient)
	class AWillowInventory*                            ItemComparison[0x2];                           // 0x0620 (0x0010) [0x0000000000002000] (CPF_Transient)
	class UMaterial*                                   DebugMarkerMat;                                // 0x0630 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FInteractionIconWithOverrides               CurrentPickupIcon;                             // 0x0638 (0x0020) [0x0000000000000000]               
	class FString                                      QueuedInitFrame;                               // 0x0658 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class FString>                        PlayedInitFrames;                              // 0x0668 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowHUD");
		}

		return uClassPointer;
	};

	void eventOnLostFocusPause(bool Enable);
	bool CanPauseOnLostFocus(bool bEnable);
	void DrawAlwaysOnTopItems();
	void SetCanPickupItem(class AActor* optionalPickup, bool optionalBUpdatePickupCard);
	void FadeIn(float optionalFadeLength);
	void FadeOut(float optionalFadeLength);
	void DrawFadeToBlack();
	void StartFadeToBlack(float InOpacity, float InFadeDuration, const struct FColor& optionalIncolor);
	void FadeToBlack(float optionalFadeLength);
	void FadeFromBlack(float optionalFadeLength);
	void NotifySavingComplete(float InSaveDuration);
	void NotifySavingStarted();
	void ToggleHUD();
	void ShowTargetAnimDebug(const class FString& optionalStartingPoint, int32_t optionalAttachmentIndex);
	void ShowAnimDebugFP(const class FString& optionalStartingPoint, int32_t optionalAttachmentIndex);
	void eventCloseStatusMenu(class UWillowUIInteraction* Interaction);
	void TryFakePauseInSinglePlayer();
	void RunStatusMenu(class UWillowUIInteraction* Interaction);
	void PlayStatusMovie();
	void CloseHUDMovies();
	void OpenHUDMovies(bool optionalBDeferred);
	void _OpenHUDMovies();
	void AddPostRenderedActor(class AActor* A);
	void RemovePostRenderedActor(class AActor* A);
	void DrawAIInspectorFlagOutput(const class FString& DisplayStr, bool bIsFlagTrue, float& XPos, float& YPos);
	void DrawAIInspectorDebugOutput(const class FString& Header, const struct FColor& DrawColor, float YL, class TArray<class FString>& DebugInfo, float& YPos);
	void eventShowInspectedAI(class AWillowPawn* AIPawnToInspect, const struct FVector& PlayerCameraPosition, const struct FVector& PlayerCameraDirection, float& YPos);
	void InspectAIPawn(class AWillowPawn* AIPawn);
	void InspectAI(const class FString& optionalArg);
	void GetShowIosDebugInfo(class AWillowInteractiveObject* WIO, class TArray<class FString>& DebugInfo);
	void eventDrawShowIos(class AWillowInteractiveObject* WIO, const struct FVector& ViewPosition, const struct FVector& ViewRotation);
	void GetShowEnemiesDebugInfo(class AWillowPawn* WAIP, class TArray<class FString>& DebugInfo);
	void eventDrawShowEnemies(class AWillowPawn* WAIP, const struct FVector& ViewPosition, const struct FVector& ViewRotation);
	void ShowEnemies();
	class UGFxMoviePlayer* eventGetModularHUDMovie();
	void UpdatePickupParticles();
	void eventDisplayConsoleMessages();
	void DrawEngineHUD();
	float ScaleY(float Y);
	float ScaleX43(float X);
	float ScaleX(float X);
	struct FColor GetColorForExpLevel(class AActor* Pickup);
	struct FVector GetPickupCardLocation(class AActor* Pickup, bool optionalBApplyPitchOffset);
	void DetachPickupHoverPSys(class AActor* Pickup);
	void AttachPickupHoverPSys(class AActor* Pickup, bool optionalBInPickupRange);
	void GetItemHoverBounds(class AActor* Pickup, float& X, float& Y, float& XL, float& YL);
	void DrawItemFeedbackInfo();
	void DrawDebugFeedbackForPickup(class AActor* Pickup);
	void eventDrawBuildInfo();
	void DrawHUD();
	bool ShouldDisplayDebug(const struct FName& DebugType);
	void eventDoStartupDrawHUD();
	void BuildInfo();
	void DrawbShowHUDIsFalseHUD();
	void SetWPRI();
	void eventDestroyed();
	bool CreateModularHUDMovie();
	void PostBeginPlay();
	void InitHud();
	void DisplayCustomMessage(ELocalMessageType MsgType, const class FString& MessageString, float Duration, const struct FColor& DrawColor, class UClass* optionalInMessageClass, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class UObject* optionalOptionalObject);
	void LoadBuildInfo();
};

// Class WillowGame.WillowImpactDefinition
// 0x02E0 (0x0058 - 0x0338)
class UWillowImpactDefinition : public UImpactDefinition
{
public:
	struct FImpactResponseEffect                       FallbackEffect;                                // 0x0058 (0x0158) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	EImpactUsage                                       Usage;                                         // 0x01B0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     Parent;                                        // 0x01B8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowImpactDefinition*                     AlternateImpactDefinition;                     // 0x01C0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FImpactResponseEffect                       UnconditionalResponse;                         // 0x01C8 (0x0158) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FPhysicalMaterialResponseData> PhysicalMaterialResponses;                     // 0x0320 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class UAkEvent*                                    ImpactAkEvent;                                 // 0x0330 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowImpactDefinition");
		}

		return uClassPointer;
	};

	void HandleRigidBodyImpact(class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactIndex, bool optionalBReplicateEffect, struct FCollisionImpactData& RigidCollisionData);
};

// Class WillowGame.WillowExplosionImpactDefinition
// 0x0000 (0x0338 - 0x0338)
class UWillowExplosionImpactDefinition : public UWillowImpactDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowExplosionImpactDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInteractiveObject
// 0x06A8 (0x0240 - 0x08E8)
class AWillowInteractiveObject : public AActor
{
public:
	struct FPointer                                    VfTable_IITimerBehavior;                       // 0x0240 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageBehavior;                      // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIKilledBehavior;                      // 0x0250 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0258 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIChangeUsabilityBehavior;             // 0x0260 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITargetable;                          // 0x0268 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_ISpecialMoveInterface;                 // 0x0270 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IILightProjectileManagerOwner;         // 0x0278 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPathingObstacle;                     // 0x0280 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;           // 0x0288 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageSurface;                       // 0x0290 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIUsable;                              // 0x0298 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                       // 0x02A0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIGFxActorMovie;                       // 0x02A8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageable;                          // 0x02B0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x02B8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;             // 0x02C0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFocusable;                           // 0x02C8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIHitRegionConsumer;                   // 0x02D0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                    // 0x02D8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDialogSpeaker;                       // 0x02E0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDialogEventListener;                 // 0x02E8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IILevelChallengeObject;                // 0x02F0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFlagProvider;                        // 0x02F8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFeatureConsumer;                     // 0x0300 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageReceiver;                      // 0x0308 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIStanceInterface;                     // 0x0310 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBasicBehavior;                       // 0x0318 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIProjectileReflector;                 // 0x0320 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorTriggerOwner;                // 0x0328 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UInteractiveObjectDefinition*                InteractiveObjectDefinition;                   // 0x0330 (0x0008) [0x0000000100000021] (CPF_Edit | CPF_Net)
	class UPawnAllegiance*                             Allegiance;                                    // 0x0338 (0x0008) [0x0000000100000021] (CPF_Edit | CPF_Net)
	class TArray<struct FName>                         EnabledBehaviorSets;                           // 0x0340 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UCylinderComponent*                          CylinderComponent;                             // 0x0350 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UGearboxCollisionGridComponent*              CollisionGridComponent;                        // 0x0358 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMeshComponent*                              ObjectMesh;                                    // 0x0360 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      ObjectSkelMesh;                                // 0x0368 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UBodyProviderDefinition*                     BodyProvider;                                  // 0x0370 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            bCanBeUsed[0x2];                               // 0x0378 (0x0002) [0x0000000000000000]               
	ERadarIconType                                     CompassIcon;                                   // 0x037A (0x0001) [0x0000000100000020] (CPF_Net)     
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x0380 (0x0008) [0x0000000004082009] (CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UITargetable*                                AllegianceParent_Object;                       // 0x0388 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UITargetable*                                AllegianceParent_Interface;                    // 0x0390 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class UITargetable*>                  AllegianceChildren;                            // 0x0398 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            NumAICurrentlyTargeting;                       // 0x03A8 (0x0004) [0x4000000000002000] (CPF_Transient)
	uint32_t                                           bShouldBeTargetable : 1;                       // 0x03AC (0x0004) [0x0000000100002020] [0x00000001] (CPF_Net | CPF_Transient)
	uint32_t                                           bTargetableByAI : 1;                           // 0x03AC (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bTakeDamageCausedByRadiusDamage : 1;           // 0x03AC (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bHasBeenKilled : 1;                            // 0x03AC (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bDead : 1;                                     // 0x03AC (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bInitialized : 1;                              // 0x03AC (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           MoveOwnerOnEditorMove : 1;                     // 0x03AC (0x0004) [0x0000000800000000] [0x00000040] 
	uint32_t                                           OwnerControlsEditorMove : 1;                   // 0x03AC (0x0004) [0x0000000800000000] [0x00000080] 
	uint32_t                                           bWaitingForInteractiveObjectDefinition : 1;    // 0x03AC (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bClientSideImpactFXs : 1;                      // 0x03AC (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bBeingHealed : 1;                              // 0x03AC (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bNonCheatGodMode : 1;                          // 0x03AC (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bTickUseAction : 1;                            // 0x03AC (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bCurrentlyThrottled : 1;                       // 0x03AC (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bIsTargetable : 1;                             // 0x03AC (0x0004) [0x0000000000002020] [0x00004000] (CPF_Net | CPF_Transient)
	struct FInteractiveObjectReplicatedStateData       ReplicatedState;                               // 0x03B0 (0x0020) [0x0000000100002020] (CPF_Net | CPF_Transient)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x03D0 (0x0004) [0x0000000000000000]               
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                       // 0x03D8 (0x0010) [0x0000000100000020] (CPF_Net)     
	struct FInstanceData2                              InstanceState;                                 // 0x03E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UCoordinatedEffectDefinition*                ReplicatedCFX[0x4];                            // 0x03F8 (0x0020) [0x0000000100000020] (CPF_Net)     
	class URegionDefinition*                           ManuallyBalanceToRegionDef;                    // 0x0418 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ExpLevel;                                      // 0x0420 (0x0004) [0x4000000000000020] (CPF_Net)     
	int32_t                                            GameStage;                                     // 0x0424 (0x0004) [0x4000000000000020] (CPF_Net)     
	int32_t                                            AwesomeLevel;                                  // 0x0428 (0x0004) [0x4000000000000020] (CPF_Net)     
	struct FBalanceDefSpawnedActorState                BalanceDefinitionState;                        // 0x0430 (0x0010) [0x0000000100002020] (CPF_Net | CPF_Transient)
	struct FTimerBehaviorUserState                     InteractiveObjectTimers;                       // 0x0440 (0x0024) [0x0000000000000000]               
	int32_t                                            LastMaxHealth;                                 // 0x0464 (0x0004) [0x0000000000000000]               
	float                                              LastHealth;                                    // 0x0468 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxHealth;                                     // 0x046C (0x0004) [0xA000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            MaxHealthBaseValue;                            // 0x0470 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            MaxHealthModifierStack;                        // 0x0478 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              Health;                                        // 0x0488 (0x0004) [0x4000000000000020] (CPF_Net)     
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x0490 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UInstancedDesignerAttribute*>   DesignerAttributes;                            // 0x04A0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            NumReplicatedDesignerAttributes;               // 0x04B0 (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FReplicatedDesignerAttributeState           ReplicatedDesignerAttributes[0x8];             // 0x04B8 (0x00C0) [0x0000000100000020] (CPF_Net)     
	int32_t                                            FrameOfLastReflection;                         // 0x0578 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TimeOfLastReflection;                          // 0x057C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BulletReflectionOffSelfChance;                 // 0x0580 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              BulletReflectionOffSelfChanceBaseValue;        // 0x0584 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            BulletReflectionOffSelfChanceModifierStack;    // 0x0588 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectedOffSelfDamageScale;             // 0x0598 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletReflectedOffSelfDamageScaleBaseValue;    // 0x059C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletReflectedOffSelfDamageScaleModifierStack;// 0x05A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectedOffSelfDamageTakenScale;        // 0x05B0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletReflectedOffSelfDamageTakenScaleBaseValue;// 0x05B4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletReflectedOffSelfDamageTakenScaleModifierStack;// 0x05B8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FName                                       AssociatedStationDefinitionName;               // 0x05C8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FLootConfigurationData>        Loot;                                          // 0x05D0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              MaxDrawDistanceOverride;                       // 0x05E0 (0x0004) [0x0000000100000020] (CPF_Net)     
	class AController*                                 LastDamagedByController;                       // 0x05E8 (0x0008) [0x0000000000000000]               
	float                                              HitRegionHealthScaleAttribute;                 // 0x05F0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              HitRegionHealthScaleAttributeBaseValue;        // 0x05F4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            HitRegionHealthScaleAttributeModifierStack;    // 0x05F8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class UHitRegionHelper*                            MyHitRegionHelper;                             // 0x0608 (0x0008) [0x0000000000000000]               
	struct FName                                       HitRegionModifierName;                         // 0x0610 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FReplicatedHitRegionImpactEffect            ReplicatedImpactEffects[0x4];                  // 0x0618 (0x0100) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            NextReplicatedImpactEffect;                    // 0x0718 (0x0004) [0x0000000000002000] (CPF_Transient)
	class USpecialMoveComponent*                       SMComponent;                                   // 0x0720 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	struct FReplicatedSpecialMoveData                  ReplicatedSMData;                              // 0x0728 (0x0028) [0x0000000100000020] (CPF_Net)     
	int32_t                                            SimpleAnimState;                               // 0x0750 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RepSimpleAnimState;                            // 0x0754 (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	float                                              LastSimpleAnimStateChangeTime;                 // 0x0758 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FSimpleAnimData>               SimpleAnimInfo;                                // 0x0760 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AWillowLightProjectileManager*               LightProjMgr;                                  // 0x0770 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class UInteractionIconDefinition*                  InteractionIconOverride[0x2];                  // 0x0778 (0x0010) [0x0000000000002000] (CPF_Transient)
	class AWwiseSoundGroup*                            SoundGroup;                                    // 0x0788 (0x0008) [0x0000200000000001] (CPF_Edit)    
	class UITargetable*                                TargetPatsy_Object;                            // 0x0790 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UITargetable*                                TargetPatsy_Interface;                         // 0x0798 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FReplicatedSpeakStateData                   ReplicatedSpeakState;                          // 0x07A0 (0x0030) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class UPrimitiveComponent*                         LastUsedComponent;                             // 0x07D0 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class APawn*                                       ExclusiveActionUser;                           // 0x07D8 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class TArray<class APawn*>                         CurrentActionUsers;                            // 0x07E0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FClientUseActionState                       ClientUseActionState;                          // 0x07F0 (0x0010) [0x0000000100002020] (CPF_Net | CPF_Transient)
	float                                              UseActionStartTime;                            // 0x0800 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TotalUsedTime;                                 // 0x0804 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UPathingObstacleInfo*                        PathObstacleInfo;                              // 0x0808 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              SkelUpdateTime;                                // 0x0810 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastThrottleCheck;                             // 0x0814 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastNetRelevantTime;                           // 0x0818 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RepObjectMeshScale;                            // 0x081C (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	struct FSkeletalThrottleData                       SkelThrottleData;                              // 0x0820 (0x0014) [0x0000000000002000] (CPF_Transient)
	struct FFlagProviderData                           FlagProviderData;                              // 0x0838 (0x0070) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FFeatureConsumerState                       FeatureConsumerState;                          // 0x08A8 (0x0028) [0x0000000100400020] (CPF_Net | CPF_NeedCtorLink)
	class UDamageReceiverComponent*                    DamageReceiverComponent;                       // 0x08D0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStanceComponent*                            StanceComponent;                               // 0x08D8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStanceDefinition*                           ReplicatedStance;                              // 0x08E0 (0x0008) [0x0000000100002020] (CPF_Net | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInteractiveObject");
		}

		return uClassPointer;
	};

	class UStanceComponent* GetStanceComponent();
	void OnPlayerClosedMissionUI(class AWillowPlayerController* ThePlayer);
	void OnPlayerOpenedMissionUI(class AWillowPlayerController* ThePlayer);
	class UPathingObstacleInfo* GetObstacleInfo(bool optionalBFillInfo);
	void SetObstacleInfo(class UPathingObstacleInfo* Info);
	class AActor* GetObstacleActor();
	bool TouchDenied(class AActor* Other);
	float GetAudibility();
	float GetVisibility();
	void SetPatsy(class UITargetable* NewPatsy);
	class UITargetable* GetPatsy();
	bool IsBeingHealed();
	void SetBeingHealed(bool bNewBeingHealed);
	void DamageResult_KilledNeutral(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledFriendly(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledEnemy(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_DamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void DamageResult_DamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags);
	void DamageResult_DamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, EUsabilityType UsedType);
	bool HasAnyMissionsForPlayer();
	struct FVector GetMissionDirectorLocation();
	int32_t GetAllDirectorData();
	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, float Damage, class UClass* DamageType, const struct FVector& Momentum, class UDamagePipeline* optionalPipeline);
	void eventServerSpecialMove_StopAny(bool optionalBClearQueue, bool optionalBInterrupted);
	void eventServerSpecialMove_Stop(class USpecialMoveDefinition* OldSMD, bool optionalBClearQueue, bool optionalBInterrupted);
	void eventServerSpecialMove_Queue(class USpecialMoveDefinition* NewSMD, float optionalPlayRateScale, float optionalDuration, const struct FName& optionalCallbackName, class UObject* optionalCallbackObject, class UObject* optionalData, bool optionalBSendCallbackAtEndOfSequence, bool optionalBStartOfSequence);
	void eventServerSpecialMove_Play(class USpecialMoveDefinition* NewSMD, float optionalPlayRateScale, float optionalDuration, const struct FName& optionalCallbackName, class UObject* optionalCallbackObject, class UObject* optionalData, bool optionalBSendCallbackAtEndOfSequence);
	void SetReplicatedSMData(bool optionalBInterrupted, struct FSpecialMoveData& NewSMData);
	ERootMotionRotationMode GetDefaultRootMotionRotationMode();
	ERootMotionMode GetDefaultRootMotionMode();
	class USkeletalMeshComponent* GetSkelMesh();
	class USpecialMoveComponent* GetSMComponent();
	class AActor* GetActor();
	struct FVector GetFocusScreenOffset();
	float GetFocusRadius();
	struct FVector GetFocusLocation();
	void EndFocus(class APawn* User);
	void BeginFocus(class APawn* User);
	float GetIntrinsicArmor();
	void OnShieldDepleted(class AController* DamageInstigator, EDamageType DamageType);
	void SetShieldStrength(float ShieldValue, bool optionalBResetRegeneration);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	void NotifyDamageTaken(struct FDamageEventSummary& DamageSummary);
	void OnRep_ReplicatedImpactEffects(int32_t ArrayIndex, struct FReplicatedHitRegionImpactEffect& OldImpactEffect);
	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* optionalPipeline, bool optionalBFriendlyNoDamage);
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void PlayHealingReaction(struct FDamageReactionData& Data);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary& HealingSummary);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData& Data, struct FVector& HitLocation, struct FVector& HitMomentum);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int32_t GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	float GetMaxHealth();
	float GetHealth();
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary& DamageSummary);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float& outHealth, float& outMaxHealth);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
	void AddMissionLoot(class UItemPoolDefinition* MissionPool);
	void SetMorphNodeWeight(class UMorphNodeWeight* Node, float NewWeight, float optionalWeightBlendTime);
	void UpdateTargetableState(bool bNewShouldBeTargetable);
	void Behavior_RegisterTargetable(bool bUnregister);
	EAutoAimProfile GetAutoAimProfile();
	float GetMagnetismRange();
	struct FVector GetMagnetismOrigin();
	bool IsAutoAimTarget();
	float GetTargetingModifier();
	void Behavior_SetCanTarget(EChangeStatus ChangeStatus);
	bool IsValidHomingTarget();
	int32_t ShowSelfAsTarget(bool bControllersOnly);
	bool GetTargetableIsHidden();
	void GetAuxiliaryTargetableLocations(class TArray<struct FVector>& AuxLocations);
	struct FVector GetTargetableLocation();
	bool CanSnapZoom();
	void GetSnapRegion(struct FTargetSnapRegion& SnapRegion);
	struct FVector GetSnapLocation();
	bool IsTargetableProxy();
	bool IsTargetable(int32_t optionalTargetFlags);
	EOpinion GetOpinion(class UObject* Other);
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	class UPawnAllegiance* GetDefaultAllegiance();
	class UPawnAllegiance* GetObjectAllegianceW();
	bool IsSameAllegiance(class UObject* anObject);
	bool IsNeutral(class UObject* anObject);
	bool IsFriendly(class UObject* anObject);
	bool IsEnemy(class UObject* anObject);
	void GFx_NotifyMovieDestroy(class UGearboxGFxMovie* Movie);
	void GFx_NotifyMovieCreate(class UGearboxGFxMovie* Movie);
	class AActor* GFx_GetMovieActor();
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	void eventDestroyed();
	void CleanupKilledInteractiveObject();
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void InitializeAttributeStartingValues();
	void Behavior_ChangeUsabilityCost(EChangeStatus ChangeType, ECurrencyType CostType, int32_t CostAmount, EUsabilityType UsedType);
	bool eventGetUsability(EUsabilityType UsedType);
	bool SetUsabilityForComponent(bool bNewUsable, class UActorComponent* UsedComponent, EUsabilityType UsedType);
	void eventSetUsability(bool bUsable, EUsabilityType UsedType, class UActorComponent* optionalUsedComponent);
	void Behavior_ChangeUsability(EChangeStatus ChangeType, class UPrimitiveComponent* UsedComponent, EUsabilityType UsedType);
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* optionalTechFilter, EScriptedKillType optionalDeathType);
	void Behavior_CauseRadiusDamage(float Radius, float DamageAmount, bool bFullDamage, float Momentum, class UClass* DamageType, class UDamagePipeline* Pipeline, const struct FVector& optionalOffset, class UIDamageCauser* optionalDamageCauser, bool optionalBSkipTraceTest, EOpinion optionalAllegianceFilter, class TArray<class AActor*>& ActorsHurt);
	void Behavior_CauseDamage(class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamagePipeline* Pipeline, class UIDamageCauser* optionalDamageCauser);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class UIDamageCauser* DamageCauser, float optionalDamageFalloffExponent, class UDamagePipeline* optionalPipeline);
	void DeadInteractiveObjectCleanup();
	void StartDeadInteractiveObjectCleanupTimer();
	void KilledBy(class APawn* EventInstigator);
	void eventHandleHealthDepleted(class APawn* EventInstigator, class UDamagePipeline* optionalPipeline);
	bool IsFullyArmored();
	EDamageSurfaceType GetDamageSurfaceTypeFromHit(struct FTraceHitInfo& HitInfo);
	EDamageSurfaceType GetDefaultDamageSurfaceType();
	float AdjustMomentumForSurfaceType(float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, const struct FTraceHitInfo& HitInfo);
	void ReduceInteractiveObjectDamage(class AController* InstigatedBy, float& Damage);
	class AController* GetLastDamagedByController();
	void eventTakeDamage(float RawDamage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& HitDirection, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	bool GetNonCheatGodMode();
	void SetNonCheatGodMode(bool NewMode);
	void eventRunCustomEvent(const struct FName& EventName, class UObject* optionalEventInstigator, class UObject* optionalOtherEventParticipantObject, const struct FBehaviorParameters& optionalEventData);
	void eventOnTimerEvent(EBehaviorTimerEvent EventType, const struct FBehaviorParameters& optionalEventData);
	bool SetTimerState(EBehaviorTimerID TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(EBehaviorTimerID TimerId, struct FBehaviorTimerState& TimerState);
	float GetTimeSeconds();
	float EvaluateAttributeInitialization(const struct FAttributeInitializationData& InitData);
	class UMeshComponent* GetMesh();
	class UAnimNode* FindAnimNode(const struct FName& NodeName);
	void SetRotationRate(const struct FRotator& NewRotationRate);
	float GetCollisionRadius();
	float GetUseProgressPercent();
	bool CancelUsedBy(class APawn* User);
	bool UsedBy(class APawn* User, bool optionalBSimulateUnuse);
	bool IsComponentUsable(class UActorComponent* UsableComponent, EUsabilityType UsedType);
	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void InitializeRelevanceDistance(ERelevanceDistance RelevanceDistance);
	void eventInitializeFromDefinition(class UInteractiveObjectDefinition* Definition, bool bSkipBehaviorSetsInitialization);
	void InitializeBody();
	void InitializeRBPhys();
	void TerminateRBPhys();
	void SetCompassIcon(ERadarIconType NewIcon);
	void ConditionalAddToCompass(bool optionalBDestroyed);
	void eventTornOff();
	void ApplyBalanceDefinitionCustomizations();
	void InitializeBalanceDefinitionState(class UBaseBalanceDefinition* BalanceDefinition, int32_t GradeIndex);
	void eventReplicatedArrayEvent(const struct FName& VarName, int32_t ArrayIndex);
	void eventReplicatedEvent(const struct FName& VarName);
	void ReceiveDefinition(class UInteractiveObjectDefinition* Definition);
	void ResendDefinition();
	bool CanResendDefinition();
	void TryAddToPostRenderedActorsList();
	void PostBeginPlay();
	void ApplyMaxDrawDistanceOverride();
	void SetMaxDrawDistanceOverride(float NewMaxDrawDistanceOverride);
	void UpdateCollideAsEncroacher();
	void SetCollisionOnComponentFromCollisionType(class UPrimitiveComponent* InComponent, ECollisionType InCollisionType);
	void SetCollisionFromCollisionType();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void ProcessBehaviorSetsFlags();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int32_t NewExpLevel);
	void SetAwesomeLevel(int32_t NewAwesomeLevel);
	void SetGameStage(int32_t NewGameStage);
	int32_t GetExpLevel();
	int32_t GetAwesomeLevel();
	int32_t GetGameStage();
	void GetHitRegions(class TArray<class UBodyHitRegionDefinition*>& Regions, class UBodyHitRegionDefinition*& DefaultRegion);
	void SetInfoBarVisibility(bool bVisible);
	bool HideTargetInfoOnHud(class APawn* optionalHUDOwner);
	bool IsChampion();
	bool IsBoss();
	bool DoesTargetableTakeDamage();
	bool DisplayParentInfo();
	void GetHealthInfo(struct FHealthInfo& OutHealthInfo);
	void GetExpInfo(int32_t& ExpLevelValue);
	class AActor* GetTargetableActor();
};

// Class WillowGame.WillowElevatorButton
// 0x0060 (0x08E8 - 0x0948)
class AWillowElevatorButton : public AWillowInteractiveObject
{
public:
	ElevatorButtonUsage                                Usage;                                         // 0x08E8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EElevButtonState                                   ButtonState;                                   // 0x08E9 (0x0001) [0x0000000000000000]               
	int32_t                                            CallFloor;                                     // 0x08EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bGlowing : 1;                                  // 0x08F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FName                                       BehaviorSetName_Enabled;                       // 0x08F4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_Disabled;                      // 0x08FC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_InUse;                         // 0x0904 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_EnabledButUseless;             // 0x090C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_Enabled_Glowing;               // 0x0914 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_Disabled_Glowing;              // 0x091C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_InUse_Glowing;                 // 0x0924 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BehaviorSetName_EnabledButUseless_Glowing;     // 0x092C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AWillowElevator*>               AssociatedElevators;                           // 0x0938 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowElevatorButton");
		}

		return uClassPointer;
	};

	void UpdateState();
	bool CanBeUsedForAnyAssociatedElevator();
};

// Class WillowGame.WillowInteractiveObjectAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UWillowInteractiveObjectAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInteractiveObjectAttributeContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.WillowInventoryManager
// 0x0028 (0x0288 - 0x02B0)
class AWillowInventoryManager : public AInventoryManager
{
public:
	uint32_t                                           bAutoSwitchWeaponOnPickup : 1;                 // 0x0288 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bLimitedInventory : 1;                         // 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	int32_t                                            InventorySlotMax_Misc;                         // 0x028C (0x0004) [0x6000000000004020] (CPF_Net | CPF_Config)
	int32_t                                            WeaponReadyMax;                                // 0x0290 (0x0004) [0xA000000000006020] (CPF_Net | CPF_Transient | CPF_Config)
	int32_t                                            WeaponReadyMaxBaseValue;                       // 0x0294 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            WeaponReadyMaxModifierStack;                   // 0x0298 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastAdjustTime;                                // 0x02A8 (0x0004) [0x0000000000000000]               
	float                                              LastItemAdjustTime;                            // 0x02AC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInventoryManager");
		}

		return uClassPointer;
	};

	void PrintAllInventory();
	void ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool optionalBDoNotActivate);
	bool IsInventoryItemInInventory(class AInventory* CheckItem);
	static void SortInventory(class UQSortComparer* Comparer, class TArray<class AWillowInventory*>& Items);
	static void SortWeapons(class UQSortComparer* Comparer, class TArray<class AWillowWeapon*>& Weapons);
	void DiscardInventory(bool optionalBDestroyContents);
	void eventCopyInventory(class APawn* Other);
	void SwitchToBestWeapon(bool optionalBForceADifferentWeapon);
	bool ShouldSwitchToBestWeapon();
	void ReloadWeapon(uint8_t FireModeNum);
	void ChangedWeapon(bool optionalBEquipInOffHand);
	bool CancelWeaponChange();
	bool InventoryTransitionInProgress();
	void IncPlayerRarityStat(int32_t RarityLevel, class AWillowPlayerController* WPC);
	EItemRarity GetMatchedSetRarity();
	void OnEquipped(class AWillowInventory* Inv);
	void InventoryUnreadied(class AInventory* Inv);
	void SetHolsteredWeapon(int32_t SlotIdx, class AWillowWeapon* NewWeapon);
	void ReplaceHolsteredWeapon(class AWillowWeapon* OldWeapon, class AWillowWeapon* NewWeapon);
	class AWillowWeapon* FindBestHolsteredWeapon(uint8_t optionalSizeFilter);
	void InventoryReadied(class AInventory* Inv);
	void RemoveFromInventory(class AInventory* ItemToRemove, bool optionalBCanDrop);
	int32_t GetEmptyBackpackSlots();
	bool InventoryShouldBeReadiedWhenEquipped(class AWillowInventory* WillowInv);
	class AWillowPlayerController* GetOwningPlayerController();
	void eventGetWeaponList(bool optionalBIncludeUnreadied, bool optionalBIncludeReadied, EPlayerDroppability optionalMaxDroppability, bool optionalBIncludeBackpackTransitions, class TArray<class AWillowWeapon*>& WeaponList);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void eventUnreadyExcessWeapons();
	void SetWeaponReadyMax(int32_t NewSize);
	void SetupForPlayer();
	void SetupFor(class APawn* P);
	void eventReplicatedEvent(const struct FName& VarName);
	int32_t GetWeaponReadyMax(bool optionalBWantBaseValue);
	int32_t CountReadiedWeapons();
	void SetInventoryMaxSize(int32_t NewSize, bool optionalBOverrideDefaultMin);
	int32_t GetUnreadiedInventoryMaxSize();
	int32_t CountUnreadiedInventory();
	class AWillowWeapon* FindLeastValuableWeapon(bool optionalBIncludeUnreadied, bool optionalBIncludeReadied);
	class AWillowInventory* FindLeastValuableItem(bool optionalBIncludeUnreadied, bool optionalBIncludeReadied);
};

// Class WillowGame.WillowReplicatedInventoryManager
// 0x0000 (0x02B0 - 0x02B0)
class AWillowReplicatedInventoryManager : public AWillowInventoryManager
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowReplicatedInventoryManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInventoryManagerAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UWillowInventoryManagerAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInventoryManagerAttributeContextResolver");
		}

		return uClassPointer;
	};

	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};

// Class WillowGame.WillowLevelTimerDefinition
// 0x0028 (0x0058 - 0x0080)
class UWillowLevelTimerDefinition : public UGBXDefinition
{
public:
	class FString                                      TimerHeader;                                   // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            XPosition;                                     // 0x0068 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            YPosition;                                     // 0x006C (0x0004) [0x0000000000000002] (CPF_Const)   
	class UFont*                                       TimerFont;                                     // 0x0070 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      TimerColor;                                    // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLevelTimerDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowLightProjectileManager
// 0x1048 (0x0240 - 0x1288)
class AWillowLightProjectileManager : public AActor
{
public:
	class AWillowWeapon*                               WeaponOwner;                                   // 0x0240 (0x0008) [0x0000000000000020] (CPF_Net)     
	class APawn*                                       PawnOwner;                                     // 0x0248 (0x0008) [0x0000000100000020] (CPF_Net)     
	class TArray<struct FLightProjectile>              MyProjs;                                       // 0x0250 (0x0010) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	class TArray<struct FLightProjectile>              RemovedProjs;                                  // 0x0260 (0x0010) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	struct FReplicatedLightProjectile                  ReplicatedProjectiles[0x10];                   // 0x0270 (0x0480) [0x0000000100000020] (CPF_Net)     
	float                                              ReplicatedCutoffTime;                          // 0x06F0 (0x0004) [0x0000000000000000]               
	uint8_t                                            ProjectileCount;                               // 0x06F4 (0x0001) [0x0000000000000000]               
	uint32_t                                           bCreatingReplicatedProjectiles : 1;            // 0x06F8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bProcessReplicatedProjectiles : 1;             // 0x06F8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bProcessReplicatedBeams : 1;                   // 0x06F8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class TArray<struct FBeamState>                    MyBeams;                                       // 0x0700 (0x0010) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	struct FReplicatedBeamState                        ReplicatedBeams[0x14];                         // 0x0710 (0x0960) [0x0000000100000020] (CPF_Net)     
	struct FReplicatedBeamEndPoints                    RepBeamEndPoints[0x14];                        // 0x1070 (0x01E0) [0x0000000000000020] (CPF_Net)     
	class TArray<struct FBeamEffectImpactLocation>     RecentBeamImpactLocations;                     // 0x1250 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              RecentBeamImpactLifetime;                      // 0x1260 (0x0004) [0x0000000000000000]               
	struct FVector                                     RepWeaponBeamStartLocation;                    // 0x1264 (0x000C) [0x0000000000000020] (CPF_Net)     
	struct FRotator                                    RepWeaponBeamStartRotation;                    // 0x1270 (0x000C) [0x0000000000000020] (CPF_Net)     
	float                                              LastTimeSeconds;                               // 0x127C (0x0004) [0x0000000000000000]               
	float                                              DamageApplicationInterval;                     // 0x1280 (0x0004) [0x0000000000000000]               
	float                                              DeadOwnerCheckTime;                            // 0x1284 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLightProjectileManager");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void eventSpawnOverchargedImpactEffect(const struct FImpactInfo& Impact, class UParticleSystem* Template);
	static struct FRotator GetReflectionInaccuracyAngle(class AActor* ProjectileInstigator, float ReflectedInaccuracyModifier);
	static struct FVector GetReflectionDestination(const struct FVector& HitLocation, class AActor* HitActor, class AActor* ProjectileInstigator, struct FReflectionInfo& ReflectionData);
	void eventCauseBeamRadiusDamage(int32_t BeamIndex, const struct FBeamDamageData& DamageData, const struct FVector& DamageOrigin, class UDamagePipeline* optionalInPipeline);
	struct FName GetBoneNameForBeamLock(class USkeletalMesh* Mesh);
	void DeleteBeamsForSource(class AActor* SourceActor, const struct FName& optionalSocketName);
	void DeleteBeamsFor(class AActor* TargetActor);
	void DeleteAllBeamsFromWeapon();
	void DeleteAllBeams();
	void CleanupProjectiles();
	void AddBeam(class UFiringModeDefinition* FiringModeDefinition, class UImpactDefinition* ImpactDefinition, bool bUseWeaponAsSource, const struct FName& optionalBeamName, bool optionalBStartLocked, int32_t optionalParentIndex, struct FBeamDamageData& DamageData, struct FBeamLocationData& SourceData, struct FBeamLocationData& TargetData);
	void AddChildBeam(int32_t BeamIndex, struct FBeamLocationData& TargetData);
	void AddWeaponBeam(const struct FName& SocketName, class UFiringModeDefinition* FiringModeDefinition);
	int32_t AddProj(const struct FVector& StartTrace, const struct FVector& EndTrace, class APawn* ProjectileInstigator, class UFiringModeDefinition* FiringModeDefinition, float optionalDamage, bool optionalBStartParticleTracerAtWeapon, bool optionalBOvercharged, bool optionalBRicochetTowardsEnemy, uint8_t optionalStatId);
	void eventReplicatedEvent(const struct FName& VarName);
	void eventDestroyed();
};

// Class WillowGame.WillowLocalMessage
// 0x0000 (0x0068 - 0x0068)
class UWillowLocalMessage : public ULocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLocalMessage");
		}

		return uClassPointer;
	};

	static class FString CloseFontColorTag();
	static class FString OpenFontColorTag(const struct FColor& FontColor);
	static class FString TrimWhitespace(const class FString& InString);
};

// Class WillowGame.LocalTrainingDefinitionMessage
// 0x0000 (0x0068 - 0x0068)
class ULocalTrainingDefinitionMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalTrainingDefinitionMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LocalTrainingMessage
// 0x0008 (0x0068 - 0x0070)
class ULocalTrainingMessage : public UWillowLocalMessage
{
public:
	struct FColor                                      DefaultTrainingMessageColor;                   // 0x0068 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalTrainingMessage");
		}

		return uClassPointer;
	};

	static class FString GetLocalStringForTrainingMessageKey(class AWillowPlayerController* WPC, const class FString& MessageKey);
	static void ClientReceive(class APlayerController* P, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class WillowGame.WillowLocalPlayer
// 0x0010 (0x03C0 - 0x03D0)
class UWillowLocalPlayer : public ULocalPlayer
{
public:
	uint32_t                                           bCheckedChatDisabled : 1;                      // 0x03C0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint8_t                                           UnknownData00[0xC];                            // 0x03C4 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLocalPlayer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowMapInfo
// 0x0018 (0x0060 - 0x0078)
class UWillowMapInfo : public UGBXMapInfo
{
public:
	class USwfMovie*                                   TacticalMapMovie;                              // 0x0060 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                             // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UGFxMovieDefinition*                         FrontEndMovieDef;                              // 0x0070 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowMapInfo");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowMind
// 0x04C0 (0x0408 - 0x08C8)
class AWillowMind : public AGearboxMind
{
public:
	struct FPointer                                    VfTable_IISeeTargetable;                       // 0x0408 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IISkillBehavior;                       // 0x0410 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IISkillInstigator;                     // 0x0418 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIResourcePoolProvider;                // 0x0420 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class AWillowPlayerStateInfo*                      WillowPSI;                                     // 0x0428 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UCharacterClassDefinition*                   CharacterClass;                                // 0x0430 (0x0008) [0x0000000000000020] (CPF_Net)     
	class UAIClassDefinition*                          AIClass;                                       // 0x0438 (0x0008) [0x0000000000000000]               
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x0440 (0x0008) [0x0000000000000000]               
	uint32_t                                           bCharacterClassInitialized : 1;                // 0x0448 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bWantsToSprint : 1;                            // 0x0448 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bWeaponsRestricted : 1;                        // 0x0448 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bProvoked : 1;                                 // 0x0448 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bPawnAddedToRadar : 1;                         // 0x0448 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bWantsRotationAudio : 1;                       // 0x0448 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	class AResourcePoolManager*                        ResourcePoolManager;                           // 0x0450 (0x0008) [0x0000000000000020] (CPF_Net)     
	struct FResourcePoolReference                      AccuracyPool;                                  // 0x0458 (0x0018) [0x0000002000000020] (CPF_Net)     
	struct FResourcePoolReference                      OffHandAccuracyPool;                           // 0x0470 (0x0018) [0x0000002000000020] (CPF_Net)     
	class AWillowMind*                                 SpawnParent;                                   // 0x0488 (0x0008) [0x0000000000000000]               
	class TArray<class AWillowMind*>                   SpawnChildren;                                 // 0x0490 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            TotalSpawnedChildren;                          // 0x04A0 (0x0004) [0x4000000000000000]               
	struct FVector                                     DirectionHint;                                 // 0x04A4 (0x000C) [0x0000000000000000]               
	class UWillowNavigationHandle*                     WillowNav;                                     // 0x04B0 (0x0008) [0x0000000000000000]               
	float                                              DistanceToGoal;                                // 0x04B8 (0x0004) [0x4000000000000000]               
	float                                              LastUsedTime;                                  // 0x04BC (0x0004) [0x0000000000000000]               
	struct FFlag                                       LookAtPlayer;                                  // 0x04C0 (0x0010) [0x4000000000000000]               
	float                                              RotationRateModifier;                          // 0x04D0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              RotationRateModifierBaseValue;                 // 0x04D4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            RotationRateModifierModifierStack;             // 0x04D8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class UAttributeModifier*                          AvoidanceModifier;                             // 0x04E8 (0x0008) [0x0000000000000000]               
	struct FVector                                     ProvokedLocation;                              // 0x04F0 (0x000C) [0x0000000000000000]               
	class APawnInteractionProxy*                       InteractionProxy;                              // 0x0500 (0x0008) [0x0000000000000000]               
	class AActor*                                      SpawnedHelperActor;                            // 0x0508 (0x0008) [0x0000000000000000]               
	float                                              MinAggroTimeToConsiderAwareOfTarget;           // 0x0510 (0x0004) [0x0000000000000000]               
	class AActor*                                      CurrentActionSkillTarget;                      // 0x0518 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InstigatedBulletDamageModifier;                // 0x0520 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedBulletDamageModifierBaseValue;       // 0x0524 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedBulletDamageModifierModifierStack;   // 0x0528 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedMeleeDamageModifier;                 // 0x0538 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedMeleeDamageModifierBaseValue;        // 0x053C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeDamageModifierModifierStack;    // 0x0540 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedGrenadeDamageModifier;               // 0x0550 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedGrenadeDamageModifierBaseValue;      // 0x0554 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedGrenadeDamageModifierModifierStack;  // 0x0558 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedRocketDamageModifier;                // 0x0568 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedRocketDamageModifierBaseValue;       // 0x056C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedRocketDamageModifierModifierStack;   // 0x0570 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectDamageModifier;          // 0x0580 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectDamageModifierBaseValue; // 0x0584 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectDamageModifierModifierStack;// 0x0588 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedSkillDamageModifier;                 // 0x0598 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedSkillDamageModifierBaseValue;        // 0x059C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedSkillDamageModifierModifierStack;    // 0x05A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectStatusChanceModifier;    // 0x05B0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectStatusChanceModifierBaseValue;// 0x05B4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectStatusChanceModifierModifierStack;// 0x05B8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedIncendiaryStatusChanceModifier;      // 0x05C8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedIncendiaryStatusChanceModifierBaseValue;// 0x05CC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedIncendiaryStatusChanceModifierModifierStack;// 0x05D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedShockStatusChanceModifier;           // 0x05E0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedShockStatusChanceModifierBaseValue;  // 0x05E4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedShockStatusChanceModifierModifierStack;// 0x05E8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedCorrosiveStatusChanceModifier;       // 0x05F8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedCorrosiveStatusChanceModifierBaseValue;// 0x05FC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedCorrosiveStatusChanceModifierModifierStack;// 0x0600 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedAmpStatusChanceModifier;             // 0x0610 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedAmpStatusChanceModifierBaseValue;    // 0x0614 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedAmpStatusChanceModifierModifierStack;// 0x0618 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectStatusDamageModifier;    // 0x0628 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectStatusDamageModifierBaseValue;// 0x062C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectStatusDamageModifierModifierStack;// 0x0630 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedIncendiaryStatusDamageModifier;      // 0x0640 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedIncendiaryStatusDamageModifierBaseValue;// 0x0644 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedIncendiaryStatusDamageModifierModifierStack;// 0x0648 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedShockStatusDamageModifier;           // 0x0658 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedShockStatusDamageModifierBaseValue;  // 0x065C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedShockStatusDamageModifierModifierStack;// 0x0660 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedCorrosiveStatusDamageModifier;       // 0x0670 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedCorrosiveStatusDamageModifierBaseValue;// 0x0674 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedCorrosiveStatusDamageModifierModifierStack;// 0x0678 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedAmpStatusDamageModifier;             // 0x0688 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedAmpStatusDamageModifierBaseValue;    // 0x068C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedAmpStatusDamageModifierModifierStack;// 0x0690 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedBulletDamageModifier;                  // 0x06A0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedBulletDamageModifierBaseValue;         // 0x06A4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedBulletDamageModifierModifierStack;     // 0x06A8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedAmplifyDamageModifier;                 // 0x06B8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedAmplifyDamageModifierBaseValue;        // 0x06BC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedAmplifyDamageModifierModifierStack;    // 0x06C0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedMeleeDamageModifier;                   // 0x06D0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedMeleeDamageModifierBaseValue;          // 0x06D4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedMeleeDamageModifierModifierStack;      // 0x06D8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedGrenadeDamageModifier;                 // 0x06E8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedGrenadeDamageModifierBaseValue;        // 0x06EC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedGrenadeDamageModifierModifierStack;    // 0x06F0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedRocketDamageModifier;                  // 0x0700 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedRocketDamageModifierBaseValue;         // 0x0704 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedRocketDamageModifierModifierStack;     // 0x0708 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedStatusEffectDamageModifier;            // 0x0718 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedStatusEffectDamageModifierBaseValue;   // 0x071C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedStatusEffectDamageModifierModifierStack;// 0x0720 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedSkillDamageModifier;                   // 0x0730 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedSkillDamageModifierBaseValue;          // 0x0734 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedSkillDamageModifierModifierStack;      // 0x0738 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedIncendiaryDamageModifier;            // 0x0748 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedIncendiaryDamageModifierBaseValue;   // 0x074C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedIncendiaryDamageModifierModifierStack;// 0x0750 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedShockDamageModifier;                 // 0x0760 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedShockDamageModifierBaseValue;        // 0x0764 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedShockDamageModifierModifierStack;    // 0x0768 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedExplosiveDamageModifier;             // 0x0778 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedExplosiveDamageModifierBaseValue;    // 0x077C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedExplosiveDamageModifierModifierStack;// 0x0780 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedCorrosiveDamageModifier;             // 0x0790 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedCorrosiveDamageModifierBaseValue;    // 0x0794 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedCorrosiveDamageModifierModifierStack;// 0x0798 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedImpactDamageModifier;                // 0x07A8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedImpactDamageModifierBaseValue;       // 0x07AC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedImpactDamageModifierModifierStack;   // 0x07B0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedAmpDamageModifier;                   // 0x07C0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedAmpDamageModifierBaseValue;          // 0x07C4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedAmpDamageModifierModifierStack;      // 0x07C8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedBulletDamageAmmoTheftAmount;         // 0x07D8 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedBulletDamageAmmoTheftAmountBaseValue;// 0x07DC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedBulletDamageAmmoTheftAmountModifierStack;// 0x07E0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedMeleeDamageAmmoTheftAmount;          // 0x07F0 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedMeleeDamageAmmoTheftAmountBaseValue; // 0x07F4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeDamageAmmoTheftAmountModifierStack;// 0x07F8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedGrenadeDamageAmmoTheftAmount;        // 0x0808 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedGrenadeDamageAmmoTheftAmountBaseValue;// 0x080C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedGrenadeDamageAmmoTheftAmountModifierStack;// 0x0810 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedRocketDamageAmmoTheftAmount;         // 0x0820 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedRocketDamageAmmoTheftAmountBaseValue;// 0x0824 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedRocketDamageAmmoTheftAmountModifierStack;// 0x0828 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedStatusEffectDamageAmmoTheftAmount;   // 0x0838 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedStatusEffectDamageAmmoTheftAmountBaseValue;// 0x083C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectDamageAmmoTheftAmountModifierStack;// 0x0840 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedBulletDamageAmmoTheftAmount;           // 0x0850 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedBulletDamageAmmoTheftAmountBaseValue;  // 0x0854 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedBulletDamageAmmoTheftAmountModifierStack;// 0x0858 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedMeleeDamageAmmoTheftAmount;            // 0x0868 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedMeleeDamageAmmoTheftAmountBaseValue;   // 0x086C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedMeleeDamageAmmoTheftAmountModifierStack;// 0x0870 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedGrenadeDamageAmmoTheftAmount;          // 0x0880 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedGrenadeDamageAmmoTheftAmountBaseValue; // 0x0884 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedGrenadeDamageAmmoTheftAmountModifierStack;// 0x0888 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedRocketDamageAmmoTheftAmount;           // 0x0898 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedRocketDamageAmmoTheftAmountBaseValue;  // 0x089C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedRocketDamageAmmoTheftAmountModifierStack;// 0x08A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedStatusEffectDamageAmmoTheftAmount;     // 0x08B0 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedStatusEffectDamageAmmoTheftAmountBaseValue;// 0x08B4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedStatusEffectDamageAmmoTheftAmountModifierStack;// 0x08B8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowMind");
		}

		return uClassPointer;
	};

	bool IsStrandedOffNavMesh();
	void OnExpLevelChange();
	void eventNotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall);
	void PassInteractionProxyEventsToKismet(bool bPassEventsToKismet);
	void ProcessTraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, const struct FQWord& TraceFlags);
	void eventTraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, const struct FQWord& TraceFlags, float TouchTime);
	struct FVector GetViewLocation();
	class AActor* GetWorldBody();
	int32_t GetSkillGrade(class USkillDefinition* SkillDef);
	bool IsHumanPlayer();
	void OnSkillEvent(class USkillDefinition* SkillDef, ESkillEventType EventType, class AActor* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject);
	EeSkillCastStyle GetActionSkillCastingStyle();
	bool IsAnyActionSkillRunning();
	void EndActionSkillSlot(int32_t SlotIndex);
	class UPlayerSkillTree* GetPlayerSkillTree();
	class AActor* GetActionSkillTarget();
	class AActor* GetSkillInstigatorActor();
	class AActor* GetResourcePoolProviderActor();
	void SetResourcePoolManager(class AResourcePoolManager* InManager);
	class AResourcePoolManager* GetResourcePoolManager();
	struct FResourcePoolReference GetResourcePoolForResourceDefinition(class UResourceDefinition* Resource, bool optionalBCreatePoolIfOneDoesntExist);
	class AWillowMind* GetAWillowMind();
	class AWillowPlayerController* GetAWillowPlayerController();
	class AController* GetABaseController();
	void StopRotationAudio();
	void StartRotationAudio();
	void SetWantsRotationAudio(bool bWantsAudio);
	bool GetWantsRotationAudio();
	float GetNumSpawnChildren();
	float ParentDistToTarget();
	bool InGodMode();
	static void SetAIDemigod(bool bAIDemigod);
	static bool GetAIDemigod();
	static void SetAIGod(bool bAIGod);
	static bool GetAIGod();
	int32_t ActivateEventRule(const struct FName& RuleEventName);
	void InitSequence(class UActionSequence* NewSequence);
	class UAIDefinition* GetAIDefinition();
	class UIAIInterface* GetAIParent();
	bool CanTickAI();
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	void KillHelperActor();
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventGetUniqueInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	class APawn* GetInstanceDataPawn();
	class AController* Behavior_GetSkillInstigatorController();
	void Behavior_UpgradeSkill(class USkillDefinition* SkillToUpgrade, int32_t NumberOfLevelsToRaise, int32_t MaximumLevelToRaiseSkill, bool bPostSharedEventMessageIfSkillUpgraded);
	void Behavior_DeactivateSkill(class USkillDefinition* SkillToDeactivate, bool optionalBIgnoreSkillInstigator, bool optionalBDeactivateAllInstances, bool optionalBForceDeactivate, class AActor* optionalBuffInstigator);
	void Behavior_ActivateSkill(class USkillDefinition* SkillToActivate, class UObject* optionalAdditionalSkillTarget, int32_t optionalSkillGrade, class AActor* optionalBuffInstigator);
	void SetFlag(class UFlagDefinition* FlagDef, bool FlagValue);
	void NotifyTakeHit(class AController* InstigatedBy, class APawn* HitPawn, const struct FVector& HitLocation, float Damage, class UClass* DamageType, const struct FVector& Momentum, class UDamagePipeline* optionalPipeline);
	struct FVector GetRallyPoint();
	void eventTakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& HitDirection, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	struct FVector GetDirectionHint();
	bool TargetIsFriendly();
	bool AddTargetable(class AActor* NewTarget, bool bSeeTarget, bool bHearThreat, bool bSmellTarget);
	bool IsAwareOfTarget(class AActor* PotentialTarget);
	void NotifyAttackedBy(class AActor* Attacker, bool bDamaged);
	bool IsFlying();
	bool WantsToSprint();
	void SetWantsToSprint(bool bInWantsToSprint);
	bool ShouldLookAtPlayer();
	void InitNavigationHandle();
	void AddAccuracyImpulse(float Delta, bool bOffHand);
	bool CanHoldWeapon(class APawn* Holder, class AWeapon* TestWeapon, bool bHoldInOffHand);
	void SetWeaponsRestricted(bool bNewWeaponsRestrictedState);
	struct FRotator GetAdjustedAimFor(class AWeapon* InWeapon, const struct FVector& StartFireLoc);
	class UIResourcePoolProvider* GetResourcePoolProvider();
	void RecalculateAttributeInitializedState();
	void ApplyCharacterClassDefaults(class APawn* P, class UCharacterClassDefinition* CharClass);
	class UCharacterClassDefinition* GetCharacterClass();
	void CleanSpawnFamily(class APawn* Killer);
	void eventDestroyed();
	void PawnDied(class APawn* P);
	void eventUnPossess();
	void ApplyCharacterClassStartingValues(class UCharacterClassDefinition* InCharacterClass);
	void InitializeCharacterClass();
	void eventPossess(class APawn* inPawn, bool bVehicleTransition);
	void OnTeleport(class USeqAct_Teleport* Action);
	class UPawnAllegiance* GetAllegiance();
	class AActor* GetActor();
};

// Class WillowGame.WillowMindAttributeContextResolver
// 0x0000 (0x0058 - 0x0058)
class UWillowMindAttributeContextResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowMindAttributeContextResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowMindTargetInfo
// 0x0020 (0x0380 - 0x03A0)
class UWillowMindTargetInfo : public UMindTargetInfo
{
public:
	float                                              DistToMaster;                                  // 0x0380 (0x0004) [0x4000000000000000]               
	struct FFlag                                       IsTargetingMaster;                             // 0x0384 (0x0010) [0x4000000000000000]               
	float                                              LastAttackTime;                                // 0x0394 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TotalDamagePct;                                // 0x0398 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowMindTargetInfo");
		}

		return uClassPointer;
	};

	int32_t GetNumCurrentlyTargeting();
};

// Class WillowGame.WillowNavDebug
// 0x0000 (0x0240 - 0x0240)
class AWillowNavDebug : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowNavDebug");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowNavigationHandle
// 0x0080 (0x03C0 - 0x0440)
class UWillowNavigationHandle : public UGearboxNavigationHandle
{
public:
	class AWillowMind*                                 MyWillowMind;                                  // 0x03C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 MyWillowPawn;                                  // 0x03C8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class UGBXPathConstraint*>            PathCostModifiers;                             // 0x03D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bNavMeshWalking : 1;                           // 0x03E0 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bFlightBlocked : 1;                            // 0x03E0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bFlightFullyBlocked : 1;                       // 0x03E0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	int32_t                                            FlyHitIndex;                                   // 0x03E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	EFlightMode                                        FlightMode;                                    // 0x03E8 (0x0001) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FlyLookDirection;                              // 0x03EC (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     OriginalFlyDirection;                          // 0x03F8 (0x000C) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FVector>                       FlyHits;                                       // 0x0408 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FVector>                       FlyDirections;                                 // 0x0418 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              FlightObstacleDistPct;                         // 0x0428 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FlyFixRate;                                    // 0x042C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FlyFixLastCheckTime;                           // 0x0430 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FlyFixLocation;                                // 0x0434 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowNavigationHandle");
		}

		return uClassPointer;
	};

	bool IsHardAttached();
	void ClearPathCosts();
	void InitPathCosts();
	struct FVector GetMoveVector(EMoveStyle MoveStyle);
	void SetPawnPhysics();
	bool CanMoveToGoal();
	bool SetPath(struct FPathFindData& PathData);
};

// Class WillowGame.WillowClientNavigationHandle
// 0x0000 (0x0440 - 0x0440)
class UWillowClientNavigationHandle : public UWillowNavigationHandle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowClientNavigationHandle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowOnDemandPackageMarker
// 0x0000 (0x0058 - 0x0058)
class UWillowOnDemandPackageMarker : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowOnDemandPackageMarker");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPauseTicker
// 0x0018 (0x0058 - 0x0070)
class UWillowPauseTicker : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                       // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<struct FPauseTimerData>               Timers;                                        // 0x0060 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPauseTicker");
		}

		return uClassPointer;
	};

	void ClearAllTimers();
	void ClearTimer(const struct FName& inTimerFunc, class UObject* inObj);
	bool IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj);
	void SetTimer(float Rate, bool bLoop, const struct FName& TimerFunc, class UObject* TimerObj);
};

// Class WillowGame.WillowPawn
// 0x0F18 (0x08B0 - 0x17C8)
class AWillowPawn : public AGearboxPawn
{
public:
	struct FPointer                                    VfTable_IIAttributeEffectBehavior;             // 0x08B0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x08B8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;           // 0x08C0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageSurface;                       // 0x08C8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFaceFXActor;                         // 0x08D0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIMeleeAttacker;                       // 0x08D8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                       // 0x08E0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFireShotBehavior;                    // 0x08E8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorAliasProvider;               // 0x08F0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIHealable;                            // 0x08F8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IILightProjectileManagerOwner;         // 0x0900 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIMaterialFadeBehavior;                // 0x0908 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageable;                          // 0x0910 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIHitRegionConsumer;                   // 0x0918 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0920 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;             // 0x0928 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IINounAttributeProvider;               // 0x0930 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIUsable;                              // 0x0938 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIAnimProvider;                        // 0x0940 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                    // 0x0948 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIProjectileReflector;                 // 0x0950 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIExtraImpactEffects;                  // 0x0958 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDialogSpeaker;                       // 0x0960 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDialogEventListener;                 // 0x0968 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFoleySystemBehavior;                 // 0x0970 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIAudioParametersProvider;             // 0x0978 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_FFoleyImplementer;                     // 0x0980 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class AWillowPlayerStateInfo*                      WillowPSI;                                     // 0x0988 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FResourcePoolReference                      ShieldArmor;                                   // 0x0990 (0x0018) [0x0000002000000020] (CPF_Net)     
	int32_t                                            LastShieldVar;                                 // 0x09A8 (0x0004) [0x0000000000000000]               
	int32_t                                            LastShieldMaxVar;                              // 0x09AC (0x0004) [0x0000000000000000]               
	uint32_t                                           bLastHasShieldVar : 1;                         // 0x09B0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsTyping : 1;                                 // 0x09B0 (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net)
	uint32_t                                           bForcedOverlay : 1;                            // 0x09B0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bIsInvulnerable : 1;                           // 0x09B0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bShieldAbsorb : 1;                             // 0x09B0 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bInitializingBodyComposition : 1;              // 0x09B0 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bUsingFootIK : 1;                              // 0x09B0 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bNotifyBeginFalling : 1;                       // 0x09B0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bNotifyStopFalling : 1;                        // 0x09B0 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bNotifyBeginWalking : 1;                       // 0x09B0 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bNotifyStopWalking : 1;                        // 0x09B0 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bShouldRagdollAfterDeathAnim : 1;              // 0x09B0 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bLowLODDeath : 1;                              // 0x09B0 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bUnderFullRagdollControl : 1;                  // 0x09B0 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bDeathRagdollInitialized : 1;                  // 0x09B0 (0x0004) [0x0000000000002000] [0x00004000] (CPF_Transient)
	uint32_t                                           bBlendingIntoDeathRagdoll : 1;                 // 0x09B0 (0x0004) [0x0000000000002000] [0x00008000] (CPF_Transient)
	uint32_t                                           bWeaponParticleAttachmentsHidden : 1;          // 0x09B0 (0x0004) [0x0000000000002000] [0x00010000] (CPF_Transient)
	uint32_t                                           bBehaviorProvidersInitialized : 1;             // 0x09B0 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bPerformingSharedWeaponAction : 1;             // 0x09B0 (0x0004) [0x0000000000002000] [0x00040000] (CPF_Transient)
	uint32_t                                           bPendingSharedWeaponActionComplete : 1;        // 0x09B0 (0x0004) [0x0000000000002000] [0x00080000] (CPF_Transient)
	uint32_t                                           bCombatHidden : 1;                             // 0x09B0 (0x0004) [0x0000000100002020] [0x00100000] (CPF_Net | CPF_Transient)
	uint32_t                                           bShouldUseAimAtActor : 1;                      // 0x09B0 (0x0004) [0x0000000000000020] [0x00200000] (CPF_Net)
	uint32_t                                           bShouldUseAimAtVector : 1;                     // 0x09B0 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bAlignToSurfaceNormal : 1;                     // 0x09B0 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bWasLastDamageACriticalHit : 1;                // 0x09B0 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bKilledByTechEffect : 1;                       // 0x09B0 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bUnderMatineeControl : 1;                      // 0x09B0 (0x0004) [0x0000000000002000] [0x04000000] (CPF_Transient)
	uint32_t                                           bUnderMatineeAnimControl : 1;                  // 0x09B0 (0x0004) [0x0000000000002000] [0x08000000] (CPF_Transient)
	uint32_t                                           bResetAnimTree : 1;                            // 0x09B0 (0x0004) [0x0000000000002000] [0x10000000] (CPF_Transient)
	uint32_t                                           FaceFXSpeechPending : 1;                       // 0x09B0 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bAlwaysPostRender : 1;                         // 0x09B0 (0x0004) [0x0000000000000020] [0x40000000] (CPF_Net)
	uint32_t                                           bAIDEBUG_MarkCurrentPawn : 1;                  // 0x09B0 (0x0004) [0x0000000000000000] [0x80000000] 
	uint32_t                                           bPlayerFellIntoPlayerKillVolume : 1;           // 0x09B4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bTearOffAfterDeath : 1;                        // 0x09B4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bGibbed : 1;                                   // 0x09B4 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bPlayDying : 1;                                // 0x09B4 (0x0004) [0x0000000100000020] [0x00000008] (CPF_Net)
	uint32_t                                           bDidServerGibPawn : 1;                         // 0x09B4 (0x0004) [0x0000000100000020] [0x00000010] (CPF_Net)
	uint32_t                                           bDestroyPawnAfterGoreEffectDeath : 1;          // 0x09B4 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bBreakConstraintsOnRagdoll : 1;                // 0x09B4 (0x0004) [0x0000000000000020] [0x00000040] (CPF_Net)
	uint32_t                                           bTakingRadiusDamage : 1;                       // 0x09B4 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bMuteHitSound : 1;                             // 0x09B4 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bMeleeWeaponAttached : 1;                      // 0x09B4 (0x0004) [0x0000000100000020] [0x00000200] (CPF_Net)
	uint32_t                                           bHideAttachedWeapon : 1;                       // 0x09B4 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bBigBoy : 1;                                   // 0x09B4 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bGaveUp : 1;                                   // 0x09B4 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bAllowProjectilesToCollideWithSkeletalMesh : 1;// 0x09B4 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bSwitchingSeats : 1;                           // 0x09B4 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bWantsFullLOSTrace : 1;                        // 0x09B4 (0x0004) [0x0000000000002000] [0x00008000] (CPF_Transient)
	uint32_t                                           bCanUse : 1;                                   // 0x09B4 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bBeingHealed : 1;                              // 0x09B4 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bRMWantsToMove : 1;                            // 0x09B4 (0x0004) [0x0000000000000020] [0x00040000] (CPF_Net)
	uint32_t                                           bRMForceStop : 1;                              // 0x09B4 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bStuck : 1;                                    // 0x09B4 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bSkelUpdate_SkipWhileIdle : 1;                 // 0x09B4 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bHitReactionActive : 1;                        // 0x09B4 (0x0004) [0x0000000000002000] [0x00400000] (CPF_Transient)
	uint32_t                                           bPerformingUseAction : 1;                      // 0x09B4 (0x0004) [0x0000000100002020] [0x00800000] (CPF_Net | CPF_Transient)
	uint32_t                                           bReleasedOnDemandPackage : 1;                  // 0x09B4 (0x0004) [0x0000000000002000] [0x01000000] (CPF_Transient)
	uint32_t                                           bHasJumped : 1;                                // 0x09B4 (0x0004) [0x0000000000002000] [0x02000000] (CPF_Transient)
	float                                              IntrinsicArmor;                                // 0x09B8 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              IntrinsicArmorBaseValue;                       // 0x09BC (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            IntrinsicArmorModifierStack;                   // 0x09C0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	EWeaponHand                                        WeaponHand;                                    // 0x09D0 (0x0001) [0x0000000000000000]               
	ECollisionType                                     BodyDefaultCollision;                          // 0x09D1 (0x0001) [0x0000000000002000] (CPF_Transient)
	EPhysics                                           ServerPhysics;                                 // 0x09D2 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            HolsteredWeaponSlotUsed;                       // 0x09D3 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            CurrentNumOfHolsteredWeaponSlots;              // 0x09D4 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            GearHiddenState;                               // 0x09D5 (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            WaitingForWeaponSlots;                         // 0x09D6 (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            ForceTechDeathIndex;                           // 0x09D7 (0x0001) [0x0000000000000020] (CPF_Net)     
	EFlinchType                                        CurrentFlinchType;                             // 0x09D8 (0x0001) [0x0000000000002000] (CPF_Transient)
	EBodyWeaponAction                                  CurrentBodyWeaponAction;                       // 0x09D9 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            JumpLandImpactReplicationCount;                // 0x09DA (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            bOvercharged;                                  // 0x09DB (0x0001) [0x8000000000002000] (CPF_Transient)
	uint8_t                                            bOverchargedBaseValue;                         // 0x09DC (0x0001) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            bOverchargedModifierStack;                     // 0x09E0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class USkeletalMeshComponent*                      HeadMesh;                                      // 0x09F0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x09F8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              SlopeBoostFriction;                            // 0x0A00 (0x0004) [0x0000000000000000]               
	float                                              OldLocationZ;                                  // 0x0A04 (0x0004) [0x0000000000000000]               
	float                                              MeshSlopeOffset;                               // 0x0A08 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MeshSlopeOffsetPercent;                        // 0x0A0C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxMeshSlopeOffsetPercent;                     // 0x0A10 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TerminalVelocityScaling;                       // 0x0A14 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              TerminalVelocityScalingBaseValue;              // 0x0A18 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            TerminalVelocityScalingModifierStack;          // 0x0A20 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastPainSound;                                 // 0x0A30 (0x0004) [0x0000000000000000]               
	float                                              DeathTime;                                     // 0x0A34 (0x0004) [0x0000000000000000]               
	int32_t                                            LookYaw;                                       // 0x0A38 (0x0004) [0x0000000000000000]               
	class UBodyClassDeathDefinition*                   MyDeathDef;                                    // 0x0A40 (0x0008) [0x0000000100000020] (CPF_Net)     
	class USpecialMoveDefinition*                      CurrentDeathAnimation;                         // 0x0A48 (0x0008) [0x0000000000000000]               
	float                                              DeathImpactAngle;                              // 0x0A50 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UClass*                                      BloodEmitterClass;                             // 0x0A58 (0x0008) [0x0000000000000000]               
	struct FHolsteredGearDisplaySlot                   HolsteredItemDisplaySlots[0x4];                // 0x0A60 (0x0040) [0x0000000000002000] (CPF_Transient)
	struct FHolsteredGearDisplaySlot                   HolsteredWeaponDisplaySlots[0x3];              // 0x0AA0 (0x0030) [0x0000000000002000] (CPF_Transient)
	class AWillowWeapon*                               HolsteredWeaponSlots[0x3];                     // 0x0AD0 (0x0018) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class UBodyClassDefinition*                        BodyClass;                                     // 0x0AE8 (0x0008) [0x0000000000000000]               
	class UBodyClassDefinition*                        AppliedBodyClass;                              // 0x0AF0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UBodyProviderDefinition*                     BodyProvider;                                  // 0x0AF8 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FColor                                      ShieldColor;                                   // 0x0B00 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            ShouldBulletsPenetrateEnemies;                 // 0x0B04 (0x0004) [0x4000000000000000]               
	float                                              BulletPenetratedEnemyDamageScale;              // 0x0B08 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletPenetratedEnemyDamageScaleBaseValue;     // 0x0B0C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletPenetratedEnemyDamageScaleModifierStack; // 0x0B10 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectionOffEnemyChance;                // 0x0B20 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletReflectionOffEnemyChanceBaseValue;       // 0x0B24 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletReflectionOffEnemyChanceModifierStack;   // 0x0B28 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectedOffEnemyDamageScale;            // 0x0B38 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletReflectedOffEnemyDamageScaleBaseValue;   // 0x0B3C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletReflectedOffEnemyDamageScaleModifierStack;// 0x0B40 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectionOffSelfChance;                 // 0x0B50 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              BulletReflectionOffSelfChanceBaseValue;        // 0x0B54 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            BulletReflectionOffSelfChanceModifierStack;    // 0x0B58 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectedOffSelfDamageScale;             // 0x0B68 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletReflectedOffSelfDamageScaleBaseValue;    // 0x0B6C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletReflectedOffSelfDamageScaleModifierStack;// 0x0B70 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletReflectedOffSelfDamageTakenScale;        // 0x0B80 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletReflectedOffSelfDamageTakenScaleBaseValue;// 0x0B84 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletReflectedOffSelfDamageTakenScaleModifierStack;// 0x0B88 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletRicochetTowardsEnemyChance;              // 0x0B98 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletRicochetTowardsEnemyChanceBaseValue;     // 0x0B9C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletRicochetTowardsEnemyChanceModifierStack; // 0x0BA0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BulletRicochetedTowardsEnemyDamageScale;       // 0x0BB0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              BulletRicochetedTowardsEnemyDamageScaleBaseValue;// 0x0BB4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            BulletRicochetedTowardsEnemyDamageScaleModifierStack;// 0x0BB8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedMeleeDamageAdded;                    // 0x0BC8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedMeleeDamageAddedBaseValue;           // 0x0BCC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeDamageAddedModifierStack;       // 0x0BD0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              PlayerAvertDeathChance;                        // 0x0BE0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              PlayerAvertDeathChanceBaseValue;               // 0x0BE4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            PlayerAvertDeathChanceModifierStack;           // 0x0BE8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              FireRateMultiplier;                            // 0x0BF8 (0x0004) [0x0000000000000000]               
	float                                              WeaponSwapTimeMultiplier;                      // 0x0BFC (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              WeaponSwapTimeMultiplierBaseValue;             // 0x0C00 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            WeaponSwapTimeMultiplierModifierStack;         // 0x0C08 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            bReloading;                                    // 0x0C18 (0x0004) [0x4000000000000000]               
	class TArray<struct FItemPoolInfo>                 ItemPoolList;                                  // 0x0C20 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<class AWillowMind*>                   Trackers;                                      // 0x0C30 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AActor*                                      AimAtActor;                                    // 0x0C40 (0x0008) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     AimAtVector;                                   // 0x0C48 (0x000C) [0x0000000000000000]               
	float                                              TakeHitTime;                                   // 0x0C54 (0x0004) [0x0000000000000000]               
	float                                              MaxFootstepEffectDistance;                     // 0x0C58 (0x0004) [0x0000000000000000]               
	int32_t                                            CustomSpecialAbilityProperty1;                 // 0x0C5C (0x0004) [0x4000000000000020] (CPF_Net)     
	class UAnimNodeBlendPerBone*                       ArmBoneBlend;                                  // 0x0C60 (0x0008) [0x0000000000002000] (CPF_Transient)
	class USkelControlLimb*                            LeftHandIK;                                    // 0x0C68 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FAIHoldData>                   LeftHandIKHolds;                               // 0x0C70 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UInterpGroup*                                MatineeInterpGroup;                            // 0x0C80 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              LookAtSpeedOverride;                           // 0x0C88 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class UWillowAnimNodeAimOffset*                    AimOffset;                                     // 0x0C90 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowSkelControl_LookAtActor*              HeadLookAt;                                    // 0x0C98 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LastAnimSetsCount;                             // 0x0CA0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class UAnimSet*>                      WeaponAnimSets;                                // 0x0CA8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            DesiredMeshYawOffset;                          // 0x0CB8 (0x0004) [0x4000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            MeshYawOffset;                                 // 0x0CBC (0x0004) [0x4000000000002000] (CPF_Transient)
	class TArray<struct FName>                         TriggeredDamageReactions;                      // 0x0CC0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UHitRegionHelper*                            MyHitRegionHelper;                             // 0x0CD0 (0x0008) [0x0000000000000000]               
	struct FName                                       HitRegionModifierName;                         // 0x0CD8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              TargetPriority;                                // 0x0CE0 (0x0004) [0x8000000000002001] (CPF_Edit | CPF_Transient)
	float                                              TargetPriorityBaseValue;                       // 0x0CE4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            TargetPriorityModifierStack;                   // 0x0CE8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ActorSpawnCost;                                // 0x0CF8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FDamageEventSummary                         FullRadiusDamageSummary;                       // 0x0D00 (0x0220) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FInstanceData2                              InstanceDataState;                             // 0x0F20 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FCompressedBodyState2                       CompressedBodyState;                           // 0x0F30 (0x0010) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class UCoordinatedEffectDefinition*                ReplicatedCFX[0x4];                            // 0x0F40 (0x0020) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class TArray<struct FAttributeBaseValueData>       AttributeStartingValues;                       // 0x0F60 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UInstancedDesignerAttribute*>   DesignerAttributes;                            // 0x0F70 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            NumReplicatedDesignerAttributes;               // 0x0F80 (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FReplicatedDesignerAttributeState           ReplicatedDesignerAttributes[0x14];            // 0x0F88 (0x01E0) [0x0000000100000020] (CPF_Net)     
	struct FBloodSplatterTrace                         ReplicatedBloodSplatter;                       // 0x1168 (0x0028) [0x0000000100000020] (CPF_Net)     
	float                                              CommerceMarkup;                                // 0x1190 (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FMeleeOverTimeState                         MeleeState;                                    // 0x1198 (0x0050) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FGoreEffect                                 ReplicatedGoreEffect;                          // 0x11E8 (0x0030) [0x0000000100000020] (CPF_Net)     
	struct FReplicatedHitRegionImpactEffect            ReplicatedImpactEffects[0x6];                  // 0x1218 (0x0180) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            NextReplicatedImpactEffect;                    // 0x1398 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FReplicatedHitReactionData                  ReplicatedSoftFlinch;                          // 0x13A0 (0x0010) [0x0000000100000020] (CPF_Net)     
	class AWillowLightProjectileManager*               LightProjMgr;                                  // 0x13B0 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class AWillowLightProjectileManager*               OffHandLightProjMgr;                           // 0x13B8 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class UWillowImpactDefinition*                     ExtraImpact_FirstShot;                         // 0x13C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowImpactDefinition*                     ExtraImpact_LastShot;                          // 0x13C8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              OnGround;                                      // 0x13D0 (0x0004) [0x4000000000000000]               
	float                                              CurrentPawnSpeed;                              // 0x13D4 (0x0004) [0x4000000000000000]               
	float                                              VelocityDotProduct;                            // 0x13D8 (0x0004) [0x4000000000000000]               
	float                                              AccelerationDotProduct;                        // 0x13DC (0x0004) [0x4000000000000000]               
	struct FVector                                     DeathRagDollMomentum;                          // 0x13E0 (0x000C) [0x0000000000000000]               
	struct FName                                       DeathHitBoneName;                              // 0x13EC (0x0008) [0x0000000000000000]               
	float                                              RD_NextSlideTime;                              // 0x13F4 (0x0004) [0x0000000000000000]               
	float                                              RD_NextImpactTime;                             // 0x13F8 (0x0004) [0x0000000000000000]               
	float                                              RD_NextImpactAkEventTime;                      // 0x13FC (0x0004) [0x0000000000000000]               
	int32_t                                            SprintFootstepCount;                           // 0x1400 (0x0004) [0x0000000000000000]               
	int32_t                                            StrideFootstepCount;                           // 0x1404 (0x0004) [0x0000000000000000]               
	class TArray<struct FScriptDelegate>               IgnoreBlockingByDelegates;                     // 0x1408 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UStaticMeshComponent*                        MeleeWeaponMesh;                               // 0x1418 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              HitRegionHealthScaleAttribute;                 // 0x1420 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              HitRegionHealthScaleAttributeBaseValue;        // 0x1424 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            HitRegionHealthScaleAttributeModifierStack;    // 0x1428 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ForcedShotZMomentum;                           // 0x1438 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ForcedShotZMomentumBaseValue;                  // 0x143C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ForcedShotZMomentumModifierStack;              // 0x1440 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              SecondsBeforeConsideringRagdollRemoval;        // 0x1450 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SecondsBeforeVisibleRagdollRemoval;            // 0x1454 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SecondsBetweenRagdollRemovalAttempts;          // 0x1458 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SecondsBeforePhysicsShutsDown;                 // 0x145C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RBForceSleepTime;                              // 0x1460 (0x0004) [0x0000000000000000]               
	struct FMaterialScalarFadeReplication              MatScalarFadeInfo;                             // 0x1464 (0x0018) [0x0000000100000020] (CPF_Net)     
	float                                              MatScalarFadeStartTime;                        // 0x147C (0x0004) [0x0000000000000000]               
	float                                              MatScalarFadeCurValue;                         // 0x1480 (0x0004) [0x0000000000000000]               
	float                                              MatScalarLastTick;                             // 0x1484 (0x0004) [0x0000000000000000]               
	float                                              MatScalarTickRate;                             // 0x1488 (0x0004) [0x0000000000000000]               
	int32_t                                            ShieldEffectCount;                             // 0x148C (0x0004) [0x0000000000000000]               
	int32_t                                            BloodEffectCount;                              // 0x1490 (0x0004) [0x0000000000000000]               
	float                                              ImpactEffectTimestamp;                         // 0x1494 (0x0004) [0x0000000000000000]               
	int32_t                                            NumSuccessiveInjuries;                         // 0x1498 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            NumSuccessiveInjuriesBaseValue;                // 0x149C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            NumSuccessiveInjuriesModifierStack;            // 0x14A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastInjuryTime;                                // 0x14B0 (0x0004) [0x0000000000000000]               
	float                                              MostRecentShieldDamageTaken;                   // 0x14B4 (0x0004) [0x4000000000000000]               
	class UITargetable*                                TargetPatsy_Object;                            // 0x14B8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UITargetable*                                TargetPatsy_Interface;                         // 0x14C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumAICurrentlyTargeting;                       // 0x14C8 (0x0004) [0x4000000000002000] (CPF_Transient)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x14CC (0x0004) [0x0000000000000000]               
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;               // 0x14D0 (0x000C) [0x0000000100000020] (CPF_Net)     
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                       // 0x14E0 (0x0010) [0x0000000100000020] (CPF_Net)     
	int32_t                                            NumReplicatedNouns;                            // 0x14F0 (0x0004) [0x0000000000000020] (CPF_Net)     
	class TArray<struct FNounAttributeState>           NounState;                                     // 0x14F8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FReplicatedNounAttributeState               ReplicatedNouns[0x14];                         // 0x1508 (0x0140) [0x0000000000000020] (CPF_Net)     
	class UWillowCloakComponent*                       WillowCloakComponent;                          // 0x1648 (0x0008) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              NextSoftFlinchTime;                            // 0x1650 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextHardFlinchTime;                            // 0x1654 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class UIRBCollisionListener*>         RBCollisionListeners;                          // 0x1658 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UIRBCollisionListener*>         RBCollisionListenersToRemove;                  // 0x1668 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AWillowPawn*                                 CharmedChild;                                  // 0x1678 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 CharmedParent;                                 // 0x1680 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            SimpleAnimState;                               // 0x1688 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RepSimpleAnimState;                            // 0x168C (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class TArray<struct FSimpleAnimData>               SimpleAnimInfo;                                // 0x1690 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UWillowStanceComponent*                      WillowStanceComponent;                         // 0x16A0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              BarrelSourceTimerEnd;                          // 0x16A8 (0x0004) [0x0000000000000000]               
	float                                              PlantSourceTimerEnd;                           // 0x16AC (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentBreathingLoopIndex;                     // 0x16B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FAkPlayingInfo                              BreathingLoopPlayingInfo;                      // 0x16B8 (0x0010) [0x0000000000082000] (CPF_Transient | CPF_Component)
	int32_t                                            GameStage;                                     // 0x16C8 (0x0004) [0x4000000000000000]               
	class UEnvironmentTagDefinition*                   CurrentEnvironmentTag;                         // 0x16D0 (0x0008) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class UEnvironmentTagDefinition*                   CurrentAnimEnvironmentTag;                     // 0x16D8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              OverrideNavSize;                               // 0x16E0 (0x0004) [0x0000000000000000]               
	float                                              OverrideNavHeight;                             // 0x16E4 (0x0004) [0x0000000000000000]               
	float                                              MinStuckTime;                                  // 0x16E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxStuckSpeed;                                 // 0x16EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartStuckTime;                                // 0x16F0 (0x0004) [0x0000000000000000]               
	struct FVector                                     StartStuckLoc;                                 // 0x16F4 (0x000C) [0x0000000000000000]               
	class USpecialMoveDefinition*                      EmoteAnim;                                     // 0x1700 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FSkeletalThrottleData                       SkelThrottleData;                              // 0x1708 (0x0014) [0x0000000000002000] (CPF_Transient)
	float                                              HitReactionStartTime;                          // 0x171C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FHitReactionReplicatedData                  HitReaction;                                   // 0x1720 (0x0018) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            FrameOfLastReflection;                         // 0x1738 (0x0004) [0x0000000000000000]               
	float                                              TimeOfLastReflection;                          // 0x173C (0x0004) [0x0000000000000000]               
	class UWillowUseActionComponent*                   UseActionComponent;                            // 0x1740 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	struct FReplicatedSpeakStateData                   ReplicatedSpeakState;                          // 0x1748 (0x0030) [0x0000000100002020] (CPF_Net | CPF_Transient)
	float                                              RandomAudioVariationValue;                     // 0x1778 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FoleyWaterDepth;                               // 0x177C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FoleyPreviousZ;                                // 0x1780 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FoleyDeltaZ;                                   // 0x1784 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FoleyBaseVelocityAdjustment;                   // 0x1788 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAkComponent*                                MainFoleyAkComponent;                          // 0x1790 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterWakePSC;                                  // 0x1798 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              PreviousCharacterRelativeSpeed;                // 0x17A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             __DeathFadeCompleteDelegate__Delegate;         // 0x17A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __IgnoreBlockingByDelegate__Delegate;          // 0x17B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPawn");
		}

		return uClassPointer;
	};

	bool GetDebugUsingAIInspector();
	void PlayUnprovokedAnim();
	void PlayProvokedAnim(class AActor* Provoker);
	class APawn* GetPrimaryUser();
	void DoneDodging();
	void TryToDodge(const struct FVector& BulletLoc, class AActor* shooter, bool optionalBProjectile);
	float StartLeapAtActor(class AActor* Target, const struct FTrajectoryData& Options);
	void UpdateLookAtTarget();
	void SetIsCharging(bool In);
	bool GetIsCharging();
	EMoveStyle GetMoveStyle();
	void MatchTransform(const struct FVector& StartLoc, const struct FRotator& StartRot);
	void SetWillowMind(class AWillowMind* In);
	class AWillowMind* GetWillowMind();
	void SetTransformType(EAITransformed InTT);
	EAITransformed GetTransformType();
	void CheckInjured(const struct FVector& HitLocation, class UBodyHitRegionDefinition* HitRegion, bool bDot, class AController* InstigatedBy);
	int32_t GetNumLevelUps();
	void UpdateClan();
	void SetClanDefinition(class UWillowClanDefinition* InClanDef);
	class UAIClassDefinition* GetAIClass();
	class AWillowPlayerController* GetPlayerMaster();
	void eventOnTimerEvent(EBehaviorTimerEvent EventType, const struct FBehaviorParameters& optionalEventData);
	void eventOnNewPrimaryUser();
	void eventCancelTauntTimer();
	void eventStartTauntTimer();
	void SetUsableSimple(int32_t Index, uint8_t Value);
	void PostSpawn();
	void UpdatePlayerMaster();
	void SetPlayerMasterPRI(class APlayerReplicationInfo* In);
	class UMaterialInstance* GetDebugPawnMarkerInst();
	void ConditionalCreateDebugPawnMarkerInst(class UMaterial* ParentMaterial);
	void UnStagger();
	void SetDebugUsingAIInspector(bool In);
	void eventStagger(class APawn* optionalStaggerInstigator);
	bool GetAwardedExperienceForKill();
	void SetAwardedExperienceForKill(bool In);
	void OnAISetItemTossTarget(class UWillowSeqAct_AISetItemTossTarget* inAction);
	void SetMySpawnPoint(class ASpawnPoint* In);
	void SetMountedInstanceDataName(const struct FName& InName);
	void Dismount();
	class AWillowPawn* GetMount();
	bool IsMounted();
	void AddTossTargetActor(class AActor* InTargetActor);
	void AILevelUp();
	static bool IsDebugAIFlightEnabled();
	static void ToggleDebugAIFlight();
	void eventOnAttachPlayerPawnToBase(class USeqAct_AttachPlayerPawnToBase* Action);
	void OnNoLongerTargetedByAI(class AWillowMind* AIMind);
	void OnTargetedByAI(class AWillowMind* AIMind);
	void DumpAnimSets(const class FString& optionalEventStr);
	void SetWeaponSnagFailsafeTimer(float Value);
	bool IsOnGroundOrShortFall();
	float GetLastCombatActionTime();
	void SetLastCombatActionTime(float In);
	bool IsAwaitingRespawn();
	void UpdatePreferredColors();
	bool CanContinueSprinting();
	bool DoSprint(bool bIsUpdating, bool bFromInput);
	bool CanSprint();
	void eventRaiseFirstPersonHands();
	void eventLowerFirstPersonHands();
	void SetViewingThirdPersonMenu(bool bNewViewingThirdPersonMenu, bool bIsStatusMenu);
	class AWillowPlayerController* GetPlayerController();
	bool ViewingThirdPersonMenu();
	bool GrabWeaponPickup();
	struct FVector GetTransitionLandmarkOffset();
	void ToggleFirstPersonWeaponVisibility();
	void StopWeaponRecoilAnim(bool bStopPrimaryHand, bool bStopOffHand);
	void SetExtraMuzzleEffect(EBulletFromClip BulletFromClip, const struct FExtraMuzzleEffect& NewEffect);
	bool IsPlayerPawnClass();
	bool IsAIPawnClass();
	void ReceivedAllInitialWeaponsFailsafe();
	void ConsumeProjectileResource(class UProjectileDefinition* ProjectileDefinition);
	class APawn* FindMeleeTarget(float MaxLungeDistance);
	bool CanLunge(class AActor* LungeTarget);
	void StopSharedWeaponActions(float optionalDelay);
	void StartSharedWeaponActions();
	void PerformSharedWeaponActions(float TimerDuration, const struct FName& optionalTimerFunctionName);
	class AWillowProjectile* SpawnProjectile(class UProjectileDefinition* ProjectileDef, bool optionalBLeftHand, bool optionalBConsumeResource, bool optionalBNoVelocity);
	int32_t GetProjectileExpLevelFromPlayerLevel();
	int32_t GetProjectileExpLevelFromEquipmentLevel(EEquipmentLoc EquipmentLocation);
	bool PerformReload(bool optionalBOnlyReloadIfNeeded);
	void CheckReload();
	void WeaponActionComplete();
	struct FResourcePoolReference GetResourcePoolForResourceDefinition(class UResourceDefinition* Resource, bool optionalBCreatePoolIfOneDoesntExist);
	bool HasReleasedOnDemandPackage(const struct FName& OnDemandPackageName);
	void ReleaseOnDemandPackageReference();
	void RespawnPawn();
	void OnShopClosing(class AWillowPlayerController* WPC);
	class UISkillInstigator* GetSkillInstigator();
	float GetFallingDamageScale();
	void TryBlink();
	void PlayPostEnvironmentTransitionAnimation();
	float PlayPreEnvironmentTransitionAnimation();
	bool RequiresEnvironmentTransitionAnimation(class UEnvironmentTagDefinition* FromEnvironmentTag, class UEnvironmentTagDefinition* ToEnvironmentTag);
	void EnvironmentTransitionAnimFinished();
	void SetEnvironmentTag(class UEnvironmentTagDefinition* InEnvironmentTag);
	void RemoveEnvironmentTag(class UEnvironmentTagDefinition* InEnvironmentTag);
	void AddEnvironmentTag(class UEnvironmentTagDefinition* InEnvironmentTag);
	void PlayExtraImpactEffects(EBulletFromClip BulletFromClip, struct FImpactInfo& InImpactInfo);
	void SetExtraImpactEffect(EBulletFromClip BulletFromClip, class UWillowImpactDefinition* Definition);
	bool MovementTransitionNodeIsIdle();
	bool PrismNodeIsActive();
	ERootMotionRotationMode GetDefaultRootMotionRotationMode();
	ERootMotionMode GetDefaultRootMotionMode();
	void eventClientShieldTriggered();
	void eventShieldTriggered();
	bool IsBeingHealed();
	void SetBeingHealed(bool bNewBeingHealed);
	void UpdateHitReaction();
	void StartHitReaction();
	void TryStartHitReaction(class AController* InstigatedBy, class UDamageTypeDefinition* DamageType, struct FVector& HitLocation, struct FVector& Momentum, struct FTraceHitInfo& HitInfo);
	void ReleaseLeftHandIK(const struct FName& HoldName, class UObject* IKTag);
	void HoldLeftHandIK(const struct FName& HoldName, class UObject* IKTag);
	void CheckLeftHandIK();
	class APawn* GetParent();
	void Uncharm();
	void Charm(class AWillowPawn* NewCharmedParent);
	bool IsCharmed();
	float GetFireIntervalChanceModifier();
	void eventNotifyRBCollisionListeners(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactSide, struct FCollisionImpactData& RigidCollisionData);
	void FinishRemovingRBCollisionListeners();
	void RemoveRBCollisionListener(class UIRBCollisionListener* listener);
	void AddRBCollisionListener(class UIRBCollisionListener* listener);
	void ScrapeStances(class TArray<class UStanceTypeDefinition*>& OutStances);
	class UBodyClassDefinition* GetStanceBody();
	float GetHeadLookMinDot();
	struct FVector GetAimDirection();
	struct FVector GetPivotPoint(bool optionalBForFiring);
	bool CanUseAimOffsets();
	void CheckHitReaction(class AController* InstigatedBy, class UClass* DamageType, class UDamagePipeline* Pipeline, struct FVector& HitLocation, struct FVector& Momentum);
	void HardFlinchFinished();
	void SoftFlinchFinished();
	struct FBasedPosition GetNearestPositionOnNavMesh();
	float GetVertDistToNavMesh();
	float GetDistToNavMesh();
	void SetCloakComponent(class UCloakComponent* InComponent);
	void GetOutTheWay(class APawn* OtherPawn);
	void eventStuckOnPawn(class APawn* OtherPawn);
	void OnInterpPawn(class UWillowSeqAct_InterpPawn* Action);
	void RemoveIgnoreBlockingByDelegate(const struct FScriptDelegate& TheIgnoreBlockingByDelegate);
	void AddIgnoreBlockingByDelegate(const struct FScriptDelegate& TheIgnoreBlockingByDelegate);
	bool IgnoreBlockingByDelegate(class AActor* Other);
	void NotifyActionSkillFakePause(bool bPaused);
	void NotifyActionSkillWeaponSwitched(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void NotifyActionSkillOfKilledEnemy(class AWillowPawn* aTargetPawn);
	void ToggleActionSkillDebug();
	void HitByVehicle(class AVehicle* Collider);
	void ClientSetSwitchingSeats(bool bInSwitchingSeats);
	void SetSwitchingSeats(bool bInSwitchingSeats);
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* optionalTechFilter, EScriptedKillType optionalDeathType);
	void CrushedByActor(class AActor* Other);
	void eventEncroachedBy(class AActor* Other);
	void eventStartReplicatedMaterialScalarFade();
	void Behavior_UseMaterialScalarFadeForGoreDeath(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime, bool bDestroyActorAfterGoreEffect);
	void Behavior_MaterialScalarFade(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime);
	void Behavior_RegisterTargetable(bool bUnregister);
	class UBehaviorAliasLookupDefinition* BehaviorAlias_GetLookupDefinition();
	void GetSnapRegion(struct FTargetSnapRegion& SnapRegion);
	void GetAuxiliaryTargetableLocations(class TArray<struct FVector>& AuxLocations);
	struct FVector GetTargetableLocation();
	void RemoveSoldInventory(class AWillowInventory* SoldItem);
	void GetWeaponList(class AWillowPlayerController* WPC, class TArray<class AWillowWeapon*>& WeaponList);
	void SetHandIKTarget(int32_t Hand, class UObject* optionalTargetRef, const struct FName& optionalTargetAttachmentName);
	void EnableHandIK(int32_t Hand, bool bEnableIK);
	class UWillowSkelControlHandPlacement* FindHandIKSelControl(int32_t Hand);
	void DetachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void AttachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void MeleeMeshPreRemoveNotify(class UStaticMeshComponent* MeleeMeshComp);
	void MeleeMeshPostInitNotify(class UStaticMeshComponent* MeleeMeshComp);
	class UObject* GetAttributeContextSource();
	class AWillowPawn* GetAWillowPawn();
	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	struct FVector GetMeleeEffectsImpactDirection(const struct FName& RefName);
	void GetMeleeState(float& StartTime, float& LastTime, struct FVector& StartLoc, struct FRotator& StartRot);
	bool ShouldIgnoreInstigatorVelocity();
	bool HasActorAlreadyBeenHitByMelee(class AActor* HitActor);
	void AddActorToListOfHitActors(class AActor* HitActor);
	void EndMeleeOverTime();
	void BeginMeleeOverTime(class UMeleeDefinition* MeleeDefinition, float optionalOverrideEffectsClockFaceDirection, const struct FName& optionalOverrideStartSocket);
	float GetMeleeAttackerMass();
	void GetMeleeTraceSourceLocationAndRotation(struct FVector& OutTraceStart, struct FRotator& OutTraceStartRotation);
	class APawn* GetMeleeInstigator();
	class AActor* GetMeleeTraceSourceActor();
	class UFaceFXAsset* eventGetFaceFXAsset();
	int32_t GetSellingPriceForInventory(class AWillowInventory* InventoryForSale, class AController* Player, int32_t optionalQuantity);
	ECurrencyType GetCurrencyTypeInventoryIsSoldIn(class AWillowInventory* InventoryForSale);
	void UpdateShieldVars();
	void GetHealthInfo(struct FHealthInfo& OutHealthInfo);
	void GetExpInfo(int32_t& ExpLevelValue);
	void SetPatsy(class UITargetable* NewPatsy);
	class UITargetable* GetPatsy();
	bool IsValidHomingTarget();
	float GetTargetingModifier();
	bool DisplayParentInfo();
	class UImpactDefinition* GetUntouchImpact();
	class UImpactDefinition* GetTouchImpact();
	bool CanSplash();
	void eventTraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, const struct FQWord& TraceFlags, float TouchTime);
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventGetUniqueInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void DisplayDebugItems(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void ClearEnemyTargetQueues();
	void ClientStartFade(float InFadeOpacity, float InFadeDuration, const struct FColor& optionalInFadeColor);
	void NotifyTeleported();
	void KilledEnemy(class AWillowPawn* aTargetPawn);
	void ResurrectAtLocation(class AActor* TeleportLoc, EResurrectReason ResurrectReason, class APlayerReplicationInfo* optionalDeadPlayerPRI);
	void PlacePlayerInLevel(bool optionalBSkipHoldingCell);
	void ResurrectPlayer(EResurrectReason optionalResurrectReason, bool optionalBSkipHoldingCell, class APlayerReplicationInfo* optionalDeadPlayerPRI);
	class ATeleporterDestination* GetBestPlayerPlacementPoint(bool optionalBLevelTravel);
	bool eventHandleHealthDepleted(class AController* InstigatedBy, class UClass* DamageType, const struct FVector& HitLocation, class UIDamageCauser* DamageCauser, const struct FTraceHitInfo& optionalHitInfo, class UDamagePipeline* optionalPipeline);
	void CausePlayerDeath(bool bFellIntoPlayerKillVolume);
	void OutOfDuelBounds();
	void SetBaseEyeheight();
	void PreKilledBy(class APawn* EventInstigator);
	void HeuristicPlayDeath(class UDamageTypeDefinition* DamageType, EScriptedKillType KillType);
	void eventStartDriving(class AVehicle* V, bool optionalSkipAnim);
	void eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void eventRootMotionModeChanged(class USkeletalMeshComponent* SkelComp);
	void SetMovementPhysics();
	bool IsHardAttached();
	void AttachActorTo(class AActor* AttachedActor, const struct FName& BoneName);
	void StealAmmo(class AController* DamageInstigator, class UClass* DamageType);
	void BigBoyTakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class UIDamageCauser* DamageCauser, class UDamagePipeline* optionalPipeline);
	bool eventTakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class UIDamageCauser* DamageCauser, const class TArray<struct FName>& Bones, class UDamagePipeline* optionalPipeline);
	struct FVector BigBoyTrace(const struct FVector& Start, class UIDamageCauser* DamageCauser, struct FTraceHitInfo& HitInfo);
	void AddRadiusDamageSummary(const struct FDamageEventSummary& OtherSummary);
	void InitRadiusDamageSummary();
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class UIDamageCauser* DamageCauser, float optionalDamageFalloffExponent, class UDamagePipeline* optionalPipeline);
	void EnumerateHitRegions(bool bIsRadiusDamage, class TArray<class UBodyHitRegionDefinition*>& HitRegions);
	bool eventHealDamage(float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, bool optionalBIsShieldRestore);
	void TookDamageFromFriendly(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	struct FName GetTransformedKillStat();
	void FireDamagedEvents(class AController* InstigatedBy, class UIDamageCauser* DamageCauser, const struct FDamageEventSummary& Damage, int32_t DamageTags);
	void ProcessDamageTakenSkillEvents(class UDamagePipeline* Pipeline, class AController* InstigatedBy, class UClass* DamageType);
	void ProcessDamageDealtSkillEvents(class UDamagePipeline* Pipeline, class AActor* Victim, class UClass* DamageType);
	void TookDamageFromEnemy(class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	float ModifyParentDamage(float Damage);
	void eventTakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& HitDirection, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	bool PreTestAnimation(const struct FName& Sequence, class UAnimSet* optionalAnimSet);
	bool eventPlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class UAkEvent* AkEventToPlay);
	class USkeletalMeshComponent* GetFaceFXMeshComponent();
	void eventSetAudioCueOpenedByFaceFX(bool Opened);
	void PlayFootImpactEffect(class UWillowImpactDefinition* ImpactDefinition, int32_t FootDown, bool bPlaySound, bool optionalBReplicate, class AActor* optionalFloorActor);
	bool PlayWaterImpactEffects(class UWillowImpactDefinition* ImpactDefinition, bool bReplicate);
	void PlayJumpedEffects();
	bool DoJump(bool bUpdating);
	void PlayLandedEffects(float ImpactVel, class AActor* optionalFloorActor);
	void PlayLanded(float ImpactVel, class AActor* optionalFloorActor);
	void eventLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	void eventFinishAnimControl(class UInterpGroup* InInterpGroup);
	void eventSetAnimPosition(const struct FName& SlotName, int32_t ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void eventBeginAnimControl(class UInterpGroup* InInterpGroup);
	void LastMatineeAnimFinished();
	void MAT_FinishAnimControl(class UInterpGroup* InInterpGroup);
	void MAT_BeginAnimControl(class UInterpGroup* InInterpGroup);
	struct FName GetFootstepBone(int32_t FootstepIndex);
	void TakeFallingDamage();
	bool AllowFootstepEffects(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PlayFootStepSound(int32_t FootDown, bool bFirstPerson);
	bool CanReachOutToTarget(class AActor* Other, float FOV, float flReachRadius);
	void UpdateWeaponOnPossess(bool bVehicleTransition);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void ApplyAttributeStartingValues();
	void GetAttributeStartingValuesFromCharacterClass(class UWillowCharacterClassDefinition* WillowCharacterClass);
	void SetShieldResourcePoolDefinition(class UIResourcePoolProvider* ResourcePoolProvider, class UResourcePoolDefinition* Definition);
	void SetHealthResourcePoolDefinition(class UIResourcePoolProvider* ResourcePoolProvider, class UResourcePoolDefinition* Definition);
	void AddPoolItems(bool bReadiedItems, class TArray<struct FItemPoolInfo>& ItemsToAdd);
	void eventStartCrouch(float HeightAdjust);
	void eventEndCrouch(float HeightAdjust);
	void ShouldCrouch(bool bCrouch);
	void TurnOff();
	bool PoweredUp();
	float GetShieldPenetrationPercentage();
	struct FVector GetItemTossVelocity(bool optionalBWeapon);
	void TossInventory(class AInventory* Inv, const struct FVector& optionalForceVelocity);
	void DiscardInventory(bool optionalBDestroyContents);
	void SetDefaultInventory(class TArray<struct FItemPoolInfo>& NewDefaultInventory);
	void AddDefaultWeapon();
	void LootSpawnedCallback(class AWillowInventory* SpawnedItem, const struct FQueuedLootSpawnRequest& Params);
	void DropLootOnDeath(class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition);
	void AddDefaultInventory();
	void ClientStopWeaponFiring();
	bool StopWeaponFiring();
	bool StopFiring();
	static void UpdateAndDestroyNonVisibleActor(class AActor* TargetActor, float TimerLength, float ConfigLifeSpan, const struct FName& TimerFuncName);
	void StartDeathFade();
	void DeathFadeComplete();
	void DeathFadeCompleteDelegate();
	void eventTornOff();
	void EndRagdoll();
	bool InitRagdoll();
	void FinishDeathRagdoll();
	void StartDeathRagdoll(bool bAnimationDriven, bool bEnableContactNotification);
	void StartBlendIntoDeathRagdoll();
	void TearOffAfterDeathTimer();
	void eventPlayDeathAnim(class USpecialMoveDefinition* DeathAnim, const struct FName& HitBoneName, const struct FVector& HitLocation, bool bMotorizedRagdoll);
	bool CanPlayDeathAnim();
	int32_t GetTechDeathIndexForDamageType(class UDamageTypeDefinition* DamageTypeDefinition);
	bool PlayTechDeath(class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo& HitInfo);
	bool MatchesAtLeastOneTechDeathAnim(class UDamageTypeDefinition* DamageTypeDef);
	void ApplyExtraRagdollDeathImpulsesAndStatusEffect();
	void PlayDying(class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, const struct FVector& HitLoc);
	void OnRep_bCombatHidden(bool bOldCombatHidden);
	void StopSounds();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* optionalPipeline);
	void TellSpawnerPawnIsDead(bool bKeepCorpse);
	void eventCheckGoToDyingState();
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void PlayHealingReaction(struct FDamageReactionData& Data);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData& Data, struct FVector& HitLocation, struct FVector& HitMomentum);
	void PlayBloodSplatter(class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& Momentum, float DamageSeverityPercent);
	void PlayReplicatedDamage(class UBodyHitRegionDefinition* HitRegion, int32_t GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool optionalBPlayDeath);
	void OnRep_ReplicatedImpactEffects(int32_t ArrayIndex, struct FReplicatedHitRegionImpactEffect& OldImpactEffect);
	void PlayHealingHit(class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* optionalPipeline);
	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* optionalPipeline, bool optionalBFriendlyNoDamage);
	void SetupImpactsForPlayHit(class APawn* SomePawn, bool bNoBlood, class UWillowImpactDefinition* WillowImpactDef, class UDamagePipeline* Pipeline, bool bFriendlyNoDamage, struct FVector& HitLocation, struct FVector& ShotDirection, struct FTraceHitInfo& HitInfo);
	void UpdatePlayHitInfo(bool bNoBlood, class UDamagePipeline* Pipeline, struct FVector& HitLocation, struct FVector& ShotDirection);
	void UpdatePlayHitEffectCounters();
	void ResetShieldColorToDefault();
	void SetShieldColor(const struct FColor& NewShieldColor);
	struct FVector GetWeaponStartTraceLocation(class AWeapon* optionalCurrentWeapon);
	void ReloadWeapon(uint8_t FireModeNum);
	struct FName GetCurrentAimOffsetNodeName();
	void SetAimOffsetProfile(const struct FName& ProfileName);
	void eventReattachWeapons();
	void WeaponChanged(class AWeapon* TheWeapon, bool optionalBOffHandWeapon);
	void SetHolsteredWeapon(int32_t SlotIdx, class AWillowWeapon* NewWeapon, bool optionalBRefreshComponents);
	void ReplaceHolsteredWeapon(class AWillowWeapon* OldWeapon, class AWillowWeapon* NewWeapon, bool optionalBRefreshComponents);
	void SetUpperBodyMovementBlendState(bool bBlendEnabled);
	void UpdateAnimSets();
	void eventTryOffHandWeaponChanged();
	void eventTryWeaponChanged();
	bool ShouldAutoReadyMissionWeapon();
	void PlayWeaponStopFiringAnimations(class AWillowWeapon* InWeapon);
	void PlayWeaponFiredAnimations(class AWillowWeapon* InWeapon, int32_t FiringSlot);
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	bool AreFirstPersonWeaponsInForeground();
	void eventSetOwnerVisibility(bool bVisible);
	void SetInstanceDataOwnerVisibility(bool bVisible);
	float eventGetWeaponSpeed();
	void SetWeaponOwnerVisibility(bool bOwnerVisible);
	void eventSetWeaponParticleAttachmentVisibility(bool bParticlesVisible);
	void OnRep_GearHiddenState(uint8_t OldGearHiddenState);
	void eventEndViewTarget(class APlayerController* PC);
	void eventBecomeViewTarget(class APlayerController* PC);
	struct FVector GetPawnViewLocation();
	void SetHand(EWeaponHand NewWeaponHand);
	void OnShieldFull();
	void OnShieldDepleted(class AController* DamageInstigator, EDamageType DamageType);
	bool IsFullyArmored();
	EDamageSurfaceType GetDamageSurfaceTypeFromHit(struct FTraceHitInfo& HitInfo);
	EDamageSurfaceType GetDefaultDamageSurfaceType();
	float AdjustMomentumForSurfaceType(float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo& HitInfo);
	void NotifyDamageTaken(struct FDamageEventSummary& DamageSummary);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline, float& InDamage, float& DamageSeverityPercent, struct FVector& Momentum, struct FTraceHitInfo& HitInfo);
	void AllPawnFloors();
	float GetIntrinsicArmor();
	bool TryFullBodyGib(float Damage, class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitLocation, const struct FVector& Momentum);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int32_t GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary& DamageSummary);
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary& DamageSummary);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float& Health, float& MaxHealth);
	void SetShieldStrength(float ShieldValue, bool optionalBResetRegeneration);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	float GetTerminalVelocity();
	void BodyClassChanged();
	void DetachParticleSystem(class UParticleSystemComponent* PSC);
	void eventPlayRagDollEffect(class UPhysicalMaterial* HitMaterial, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventRigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactSide, struct FCollisionImpactData& RigidCollisionData);
	void GetAnims(class TArray<class UGearboxAnimDefinition*>& OutAnims);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void InitializeBehaviorProvidersForConsumer();
	void InitializeBehaviorProviders();
	void SetupSkeletalMeshPhysics();
	void SetupSkeletalMeshPhysicsForPhysXEffects();
	void SetPawnAnimInfo();
	void SetDeathDefinition(class UBodyClassDeathDefinition* DeathDef);
	void ApplyBodyClassStartingValues();
	void DestroyShieldArmor();
	void eventDestroyed();
	void RemoveWaypoints();
	void eventPostRenderForAlways(class APlayerController* PC, class UCanvas* Canvas, class AWillowHUD* WHUD);
	void UpdateClientFloorValue();
	struct FVector GetDefaultMeshOffset();
	void ValidateHitRegions();
	void PostBeginPlay();
	void eventReplicatedArrayEvent(const struct FName& VarName, int32_t ArrayIndex);
	void eventReplicatedEvent(const struct FName& VarName);
	int32_t GetNextExpLevelPoints();
	bool IsStaggered();
	void FullyReplenishShields();
	void FullyReplenishLife();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int32_t NewExpLevel);
	void SetAwesomeLevel(int32_t NewAwesomeLevel);
	void SetGameStageForSpawnedInventory(int32_t NewInventoryGameStage);
	void SetGameStage(int32_t NewGameStage);
	int32_t GetExpLevel();
	int32_t GetAwesomeLevel();
	int32_t GetGameStageForSpawnedInventory();
	int32_t GetGameStage();
	void SetAimAtVector(const struct FVector& NewAimAtVector);
	void SetAimAtActor(class AActor* NewAimAtActor);
	static bool IsPawnPursuitDebugEnabled();
	static void TogglePawnPursuitDebug();
	void InitializePawnMeshes();
	void eventBuildScriptAnimSetList();
	bool eventRestoreAnimSetsToDefault();
	bool IsReloading();
	bool IsSplitScreen();
	void InitializeRBPhysics();
	EPhysics GetDefaultPhysics();
	void SetDefaultPhysics();
	EOpinion GetOpinion(class UObject* Other);
};

// Class WillowGame.WillowPawnInteractionDefinition
// 0x0018 (0x0098 - 0x00B0)
class UWillowPawnInteractionDefinition : public UPawnInteractionDefinition
{
public:
	EInteractionIcons                                  HUDIcon;                                       // 0x0098 (0x0001) [0x0000000020000000]  CPF_Deprecated)
	class UInteractionIconDefinition*                  HUDIconDef;                                    // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  HUDIconDefSecondary;                           // 0x00A8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPawnInteractionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPawnSnapshotRecord
// 0x0080 (0x02D8 - 0x0358)
class UWillowPawnSnapshotRecord : public UGearboxPawnSnapshotRecord
{
public:
	struct FName                                       MyWillowPawnName;                              // 0x02D8 (0x0008) [0x0000000000000000]               
	struct FName                                       MyWeaponName;                                  // 0x02E0 (0x0008) [0x0000000000000000]               
	struct FName                                       MyDrivenVehicleName;                           // 0x02E8 (0x0008) [0x0000000000000000]               
	struct FTargetPriorityInfo                         BestTargetData;                                // 0x02F0 (0x0020) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVector                                     BestTargetLocation;                            // 0x0310 (0x000C) [0x0000000000000000]               
	struct FVector                                     Destination;                                   // 0x031C (0x000C) [0x0000000000000000]               
	class TArray<struct FMatrix>                       SpaceBases;                                    // 0x0328 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ExperienceLevel;                               // 0x0338 (0x0004) [0x0000000000000000]               
	int32_t                                            GameStage;                                     // 0x033C (0x0004) [0x0000000000000000]               
	int32_t                                            AwesomeLevel;                                  // 0x0340 (0x0004) [0x0000000000000000]               
	float                                              CurHealth;                                     // 0x0344 (0x0004) [0x0000000000000000]               
	float                                              CurShield;                                     // 0x0348 (0x0004) [0x0000000000000000]               
	float                                              MaxShield;                                     // 0x034C (0x0004) [0x0000000000000000]               
	int32_t                                            WeaponLevel;                                   // 0x0350 (0x0004) [0x0000000000000000]               
	int32_t                                            WeaponDamage;                                  // 0x0354 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPawnSnapshotRecord");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPersonalTeleporter
// 0x0040 (0x0258 - 0x0298)
class AWillowPersonalTeleporter : public ATeleporterDestination
{
public:
	struct FPointer                                    VfTable_IIPlayerObserver;                      // 0x0258 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<class APlayerController*>             TeleportedPlayers;                             // 0x0260 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UPersonalTeleporterDefinition*               Definition;                                    // 0x0270 (0x0008) [0x0000000000000021] (CPF_Edit | CPF_Net)
	class UCylinderComponent*                          CylinderComponent;                             // 0x0278 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    TeleporterParticleSystem;                      // 0x0280 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       LevelName;                                     // 0x0288 (0x0008) [0x0000000000000000]               
	uint32_t                                           bActive : 1;                                   // 0x0290 (0x0004) [0x0000000100000020] [0x00000001] (CPF_Net)
	uint32_t                                           bReturnTeleporter : 1;                         // 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bPlacedInCommons : 1;                          // 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPersonalTeleporter");
		}

		return uClassPointer;
	};

	void eventDestroyed();
	void eventReleaseHeldLevel();
	bool eventHoldLevel();
	void eventDeactivateTeleporter();
	void eventActivateTeleporter();
	void PlayerLeftGame(class APlayerController* PC);
	void PlayerEnteredGame(class APlayerController* PC);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void CreateExitPoints();
	bool SnapToGround(class AActor* A);
	void IntializeParticleSystem();
	bool InitializeFromDefinition(class UPersonalTeleporterDefinition* PersonalTeleporterDefinition);
	bool InitializeTeleporter(class UPersonalTeleporterDefinition* TeleporterDefinition, bool bReturnPortal);
	void SpawnReturnTeleporter();
	bool PlaceTeleporter(class UPersonalTeleporterDefinition* TeleporterDefinition, class APawn* Creator);
	void ActivateTeleporterPlacedEvent();
	void eventReplicatedEvent(const struct FName& VarName);
};

// Class WillowGame.WillowPhysicalMaterialProperty
// 0x00A8 (0x0058 - 0x0100)
class UWillowPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class UAkSwitch*                                   MaterialAkSwitch;                              // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDamageSurfaceType                                 DamageSurfaceType;                             // 0x0060 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FImpactResponseData>           ImpactResponses;                               // 0x0068 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FImpactResponseParameters                   DefaultResponseParameters;                     // 0x0078 (0x0078) [0x0000000000422002] (CPF_Const | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink)
	struct FWheelSlipModifierData                      WheelSlipModifiers;                            // 0x00F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UParticleSystem*                             ParticleSystemTemplate;                        // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPhysicalMaterialProperty");
		}

		return uClassPointer;
	};

	static void ApplyParametersToMaterialInstance(class UMaterialInstance* Material, struct FImpactResponseParameters& ResponseParameters);
	static void AttachParticleSystemComponentToActor(class UParticleSystemComponent* PSC, class AActor* HitActor, const struct FName& AttachmentPointName);
	static void AttachEmitterToActor(class AEmitter* EmitterActor, class AActor* HitActor, const struct FName& AttachmentPointName);
	static void ApplyParametersToParticleSystemComponent(class UParticleSystemComponent* PSC, struct FImpactResponseParameters& ResponseParameters);
	static void ApplyParametersToEmitter(class AEmitter* EmitterActor, struct FImpactResponseParameters& ResponseParameters);
	void eventPlayImpactEffect(class AActor* Instigator, class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, EImpactUsage Usage, bool bPlaySound, bool bReplicateEffect, bool bIsbEffectEligibleForCensoring, class UParticleSystem* DefaultParticleTemplate, class UParticleSystem* CensoredParticleTemplateAlternative, class UAkSwitch* optionalMaterialSwitch, class UAkEvent* optionalImpactAkEvent, struct FImpactResponseEffect& Effect, struct FTraceHitInfo& HitInfo, struct FImpactResponseParameters& ResponseParameters);
	class UAkSwitch* GetPhysicalMaterialSwitch(struct FTraceHitInfo& HitInfo);
	static void StaticPlayImpactEffect(class AActor* Instigator, class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, EImpactUsage Usage, bool bPlaySound, bool bReplicateEffect, struct FImpactResponseEffect& Effect, struct FTraceHitInfo& HitInfo, struct FImpactResponseParameters& ResponseParameters);
	static void PlayImpactEffectSound(class AActor* Instigator, class UAkSwitch* Switch, class UAkEvent* Event, const struct FVector& HitLocation, EImpactUsage Usage, bool bPlaySound, bool bReplicateEffect, struct FImpactResponseParameters& ResponseParameters);
	int32_t FindResponseIndex(class UWillowImpactDefinition* ImpactType);
	static void StaticHitInfoImpact(class UWillowImpactDefinition* ImpactType, class UPhysicalMaterial* PhysicalMaterial, class AActor* Instigator, class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo, bool bPlaySound, bool bReplicateEffect, struct FImpactResponseParameters& ResponseParameters);
	static void StaticRigidBodyImpact(class UWillowImpactDefinition* ImpactType, class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactIndex, bool optionalBReplicateEffect, struct FCollisionImpactData& RigidCollisionData, struct FImpactResponseParameters& ResponseParameters);
	static bool StaticTraceImpact(class UWillowImpactDefinition* ImpactType, class AActor* Instigator, const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bPlaySound, bool optionalBReplicateEffect, bool optionalBPlayOnNoHit, struct FImpactResponseParameters& ResponseParameters);
	static bool IsImpactDebugEnabled();
	static void ToggleImpactDebug();
};

// Class WillowGame.WillowPlayerInput
// 0x0208 (0x01E8 - 0x03F0)
class UWillowPlayerInput : public UPlayerInput
{
public:
	uint32_t                                           bAlwaysPlayForceFeedback : 1;                  // 0x01E8 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bDebugBindCommandsEnabled : 1;                 // 0x01E8 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bHoldDuck : 1;                                 // 0x01E8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bBindCommandConsumedInputEvent : 1;            // 0x01E8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bCanSprint : 1;                                // 0x01E8 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bWasSprintingInDefaultOnFootContext : 1;       // 0x01E8 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bUpdateInputContext : 1;                       // 0x01E8 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bApplyControllerViewAccel : 1;                 // 0x01E8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bTryToSprint : 1;                              // 0x01E8 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	struct FName                                       DebugBindOverrideKeyName;                      // 0x01EC (0x0008) [0x0000000000004000] (CPF_Config)  
	float                                              ButtonHoldEventTime;                           // 0x01F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LastDuckTime;                                  // 0x01F8 (0x0004) [0x0000000000000000]               
	EDoubleClickDir                                    ForcedDoubleClick;                             // 0x01FC (0x0001) [0x0000000000000000]               
	uint8_t                                            ProcessingButtonEvent;                         // 0x01FD (0x0001) [0x0000000000000000]               
	uint8_t                                            CurrentInputType;                              // 0x01FE (0x0001) [0x0000000000000000]               
	uint8_t                                            LastKnownGamepadType;                          // 0x01FF (0x0001) [0x0000000000000000]               
	float                                              RunWalkTransitionThreshold;                    // 0x0200 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              TimeSinceLastMovement;                         // 0x0204 (0x0004) [0x0000000000000000]               
	struct FName                                       CurrentInputContextName;                       // 0x0208 (0x0008) [0x0000000000000000]               
	class TArray<class UInputContextDefinition*>       CurrentInputContexts;                          // 0x0210 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FInputAxisData>                Axes;                                          // 0x0220 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                           UnknownData00[0x50];                           // 0x0230 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.NameToAxisStatePtr
	class TArray<struct FDeviceLookAxisData>           DeviceLookAxes;                                // 0x0280 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FInputButtonData>              Buttons;                                       // 0x0290 (0x0010) [0x0000000000001000] (CPF_Native)  
	uint8_t                                           UnknownData01[0x50];                           // 0x02A0 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.NameToButtonStatePtr
	class TArray<struct FName>                         LatentButtons;                                 // 0x02F0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                           UnknownData02[0x50];                           // 0x0300 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.InputActionToAvailabilityMap
	uint8_t                                           UnknownData03[0x50];                           // 0x0350 (0x0050) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.PreSwitchInputActionToAvailabilityMap
	class TArray<class UInputActionDefinition*>        PreSwitchAvailableActions;                     // 0x03A0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              ControllerSensitivityX;                        // 0x03B0 (0x0004) [0x0000000000000000]               
	float                                              ControllerSensitivityY;                        // 0x03B4 (0x0004) [0x0000000000000000]               
	int32_t                                            ControllerPresetIndex;                         // 0x03B8 (0x0004) [0x0000000000000000]               
	class TArray<struct FKeyRebindingData>             KeyRebindings;                                 // 0x03C0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FKeyRebindingData>             ControllerRebindings;                          // 0x03D0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            RebindCount;                                   // 0x03E0 (0x0004) [0x0000000000000000]               
	class UInputButtonDefinition*                      InputButton_Pause_ShowMenu;                    // 0x03E8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerInput");
		}

		return uClassPointer;
	};

	void ToggleViewAccel();
	void SetControllerSensitivityY(int32_t Sensitivity);
	void SetControllerSensitivityX(int32_t Sensitivity);
	void SetControllerSensitivity(int32_t Sensitivity);
	EDoubleClickDir CheckForDoubleClickMove(float DeltaTime);
	void Jump();
	void DuckReleased();
	void DuckPressed();
	void SprintReleased();
	void SprintPressed();
	void eventPlayerInput(float DeltaTime);
	bool InputAllowsSprint();
	void SetCurrentContextType(const struct FName& NewContextName);
	void SetInputContext(const struct FName& NewContextName, bool optionalBForceUpdate);
	bool IsInputContextValid(const struct FName& InputContextName);
	void PostChangeInputContext();
	void PreChangeInputContext();
	void UpdateLatentButtons();
	void PostProcessInput(float DeltaTime);
	void PreProcessInput(float DeltaTime);
	void InitInputSystem();
	bool IsActionAvailable(class UInputActionDefinition* Action);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	struct FName DecodeButton(const struct FName& InButtonName);
	void SetControllerRebindings(const class FString& InControllerRebindingString);
	void SetKeyRebindings(const class FString& InKeyRebindingString);
	void WriteColumnText(class AHUD* HUD, const class FString& Text, int32_t ColumnSize, int32_t& Counter, float& SavedX, float& SavedY, float& MaxY);
	void ReleasePressedButtons();
	bool ResetButtonState(const struct FName& ActionName);
	class UInputButtonDefinition* GetButtonForAction(const struct FName& ActionName, bool optionalBOnlyKeyboardMouse, bool optionalBNoRemapping);
	void SetupInputDevices();
};

// Class WillowGame.WillowPlayerManager
// 0x00D0 (0x0058 - 0x0128)
class UWillowPlayerManager : public UObject
{
public:
	class TArray<struct FScriptDelegate>               WriteProfileCompleteDelegates;                 // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FScriptDelegate>               ReadProfileCompleteDelegates;                  // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FScriptDelegate>               DeleteProfileCompleteDelegates;                // 0x0078 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UWillowGFxDialogBox*>           WriteProfileDlgs;                              // 0x0088 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FMap_Mirror                                 CachedProfiles;                                // 0x0098 (0x0050) [0x0000000000001000] (CPF_Native)  
	struct FScriptDelegate                             __OnInitializePlayerComplete__Delegate;        // 0x00E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnWriteProfileComplete__Delegate;            // 0x00F8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnReadProfileComplete__Delegate;             // 0x0108 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnDeleteProfileComplete__Delegate;           // 0x0118 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerManager");
		}

		return uClassPointer;
	};

	void DeleteProfileComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result);
	void OnDeleteProfileComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result);
	void ReadProfileComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result);
	void CheckProfileExistsComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result);
	void OnReadProfileComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result, class UWillowProfile* Profile);
	bool OnWriteProfileDlgClicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	void WriteProfileComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result);
	void OnWriteProfileComplete(const struct FPlatformUserId& UserId, ESaveDataOperationResult Result);
	void OnInitializePlayerComplete(const struct FPlatformUserId& UserId, bool bWasSuccessful);
};

// Class WillowGame.WillowPlayerPawnDataManager
// 0x0040 (0x0058 - 0x0098)
class UWillowPlayerPawnDataManager : public UObject
{
public:
	class TArray<struct FLoadedOnDemandPackage>        LoadedOnDemandPackages;                        // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        PackagesUnloadedDuringGC;                      // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class AWillowPlayerController*>       WillowPlayerControllersAwaitingPackages;       // 0x0078 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FPointer>                      AsyncDataRequests;                             // 0x0088 (0x0010) [0x0000000080001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerPawnDataManager");
		}

		return uClassPointer;
	};

	void OutputReferencedPackages();
	void ReferenceHasBeenApplied(class UObject* ReferencedObject);
	void SendRequiredOnDemandPackagesToClient(class AWillowPlayerController* Client);
	bool InformClientsPackageUnloaded(const class FString& PackageName);
	void UnloadDataPackage(const class FString& PackageName, class AWillowPlayerController* PlayerContext);
	bool InformClientsPackageLoaded(const class FString& PackageName);
	void LoadDataPackageAsyncNoCallback(const class FString& PawnDataPath, class AWillowPlayerController* PlayerContext);
	void LoadDataPackageAsync(const class FString& PawnDataPath, const struct FPointer& Request);
	bool LoadDataPackage(const class FString& PackageName, class AWillowPlayerController* PlayerContext, bool bLocal);
	class UObject* FindAlreadyLoadedObject(const class FString& ObjectPath);
	void CancelLoadObjectDataAsync(const class FString& ObjectPath, class UObject* Instigator);
	void LoadObjectDataAsync(const class FString& ObjectPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int32_t IntParam, float FloatParam, const struct FName& CallbackCustomEventName, bool optionalBLocal, int32_t optionalPriority);
	class UObject* LoadObjectData(const class FString& ObjectPath, class AWillowPlayerController* PlayerContext, bool optionalBLocal);
};

// Class WillowGame.WillowPlayerReplicationInfo
// 0x03E0 (0x0388 - 0x0768)
class AWillowPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	struct FPointer                                    VfTable_IINounAttributeProvider;               // 0x0388 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class AWillowPlayerStateInfo*                      WillowPSI;                                     // 0x0390 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ExpLevel;                                      // 0x0398 (0x0004) [0x4000000100000020] (CPF_Net)     
	int32_t                                            ExpPointsNextLevelAt;                          // 0x039C (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            ExpPointsNextLevelAtBaseValue;                 // 0x03A0 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ExpPointsNextLevelAtModifierStack;             // 0x03A8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bSuppressCoopLevelUpDing : 1;                  // 0x03B8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsDead : 1;                                   // 0x03B8 (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net)
	uint32_t                                           bTrainingDisabled : 1;                         // 0x03B8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bTookDamageDuringLastDuel : 1;                 // 0x03B8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bHasSetProfileSettings : 1;                    // 0x03B8 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bHideOnHUDIfEnemy : 1;                         // 0x03B8 (0x0004) [0x0000000000000020] [0x00000020] (CPF_Net)
	int32_t                                            GeneralSkillPoints;                            // 0x03BC (0x0004) [0x4000000100000020] (CPF_Net)     
	int32_t                                            SpecialistSkillPoints;                         // 0x03C0 (0x0004) [0x4000000000000020] (CPF_Net)     
	float                                              CurrentInstantHitCriticalHitBonus;             // 0x03C4 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              CurrentInstantHitCriticalHitBonusBaseValue;    // 0x03C8 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            CurrentInstantHitCriticalHitBonusModifierStack;// 0x03D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FCurrencyState                              Currency[0xD];                                 // 0x03E0 (0x009C) [0x0000000100000020] (CPF_Net)     
	class TArray<struct FScriptDelegate>               CurrencyChangedDelegates;                      // 0x0480 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FResourcePoolReference                      HealthPool;                                    // 0x0490 (0x0018) [0x0000002000000020] (CPF_Net)     
	struct FResourcePoolReference                      ShieldArmor;                                   // 0x04A8 (0x0018) [0x0000002000000020] (CPF_Net)     
	class UPawnAllegiance*                             PawnAllegiance;                                // 0x04C0 (0x0008) [0x0000000000000020] (CPF_Net)     
	class UPlayerNameIdentifierDefinition*             CharacterNameIdDef;                            // 0x04C8 (0x0008) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            bGFxMenuOpen;                                  // 0x04D0 (0x0001) [0x0000000000000020] (CPF_Net)     
	uint8_t                                            NumTrackedSkillSlotsInUse;                     // 0x04D1 (0x0001) [0x0000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            HighestCompletedPlayThrough;                   // 0x04D4 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            NumReplicatedNouns;                            // 0x04D8 (0x0004) [0x0000000000000020] (CPF_Net)     
	class TArray<struct FNounAttributeState>           NounState;                                     // 0x04E0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FReplicatedNounAttributeState               ReplicatedNouns[0x14];                         // 0x04F0 (0x0140) [0x0000000000000020] (CPF_Net)     
	struct FReplicatedStandInGear                      StandInGear;                                   // 0x0630 (0x0010) [0x0000000100000020] (CPF_Net)     
	struct FTrackedSkillState                          TrackedSkills[0x11];                           // 0x0640 (0x0110) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class AController*                                 InitializeFor;                                 // 0x0750 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             __OnCurrencyChanged__Delegate;                 // 0x0758 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerReplicationInfo");
		}

		return uClassPointer;
	};

	void RefreshStandInGear();
	void ServerSetStandInGear(const struct FWeaponDefinitionData& Weapon1Data, const struct FWeaponDefinitionData& Weapon2Data);
	void eventSetCharacterNameIdDef(class UPlayerNameIdentifierDefinition* NameIDDef);
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void OnPlayerJoinLeave();
	void eventDestroyed();
	bool IsRemotePlayer();
	class AWillowPlayerController* eventGetPrimaryPlayerPC();
	void eventExpLevelUp(bool optionalBCheated);
	int32_t GetMaxExpLevel();
	class FString GetTrackedSkillDebugInfo(int32_t TrackedSkillIndex);
	static void DisplayDebugTrackedSkills(class AHUD* HUD, float& out_YL, float& out_YPos);
	static void DisplayDebugAllPlayerNouns(class AHUD* HUD, float& out_YL, float& out_YPos);
	void eventNotifyCurrencyDelegates();
	void UnregisterCurrencyChangedDelegate(const struct FScriptDelegate& CurrencyChangedDelegate);
	void RegisterCurrencyChangedDelegate(const struct FScriptDelegate& CurrencyChangedDelegate);
	void OnCurrencyChanged(const struct FCurrencyState& ChangedCurrency);
	void AddCurrencyOnHand(ECurrencyType FormOfCurrency, float AddValue);
	void SetCurrencyOnHand(ECurrencyType FormOfCurrency, float NewValue);
	float GetCurrencyOnHand(ECurrencyType FormOfCurrency);
	void GetAllCurrencyOnHand(float& Values);
	void InitializeAllCurrencyOnHand(float NewValues);
	void HandlePlayerJoinWithValidName();
	void SetUniqueId(const struct FUniqueNetId& PlayerUniqueId);
	void NotifyPlayerUidUpdated();
	void NotifyPlayerNameUpdated();
	void RunOnceClientInitialize();
	void ClientInitialize(class AController* C);
	void eventReplicatedEvent(const struct FName& VarName);
};

// Class WillowGame.WillowPlayerStateInfo
// 0x0CA8 (0x0268 - 0x0F10)
class AWillowPlayerStateInfo : public APlayerStateInfo
{
public:
	struct FPointer                                    VfTable_IISkillInstigator;                     // 0x0268 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IISkillTreeListener;                   // 0x0270 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0278 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UPlayerSkillTree*                            PlayerSkillTree;                               // 0x0280 (0x0008) [0x0000000000000000]               
	class UPlayerClassDefinition*                      PlayerClass;                                   // 0x0288 (0x0008) [0x0000000000000000]               
	class AWillowPawn*                                 WillowPawn;                                    // 0x0290 (0x0008) [0x0000000000000000]               
	class AWillowPlayerController*                     WillowPC;                                      // 0x0298 (0x0008) [0x0000000000000000]               
	class AWillowMind*                                 WillowMind;                                    // 0x02A0 (0x0008) [0x0000000000000000]               
	class AWillowPlayerReplicationInfo*                WillowPRI;                                     // 0x02A8 (0x0008) [0x0000000000000000]               
	class AResourcePoolManager*                        ResourcePoolManager;                           // 0x02B0 (0x0008) [0x0000000000000020] (CPF_Net)     
	struct FResourcePoolReference                      AccuracyPool;                                  // 0x02B8 (0x0018) [0x0000002000000020] (CPF_Net)     
	struct FResourcePoolReference                      OffHandAccuracyPool;                           // 0x02D0 (0x0018) [0x0000002000000020] (CPF_Net)     
	struct FResourcePoolReference                      ExpPool;                                       // 0x02E8 (0x0018) [0x0000002000000020] (CPF_Net)     
	float                                              InstigatedBulletDamageModifier;                // 0x0300 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedBulletDamageModifierBaseValue;       // 0x0304 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedBulletDamageModifierModifierStack;   // 0x0308 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedMeleeDamageModifier;                 // 0x0318 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedMeleeDamageModifierBaseValue;        // 0x031C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeDamageModifierModifierStack;    // 0x0320 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedGrenadeDamageModifier;               // 0x0330 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedGrenadeDamageModifierBaseValue;      // 0x0334 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedGrenadeDamageModifierModifierStack;  // 0x0338 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedRocketDamageModifier;                // 0x0348 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedRocketDamageModifierBaseValue;       // 0x034C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedRocketDamageModifierModifierStack;   // 0x0350 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectDamageModifier;          // 0x0360 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectDamageModifierBaseValue; // 0x0364 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectDamageModifierModifierStack;// 0x0368 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedSkillDamageModifier;                 // 0x0378 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedSkillDamageModifierBaseValue;        // 0x037C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedSkillDamageModifierModifierStack;    // 0x0380 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectStatusChanceModifier;    // 0x0390 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectStatusChanceModifierBaseValue;// 0x0394 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectStatusChanceModifierModifierStack;// 0x0398 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedIncendiaryStatusChanceModifier;      // 0x03A8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedIncendiaryStatusChanceModifierBaseValue;// 0x03AC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedIncendiaryStatusChanceModifierModifierStack;// 0x03B0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedShockStatusChanceModifier;           // 0x03C0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedShockStatusChanceModifierBaseValue;  // 0x03C4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedShockStatusChanceModifierModifierStack;// 0x03C8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedCorrosiveStatusChanceModifier;       // 0x03D8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedCorrosiveStatusChanceModifierBaseValue;// 0x03DC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedCorrosiveStatusChanceModifierModifierStack;// 0x03E0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedAmpStatusChanceModifier;             // 0x03F0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedAmpStatusChanceModifierBaseValue;    // 0x03F4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedAmpStatusChanceModifierModifierStack;// 0x03F8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectStatusDamageModifier;    // 0x0408 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectStatusDamageModifierBaseValue;// 0x040C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectStatusDamageModifierModifierStack;// 0x0410 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedIncendiaryStatusDamageModifier;      // 0x0420 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedIncendiaryStatusDamageModifierBaseValue;// 0x0424 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedIncendiaryStatusDamageModifierModifierStack;// 0x0428 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedShockStatusDamageModifier;           // 0x0438 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedShockStatusDamageModifierBaseValue;  // 0x043C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedShockStatusDamageModifierModifierStack;// 0x0440 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedCorrosiveStatusDamageModifier;       // 0x0450 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedCorrosiveStatusDamageModifierBaseValue;// 0x0454 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedCorrosiveStatusDamageModifierModifierStack;// 0x0458 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedAmpStatusDamageModifier;             // 0x0468 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedAmpStatusDamageModifierBaseValue;    // 0x046C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedAmpStatusDamageModifierModifierStack;// 0x0470 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedBulletDamageModifier;                  // 0x0480 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedBulletDamageModifierBaseValue;         // 0x0484 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedBulletDamageModifierModifierStack;     // 0x0488 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedAmplifyDamageModifier;                 // 0x0498 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedAmplifyDamageModifierBaseValue;        // 0x049C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedAmplifyDamageModifierModifierStack;    // 0x04A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedMeleeDamageModifier;                   // 0x04B0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedMeleeDamageModifierBaseValue;          // 0x04B4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedMeleeDamageModifierModifierStack;      // 0x04B8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedGrenadeDamageModifier;                 // 0x04C8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedGrenadeDamageModifierBaseValue;        // 0x04CC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedGrenadeDamageModifierModifierStack;    // 0x04D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedRocketDamageModifier;                  // 0x04E0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedRocketDamageModifierBaseValue;         // 0x04E4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedRocketDamageModifierModifierStack;     // 0x04E8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedStatusEffectDamageModifier;            // 0x04F8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedStatusEffectDamageModifierBaseValue;   // 0x04FC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedStatusEffectDamageModifierModifierStack;// 0x0500 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedSkillDamageModifier;                   // 0x0510 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedSkillDamageModifierBaseValue;          // 0x0514 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedSkillDamageModifierModifierStack;      // 0x0518 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedIncendiaryDamageModifier;            // 0x0528 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedIncendiaryDamageModifierBaseValue;   // 0x052C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedIncendiaryDamageModifierModifierStack;// 0x0530 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedShockDamageModifier;                 // 0x0540 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedShockDamageModifierBaseValue;        // 0x0544 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedShockDamageModifierModifierStack;    // 0x0548 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedExplosiveDamageModifier;             // 0x0558 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedExplosiveDamageModifierBaseValue;    // 0x055C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedExplosiveDamageModifierModifierStack;// 0x0560 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedCorrosiveDamageModifier;             // 0x0570 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedCorrosiveDamageModifierBaseValue;    // 0x0574 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedCorrosiveDamageModifierModifierStack;// 0x0578 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedImpactDamageModifier;                // 0x0588 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedImpactDamageModifierBaseValue;       // 0x058C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedImpactDamageModifierModifierStack;   // 0x0590 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedAmpDamageModifier;                   // 0x05A0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedAmpDamageModifierBaseValue;          // 0x05A4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedAmpDamageModifierModifierStack;      // 0x05A8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedBulletDamageAmmoTheftAmount;         // 0x05B8 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedBulletDamageAmmoTheftAmountBaseValue;// 0x05BC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedBulletDamageAmmoTheftAmountModifierStack;// 0x05C0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedMeleeDamageAmmoTheftAmount;          // 0x05D0 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedMeleeDamageAmmoTheftAmountBaseValue; // 0x05D4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeDamageAmmoTheftAmountModifierStack;// 0x05D8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedGrenadeDamageAmmoTheftAmount;        // 0x05E8 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedGrenadeDamageAmmoTheftAmountBaseValue;// 0x05EC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedGrenadeDamageAmmoTheftAmountModifierStack;// 0x05F0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedRocketDamageAmmoTheftAmount;         // 0x0600 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedRocketDamageAmmoTheftAmountBaseValue;// 0x0604 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedRocketDamageAmmoTheftAmountModifierStack;// 0x0608 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstigatedStatusEffectDamageAmmoTheftAmount;   // 0x0618 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            InstigatedStatusEffectDamageAmmoTheftAmountBaseValue;// 0x061C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectDamageAmmoTheftAmountModifierStack;// 0x0620 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedBulletDamageAmmoTheftAmount;           // 0x0630 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedBulletDamageAmmoTheftAmountBaseValue;  // 0x0634 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedBulletDamageAmmoTheftAmountModifierStack;// 0x0638 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedMeleeDamageAmmoTheftAmount;            // 0x0648 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedMeleeDamageAmmoTheftAmountBaseValue;   // 0x064C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedMeleeDamageAmmoTheftAmountModifierStack;// 0x0650 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedGrenadeDamageAmmoTheftAmount;          // 0x0660 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedGrenadeDamageAmmoTheftAmountBaseValue; // 0x0664 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedGrenadeDamageAmmoTheftAmountModifierStack;// 0x0668 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedRocketDamageAmmoTheftAmount;           // 0x0678 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedRocketDamageAmmoTheftAmountBaseValue;  // 0x067C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedRocketDamageAmmoTheftAmountModifierStack;// 0x0680 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ReceivedStatusEffectDamageAmmoTheftAmount;     // 0x0690 (0x0004) [0x8000000000002000] (CPF_Transient)
	int32_t                                            ReceivedStatusEffectDamageAmmoTheftAmountBaseValue;// 0x0694 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedStatusEffectDamageAmmoTheftAmountModifierStack;// 0x0698 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ExpScaleForCriticalHitKills;                   // 0x06A8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ExpScaleForCriticalHitKillsBaseValue;          // 0x06AC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ExpScaleForCriticalHitKillsModifierStack;      // 0x06B0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              AttackUnsuspectingTargetDamageModifier;        // 0x06C0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              AttackUnsuspectingTargetDamageModifierBaseValue;// 0x06C4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            AttackUnsuspectingTargetDamageModifierModifierStack;// 0x06C8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              MeleeAttackTargetFromBehindDamageModifier;     // 0x06D8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              MeleeAttackTargetFromBehindDamageModifierBaseValue;// 0x06DC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            MeleeAttackTargetFromBehindDamageModifierModifierStack;// 0x06E0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              MeleeSelfChance;                               // 0x06F0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              MeleeSelfChanceBaseValue;                      // 0x06F4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            MeleeSelfChanceModifierStack;                  // 0x06F8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              AttackInjuredMeleeDamageModifier;              // 0x0708 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              AttackInjuredMeleeDamageModifierBaseValue;     // 0x070C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            AttackInjuredMeleeDamageModifierModifierStack; // 0x0710 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ConvertDamageToHealingPercent;                 // 0x0720 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ConvertDamageToHealingPercentBaseValue;        // 0x0724 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ConvertDamageToHealingPercentModifierStack;    // 0x0728 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              PendingHealAmount;                             // 0x0738 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetMinHealthDamageBoostPercent;             // 0x073C (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              TargetMinHealthDamageBoostPercentBaseValue;    // 0x0740 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            TargetMinHealthDamageBoostPercentModifierStack;// 0x0748 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              TargetOverMinHealthGunDamageMultiplier;        // 0x0758 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              TargetOverMinHealthGunDamageMultiplierBaseValue;// 0x075C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            TargetOverMinHealthGunDamageMultiplierModifierStack;// 0x0760 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              DamageReturnPercent;                           // 0x0770 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              DamageReturnPercentBaseValue;                  // 0x0774 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            DamageReturnPercentModifierStack;              // 0x0778 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              FirstShotInClipBonusModifier;                  // 0x0788 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              FirstShotInClipBonusModifierBaseValue;         // 0x078C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            FirstShotInClipBonusModifierModifierStack;     // 0x0790 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastShotInClipBonusModifier;                   // 0x07A0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              LastShotInClipBonusModifierBaseValue;          // 0x07A4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            LastShotInClipBonusModifierModifierStack;      // 0x07A8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              MeleeHealthStealPercent;                       // 0x07B8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              MeleeHealthStealPercentBaseValue;              // 0x07BC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            MeleeHealthStealPercentModifierStack;          // 0x07C0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedBulletHealingModifier;               // 0x07D0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedBulletHealingModifierBaseValue;      // 0x07D4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedBulletHealingModifierModifierStack;  // 0x07D8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedMeleeHealingModifier;                // 0x07E8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedMeleeHealingModifierBaseValue;       // 0x07EC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeHealingModifierModifierStack;   // 0x07F0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedGrenadeHealingModifier;              // 0x0800 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedGrenadeHealingModifierBaseValue;     // 0x0804 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedGrenadeHealingModifierModifierStack; // 0x0808 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedRocketHealingModifier;               // 0x0818 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedRocketHealingModifierBaseValue;      // 0x081C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedRocketHealingModifierModifierStack;  // 0x0820 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectHealingModifier;         // 0x0830 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectHealingModifierBaseValue;// 0x0834 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectHealingModifierModifierStack;// 0x0838 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedSkillHealingModifier;                // 0x0848 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedSkillHealingModifierBaseValue;       // 0x084C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedSkillHealingModifierModifierStack;   // 0x0850 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedBulletHealingModifier;                 // 0x0860 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedBulletHealingModifierBaseValue;        // 0x0864 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedBulletHealingModifierModifierStack;    // 0x0868 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedMeleeHealingModifier;                  // 0x0878 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedMeleeHealingModifierBaseValue;         // 0x087C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedMeleeHealingModifierModifierStack;     // 0x0880 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedGrenadeHealingModifier;                // 0x0890 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedGrenadeHealingModifierBaseValue;       // 0x0894 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedGrenadeHealingModifierModifierStack;   // 0x0898 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedRocketHealingModifier;                 // 0x08A8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedRocketHealingModifierBaseValue;        // 0x08AC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedRocketHealingModifierModifierStack;    // 0x08B0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedStatusEffectHealingModifier;           // 0x08C0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedStatusEffectHealingModifierBaseValue;  // 0x08C4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedStatusEffectHealingModifierModifierStack;// 0x08C8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ReceivedSkillHealingModifier;                  // 0x08D8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ReceivedSkillHealingModifierBaseValue;         // 0x08DC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ReceivedSkillHealingModifierModifierStack;     // 0x08E0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedBulletShieldRestoreModifier;         // 0x08F0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedBulletShieldRestoreModifierBaseValue;// 0x08F4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedBulletShieldRestoreModifierModifierStack;// 0x08F8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedMeleeShieldRestoreModifier;          // 0x0908 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedMeleeShieldRestoreModifierBaseValue; // 0x090C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedMeleeShieldRestoreModifierModifierStack;// 0x0910 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedGrenadeShieldRestoreModifier;        // 0x0920 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedGrenadeShieldRestoreModifierBaseValue;// 0x0924 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedGrenadeShieldRestoreModifierModifierStack;// 0x0928 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedRocketShieldRestoreModifier;         // 0x0938 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedRocketShieldRestoreModifierBaseValue;// 0x093C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedRocketShieldRestoreModifierModifierStack;// 0x0940 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedStatusEffectShieldRestoreModifier;   // 0x0950 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedStatusEffectShieldRestoreModifierBaseValue;// 0x0954 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedStatusEffectShieldRestoreModifierModifierStack;// 0x0958 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              InstigatedSkillShieldRestoreModifier;          // 0x0968 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatedSkillShieldRestoreModifierBaseValue; // 0x096C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatedSkillShieldRestoreModifierModifierStack;// 0x0970 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              PercentChanceInstigatedBulletDmgIgnoresShields;// 0x0980 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              PercentChanceInstigatedBulletDmgIgnoresShieldsBaseValue;// 0x0984 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            PercentChanceInstigatedBulletDmgIgnoresShieldsModifierStack;// 0x0988 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastKillExcessDamageDealt;                     // 0x0998 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              LastKillExcessDamageDealtBaseValue;            // 0x099C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            LastKillExcessDamageDealtModifierStack;        // 0x09A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              CurrentWeaponAmmoRegenerationMultiplier;       // 0x09B0 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              CurrentWeaponAmmoRegenerationMultiplierBaseValue;// 0x09B4 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            CurrentWeaponAmmoRegenerationMultiplierModifierStack;// 0x09B8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              MaxLungeDistance;                              // 0x09C8 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              MaxLungeDistanceBaseValue;                     // 0x09CC (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            MaxLungeDistanceModifierStack;                 // 0x09D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class UAttributeModifier*                          LungeSpeedModifier;                            // 0x09E0 (0x0008) [0x0000000000000000]               
	struct FRecentlyResistedAttackData                 RecentlyResistedAttacks[0x10];                 // 0x09E8 (0x0100) [0x0000000000000000]               
	uint8_t                                            NextResistedAttackEventIndex;                  // 0x0AE8 (0x0001) [0x0000000000000000]               
	uint8_t                                            OldestResistedAttackEventIndex;                // 0x0AE9 (0x0001) [0x0000000000000000]               
	float                                              MinTimeBetweenResistFeedback;                  // 0x0AEC (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	struct FPlayerRecentDamageEventData                RecentDamageEvents[0xF];                       // 0x0AF0 (0x02D0) [0x0000000100000020] (CPF_Net)     
	int32_t                                            CurrentPlayerRecentDamageEventIndex;           // 0x0DC0 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FSpeedKillData>                RecentKillHistory;                             // 0x0DC8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            CurrKillingSpree;                              // 0x0DD8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              DurationOfLastKillSkillActivation;             // 0x0DDC (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FName>                         ActivatedTeleportersList;                      // 0x0DE0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FWorldDiscoveryData>           DiscoveredWorldAreas;                          // 0x0DF0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FName>                         FullyExploredAreas;                            // 0x0E00 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     LastKnownLocation;                             // 0x0E10 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              TimeSinceLastLocationStatUpdate;               // 0x0E1C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BufferedLocationDelta;                         // 0x0E20 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bHasBeenTeleportedOnce : 1;                    // 0x0E24 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bReceivedDefaultWeapon : 1;                    // 0x0E24 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bInitialSpawn : 1;                             // 0x0E24 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bRespawnFromClassChange : 1;                   // 0x0E24 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bMayUpdateHealthGainStat : 1;                  // 0x0E24 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bLoadingCharacterPackageForClassSwitch : 1;    // 0x0E24 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bAllowWeaponsRestriction : 1;                  // 0x0E24 (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	uint32_t                                           bWeaponsRestricted : 1;                        // 0x0E24 (0x0004) [0x0000000100000020] [0x00000080] (CPF_Net)
	uint32_t                                           bTeleporterRestricted : 1;                     // 0x0E24 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bActionSkillConfirmationPending : 1;           // 0x0E24 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bHideCrosshairOnHUD : 1;                       // 0x0E24 (0x0004) [0x0000000000000020] [0x00000400] (CPF_Net)
	uint32_t                                           ToggleSprintOption : 1;                        // 0x0E24 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bHLQNoClipMode : 1;                            // 0x0E24 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           HLQPlayerMoving : 1;                           // 0x0E24 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bDemiGodMode : 1;                              // 0x0E24 (0x0004) [0x0000000000004000] [0x00004000] (CPF_Config)
	class FString                                      LastTouchedStationPath;                        // 0x0E28 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AWeapon*                                     LastUsedWeapon;                                // 0x0E38 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UProjectileDefinition*                       LastProjectileDefinition;                      // 0x0E40 (0x0008) [0x0000000000000000]               
	float                                              LastTauntAnimTime;                             // 0x0E48 (0x0004) [0x0000000000000000]               
	float                                              LastLevelUpTime;                               // 0x0E4C (0x0004) [0x0000000000000000]               
	float                                              LastLevelUpSoundTime;                          // 0x0E50 (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_RepeaterPistol;             // 0x0E54 (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_RevolverPistol;             // 0x0E58 (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_SMG;                        // 0x0E5C (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_CombatRifle;                // 0x0E60 (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_Shotgun;                    // 0x0E64 (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_SniperRifle;                // 0x0E68 (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_RocketLauncher;             // 0x0E6C (0x0004) [0x0000000000000000]               
	float                                              LastKnownAmmoCount_Grenades;                   // 0x0E70 (0x0004) [0x0000000000000000]               
	float                                              HealthStatAccumulator;                         // 0x0E74 (0x0004) [0x0000000000000000]               
	float                                              KillSkillTimeRemaining;                        // 0x0E78 (0x0004) [0x0000000100000020] (CPF_Net)     
	float                                              CurrentSprintDistance;                         // 0x0E7C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            AmmoResourceUpgrades[0x8];                     // 0x0E80 (0x0020) [0x0000000000000020] (CPF_Net)     
	class FString                                      DefaultPlayerCharacterClassName;               // 0x0EA0 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FInstanceData2                              InstanceState;                                 // 0x0EB0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AActor*                                      CurrentActionSkillTarget;                      // 0x0EC0 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              HLQPlayerMoveTime;                             // 0x0EC8 (0x0004) [0x0000000000000000]               
	class TArray<struct FScriptDelegate>               SkillPointsChangedDelegates;                   // 0x0ED0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnSkillGradeChanged__Delegate;               // 0x0EE0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnSkillPointsChanged__Delegate;              // 0x0EF0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnSkillTreeReset__Delegate;                  // 0x0F00 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerStateInfo");
		}

		return uClassPointer;
	};

	void NotifyKilledEnemy(const class FString& EnemyName);
	bool HandleWorldAreaDiscovery(const struct FName& DiscoveryName, const class FString& WorldAreaName, class UAkEvent* SoundEvent, bool bForFogOfWarOnly);
	void eventSendClientConsoleCommand(const class FString& Command);
	bool eventOverrideCrosshairVisibility(bool bHasCrosshair, bool bScopeCrosshair);
	void ApplyCharacterClassDefaults();
	void AddAccuracyImpulse(float Delta, bool bOffHand);
	void OnWeaponsRestrictedChange();
	void eventToggleWeaponsRestricted();
	void eventSetWeaponsRestricted(bool bNewWeaponsRestrictedState, bool optionalBOverrideAllowWeaponsRestriction);
	bool EndSprinting();
	bool BeginSprinting();
	class AWillowProjectile* SpawnCurrentProjectile(class UProjectileDefinition* optionalCurrentProjectile, bool optionalBLeftHand, bool optionalBConsumeResource, bool optionalBNoVelocity);
	void SetCurrentProjectile(class UProjectileDefinition* CurrentProjectile);
	int32_t GetSkillGrade(class USkillDefinition* Skill);
	bool IsHumanPlayer();
	void OnSkillEvent(class USkillDefinition* SkillDef, ESkillEventType EventType, class AActor* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject);
	EeSkillCastStyle GetActionSkillCastingStyle();
	bool IsAnyActionSkillRunning();
	void EndActionSkillSlot(int32_t SlotIndex);
	class UPlayerSkillTree* GetPlayerSkillTree();
	class AActor* GetActionSkillTarget();
	class AActor* GetSkillInstigatorActor();
	void HandleSkillTreeReset(int32_t SkillPointsReturned);
	void FireSkillGradeChangedDelegate(class USkillDefinition* Skill, uint8_t NewSkillPoints, uint8_t Grade);
	void UnregisterSkillGradeChangedDelegate();
	void RegisterSkillGradeChangedDelegate(const struct FScriptDelegate& GradeChangedDelegate);
	void FireSkillTreeResetDelegate(int32_t NewSkillPoints);
	void UnregisterSkillTreeResetDelegate();
	void RegisterSkillTreeResetDelegate(const struct FScriptDelegate& SkillTreeResetDelegate);
	void eventFireSkillPointsChangedDelegates(int32_t NumSkillPoints);
	void UnregisterSkillPointsChangedDelegate(const struct FScriptDelegate& SkillPointsChangedDelegate);
	void RegisterSkillPointsChangedDelegate(const struct FScriptDelegate& SkillPointsChangedDelegate);
	void OnSkillTreeReset(int32_t NewSkillPoints);
	void OnSkillPointsChanged(int32_t NewSkillPoints);
	void OnSkillGradeChanged(class USkillDefinition* Skill, uint8_t NewSkillPoints, uint8_t Grade);
	bool eventUpgradeSkill(class USkillDefinition* Skill);
	int32_t GetSkillUpgradeCost(class USkillDefinition* Skill);
	void eventUpdateSkillsAfterTreeReset();
	void CheckSkillActivation(class USkillDefinition* Skill);
	void ForceKillSkillsOff();
	bool UpdateKillSkills(bool bEnable);
	float GetActionSkillDuration();
	class ASkillEffectManager* GetSkillManager();
	void InitPlayerSkillTree();
	bool eventGetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventGetUniqueInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	class APawn* GetInstanceDataPawn();
	class AActor* GetResourcePoolProviderActor();
	void SetResourcePoolManager(class AResourcePoolManager* InManager);
	class AResourcePoolManager* GetResourcePoolManager();
	struct FResourcePoolReference GetResourcePoolForResourceDefinition(class UResourceDefinition* Resource, bool optionalBCreatePoolIfOneDoesntExist);
	void RecalculateAttributeInitializedState();
	void InitializeResourcePools();
	void eventDestroyed();
	void InitPlayerStateInfo();
	void eventReplicatedArrayEvent(const struct FName& VarName, int32_t ArrayIndex);
	void eventReplicatedEvent(const struct FName& VarName);
};

// Class WillowGame.WillowPointLight
// 0x0020 (0x0270 - 0x0290)
class UWillowPointLight : public UPointLightComponent
{
public:
	uint32_t                                           bCheckFrameRate : 1;                           // 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              HighDetailFrameTime;                           // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Lifetime;                                      // 0x0278 (0x0004) [0x0000000000000000]               
	int32_t                                            TimeShiftIndex;                                // 0x027C (0x0004) [0x0000000000000000]               
	class TArray<struct FLightValues>                  TimeShift;                                     // 0x0280 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPointLight");
		}

		return uClassPointer;
	};

	void ResetLight();
};

// Class WillowGame.WillowPointSpawner
// 0x0008 (0x0348 - 0x0350)
class AWillowPointSpawner : public APointSpawner
{
public:
	int32_t                                            MissionObjectiveBit;                           // 0x0348 (0x0004) [0x0000000000220001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPointSpawner");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowProfile
// 0x0A08 (0x0058 - 0x0A60)
class UWillowProfile : public UObject
{
public:
	uint32_t                                           bDirty : 1;                                    // 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bStatsDirty : 1;                               // 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           YInversion : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           GamepadInvertTurn : 1;                         // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           GamepadInvertMove : 1;                         // 0x0058 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           GamepadInvertStrafe : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           ApplyControllerViewAccel : 1;                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           AllowForceFeedback : 1;                        // 0x0058 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           ControllerAutoAim : 1;                         // 0x0058 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           EnableTrainingMessages : 1;                    // 0x0058 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           ZoomSnapToTarget : 1;                          // 0x0058 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           ZoomToggle : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           AutoKickRecovery : 1;                          // 0x0058 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           ShouldCensorContent : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           QuickShop : 1;                                 // 0x0058 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           ToggleSprint : 1;                              // 0x0058 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           LockCombatRadarRotation : 1;                   // 0x0058 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bSpectatorShowFirstPersonNearDeathHaze : 1;    // 0x0058 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           EnableSubtitles : 1;                           // 0x0058 (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           EnableOptionalVO : 1;                          // 0x0058 (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           PushToTalk : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           EnableControllerAudio : 1;                     // 0x0058 (0x0004) [0x0000000000000001] [0x00200000] (CPF_Edit)
	uint32_t                                           InvertMouseLook : 1;                           // 0x0058 (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           MouseSmoothing : 1;                            // 0x0058 (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           IntroMovieViewed : 1;                          // 0x0058 (0x0004) [0x0000000000000001] [0x01000000] (CPF_Edit)
	uint32_t                                           HideStrictNATHelpDialog : 1;                   // 0x0058 (0x0004) [0x0000000000000001] [0x02000000] (CPF_Edit)
	uint32_t                                           BreadcrumbListDirty : 1;                       // 0x0058 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bCompletedPrologue : 1;                        // 0x0058 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bCompletedVersusPrologue : 1;                  // 0x0058 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bPrivateMatch_CharacterUniqueness : 1;         // 0x0058 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bPrivateMatch_GlobalChat : 1;                  // 0x0058 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bPrivateMatch_Hardcore : 1;                    // 0x0058 (0x0004) [0x0000000000000000] [0x80000000] 
	int32_t                                            ProfileStatsArray[0x200];                      // 0x005C (0x0800) [0x0000000000000001] (CPF_Edit)    
	float                                              ControllerSensitivityX;                        // 0x085C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ControllerSensitivityY;                        // 0x0860 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      ControllerPreset;                              // 0x0868 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      ControllerBinding;                             // 0x0878 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              Brightness;                                    // 0x0888 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HUDScaleX;                                     // 0x088C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HUDScaleY;                                     // 0x0890 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HUDScaleE;                                     // 0x0894 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BaseFOV;                                       // 0x0898 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ETwoPlayerSplitDirectionOptions                    TwoPlayerSplitDirection;                       // 0x089C (0x0001) [0x0000000000000001] (CPF_Edit)    
	EThreePlayerSplitDirectionOptions                  ThreePlayerSplitDirection;                     // 0x089D (0x0001) [0x0000000000000001] (CPF_Edit)    
	E4KConsoleResolutionSetting                        ConsoleResolutionSetting;                      // 0x089E (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAutoAimSetting                                    AutoAim;                                       // 0x089F (0x0001) [0x0000000000004001] (CPF_Edit | CPF_Config)
	EeSkillCastStyle                                   SkillCastStyleOptions;                         // 0x08A0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDamageFeedbackOptions                             DamageFeedback;                                // 0x08A1 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMapDisplayOptions                                 MapDisplay;                                    // 0x08A2 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EChatDisplayLength                                 ChatDisplayLength;                             // 0x08A3 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ERegenTextDisplayMode                              RegenTextDisplayMode;                          // 0x08A4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESpectatorCameraClippingMode                       SpectatorCameraClippingMode;                   // 0x08A5 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAutoDisplayDeathRecap                             SpectatorDeathRecapDisplayMode;                // 0x08A6 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESpectatorFirstPersonPreference                    SpectatorFirstPersonPreference;                // 0x08A7 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDamageNumberStyleOptions                          DamageNumberStyle;                             // 0x08A8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPartyNetworkOptions                               PartyNetworkOptions;                           // 0x08A9 (0x0001) [0x0000000000004001] (CPF_Edit | CPF_Config)
	ESpeakerSetup                                      SpeakerSetup;                                  // 0x08AA (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleDetailSetting                             ParticleDetailSetting;                         // 0x08AB (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              MusicVolume;                                   // 0x08AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SoundEffectsVolume;                            // 0x08B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VOVolume;                                      // 0x08B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VoiceVolume;                                   // 0x08B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MasterVolume;                                  // 0x08BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PlayerAlertVolume;                             // 0x08C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeakerAngleFront;                             // 0x08C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeakerAngleSide;                              // 0x08C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeakerAngleBack;                              // 0x08CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MouseSensitivityX;                             // 0x08D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MouseSensitivityY;                             // 0x08D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      KeyBinding;                                    // 0x08D8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            NewOfferVersion;                               // 0x08E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LastSavedId;                                   // 0x08EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TeamColorIndexAlly;                            // 0x08F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TeamColorIndexEnemy;                           // 0x08F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FUIBreadcrumbEntry>            UIBreadcrumbs;                                 // 0x08F8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            BreadcrumbCount;                               // 0x0908 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      LastInventoryDeltaTime;                        // 0x0910 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            PrivateMatch_CharacterSelectStyle;             // 0x0920 (0x0004) [0x0000000000000000]               
	int32_t                                            PrivateMatch_NumBotsTeamA;                     // 0x0924 (0x0004) [0x0000000000000000]               
	int32_t                                            PrivateMatch_NumBotsTeamB;                     // 0x0928 (0x0004) [0x0000000000000000]               
	int32_t                                            PrivateMatch_CampaignDifficultyIndex;          // 0x092C (0x0004) [0x0000000000000000]               
	class FString                                      LastCompletedCampaignPrivateMatchMapGuid;      // 0x0930 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      LastCharacterPlayedAsMetaId;                   // 0x0940 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      LastCharacterSkinPlayedWithMetaId;             // 0x0950 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            MarketplaceMetaItemSortingType;                // 0x0960 (0x0004) [0x0000000000000000]               
	int32_t                                            BattlebornMetaItemSortingType;                 // 0x0964 (0x0004) [0x0000000000000000]               
	int32_t                                            ArtifactsMetaItemSortingType;                  // 0x0968 (0x0004) [0x0000000000000000]               
	int32_t                                            CareerMetaItemSortingType;                     // 0x096C (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        CharacterHydraIDs;                             // 0x0970 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        DefaultSkinHydraIDs;                           // 0x0980 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        DefaultTauntHydraIds;                          // 0x0990 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        PlayedExperienceGuids;                         // 0x09A0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      VitaControllerPreset;                          // 0x09B0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      VitaControllerBinding;                         // 0x09C0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCustomCameraData>             CustomCameras;                                 // 0x09D0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            NewsHashes[0x20];                              // 0x09E0 (0x0080) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowProfile");
		}

		return uClassPointer;
	};

	void ResetProfileStats();
	bool SetProfileStatValue(int32_t MappingIndex, int32_t Value);
	bool GetProfileStatValue(int32_t MappingIndex, int32_t& Value);
	void GetBytes(class TArray<uint8_t>& Data);
	static class UWillowProfile* GetProfileFromBytes(const class TArray<uint8_t>& Data);
};

// Class WillowGame.WillowProjectile
// 0x03E0 (0x02D0 - 0x06B0)
class AWillowProjectile : public AProjectile
{
public:
	struct FPointer                                    VfTable_IIBasicBehavior;                       // 0x02D0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IICounterBehavior;                     // 0x02D8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITimerBehavior;                       // 0x02E0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageBehavior;                      // 0x02E8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIKilledBehavior;                      // 0x02F0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIProjectileBehavior;                  // 0x02F8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITargetable;                          // 0x0300 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0308 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                       // 0x0310 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIAttachableActor;                     // 0x0318 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;             // 0x0320 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0328 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDrunkenProjectile;                   // 0x0330 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPathingObstacle;                     // 0x0338 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IILightProjectileManagerOwner;         // 0x0340 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIPhysicsAffector;                     // 0x0348 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorTriggerOwner;                // 0x0350 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UProjectileDefinition*                       Definition;                                    // 0x0358 (0x0008) [0x0000000000000000]               
	uint32_t                                           bInitializedFromDef : 1;                       // 0x0360 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bIsProjectileDisabled : 1;                     // 0x0360 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bProjectileDetonated : 1;                      // 0x0360 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDamageReentrantFlag : 1;                      // 0x0360 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bIsProjectileAttached : 1;                     // 0x0360 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bSuppressExplosionFX : 1;                      // 0x0360 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bAutoAimTarget : 1;                            // 0x0360 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bWaitForEffects : 1;                           // 0x0360 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bExploded : 1;                                 // 0x0360 (0x0004) [0x0000000100000020] [0x00000100] (CPF_Net)
	uint32_t                                           bWideCheck : 1;                                // 0x0360 (0x0004) [0x0000000000000020] [0x00000200] (CPF_Net)
	uint32_t                                           bCheckProjectileLight : 1;                     // 0x0360 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bDLEInitialized : 1;                           // 0x0360 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bIsHoming : 1;                                 // 0x0360 (0x0004) [0x0000000100000020] [0x00001000] (CPF_Net)
	uint32_t                                           RetryFindHomingTarget : 1;                     // 0x0360 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           RetryNotInstigator : 1;                        // 0x0360 (0x0004) [0x0000000000002000] [0x00004000] (CPF_Transient)
	uint32_t                                           RetryIgnoreFOVZTest : 1;                       // 0x0360 (0x0004) [0x0000000000002000] [0x00008000] (CPF_Transient)
	uint32_t                                           RetryBestForwardTarget : 1;                    // 0x0360 (0x0004) [0x0000000000002000] [0x00010000] (CPF_Transient)
	uint32_t                                           RetryUniqueHomingTarget : 1;                   // 0x0360 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bReplicateServerMovement : 1;                  // 0x0360 (0x0004) [0x0000000000000020] [0x00040000] (CPF_Net)
	uint32_t                                           bWithinCurrentlyPursuedNodeAlertRadius : 1;    // 0x0360 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bTakenDamage : 1;                              // 0x0360 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bWithinProximityTouch : 1;                     // 0x0360 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bOvercharged : 1;                              // 0x0360 (0x0004) [0x0000000100000020] [0x00400000] (CPF_Net)
	uint32_t                                           bCauseRadiusDamageToInstigator : 1;            // 0x0360 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bIsStickyGrenade : 1;                          // 0x0360 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bIsChildOfSticky : 1;                          // 0x0360 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bBeingHealed : 1;                              // 0x0360 (0x0004) [0x0000000000002000] [0x04000000] (CPF_Transient)
	uint32_t                                           WantsToLevelOffTrajectory : 1;                 // 0x0360 (0x0004) [0x0000000000002000] [0x08000000] (CPF_Transient)
	uint32_t                                           bLocalOnlyProjectile : 1;                      // 0x0360 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bIsTargetable : 1;                             // 0x0360 (0x0004) [0x0000000000002020] [0x20000000] (CPF_Net | CPF_Transient)
	class UBodyProviderDefinition*                     BodyProvider;                                  // 0x0368 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowDamageTypeDefinition*                 MyDamageTypeDefinition;                        // 0x0370 (0x0008) [0x0000000100000020] (CPF_Net)     
	class UExplosionDefinition*                        MyExplosionDefinition;                         // 0x0378 (0x0008) [0x0000000100000020] (CPF_Net)     
	class UPawnAllegiance*                             Allegiance;                                    // 0x0380 (0x0008) [0x0000000100000020] (CPF_Net)     
	class UITargetable*                                AllegianceParent_Object;                       // 0x0388 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UITargetable*                                AllegianceParent_Interface;                    // 0x0390 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class UITargetable*>                  AllegianceChildren;                            // 0x0398 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              LastRBImpactEffectTime;                        // 0x03A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UMeshComponent*                              MyMeshClone;                                   // 0x03B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FTimerBehaviorUserState                     ProjectileTimers;                              // 0x03B8 (0x0024) [0x0000000000000000]               
	struct FCounterBehaviorUserState                   ProjectileCounters;                            // 0x03DC (0x0010) [0x0000000000000000]               
	class TArray<struct FName>                         ActiveBehaviorSets;                            // 0x03F0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVector                                     AttachmentNormal;                              // 0x0400 (0x000C) [0x0000000000000000]               
	class UParticleSystemComponent*                    ProjEffects;                                   // 0x0410 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    OverchargedEffect;                             // 0x0418 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystem*                             EffectiveInFlightEffects;                      // 0x0420 (0x0008) [0x0000000000000020] (CPF_Net)     
	EAutoAimProfile                                    AutoAimProfile;                                // 0x0428 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EHomingTargetType                                  HomingTargetType;                              // 0x0429 (0x0001) [0x0000000000000020] (CPF_Net)     
	EProjectilePayloadType                             PayloadType;                                   // 0x042A (0x0001) [0x0000000000002000] (CPF_Transient)
	float                                              AccelRate;                                     // 0x042C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ExpLevel;                                      // 0x0430 (0x0004) [0x4000000100000020] (CPF_Net)     
	int32_t                                            FiringOwnerStatsID;                            // 0x0434 (0x0004) [0x0000000000000000]               
	int32_t                                            FiringWeaponStatsID;                           // 0x0438 (0x0004) [0x0000000000000000]               
	int32_t                                            FiringWeaponMode;                              // 0x043C (0x0004) [0x0000000000000000]               
	float                                              CheckRadius;                                   // 0x0440 (0x0004) [0x0000000000000000]               
	class UClass*                                      ProjectileLightClass;                          // 0x0448 (0x0008) [0x0000000000000000]               
	class UPointLightComponent*                        ProjectileLight;                               // 0x0450 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x0458 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AActor*                                      HomingActor;                                   // 0x0460 (0x0008) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     HomingLocation;                                // 0x0468 (0x000C) [0x0000000000000020] (CPF_Net)     
	struct FRotator                                    HomingRotationOffset;                          // 0x0474 (0x000C) [0x0000000000000000]               
	struct FVector                                     LastHomingPollLocation;                        // 0x0480 (0x000C) [0x0000000000000000]               
	int32_t                                            HomingTargetComponentBitfield;                 // 0x048C (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              RetryTargetSearchRange;                        // 0x0490 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RetryTargetSearchFOVAngle;                     // 0x0494 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     RetryTargetOffset;                             // 0x0498 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              NextRetryFindHomingTargetTime;                 // 0x04A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RetryFindTargetDelay;                          // 0x04A8 (0x0004) [0x0000000000000000]               
	float                                              CustomGravityScaling;                          // 0x04AC (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FPointer                                    CurrentlyPursuedNode;                          // 0x04B0 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FInstanceData2                              InstanceDataState;                             // 0x04B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FCompressedBodyState2                       ReplicatedInstanceDataState;                   // 0x04C8 (0x0010) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class TArray<struct FHitActorData>                 HitActors;                                     // 0x04D8 (0x0010) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	class UBulletListenerComponent*                    BulletListenerComponent;                       // 0x04E8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              LastHomingRadius;                              // 0x04F0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FHomingThresholdEventState>    HomingThresholdEventStates;                    // 0x04F8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     InitialRBImpulse;                              // 0x0508 (0x000C) [0x0000000100000020] (CPF_Net)     
	struct FVector                                     Wave_LastOffset;                               // 0x0514 (0x000C) [0x0000000000000020] (CPF_Net)     
	struct FWaveMotionData                             ProjectileWaveMotion;                          // 0x0520 (0x0028) [0x0000000000000020] (CPF_Net)     
	class AActor*                                      ExtraNonBlockingActor;                         // 0x0548 (0x0008) [0x0000000000000000]               
	class AProximityActor*                             ProxActor;                                     // 0x0550 (0x0008) [0x0000000000000000]               
	class TArray<class AActor*>                        TouchedActors;                                 // 0x0558 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class APawn*                                       AltDamageInstigator;                           // 0x0568 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InstigatorSelfDamageScale;                     // 0x0570 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              InstigatorSelfDamageScaleBaseValue;            // 0x0574 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            InstigatorSelfDamageScaleModifierStack;        // 0x0578 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              OverrideInstigatorSelfDamageScale;             // 0x0588 (0x0004) [0x0000000000000000]               
	float                                              CreatedTime;                                   // 0x058C (0x0004) [0x0000000000000000]               
	float                                              SpeedMultiplier;                               // 0x0590 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              SpeedMultiplierBaseValue;                      // 0x0594 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            SpeedMultiplierModifierStack;                  // 0x0598 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LagCompensationTime;                           // 0x05A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SecondsBeforeConsideringRemoval;               // 0x05AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SecondsBetweenRemovalAttempts;                 // 0x05B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	class AActor*                                      StickyIsAttachedTo;                            // 0x05B8 (0x0008) [0x0000000000000000]               
	float                                              CollisionRadiusBeforeSticky;                   // 0x05C0 (0x0004) [0x0000000000000000]               
	float                                              FuseTime;                                      // 0x05C4 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              FuseTimeBaseValue;                             // 0x05C8 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            FuseTimeModifierStack;                         // 0x05D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            NumberOfChildProjectiles;                      // 0x05E0 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            NumberOfChildProjectilesBaseValue;             // 0x05E4 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            NumberOfChildProjectilesModifierStack;         // 0x05E8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x05F8 (0x0004) [0x0000000000000000]               
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;               // 0x05FC (0x000C) [0x0000000100000020] (CPF_Net)     
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                       // 0x0608 (0x0010) [0x0000000100000020] (CPF_Net)     
	class AWillowLightProjectileManager*               LightProjMgr;                                  // 0x0618 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            DrunkenRandomNumberSeed;                       // 0x0620 (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	class UMovementComponent*                          MovementComponent;                             // 0x0628 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	int32_t                                            ReflectionRandomNumberSeed;                    // 0x0630 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient)
	float                                              DesiredWorldZForLeveling;                      // 0x0634 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LevelingTurnSpeed;                             // 0x0638 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UPathingObstacleInfo*                        PathObstacleInfo;                              // 0x0640 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UClass*                                      TakingDamageFromType;                          // 0x0648 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UIDamageCauser*                              TakingDamageFromDamageCauser_Object;           // 0x0650 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UIDamageCauser*                              TakingDamageFromDamageCauser_Interface;        // 0x0658 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AController*                                 TakingDamageFromInstigator;                    // 0x0660 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     BehaviorHitNormal;                             // 0x0668 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              MaxLifespan;                                   // 0x0674 (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	struct FSplineFollowData                           SplineData;                                    // 0x0678 (0x0038) [0x0000000100002020] (CPF_Net | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowProjectile");
		}

		return uClassPointer;
	};

	void SetFollowingSpline(class ASplineActor* InSpline, float InTurnRate, const struct FAIRange& InOffsetRange, const struct FAIRange& InDistRange);
	void StopFollowingSpline();
	bool IsFollowingSpline();
	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	void CheckAIAvoidance();
	class UPathingObstacleInfo* GetObstacleInfo(bool optionalBFillInfo);
	void SetObstacleInfo(class UPathingObstacleInfo* Info);
	class AActor* GetObstacleActor();
	void SetTargetLocation(const struct FVector& NewTargetLocation);
	void SetHomingTarget(class AActor* NewTarget, const struct FVector& optionalTargetOffset, const struct FReplicatedBodyItem& optionalNewComponent);
	void FindHomingTarget(EHomingTargetType TargetType, float TargetSearchRange, float TargetSearchFOVAngle, bool bNotInstigator, bool bIgnoreFOVZTest, bool bBestForwardTarget, bool bRetryIfTargetNotFound, bool bUniqueTarget, const struct FVector& TargetOffset);
	float GetAudibility();
	float GetVisibility();
	void SetPatsy(class UITargetable* NewPatsy);
	class UITargetable* GetPatsy();
	bool IsBeingHealed();
	void SetBeingHealed(bool bNewBeingHealed);
	void SetDrunkenRandomNumberSeed(int32_t RandomNumberSeed);
	float GetTerminalVelocity();
	bool IsLevelingNow();
	void Behavior_TagPayloadType(EProjectilePayloadType InPayloadType);
	void Behavior_LevelOffTrajectory(float ZHeight, float TurnSpeed);
	void Behavior_SetExplosionDefinition(class UExplosionDefinition* MyExplosionDef);
	void Behavior_SetDamageTypeDefinition(class UWillowDamageTypeDefinition* DamageTypeDef);
	void Behavior_SetStickyGrenade();
	void DamageResult_KilledEnemy(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledFriendly(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_KilledNeutral(class UObject* KilledObject, int32_t DamageTags);
	void DamageResult_DamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void DamageResult_DamagedFriendly(class UObject* DamageTaker, float DamageAmount, int32_t DamageTags);
	void DamageResult_DamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, int32_t DamageTags);
	void SetSpeed(float NewSpeed);
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int32_t NewExpLevel);
	void SetAwesomeLevel(int32_t NewAwesomeLevel);
	void SetGameStage(int32_t NewGameStage);
	int32_t GetExpLevel();
	int32_t GetAwesomeLevel();
	int32_t GetGameStage();
	static int32_t GetPlayerProjectileLevel(class AWillowPlayerStateInfo* PSI);
	void SetMorphNodeWeight(class UMorphNodeWeight* Node, float NewWeight, float optionalWeightBlendTime);
	class UProjectileDefinition* GetProjectileDefinition();
	void InitializeRBPhysics();
	void Behavior_RegisterTargetable(bool bUnregister);
	void eventTraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, const struct FQWord& TraceFlags, float TouchTime);
	void SetInfoBarVisibility(bool bVisible);
	bool HideTargetInfoOnHud(class APawn* optionalHUDOwner);
	bool IsChampion();
	bool IsBoss();
	bool DoesTargetableTakeDamage();
	void GetHealthInfo(struct FHealthInfo& OutHealthInfo);
	void GetExpInfo(int32_t& ExpLevelValue);
	bool DisplayParentInfo();
	class AActor* GetTargetableActor();
	void Behavior_SetCanTarget(EChangeStatus ChangeStatus);
	int32_t ShowSelfAsTarget(bool bControllersOnly);
	struct FVector GetDamageVector();
	class UMeshComponent* GetRigidBodyMesh();
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* optionalTechFilter, EScriptedKillType optionalDeathType);
	void Behavior_CauseRadiusDamage(float Radius, float DamageAmount, bool bFullDamage, float Momentum, class UClass* DamageType, class UDamagePipeline* Pipeline, const struct FVector& optionalOffset, class UIDamageCauser* optionalDamageCauser, bool optionalBSkipTraceTest, EOpinion optionalAllegianceFilter, class TArray<class AActor*>& ActorsHurt);
	void Behavior_CauseDamage(class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamagePipeline* Pipeline, class UIDamageCauser* optionalDamageCauser);
	void SetProximity(float ProximityRadius, float ProximityHeight);
	void SetHomingRotationOffset(const struct FRotator& RotationOffset);
	struct FVector GetHomingTargetLocation();
	EHomingTargetType GetHomingTargetByType();
	void WasAttachedToActor(const struct FVector& InAttachmentNormal);
	class AActor* GetAttachedToActor();
	struct FVector GetAttachmentNormal();
	void AttachToActor(class AActor* ActorToAttachTo, const struct FVector& HitNormal, const struct FVector& HitLocation, const struct FName& BoneName);
	bool IsAttached();
	void DetonateProjectile();
	void Detonate();
	static float GetNextDetonationDelta();
	static void ResetDetonationDelta();
	bool SetVelocity(const struct FVector& ProjectileVelocity);
	bool GetVelocity(struct FVector& ProjectileVelocity);
	bool SetTimerState(EBehaviorTimerID TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(EBehaviorTimerID TimerId, struct FBehaviorTimerState& TimerState);
	float GetTimeSeconds();
	bool SetCounterState(EBehaviorCounterID CounterId, const struct FBehaviorCounterState& CounterState);
	bool GetCounterState(EBehaviorCounterID CounterId, struct FBehaviorCounterState& CounterState);
	float EvaluateAttributeInitialization(const struct FAttributeInitializationData& InitData);
	class UMeshComponent* GetMesh();
	class UAnimNode* FindAnimNode(const struct FName& NodeName);
	void SetRotationRate(const struct FRotator& NewRotationRate);
	float GetCollisionRadius();
	class ATemporalField* IsInTemporalField();
	class AActor* GetHomingTarget(class AWillowProjectile* Seeker, class AController* InstigatedBy);
	void InitStats(class AWillowWeapon* InstigatorWeapon);
	void MyOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void Destroyed();
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	void HideProjectile();
	void eventTornOff();
	void ShutDown();
	void UnregisterBehaviorConsumerTimer();
	void DisableProjectile();
	bool GetImpactInfoForTouch(class AActor* TouchedActor, class UPrimitiveComponent* TouchedComp, const struct FVector& TouchLocation, const struct FVector& TouchNormal, struct FImpactInfo& ImpactData);
	void eventApplyOverchargedEffect();
	void eventSpawnFlightEffects();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SpawnClientExplosion();
	void TryAwardExperience(class AController* InstigatedBy, class UClass* DamageType);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DmgRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class UIDamageCauser* DamageCauser, float optionalDamageFalloffExponent, class UDamagePipeline* optionalPipeline);
	void eventTakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& HitDirection, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class UIDamageCauser* optionalDamageCauser, class UDamagePipeline* optionalPipeline);
	void HandleOnHitEvents(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal, const struct FVector& HitLocation, EDamageSurfaceType DamageSurfaceType, int32_t BoneIndex, const struct FTraceHitInfo& InHitInfo, bool bIsProximityTouch);
	void SetDamageSurfaceTypeImpactDataAndBoneIndex(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal, struct FBehaviorParameters& EventData, EDamageSurfaceType& DamageSurfaceType, struct FImpactInfo& ImpactData, int32_t& BoneIndex);
	void eventLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	void DoHitWall(const struct FVector& HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation);
	void HitWall(const struct FVector& HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp);
	void SetAltDamageInstigator(class APawn* NewInstigator);
	void eventProximityTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ProcessTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HandleTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal, bool bIsProximityTouch);
	bool ShouldIgnoreTouchFrom(class AActor* TouchedActor, class UPrimitiveComponent* TouchedComponent, bool bIsProximityTouch, uint8_t& bTurnTouchIntoHitWall);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsBlockedByWillowInteractiveObject(class AActor* Other);
	void AvoidCollision(struct FVector& Accel);
	void DrawHomingDebugTracer(const struct FColor& LineColor);
	struct FVector GetCircularHomingAcceleration(const struct FVector& TargetLoc);
	void OnCounterEvent(EBehaviorCounterEvent EventType, const struct FBehaviorParameters& optionalEventData);
	void eventOnTimerEvent(EBehaviorTimerEvent EventType, const struct FBehaviorParameters& optionalEventData);
	void eventSetInitialState();
	void eventCreateProjectileLight();
	void InitWithVelocity(const struct FVector& StartingVelocity, bool optionalBUpdateRotation);
	void InitWithWaveMotion(const struct FVector& Direction, const struct FWaveMotionData& CustomProjectileWaveMotion);
	void SetVelocityAndAcceleration(const struct FVector& Direction);
	void Init(const struct FVector& Direction);
	void InitializeExplosion(class UExplosionDefinition* InExplosionDefinition);
	void eventInitializeDamageType(class UWillowDamageTypeDefinition* inDamageTypeDefinition);
	void UpdateAndDestroyNonVisibleActorInTimer();
	void DoOnSpawn();
	class UObject* eventProjectileGetBehaviorContext(struct FBehaviorContextData& ContextData);
	void InitializeFromDefinition(class UProjectileDefinition* InDefinition, int32_t InExpLevel, class UWillowDamageTypeDefinition* optionalCustomDamageTypeDefinition, bool optionalBSkipOnSpawn, class UParticleSystem* optionalCustomInFlightEffect, class UExplosionDefinition* optionalCustomExplosionDefinition);
	void eventReplicatedEvent(const struct FName& VarName);
	void eventRigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactIndex, struct FCollisionImpactData& RigidCollisionData);
	class AController* GetDamageController();
	class AController* GetInstigatingController();
	void PostBeginPlay();
	static bool IsHomingDebugEnabled();
	static void ToggleHomingDebug();
	static void CalcTrajectoryByTime(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapTime, float LeapGravity, struct FVector& OutVelocity);
	static void CalcTrajectoryAtActor(class AActor* Source, class AActor* Target, const struct FTrajectoryData& Data, bool optionalBCanDebug, float& OutTime, float& OutGravity, struct FVector& OutVelocity);
	static void CalcTrajectory(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapSpeed, float LeapAngle, float& OutTime, float& OutGravity, struct FVector& OutVelocity);
	static struct FVector GetTrajectoryOffset(float OffsetTime, float TotalTime, float Gravity, const struct FVector& StartVelocity);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	bool IsTargetableProxy();
	EAutoAimProfile GetAutoAimProfile();
	float GetMagnetismRange();
	struct FVector GetMagnetismOrigin();
	bool IsAutoAimTarget();
	float GetTargetingModifier();
	bool IsValidHomingTarget();
	bool IsTargetable(int32_t optionalTargetFlags);
	bool GetTargetableIsHidden();
	bool CanSnapZoom();
	void GetSnapRegion(struct FTargetSnapRegion& SnapRegion);
	struct FVector GetSnapLocation();
	void GetAuxiliaryTargetableLocations(class TArray<struct FVector>& AuxLocations);
	struct FVector GetTargetableLocation();
	EOpinion GetOpinion(class UObject* Other);
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	class UPawnAllegiance* GetDefaultAllegiance();
	class UPawnAllegiance* GetObjectAllegianceW();
	bool IsSameAllegiance(class UObject* anObject);
	bool IsNeutral(class UObject* anObject);
	bool IsFriendly(class UObject* anObject);
	bool IsEnemy(class UObject* anObject);
};

// Class WillowGame.WillowLocalOnlyProjectile
// 0x0000 (0x06B0 - 0x06B0)
class AWillowLocalOnlyProjectile : public AWillowProjectile
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLocalOnlyProjectile");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowServerSideProjectile
// 0x0028 (0x06B0 - 0x06D8)
class AWillowServerSideProjectile : public AWillowProjectile
{
public:
	struct FVector                                     ServerLocation;                                // 0x06B0 (0x000C) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     ServerVelocity;                                // 0x06BC (0x000C) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     ServerAcceleration;                            // 0x06C8 (0x000C) [0x0000000000000020] (CPF_Net)     

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowServerSideProjectile");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPursuitGrid
// 0x0018 (0x0058 - 0x0070)
class UWillowPursuitGrid : public UObject
{
public:
	class TArray<struct FPursuitNode>                  PursuitNodes;                                  // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FName                                       GridName;                                      // 0x0068 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPursuitGrid");
		}

		return uClassPointer;
	};

	void InitializeFromDefinition(class UWillowPursuitGridDefinition* GridDef);
};

// Class WillowGame.WillowPursuitGridDefinition
// 0x0018 (0x0058 - 0x0070)
class UWillowPursuitGridDefinition : public UGBXDefinition
{
public:
	class TArray<struct FPursuitNodeData>              PursuitNodes;                                  // 0x0058 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	struct FName                                       GridName;                                      // 0x0068 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPursuitGridDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowRegionDefinition
// 0x0008 (0x0058 - 0x0060)
class UWillowRegionDefinition : public URegionDefinition
{
public:
	class UDownloadableExpansionDefinition*            DlcExpansion;                                  // 0x0058 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowRegionDefinition");
		}

		return uClassPointer;
	};

	static void SetAwesomeLevelOverride(int32_t NewAwesomeLevelOverride);
	static void SetGameStageOverride(int32_t NewGameStageOverride);
	bool GetDefaultRegionGameStage(int32_t& MinGameStage, int32_t& MaxGameStage, int32_t& AwesomeLevel, int32_t& GameStageIncreaseOverPlayerLevel);
	bool TestRegionGameStage(bool optionalBDefaultGameStage, int32_t& GameStage, int32_t& AwesomeLevel);
	bool GetRegionGameStage(bool optionalBDefaultGameStage, int32_t& GameStage, int32_t& AwesomeLevel);
};

// Class WillowGame.WillowReplicatedAmbientSound
// 0x0040 (0x0240 - 0x0280)
class AWillowReplicatedAmbientSound : public AActor
{
public:
	class UAkEvent*                                    AkEvent;                                       // 0x0240 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AWillowReplicatedAmbientSoundSource*> AdditionalSources;                             // 0x0248 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bEnabled : 1;                                  // 0x0258 (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	uint32_t                                           bUseSeamlessStop : 1;                          // 0x0258 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bRegistered : 1;                               // 0x0258 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class UAkEvent*                                    StopAkEvent;                                   // 0x0260 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAkPlayingInfo                              SeamlessPlayingInfo;                           // 0x0268 (0x0010) [0x0000000000080000] (CPF_Component)
	class AWwiseSoundGroup*                            Group;                                         // 0x0278 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowReplicatedAmbientSound");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class WillowGame.WillowReplicatedAmbientSoundRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowReplicatedAmbientSoundRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowReplicatedAmbientSoundRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowReplicatedAmbientSoundSource
// 0x0000 (0x0240 - 0x0240)
class AWillowReplicatedAmbientSoundSource : public ANote
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowReplicatedAmbientSoundSource");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowRotationComponent
// 0x0028 (0x0170 - 0x0198)
class UWillowRotationComponent : public URotationComponent
{
public:
	class AWillowPawn*                                 WillowPawn;                                    // 0x0170 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AWillowMind*                                 WillowMind;                                    // 0x0178 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAIClassDefinition*                          AIClass;                                       // 0x0180 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowNavigationHandle*                     WillowNavHandle;                               // 0x0188 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowStanceComponent*                      WillowStanceComponent;                         // 0x0190 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowRotationComponent");
		}

		return uClassPointer;
	};

	void Initialize();
};

// Class WillowGame.WillowSavedMove
// 0x0008 (0x0110 - 0x0118)
class UWillowSavedMove : public USavedMove
{
public:
	uint32_t                                           bSprint : 1;                                   // 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSavedMove");
		}

		return uClassPointer;
	};

	static EDoubleClickDir SetFlags(uint8_t Flags, class APlayerController* PC);
	uint8_t CompressedFlags();
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, EDoubleClickDir InDoubleClick, uint8_t InAnalogPct);
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	void Clear();
};

// Class WillowGame.WillowSeqAct_AIScriptedDeath
// 0x0028 (0x0118 - 0x0140)
class UWillowSeqAct_AIScriptedDeath : public USeqAct_AIScripted
{
public:
	class UDamageTypeDefinition*                       DamageType;                                    // 0x0118 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EScriptedKillType                                  DeathType;                                     // 0x0120 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowAnimDefinition*                       Anim;                                          // 0x0128 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowAnimDefinition*                       EditInlineAnim;                                // 0x0130 (0x0008) [0x0000000004000003] (CPF_Edit | CPF_Const | CPF_EditInline)
	class AActor*                                      Killer;                                        // 0x0138 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_AIScriptedDeath");
		}

		return uClassPointer;
	};

	void Activate(class UIAIInterface* AIInterface);
	void eventKill(class AWillowPawn* WillowPawn);
};

// Class WillowGame.WillowSeqAct_AIScriptedFollow
// 0x0020 (0x0118 - 0x0138)
class UWillowSeqAct_AIScriptedFollow : public USeqAct_AIScripted
{
public:
	class AActor*                                      ToFollow;                                      // 0x0118 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              CatchupDistance;                               // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HoldStillDistance;                             // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseFormation : 1;                             // 0x0128 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FName                                       FormationNameTag;                              // 0x012C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_AIScriptedFollow");
		}

		return uClassPointer;
	};

	struct FName GetScriptedStateName();
};

// Class WillowGame.WillowSeqAct_AISetItemTossTarget
// 0x0010 (0x0118 - 0x0128)
class UWillowSeqAct_AISetItemTossTarget : public USeqAct_AIScripted
{
public:
	class TArray<class AActor*>                        TossTargets;                                   // 0x0118 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_AISetItemTossTarget");
		}

		return uClassPointer;
	};

	void Activate(class UIAIInterface* AIInterface);
};

// Class WillowGame.WillowSeqAct_ClientFlagGet
// 0x0010 (0x00E8 - 0x00F8)
class UWillowSeqAct_ClientFlagGet : public USequenceAction
{
public:
	struct FName                                       ClientFlagName;                                // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bValue : 1;                                    // 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ClientFlagGet");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class WillowGame.WillowSeqAct_ClientFlagSet
// 0x0010 (0x00E8 - 0x00F8)
class UWillowSeqAct_ClientFlagSet : public USequenceAction
{
public:
	struct FName                                       ClientFlagName;                                // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnableFlag : 1;                               // 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ClientFlagSet");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class WillowGame.WillowSeqAct_ConfigureBossMusic
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_ConfigureBossMusic : public USequenceAction
{
public:
	class UAkState*                                    BossAkState;                                   // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ConfigureBossMusic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ConfigureCustomAmbientMusic
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_ConfigureCustomAmbientMusic : public USequenceAction
{
public:
	class UAkState*                                    AmbientMusicAkState;                           // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ConfigureCustomAmbientMusic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ConfigureLevelMusic
// 0x0020 (0x00E8 - 0x0108)
class UWillowSeqAct_ConfigureLevelMusic : public USequenceAction
{
public:
	class UAkEvent*                                    MusicStartAkEvent;                             // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkEvent*                                    MusicStopAkEvent;                              // 0x00F0 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkState*                                    AmbientAkState;                                // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAkState*                                    CombatAkState;                                 // 0x0100 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ConfigureLevelMusic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_CoordinateOperations
// 0x0020 (0x00E8 - 0x0108)
class UWillowSeqAct_CoordinateOperations : public USequenceAction
{
public:
	class TArray<class USequenceOp*>                   AllOperations;                                 // 0x00E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class USequenceOp*>                   OperationsRemaining;                           // 0x00F8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_CoordinateOperations");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_DayNightCycle
// 0x0000 (0x0210 - 0x0210)
class UWillowSeqAct_DayNightCycle : public USeqAct_Interp
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_DayNightCycle");
		}

		return uClassPointer;
	};

	static bool TogglePauseDayCycle();
	static void SetTimeOfDay(float NewTimeOfDay);
};

// Class WillowGame.WillowSeqAct_DisableCombatMusicLogic
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_DisableCombatMusicLogic : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_DisableCombatMusicLogic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ElevatorFinished
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_ElevatorFinished : public USequenceAction
{
public:
	class AWillowElevator*                             Elevator;                                      // 0x00E8 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ElevatorFinished");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_EnableCombatMusicLogic
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_EnableCombatMusicLogic : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_EnableCombatMusicLogic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ExitVehicle
// 0x0018 (0x00E8 - 0x0100)
class UWillowSeqAct_ExitVehicle : public USequenceAction
{
public:
	class TArray<int32_t>                              SeatsToForceExitOn;                            // 0x00E8 (0x0010) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           UseDismountAnimationIfAvailable : 1;           // 0x00F8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ExitVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_InterpPawn
// 0x0010 (0x0100 - 0x0110)
class UWillowSeqAct_InterpPawn : public USeqAct_Latent
{
public:
	uint32_t                                           bLinear : 1;                                   // 0x0100 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              InterpSpeed;                                   // 0x0104 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      Goal;                                          // 0x0108 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_InterpPawn");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_KillPawnBasedOnAllegiance
// 0x0028 (0x00E8 - 0x0110)
class UWillowSeqAct_KillPawnBasedOnAllegiance : public USequenceAction
{
public:
	class UPawnAllegiance*                             AllegianceToBaseKillsOn;                       // 0x00E8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EAllegianceRelationship                            AllegianceKillRelationship;                    // 0x00F0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      DamageSource;                                  // 0x00F8 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UWillowDamageTypeDefinition*                 DamageType;                                    // 0x0100 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowInventoryToDrop : 1;                     // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_KillPawnBasedOnAllegiance");
		}

		return uClassPointer;
	};

	class AController* GetKillInstigatorFromVariableLink();
	class UPawnAllegiance* GetAllegianceFromVariableLink();
	void KillBasedOnThisAllegiance(class UPawnAllegiance* AllegianceToUse);
	void eventActivated();
};

// Class WillowGame.WillowSeqAct_MarkEnteredRegion
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_MarkEnteredRegion : public USequenceAction
{
public:
	ERegionList                                        Region;                                        // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_MarkEnteredRegion");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_MarkExitedRegion
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_MarkExitedRegion : public USequenceAction
{
public:
	ERegionList                                        Region;                                        // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_MarkExitedRegion");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_MissionSmokeTest
// 0x0020 (0x0100 - 0x0120)
class UWillowSeqAct_MissionSmokeTest : public USeqAct_Latent
{
public:
	class TArray<class FString>                        SaveGameList;                                  // 0x0100 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            CurrentSavegame;                               // 0x0110 (0x0004) [0x0000000000000000]               
	uint8_t                                            TestStatus;                                    // 0x0114 (0x0001) [0x0000000000000000]               
	float                                              LatentFloat;                                   // 0x0118 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_MissionSmokeTest");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_MoveElevator
// 0x0010 (0x00E8 - 0x00F8)
class UWillowSeqAct_MoveElevator : public USequenceAction
{
public:
	class AWillowElevator*                             Elevator;                                      // 0x00E8 (0x0008) [0x0000000000000000]               
	ElevatorButtonUsage                                Usage;                                         // 0x00F0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CallFloor;                                     // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_MoveElevator");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_NotifyDesignerAttribute
// 0x0010 (0x00E8 - 0x00F8)
class UWillowSeqAct_NotifyDesignerAttribute : public USequenceAction
{
public:
	struct FName                                       AttributeName;                                 // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAttributeDefinition*                        OptionalAttributeDefinition;                   // 0x00F0 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_NotifyDesignerAttribute");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class WillowGame.WillowSeqAct_PlayArmAnimation
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_PlayArmAnimation : public USequenceAction
{
public:
	EAnimationType                                     AnimationType;                                 // 0x00E8 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_PlayArmAnimation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_PlayCameraAnim
// 0x0018 (0x00E8 - 0x0100)
class UWillowSeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 AnimToPlay;                                    // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendInTime;                                   // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Rate;                                          // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IntensityScale;                                // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_PlayCameraAnim");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_PrepareMapChangeFromDefinition
// 0x0010 (0x0120 - 0x0130)
class UWillowSeqAct_PrepareMapChangeFromDefinition : public USeqAct_PrepareMapChange
{
public:
	struct FName                                       DefaultMap;                                    // 0x0120 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAllowVehicles : 1;                            // 0x0128 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_PrepareMapChangeFromDefinition");
		}

		return uClassPointer;
	};

	static struct FName GetPersistentMap();
	static void SetPersistentMap(const struct FName& MapToLoad);
};

// Class WillowGame.WillowSeqAct_PrepareSavedMapChange
// 0x0000 (0x0120 - 0x0120)
class UWillowSeqAct_PrepareSavedMapChange : public USeqAct_PrepareMapChange
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_PrepareSavedMapChange");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_QueryTeleporterStatus
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_QueryTeleporterStatus : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_QueryTeleporterStatus");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ReleaseTeleporterHeldLevel
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ReleaseTeleporterHeldLevel : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ReleaseTeleporterHeldLevel");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ResurrectPlayer
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ResurrectPlayer : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ResurrectPlayer");
		}

		return uClassPointer;
	};

	void eventOnActivated(class AWillowPlayerController* aWPC);
};

// Class WillowGame.WillowSeqAct_RunCustomEvent
// 0x0018 (0x00E8 - 0x0100)
class UWillowSeqAct_RunCustomEvent : public USequenceAction
{
public:
	struct FName                                       CustomEventName;                               // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     EventInstigator;                               // 0x00F0 (0x0008) [0x0000000000000000]               
	class UObject*                                     OtherEventParticipant;                         // 0x00F8 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_RunCustomEvent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_SetAIFlag
// 0x0010 (0x00E8 - 0x00F8)
class UWillowSeqAct_SetAIFlag : public USequenceAction
{
public:
	class UFlagDefinition*                             FlagDefinition;                                // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bFlagState : 1;                                // 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_SetAIFlag");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_SetInteractionProxyState
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_SetInteractionProxyState : public USequenceAction
{
public:
	uint32_t                                           bPassEventsToKismet : 1;                       // 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_SetInteractionProxyState");
		}

		return uClassPointer;
	};

	void eventOnActivated(class AWillowMind* aWMind);
};

// Class WillowGame.WillowSeqAct_SetLockout
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_SetLockout : public USequenceAction
{
public:
	class ULockoutDefinition*                          LockoutDef;                                    // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_SetLockout");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_StopCameraAnim
// 0x0010 (0x00E8 - 0x00F8)
class UWillowSeqAct_StopCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 AnimToStop;                                    // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStopImmediately : 1;                          // 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_StopCameraAnim");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_TogglePostRenderFor
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_TogglePostRenderFor : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_TogglePostRenderFor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ToggleRestrictions
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_ToggleRestrictions : public USequenceAction
{
public:
	uint32_t                                           bToggleWeapons : 1;                            // 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ToggleRestrictions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_TravelStationTeleport
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_TravelStationTeleport : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_TravelStationTeleport");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_TurnOffCombatMusic
// 0x0008 (0x00E8 - 0x00F0)
class UWillowSeqAct_TurnOffCombatMusic : public USequenceAction
{
public:
	float                                              FadeOutTime;                                   // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnableAmbientMusic : 1;                       // 0x00EC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_TurnOffCombatMusic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_CheckLockout
// 0x0008 (0x00C8 - 0x00D0)
class UWillowSeqCond_CheckLockout : public USequenceCondition
{
public:
	class ULockoutDefinition*                          LockoutDef;                                    // 0x00C8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_CheckLockout");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_GoStraightToMainMenu
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_GoStraightToMainMenu : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_GoStraightToMainMenu");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_IsCombatMusicPlaying
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_IsCombatMusicPlaying : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_IsCombatMusicPlaying");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_IsPlayerServer
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_IsPlayerServer : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_IsPlayerServer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_MultiplePlayersInGame
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_MultiplePlayersInGame : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_MultiplePlayersInGame");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_ShouldStartNewGameCinematics
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_ShouldStartNewGameCinematics : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_ShouldStartNewGameCinematics");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_SplitScreen
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_SplitScreen : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_SplitScreen");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_SwitchByPlatform
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_SwitchByPlatform : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_SwitchByPlatform");
		}

		return uClassPointer;
	};

	uint8_t eventGetPlatform();
};

// Class WillowGame.WillowSeqEvent_CombatMusicStarted
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_CombatMusicStarted : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_CombatMusicStarted");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_CounterAtTarget
// 0x0008 (0x0118 - 0x0120)
class UWillowSeqEvent_CounterAtTarget : public USequenceEvent
{
public:
	EBehaviorCounterEvent                              Event;                                         // 0x0118 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_CounterAtTarget");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_CustomEvent
// 0x0008 (0x0118 - 0x0120)
class UWillowSeqEvent_CustomEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                     // 0x0118 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_CustomEvent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_DenStat
// 0x0008 (0x0118 - 0x0120)
class UWillowSeqEvent_DenStat : public USequenceEvent
{
public:
	int32_t                                            TriggerValue;                                  // 0x0118 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_DenStat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_DuelChallengeAccepted
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_DuelChallengeAccepted : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_DuelChallengeAccepted");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_DuelChallengeIssued
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_DuelChallengeIssued : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_DuelChallengeIssued");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_ElevatorUsed
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_ElevatorUsed : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_ElevatorUsed");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_FastTravel
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_FastTravel : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_FastTravel");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_PlayerJoined
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_PlayerJoined : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_PlayerJoined");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_PlayerLeft
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_PlayerLeft : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_PlayerLeft");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_StartNewGameCinematics
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_StartNewGameCinematics : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_StartNewGameCinematics");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_TimerElapsed
// 0x0008 (0x0118 - 0x0120)
class UWillowSeqEvent_TimerElapsed : public USequenceEvent
{
public:
	EBehaviorTimerEvent                                Event;                                         // 0x0118 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_TimerElapsed");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqVar_DayNightCycleVariable
// 0x0000 (0x0090 - 0x0090)
class UWillowSeqVar_DayNightCycleVariable : public USeqVar_Float
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqVar_DayNightCycleVariable");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqVar_DayNightCycleRate
// 0x0000 (0x0090 - 0x0090)
class UWillowSeqVar_DayNightCycleRate : public UWillowSeqVar_DayNightCycleVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqVar_DayNightCycleRate");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqVar_TimeOfDay
// 0x0000 (0x0090 - 0x0090)
class UWillowSeqVar_TimeOfDay : public UWillowSeqVar_DayNightCycleVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqVar_TimeOfDay");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_EyelidLook
// 0x0038 (0x0120 - 0x0158)
class UWillowSkelControl_EyelidLook : public USkelControlSingleBone
{
public:
	float                                              OriginalHorizAngle;                            // 0x0120 (0x0004) [0x0000000000000000]               
	float                                              OriginalVertAngle;                             // 0x0124 (0x0004) [0x0000000000000000]               
	struct FName                                       EyeBoneName;                                   // 0x0128 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            EyeMaterialIndex;                              // 0x0130 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              vertMax;                                       // 0x0134 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              vertMin;                                       // 0x0138 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              horizMax;                                      // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              horizMin;                                      // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              maxOpenValue;                                  // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              minOpenValue;                                  // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ClosedValue;                                   // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           EyeLidMoveable : 1;                            // 0x0150 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_EyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_LowerEyelidLook
// 0x0000 (0x0158 - 0x0158)
class UWillowSkelControl_LowerEyelidLook : public UWillowSkelControl_EyelidLook
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_LowerEyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_LeftLowerEyelidLook
// 0x0000 (0x0158 - 0x0158)
class UWillowSkelControl_LeftLowerEyelidLook : public UWillowSkelControl_LowerEyelidLook
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_LeftLowerEyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_RightLowerEyelidLook
// 0x0000 (0x0158 - 0x0158)
class UWillowSkelControl_RightLowerEyelidLook : public UWillowSkelControl_LowerEyelidLook
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_RightLowerEyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_UpperEyelidLook
// 0x0018 (0x0158 - 0x0170)
class UWillowSkelControl_UpperEyelidLook : public UWillowSkelControl_EyelidLook
{
public:
	struct FVector                                     LookAtOffset;                                  // 0x0158 (0x000C) [0x0000000000000000]               
	uint32_t                                           EyeMoveable : 1;                               // 0x0164 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              EyeInterpSpeed;                                // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_UpperEyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_LeftUpperEyelidLook
// 0x0000 (0x0170 - 0x0170)
class UWillowSkelControl_LeftUpperEyelidLook : public UWillowSkelControl_UpperEyelidLook
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_LeftUpperEyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_RightUpperEyelidLook
// 0x0000 (0x0170 - 0x0170)
class UWillowSkelControl_RightUpperEyelidLook : public UWillowSkelControl_UpperEyelidLook
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_RightUpperEyelidLook");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_FootPlacement
// 0x0038 (0x0180 - 0x01B8)
class UWillowSkelControl_FootPlacement : public USkelControlFootPlacement
{
public:
	struct FVector                                     LastOffset;                                    // 0x0180 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     CachedFloor;                                   // 0x018C (0x000C) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 CachedPawn;                                    // 0x0198 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowAnimTree*                             WillowAnimTree;                                // 0x01A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InterpSpeed;                                   // 0x01A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ExpensiveDistanceFactor;                       // 0x01AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bMoreAccurateAndMoreExpensive : 1;             // 0x01B0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bThrottleIK : 1;                               // 0x01B0 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bGuessFootDistances : 1;                       // 0x01B0 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_FootPlacement");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_LookAtActor
// 0x0008 (0x01B8 - 0x01C0)
class UWillowSkelControl_LookAtActor : public USkelControl_HeadLook
{
public:
	class AWillowPawn*                                 WillowAIPawn;                                  // 0x01B8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_LookAtActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_MeshTranslation
// 0x0020 (0x00F0 - 0x0110)
class UWillowSkelControl_MeshTranslation : public USkelControlBase
{
public:
	struct FVector                                     LastRootBoneTranslation;                       // 0x00F0 (0x000C) [0x0000000000002000] (CPF_Transient)
	class AWillowPawn*                                 CachedPawn;                                    // 0x0100 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InterpSpeed;                                   // 0x0108 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_MeshTranslation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_RotateFlapFromFiring
// 0x0028 (0x0120 - 0x0148)
class UWillowSkelControl_RotateFlapFromFiring : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                // 0x0120 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FRotator                                    RotationExtent;                                // 0x0128 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bPaused : 1;                                   // 0x0134 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              BlendPercent;                                  // 0x0138 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendPercentRate;                              // 0x013C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendPercentRateDelay;                         // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_RotateFlapFromFiring");
		}

		return uClassPointer;
	};

	void Reset();
	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float ExpandPercentPerImpulse, float CollapseDuration, float FireInterval);
	void EndFire(float CollapseDuration);
	void BeginFire(float ExpandDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};

// Class WillowGame.WillowSkelControl_RotateWeaponBoneFromFiring
// 0x0050 (0x0120 - 0x0170)
class UWillowSkelControl_RotateWeaponBoneFromFiring : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                // 0x0120 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bAdjustMaxRotationByFireInterval : 1;          // 0x0128 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bPaused : 1;                                   // 0x0128 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            NumberOfShotsPerRotation;                      // 0x012C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxRotationsPerSecond;                         // 0x0130 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinRotationsPerSecond;                         // 0x0134 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    RotationExtent;                                // 0x0138 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     TranslationExtent;                             // 0x0144 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TranslationOnRate;                             // 0x0150 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              TranslationOffRate;                            // 0x0154 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CurrentMaxRotationsPerSecond;                  // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendPercent;                                  // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendPercentRate;                              // 0x0160 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendPercentRateDelay;                         // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TranslationBlendPercent;                       // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_RotateWeaponBoneFromFiring");
		}

		return uClassPointer;
	};

	void Reset();
	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval);
	void EndFire(float SpinDownDuration);
	void BeginFire(float SpinUpDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};

// Class WillowGame.WillowSkelControl_RotationRate
// 0x0010 (0x0120 - 0x0130)
class UWillowSkelControl_RotationRate : public USkelControlSingleBone
{
public:
	struct FRotator                                    RotationRate;                                  // 0x0120 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_RotationRate");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_RotationRateBySpeed
// 0x0028 (0x0130 - 0x0158)
class UWillowSkelControl_RotationRateBySpeed : public UWillowSkelControl_RotationRate
{
public:
	uint32_t                                           bUseBaseSkelComponentOwner : 1;                // 0x0130 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	ESpeedComponent                                    SpeedComponent;                                // 0x0134 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MinSpeed;                                      // 0x0138 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxSpeed;                                      // 0x013C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    MinRotationRate;                               // 0x0140 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    MaxRotationRate;                               // 0x014C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_RotationRateBySpeed");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControlHandPlacement
// 0x0010 (0x0158 - 0x0168)
class UWillowSkelControlHandPlacement : public USkelControlLimb
{
public:
	class UObject*                                     TargetRef;                                     // 0x0158 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FName                                       TargetAttachmentName;                          // 0x0160 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControlHandPlacement");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControlLerpSingleBone
// 0x0040 (0x0120 - 0x0160)
class UWillowSkelControlLerpSingleBone : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                // 0x0120 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FRotator                                    RotationExtent;                                // 0x0128 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAdjustRotationRateByFireInterval : 1;         // 0x0134 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              RotationRate;                                  // 0x0138 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IncrementSize;                                 // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    StartRotation;                                 // 0x0140 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    DestinationRotation;                           // 0x014C (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              RemainingRotations;                            // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentRotationRate;                           // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControlLerpSingleBone");
		}

		return uClassPointer;
	};

	void Reset();
	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval);
	void EndFire(float SpinDownDuration);
	void BeginFire(float SpinUpDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};

// Class WillowGame.WillowSkelControlSpline
// 0x0028 (0x00F0 - 0x0118)
class UWillowSkelControlSpline : public USkelControlBase
{
public:
	int32_t                                            SplineLength;                                  // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              SplineBoneAxis;                                // 0x00F4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESplineControlRotMode                              BoneRotMode;                                   // 0x00F5 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  EndSplineLocationSpace;                        // 0x00F6 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  StartSplineLocationSpace;                      // 0x00F7 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertSplineBoneAxis : 1;                     // 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FVector                                     EndSplineOffset;                               // 0x00FC (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartSplineOffset;                             // 0x0108 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControlSpline");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSnapshotRecord
// 0x0000 (0x00B0 - 0x00B0)
class UWillowSnapshotRecord : public USnapshotRecord
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSnapshotRecord");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPlayerSnapshotRecord
// 0x0008 (0x00B0 - 0x00B8)
class UWillowPlayerSnapshotRecord : public UWillowSnapshotRecord
{
public:
	struct FName                                       MyWillowPawnName;                              // 0x00B0 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerSnapshotRecord");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSpawnDefinition
// 0x0008 (0x0078 - 0x0080)
class UWillowSpawnDefinition : public USpawnDefinition
{
public:
	class UWillowClanDefinition*                       ClanDefinition;                                // 0x0078 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSpawnDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSpawnEncounter
// 0x0000 (0x0268 - 0x0268)
class AWillowSpawnEncounter : public ASpawnEncounter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSpawnEncounter");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSpawnMaster
// 0x0000 (0x00B8 - 0x00B8)
class UWillowSpawnMaster : public USpawnMaster
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSpawnMaster");
		}

		return uClassPointer;
	};

	void DisplayDebugSpawnEncounters(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebugSummary(class AHUD* HUD, float& out_YL, float& out_YPos);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	class AActor* SpawnActorFromSpawner(class USpawnFactory* TheFactory, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int32_t GameStage, int32_t Rarity, int32_t SpawnerIdx, int32_t SpawnerFlags, bool optionalBCanSave, bool optionalBForceSpawn, class UObject* optionalSkinSource);
};

// Class WillowGame.WillowSpawnPoint
// 0x0030 (0x03F0 - 0x0420)
class AWillowSpawnPoint : public ASpawnPoint
{
public:
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                    // 0x03F0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	int32_t                                            SimpleAnimState;                               // 0x03F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FSimpleAnimData>               SimpleAnimInfo;                                // 0x0400 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bMarkPointInvalidForCombat : 1;                // 0x0410 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class AActor*                                      Territory;                                     // 0x0418 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSpawnPoint");
		}

		return uClassPointer;
	};

	void ActorSpawned(class AActor* SpawnedActor);
};

// Class WillowGame.WillowSpawnPoint_Dynamic
// 0x0000 (0x0420 - 0x0420)
class AWillowSpawnPoint_Dynamic : public AWillowSpawnPoint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSpawnPoint_Dynamic");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSpectatorPoint
// 0x0000 (0x0388 - 0x0388)
class AWillowSpectatorPoint : public ACameraActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSpectatorPoint");
		}

		return uClassPointer;
	};

	void eventDestroyed();
	void PostBeginPlay();
};

// Class WillowGame.WillowStaggerAnimNodeBlend
// 0x0050 (0x0150 - 0x01A0)
class UWillowStaggerAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	int32_t                                            StaggerNodeIndex;                              // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              StaggerNodeWeight;                             // 0x0154 (0x0004) [0x0000000000000000]               
	float                                              StaggerNodeWeightTarget;                       // 0x0158 (0x0004) [0x0000000000000000]               
	float                                              BlendTimeToGo;                                 // 0x015C (0x0004) [0x0000000000000000]               
	struct FReferencePointComparisonData               AltCondition;                                  // 0x0160 (0x0018) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bMirrorStaggerDef : 1;                         // 0x0178 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bMirrorStaggerAlt : 1;                         // 0x0178 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	struct FRotator                                    AdditionalRotationDef;                         // 0x017C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    AdditionalRotationAlt;                         // 0x0188 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                           UnknownData00[0xC];                            // 0x0194 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowStaggerAnimNodeBlend");
		}

		return uClassPointer;
	};

	bool EndStaggerBlend();
	bool StartStaggerBlend();
	bool PlayStaggerAnimation();
	bool StopStaggerAnimation();
};

// Class WillowGame.WillowStanceComponent
// 0x0010 (0x0138 - 0x0148)
class UWillowStanceComponent : public UStanceComponent
{
public:
	class UStanceTypeDefinition*                       LastWillowStance;                              // 0x0138 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UStanceTypeDefinition*                       CurrentWillowStance;                           // 0x0140 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowStanceComponent");
		}

		return uClassPointer;
	};

	class UStanceTypeDefinition* GetLastWillowStance();
	class UStanceTypeDefinition* GetWillowStance();
};

// Class WillowGame.WillowStartupProcess
// 0x0020 (0x0090 - 0x00B0)
class UWillowStartupProcess : public UGearboxProcess
{
public:
	struct FScriptDelegate                             __OnProcessComplete__Delegate;                 // 0x0090 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnStepUpdated__Delegate;                     // 0x00A0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowStartupProcess");
		}

		return uClassPointer;
	};

	void StopProcess();
	void InitProcess(const struct FPlatformUserId& UserId, const struct FScriptDelegate& CompleteDelegate, const struct FScriptDelegate& StepUpdatedDelegate);
	void OnStepUpdated(const struct FPlatformUserId& UserId, bool bPaused, int32_t NewState);
	void OnProcessComplete(const struct FPlatformUserId& UserId, bool bWasSuccessful, int32_t ErrorStep, int32_t ErrorCode);
};

// Class WillowGame.WillowSystemSettings
// 0x0048 (0x0058 - 0x00A0)
class UWillowSystemSettings : public UObject
{
public:
	class TArray<struct FSystemOption>                 SystemOptions;                                 // 0x0058 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FResolution>                   SupportedResolutions;                          // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            QueuedResolution;                              // 0x0078 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ResolutionTimeout;                             // 0x007C (0x0004) [0x0000000000002000] (CPF_Transient)
	class UWillowGFxDialogBox*                         ResolutionDlg;                                 // 0x0080 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UWillowPauseTicker*                          ResolutionTicker;                              // 0x0088 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            QueuedWindowMode;                              // 0x0090 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            QueuedVSyncMode;                               // 0x0094 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PreviousVSyncMode;                             // 0x0098 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PreviousResolution;                            // 0x009C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSystemSettings");
		}

		return uClassPointer;
	};

	void UpdateAnisotropySetting();
	bool IsWindowModeBorderless();
	void UpdateViewDistance();
	void ResetResolution_Internal();
	void ResetResolution();
	void ConfirmResolution_Clicked_Internal(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	void ConfirmResolution_Clicked(class UWillowGFxDialogBox* Dlg, const struct FPlatformUserId& UserId);
	void UpdateResolutionTimer();
	void UpdateResolution_Internal();
	void UpdateResolution();
	class FString GetWindowModeString(bool optionalBAllowedQueued);
	void Options_VSyncModeDirty(int32_t Value);
	void Options_WindowModeDirty(int32_t Value);
	void Options_ResolutionDirty(int32_t Value);
	void UpdateSystemOption_Internal(const struct FName& SettingName, int32_t Value);
	void UpdateSystemOption(const struct FName& SettingName, int32_t Value);
	void LoadDisplayModeSettings();
	void LoadSystemSettings();
};

// Class WillowGame.WillowTacticalMapVolume
// 0x0008 (0x0288 - 0x0290)
class AWillowTacticalMapVolume : public AVolume
{
public:
	float                                              UnrealUnitsPerMapTexel;                        // 0x0288 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              NorthOffsetInDegreesClockwise;                 // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTacticalMapVolume");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTargetingComponent
// 0x0000 (0x01B8 - 0x01B8)
class UWillowTargetingComponent : public UTargetingComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTargetingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTeleporter
// 0x0000 (0x0290 - 0x0290)
class AWillowTeleporter : public ATeleporter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTeleporter");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class WillowGame.WillowTeleporterExitPoint
// 0x0008 (0x0240 - 0x0248)
class AWillowTeleporterExitPoint : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                             // 0x0240 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTeleporterExitPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_CalcDistances
// 0x0000 (0x0070 - 0x0070)
class UWillowTI_CalcDistances : public UTI_Calc
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_CalcDistances");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_CalcExposure
// 0x0000 (0x0070 - 0x0070)
class UWillowTI_CalcExposure : public UTI_CalcAwareness
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_CalcExposure");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_PrioritizeAttacking
// 0x0008 (0x0078 - 0x0080)
class UWillowTI_PrioritizeAttacking : public UTI_Prioritize
{
public:
	float                                              DecayRate;                                     // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FullyEngagedPct;                               // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_PrioritizeAttacking");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_PrioritizeHealth
// 0x0008 (0x0078 - 0x0080)
class UWillowTI_PrioritizeHealth : public UTI_Prioritize
{
public:
	EHealthPriority                                    Priority;                                      // 0x0078 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_PrioritizeHealth");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_PrioritizeIdle
// 0x0008 (0x0078 - 0x0080)
class UWillowTI_PrioritizeIdle : public UTI_Prioritize
{
public:
	uint32_t                                           bIdleTargetsAreHigherPriority : 1;             // 0x0078 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	int32_t                                            MaxAICurrentlyTargeting;                       // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_PrioritizeIdle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_PrioritizeOpinion
// 0x0008 (0x0078 - 0x0080)
class UWillowTI_PrioritizeOpinion : public UTI_Prioritize
{
public:
	EOpinion                                           Opinion;                                       // 0x0078 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_PrioritizeOpinion");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTrigger
// 0x0038 (0x0250 - 0x0288)
class AWillowTrigger : public ATrigger
{
public:
	struct FPointer                                    VfTable_IIUsable;                              // 0x0250 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IITeleportAware;                       // 0x0258 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	EInteractionIcons                                  HUDIcon;                                       // 0x0260 (0x0001) [0x0000000020000000]  CPF_Deprecated)
	ECurrencyType                                      CostsToUseType;                                // 0x0261 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UInteractionIconDefinition*                  HUDIconDef;                                    // 0x0268 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UParticleSystemComponent*                    ParticleHighlight;                             // 0x0270 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpriteComponent*                            TriggerSprite;                                 // 0x0278 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bCostsToUse : 1;                               // 0x0280 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTeleportThroughAware : 1;                     // 0x0280 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	int32_t                                            CostsToUseAmount;                              // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTrigger");
		}

		return uClassPointer;
	};

	void PostBeginPlay();
};

// Class WillowGame.WillowUIDataStore_StringAliasMap
// 0x0008 (0x0120 - 0x0128)
class UWillowUIDataStore_StringAliasMap : public UUIDataStore_StringAliasMap
{
public:
	int32_t                                            FakePlatform;                                  // 0x0120 (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowUIDataStore_StringAliasMap");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowUIInteraction
// 0x0880 (0x0220 - 0x0AA0)
class UWillowUIInteraction : public UUIInteraction
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                       // 0x0220 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FtMenuData                                  BlankEntry;                                    // 0x0228 (0x00D0) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FMenuHeaderData                             BlankMenuHeader;                               // 0x02F8 (0x0050) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FtMenuData>                    CurrentMenu;                                   // 0x0348 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      MenuURL;                                       // 0x0358 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      MenuTitle;                                     // 0x0368 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	EFontSize                                          HintFontSize;                                  // 0x0378 (0x0001) [0x0000000000000000]               
	EMemoryDetailsSortStyle                            MemDetailsSortStyle;                           // 0x0379 (0x0001) [0x0000000000000000]               
	ENetworkActorChannelSortStyle                      NetChannelSortStyle;                           // 0x037A (0x0001) [0x0000000000000000]               
	EAttributeDebugSort                                AttributeSortMode;                             // 0x037B (0x0001) [0x0000000000000000]               
	class FString                                      MenuHint;                                      // 0x0380 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      MenuItemDetail;                                // 0x0390 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      MenuDescriptionBoxStr;                         // 0x03A0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FMenuHeaderData>               MenuHeaders;                                   // 0x03B0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ActiveMenu;                                    // 0x03C0 (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        DebugConsoleHeaders;                           // 0x03C8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FDebugConsoleCommand>          DebugConsoleCommands;                          // 0x03D8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FMenuHeaderData>               SubMenuHeaders;                                // 0x03E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ActiveSubMenu;                                 // 0x03F8 (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        MenuStack;                                     // 0x0400 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FtMenuData>                    WillowMenu;                                    // 0x0410 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                StatusMenuLayout;                              // 0x0420 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                MemoryMenuLayout;                              // 0x04B0 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                NetworkMenuLayout;                             // 0x0540 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                SkillMenuLayout;                               // 0x05D0 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                CommerceMenuLayout;                            // 0x0660 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                CurrentMenuLayout;                             // 0x06F0 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                TeleportingMenuLayout;                         // 0x0780 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                SharedInspectorMenuLayout;                     // 0x0810 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                CustomizationMenuLayout;                       // 0x08A0 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FtMenuLayout                                DLCMenuLayout;                                 // 0x0930 (0x0090) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              UIScaleX;                                      // 0x09C0 (0x0004) [0x0000000000000000]               
	float                                              UIScaleY;                                      // 0x09C4 (0x0004) [0x0000000000000000]               
	int32_t                                            Menu_Top;                                      // 0x09C8 (0x0004) [0x0000000000000000]               
	int32_t                                            Menu_At;                                       // 0x09CC (0x0004) [0x0000000000000000]               
	int32_t                                            Menu_IPP;                                      // 0x09D0 (0x0004) [0x0000000000000000]               
	class AWillowPlayerController*                     OwnerPC;                                       // 0x09D8 (0x0008) [0x0000000000000000]               
	struct FColor                                      BrightWhite;                                   // 0x09E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      DarkGrey;                                      // 0x09E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      MediumGrey;                                    // 0x09E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      LightGrey;                                     // 0x09EC (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      Yellow;                                        // 0x09F0 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bOpened : 1;                                   // 0x09F4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bAutoGatherNetworkData : 1;                    // 0x09F4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bCollapseChannelsByClass : 1;                  // 0x09F4 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bServerCPUSaturatedThisFrame : 1;              // 0x09F4 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bDisplayDetailedAttributes : 1;                // 0x09F4 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              TimeUntilMenuRefresh;                          // 0x09F8 (0x0004) [0x0000000000000000]               
	float                                              NextHorizontalInputAxisTime;                   // 0x09FC (0x0004) [0x0000000000000000]               
	float                                              NextHorizontalInputAxisInterval;               // 0x0A00 (0x0004) [0x0000000000000000]               
	float                                              NextVerticalInputAxisTime;                     // 0x0A04 (0x0004) [0x0000000000000000]               
	float                                              NextVerticalInputAxisInterval;                 // 0x0A08 (0x0004) [0x0000000000000000]               
	int32_t                                            LastWeaponIndex;                               // 0x0A0C (0x0004) [0x0000000000000000]               
	int32_t                                            LastMerchantWeaponIndex;                       // 0x0A10 (0x0004) [0x0000000000000000]               
	int32_t                                            LastItemIndex;                                 // 0x0A14 (0x0004) [0x0000000000000000]               
	int32_t                                            BlockUIInputSemaphore;                         // 0x0A18 (0x0004) [0x0000000000000000]               
	class TArray<struct FName>                         SortedTravelStationList;                       // 0x0A20 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FNetworkChannelData>           NetworkChannels;                               // 0x0A30 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              NovodexMemoryEstimationFactor;                 // 0x0A40 (0x0004) [0x0000000000004000] (CPF_Config)  
	class TArray<class FString>                        WeaponBalanceDefinitions;                      // 0x0A48 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            DebugPlayerIdentifiersAdded;                   // 0x0A58 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class FString>                        ItemTabNames;                                  // 0x0A60 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FWeaponSettings                             WeaponParts;                                   // 0x0A70 (0x0020) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ExpLevel;                                      // 0x0A90 (0x0004) [0x4000000000002000] (CPF_Transient)
	int32_t                                            GameStage;                                     // 0x0A94 (0x0004) [0x4000000000002000] (CPF_Transient)
	int32_t                                            AwesomeLevel;                                  // 0x0A98 (0x0004) [0x4000000000002000] (CPF_Transient)
	int32_t                                            CurrentCustomizationUsageFilterIndex;          // 0x0A9C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowUIInteraction");
		}

		return uClassPointer;
	};

	void eventLoadMenuData(const class FString& NewMenuCmd, const class FString& NewMenuTitle, const class TArray<struct FtMenuData>& NewMenu, bool optionalKeepMenuVars, bool optionalBStackMenus);
	void HandleClientMessage(const class FString& S, const struct FName& optionalType, float optionalMsgLifeTime);
	void ToggleNetworkChannelDisplayByClass();
	void SwitchNetworkDetailsSort();
	void ToggleAutoGenerateNetworkChannelUsage();
	void ExportMemoryUsageData();
	void LogMemoryUsageData();
	void GenerateMemoryUsageData();
	void dbm_ToggleShowDebug();
	void dbm_toggleghost();
	void HandlePossibleInspectorMenuCommand(const class FString& Cmd);
	void ProcessCmd(const class FString& Cmd);
	void UpdateLeave();
	void UpdateOver();
	void ForceMenuCursorToValidPosition();
	void RenderMenu(class UCanvas* Canvas);
	void RenderSubMenuHeaders(class UCanvas* Canvas, const class TArray<struct FMenuHeaderData>& Headers, int32_t ActiveHeader, float& Y);
	void RenderMenuHeaders(class UCanvas* Canvas, const class TArray<struct FMenuHeaderData>& Headers, int32_t ActiveHeader, float& Y);
	float ImageScaleY(class UCanvas* C, float Y);
	float ImageScaleX43(class UCanvas* C, float X);
	float DrawImage(class UCanvas* C, class UTexture2D* ImageTexture, const struct FColor& ImageColor, float X, float Y, float U, float V, float UL, float VL, float Opacity, bool optionalScalePos);
	float GetTextYPos(class UCanvas* Canvas, const struct FtMenuTextPos& TextPos, const class FString& Text);
	float GetTextXPos(class UCanvas* Canvas, const struct FtMenuTextPos& TextPos, const class FString& Text);
	void SetActiveSubMenu(const class FString& SubMenuName);
	void NextActiveSubMenu();
	void SetActiveMenu(const class FString& MenuName);
	void NextActiveMenu();
	void MoveToNextMenu();
	void MoveToPreviousMenu();
	void MoveSelectionUp();
	void MoveSelectionDown();
	void DrawShadowTextBounded(class UCanvas* C, const class FString& Text, float X, float Y, float XL);
	void DrawShadowText(class UCanvas* C, const class FString& Text, float X, float Y);
	void RemoveFromURL(const class FString& Command);
	void AddToURL(const class FString& NewCommand);
	class FString GetInstanceDataComponentFriendlyName(class UActorComponent* Component);
	void AddBlankMenuEntry(int32_t ColumnCount, bool optionalBIsSelectable);
	struct FtMenuData GetInspectorMenuEntryTemplate();
	void AddInstanceDataMenuEntry(int32_t InstanceDataIndex, const struct FInstanceDataItem2& InstanceData, int32_t NestLevel, bool bAllowChangingSwitches, bool optionalBHasPartBeenRemoved);
	void LoadAttributeInspectorMenu(bool optionalIsMenuReload);
	void AddCoordinatedEffectsMenuEntries();
	void AddCoordFXItemControls(class UWillowEffectCoordinator* Coordinator, class UCoordinatedEffectDefinition* Effect, const class FString& InputUI, struct FtMenuData& Entry, class FString& Command);
	void LoadInspectorCommandMenu(bool bIsMenuReload);
	void LoadObjectInspectorMenu(bool bIsMenuReload);
	void CreateMainActorInfoMenu(class UObject* DebugTarget);
	void CreateActorInventoryMenu(class UObject* DebugTarget);
	class UObject* GetSourceContent(class UObject* DebugTarget);
	class FString OpinionToString(EOpinion Opinion);
	void BuildManufacturerPartMenu(const struct FtMenuData& MenuEntry, const class FString& CountColumnHeader, const class FString& PrimaryActionCmd, const class FString& SecondaryActionCmd, class UInventoryBalanceDefinition* BalanceDefinition);
	void LoadSkills(class AWillowPlayerController* PC, bool optionalIsMenuReload);
	void LoadNetworkMenu(class AWillowPlayerController* PC, bool optionalIsMenuReload);
	void LoadMemoryMenu(class AWillowPlayerController* PC, bool optionalIsMenuReload);
	void LoadDevTools(class AWillowPlayerController* PC, bool optionalIsMenuReload);
	void LoadTeleporting(class AWillowPlayerController* PC, bool optionalIsMenuReload);
	void CleanupStashedPointers();
	void OpenMenu(class AWillowPlayerController* PC);
	void RefreshCurrentMenu(bool optionalResetCursorToTop);
	bool ShowInspectorMenu(const class FString& InterfaceName, bool optionalIsMenuReload);
	void ShowActiveMenu(bool optionalIsMenuReload);
	void ClearMenuStrings();
	bool DoesTargetSupportInstanceData(class AActor* Target);
	void RunDebugMenu(class AWillowPlayerController* PC);
	void RunActorDebugMenu(class AWillowPlayerController* PC);
	void CloseMenu(bool optionalBOnGameSessionEnded);
	void CloseStatusMenu(class AWillowPlayerController* PC);
	void RunStatusMenu(class AWillowPlayerController* PC);
	void Initialized();
	void AddNetworkSubmenuHeaders();
	void CalcActorClassStats();
	void SortNetworkUsageData();
	void FillChannelData(class UChannel* Chan);
	void GenerateNetworkChannelUsageNative();
	void GenerateMemoryUsageDataNative();
	void ExportMemoryUsageDataNative();
	void LogMemoryUsageDataNative();
	void SortMemoryUsageData();
	class FString FormatFloatAsString(float Number, int32_t FloatPrecision);
	class FString FormatNumberAsString(int32_t Number);
	void SyncContentBrowser(const class FString& ObjPath);
	bool eventInputKey(const struct FPlatformUserId& UserId, const struct FName& Key, EInputEvent Event, float optionalAmountDepressed, bool optionalBGamepad);
	bool eventInputAxis(const struct FPlatformUserId& UserId, const struct FName& Key, float Delta, float DeltaTime, bool optionalBGamepad);
	void AddNetworkSnapshotSubmenuScreen(const struct FtMenuData& MenuEntryTemplate);
	void AddMemorySnapshotSubmenuScreen(const struct FtMenuData& MenuEntryTemplate);
	void AddMemorySnapshotSummaryScreen(const struct FtMenuData& MenuEntryTemplate);
	class FString GetMemorySnapshotTimestamp();
	void AddMemorySubmenuHeaders();
	void IncrementInstanceDataSwitch(const struct FName& InstanceDataSwitchName, int32_t NewSwitchValue);
	void eventTickImp(float DeltaTime);
	bool ShouldProcessUIInput();
	void eventBlockUIInput(bool bBlock);
	void eventClearUIInputBlocks();
	void CreateAttributeMenu(bool bNotFilter, EAttributeDebugSort SortMode, bool Detailed, class TArray<class FString>& Filter);
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int32_t NewExpLevel);
	void SetAwesomeLevel(int32_t NewAwesomeLevel);
	void SetGameStage(int32_t NewGameStage);
	int32_t GetExpLevel();
	int32_t GetAwesomeLevel();
	int32_t GetGameStage();
};

// Class WillowGame.WillowUseActionComponent
// 0x00D8 (0x0090 - 0x0168)
class UWillowUseActionComponent : public UActorComponent
{
public:
	class UIUsable*                                    CurrentUsable_Object;                          // 0x0090 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UIUsable*                                    CurrentUsable_Interface;                       // 0x0098 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UPrimitiveComponent*                         CurrentUsableComponent;                        // 0x00A0 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	EUsabilityType                                     CurrentUseType;                                // 0x00A8 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bPerformingUseAction : 1;                      // 0x00AC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bTickUseDuration : 1;                          // 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	struct FUseActionState                             CurrentUseActionState;                         // 0x00B0 (0x00A8) [0x0000000000002000] (CPF_Transient)
	struct FClientUseActionState                       ClientUseActionState;                          // 0x0158 (0x0010) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowUseActionComponent");
		}

		return uClassPointer;
	};

	void UseActionFinished();
};

// Class WillowGame.WillowVersusDuelInfo
// 0x0000 (0x0240 - 0x0240)
class AWillowVersusDuelInfo : public AReplicationInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVersusDuelInfo");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowWaterSMActor
// 0x0000 (0x0248 - 0x0248)
class AWillowWaterSMActor : public AStaticMeshActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWaterSMActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowWeapon
// 0x0758 (0x0EF0 - 0x1648)
class AWillowWeapon : public AWeapon
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0EF0 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIFireShotBehavior;                    // 0x0EF8 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                    // 0x0F00 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIItemCardable;                        // 0x0F08 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IINounAttributeProvider;               // 0x0F10 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;             // 0x0F18 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	int32_t                                            NextFiringPatternIndex;                        // 0x0F20 (0x0004) [0x0000000000000000]               
	int32_t                                            HitStatShotTracker;                            // 0x0F24 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            NextHitStatShotId;                             // 0x0F28 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            ReplicatedReloadState;                         // 0x0F29 (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            ReplicatedHeatAmount;                          // 0x0F2A (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            bUseWeaponMelee;                               // 0x0F2B (0x0001) [0x4000000000000000]               
	uint8_t                                            ZoomedFireModeNum;                             // 0x0F2C (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            DesiredZoomLevel;                              // 0x0F2D (0x0001) [0x0000000000002000] (CPF_Transient)
	EWeaponAnimPutDownState                            PutDownAnimState;                              // 0x0F2E (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	uint8_t                                            ReplicatedBarrelSpinUpPercent;                 // 0x0F2F (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	EWeaponSpinState                                   BarrelSpinState;                               // 0x0F30 (0x0001) [0x0000000100002020] (CPF_Net | CPF_Transient)
	EWeaponSpinState                                   LastProcessedBarrelSpinState;                  // 0x0F31 (0x0001) [0x0000000000002000] (CPF_Transient)
	EWeaponVisibleAmmoState                            VisibleAmmoState;                              // 0x0F32 (0x0001) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            bFiringSoundLoopStarted;                       // 0x0F33 (0x0001) [0x4000000000002000] (CPF_Transient)
	uint8_t                                            bCanFireWhenOverheated;                        // 0x0F34 (0x0001) [0x8000000000002020] (CPF_Net | CPF_Transient)
	uint8_t                                            bCanFireWhenOverheatedBaseValue;               // 0x0F35 (0x0001) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            bCanFireWhenOverheatedModifierStack;           // 0x0F38 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            StoredAmmo;                                    // 0x0F48 (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FResourcePoolReference                      AmmoPool;                                      // 0x0F50 (0x0018) [0x0000002000000020] (CPF_Net)     
	int32_t                                            AmmoNotInClip;                                 // 0x0F68 (0x0004) [0x0000000000000021] (CPF_Edit | CPF_Net)
	uint32_t                                           bUpdateAmmoNotInClip : 1;                      // 0x0F6C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bAmmoRefilledDuringReload : 1;                 // 0x0F6C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bIsReloading : 1;                              // 0x0F6C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bSyncClipRoundsUsed : 1;                       // 0x0F6C (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bReloadCntSyncDelayed : 1;                     // 0x0F6C (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bInterruptReload : 1;                          // 0x0F6C (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bUseHeat : 1;                                  // 0x0F6C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bUseHeatAsAmmo : 1;                            // 0x0F6C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bOverheated : 1;                               // 0x0F6C (0x0004) [0x4000000100002020] [0x00000100] (CPF_Net | CPF_Transient)
	uint32_t                                           bSimulateHeatOnClients : 1;                    // 0x0F6C (0x0004) [0x0000000000002020] [0x00000200] (CPF_Net | CPF_Transient)
	uint32_t                                           bRegenerateClipAmmo : 1;                       // 0x0F6C (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bLastRefireAdjustedByZoom : 1;                 // 0x0F6C (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bAutoBurstDelayApplied : 1;                    // 0x0F6C (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bDisplayWeaponShotDebug : 1;                   // 0x0F6C (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bDisableFireViewShake : 1;                     // 0x0F6C (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bDisableWeaponSpread : 1;                      // 0x0F6C (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bHoldToZoom : 1;                               // 0x0F6C (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bFadeOnZoomBegin : 1;                          // 0x0F6C (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bFadeOnZoomEnd : 1;                            // 0x0F6C (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bAttachedToPawnMuzzleSocket : 1;               // 0x0F6C (0x0004) [0x0000000000002000] [0x00080000] (CPF_Transient)
	uint32_t                                           bDeRezzed : 1;                                 // 0x0F6C (0x0004) [0x0000000100002020] [0x00100000] (CPF_Net | CPF_Transient)
	uint32_t                                           bHasFirstPersonBodyComposition : 1;            // 0x0F6C (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	uint32_t                                           bReplicateFiringSounds : 1;                    // 0x0F6C (0x0004) [0x0000000000002000] [0x00400000] (CPF_Transient)
	uint32_t                                           bPlayingHeatSound : 1;                         // 0x0F6C (0x0004) [0x0000000000002000] [0x00800000] (CPF_Transient)
	uint32_t                                           bPlayingBarrelSpinSound : 1;                   // 0x0F6C (0x0004) [0x0000000000002000] [0x01000000] (CPF_Transient)
	uint32_t                                           bSwappingWeaponAfterPutDown : 1;               // 0x0F6C (0x0004) [0x0000000000002000] [0x02000000] (CPF_Transient)
	uint32_t                                           bMuzzleFlashPSCLoops : 1;                      // 0x0F6C (0x0004) [0x0000000000002000] [0x04000000] (CPF_Transient)
	uint32_t                                           bPlayingCooldownEffects : 1;                   // 0x0F6C (0x0004) [0x0000000000002000] [0x08000000] (CPF_Transient)
	uint32_t                                           bSimulateBarrelSpinOnClients : 1;              // 0x0F6C (0x0004) [0x0000000000002020] [0x10000000] (CPF_Net | CPF_Transient)
	uint32_t                                           bForceSpinBarrel : 1;                          // 0x0F6C (0x0004) [0x0000000000002000] [0x20000000] (CPF_Transient)
	uint32_t                                           bInitAnimationsOnAttach : 1;                   // 0x0F6C (0x0004) [0x0000000000002000] [0x40000000] (CPF_Transient)
	uint32_t                                           bInitializedFromDef : 1;                       // 0x0F6C (0x0004) [0x0000000000002000] [0x80000000] (CPF_Transient)
	uint32_t                                           bContinuousBeamIsFiring : 1;                   // 0x0F70 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bCrosshairEnabled : 1;                         // 0x0F70 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bSuppressCrosshair : 1;                        // 0x0F70 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bIsBlockedAfterBusy : 1;                       // 0x0F70 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bUseRealTimeForZoom : 1;                       // 0x0F70 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bAttachedToInstigator : 1;                     // 0x0F70 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bHolsteredOnBody : 1;                          // 0x0F70 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bShouldBulletsPenetrateEnemies : 1;            // 0x0F70 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bActivatedDuringVehicleTransition : 1;         // 0x0F70 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           bManualReload : 1;                             // 0x0F70 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bQueuedReload : 1;                             // 0x0F70 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bHaveFiredShots : 1;                           // 0x0F70 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bInBusyState : 1;                              // 0x0F70 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bIsSpectatorOnlyClient : 1;                    // 0x0F70 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	int32_t                                            ShotCost;                                      // 0x0F74 (0x0004) [0x8000000000002021] (CPF_Edit | CPF_Net | CPF_Transient)
	int32_t                                            ShotCostBaseValue;                             // 0x0F78 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ShotCostModifierStack;                         // 0x0F80 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            AdditionalRicochets;                           // 0x0F90 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            AdditionalRicochetsBaseValue;                  // 0x0F94 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            AdditionalRicochetsModifierStack;              // 0x0F98 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastFireTime;                                  // 0x0FA8 (0x0004) [0x0000000000000000]               
	int32_t                                            ClipSize;                                      // 0x0FAC (0x0004) [0xA000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            ClipSizeBaseValue;                             // 0x0FB0 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ClipSizeModifierStack;                         // 0x0FB8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            TapedClipCount;                                // 0x0FC8 (0x0004) [0x4000000000000020] (CPF_Net)     
	int32_t                                            LastReloadCnt;                                 // 0x0FCC (0x0004) [0x0000000000000000]               
	int32_t                                            LastClipSize;                                  // 0x0FD0 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentClip;                                   // 0x0FD4 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            AmmoLeftInClipDuringReload;                    // 0x0FD8 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SpectatorReloadCnt;                            // 0x0FDC (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            ReloadCnt;                                     // 0x0FE0 (0x0004) [0x4000000000000000]               
	int32_t                                            ClipRoundsUsed;                                // 0x0FE4 (0x0004) [0x4000000000000000]               
	int32_t                                            RepClipRoundsUsed;                             // 0x0FE8 (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            SyncedReloadCnt;                               // 0x0FEC (0x0004) [0x0000000100002020] (CPF_Net | CPF_Transient)
	int32_t                                            LastSyncPointReloadCnt;                        // 0x0FF0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RemoteApproximateClipRoundsUsed;               // 0x0FF4 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LastFlashCount;                                // 0x0FF8 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LastAmmoChangedValue;                          // 0x0FFC (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CurrentBurstShotCount;                         // 0x1000 (0x0004) [0x4000000000000000]               
	float                                              ReloadTime;                                    // 0x1004 (0x0004) [0x8000000000002021] (CPF_Edit | CPF_Net | CPF_Transient)
	float                                              ReloadTimeBaseValue;                           // 0x1008 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ReloadTimeModifierStack;                       // 0x1010 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class USpecialMoveDefinition*                      PlayingReloadSMD;                              // 0x1020 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              OverheatCoolDownDelay;                         // 0x1028 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              OverheatCoolDownDelayBaseValue;                // 0x102C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            OverheatCoolDownDelayModifierStack;            // 0x1030 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              HeatCoolDownDelay;                             // 0x1040 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              HeatCoolDownDelayBaseValue;                    // 0x1044 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            HeatCoolDownDelayModifierStack;                // 0x1048 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              HeatCoolDownRate;                              // 0x1058 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              HeatCoolDownRateBaseValue;                     // 0x105C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            HeatCoolDownRateModifierStack;                 // 0x1060 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              HeatPerShot;                                   // 0x1070 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              HeatPerShotBaseValue;                          // 0x1074 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            HeatPerShotModifierStack;                      // 0x1078 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              CoolDownStartTime;                             // 0x1088 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              HeatAmount;                                    // 0x108C (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              PreviousHeatAmount;                            // 0x1090 (0x0004) [0x4000000000002000] (CPF_Transient)
	float                                              EmptyClipRegenDelay;                           // 0x1094 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              EmptyClipRegenDelayBaseValue;                  // 0x1098 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            EmptyClipRegenDelayModifierStack;              // 0x10A0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              FireClipRegenDelay;                            // 0x10B0 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              FireClipRegenDelayBaseValue;                   // 0x10B4 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            FireClipRegenDelayModifierStack;               // 0x10B8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ClipRegenRate;                                 // 0x10C8 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              ClipRegenRateBaseValue;                        // 0x10CC (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ClipRegenRateModifierStack;                    // 0x10D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ClipRegenStartTime;                            // 0x10E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RegeneratedClipAmmo;                           // 0x10E4 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              AmmoRegenAmount;                               // 0x10E8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MeleeDamage;                                   // 0x10EC (0x0004) [0x8000000000002001] (CPF_Edit | CPF_Transient)
	float                                              MeleeDamageBaseValue;                          // 0x10F0 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            MeleeDamageModifierStack;                      // 0x10F8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BurstInterval;                                 // 0x1108 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              BurstIntervalBaseValue;                        // 0x110C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            BurstIntervalModifierStack;                    // 0x1110 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            AutomaticBurstCount;                           // 0x1120 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	int32_t                                            AutomaticBurstCountBaseValue;                  // 0x1124 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            AutomaticBurstCountModifierStack;              // 0x1128 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BurstShotAccuracyImpulseScale;                 // 0x1138 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              BurstShotAccuracyImpulseScaleBaseValue;        // 0x113C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            BurstShotAccuracyImpulseScaleModifierStack;    // 0x1140 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LastAutomaticBurstTime;                        // 0x1150 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ZoomFireIntervalScale;                         // 0x1154 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              ZoomFireIntervalScaleBaseValue;                // 0x1158 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ZoomFireIntervalScaleModifierStack;            // 0x1160 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              FireDelayTimeLeft;                             // 0x1170 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ZoomFireDelayTimeLeft;                         // 0x1174 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FInstanceData2                              InstanceDataState;                             // 0x1178 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FCompressedBodyState2                       CompressedBodyState;                           // 0x1188 (0x0010) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class TArray<class AWeaponShotDebug*>              WeaponShotDebugHistory;                        // 0x1198 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FWeaponZoomState                            Zoom;                                          // 0x11A8 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FWeaponZoomState                            ReplicatedZoom;                                // 0x11B0 (0x0008) [0x0000000100002020] (CPF_Net | CPF_Transient)
	float                                              ZoomedFOVModifier;                             // 0x11B8 (0x0004) [0x8000000000002021] (CPF_Edit | CPF_Net | CPF_Transient)
	float                                              ZoomedFOVModifierBaseValue;                    // 0x11BC (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ZoomedFOVModifierModifierStack;                // 0x11C0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ZoomedFOVProgress;                             // 0x11D0 (0x0004) [0x0000000000000000]               
	float                                              ZoomFadeTime;                                  // 0x11D4 (0x0004) [0x0000000000000000]               
	float                                              ZoomStartTime;                                 // 0x11D8 (0x0004) [0x0000000000000000]               
	class UMaterialInstance*                           SightFXCrosshairMaterial;                      // 0x11E0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class USkeletalMeshComponent*                      ThirdPersonMesh;                               // 0x11E8 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class TArray<class UActorComponent*>               ThirdPersonAttachments;                        // 0x11F0 (0x0010) [0x0000000004482008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UActorComponent*>               FirstPersonAttachments;                        // 0x1200 (0x0010) [0x0000000004482008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class ULightEnvironmentComponent*                  DynamicLightEnvironment;                       // 0x1210 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	int32_t                                            CurrentSlot;                                   // 0x1218 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NextSlot;                                      // 0x121C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LastFiringSlot;                                // 0x1220 (0x0004) [0x4000000000002000] (CPF_Transient)
	class TArray<class UWillowWeaponVisualData*>       DuplicateWeaponSlots;                          // 0x1228 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     CachedMuzzleLocation;                          // 0x1238 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CachedMuzzleLocationTimeSeconds;               // 0x1244 (0x0004) [0x0000000000002000] (CPF_Transient)
	class USkeletalMeshComponent*                      CachedMuzzleLocationMesh;                      // 0x1248 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UAkEvent*                                    BulletWhipAkEvent;                             // 0x1250 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FImpactResponseParameters                   MyWeaponImpactResponseParameters;              // 0x1258 (0x0078) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              BaseGlowScale;                                 // 0x12D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FinalGlowScale;                                // 0x12D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UWeaponGlowEffectDefinition*                 GlowEffect;                                    // 0x12D8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              GlowEffectStartTime;                           // 0x12E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              GlowImpulseScale;                              // 0x12E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              GlowImpulseDecayStartTime;                     // 0x12E8 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FWeaponEffectsData                          FirstPersonMuzzleEffect;                       // 0x12F0 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          ThirdPersonMuzzleEffect;                       // 0x1310 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	int32_t                                            MuzzleFlashSeqLength;                          // 0x1330 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CurrentMuzzleFlashSeqIndex;                    // 0x1334 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FWeaponEffectsData                          FirstPersonShellCasingEffect;                  // 0x1338 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          ThirdPersonShellCasingEffect;                  // 0x1358 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          FirstPersonCooldownEffect;                     // 0x1378 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          ThirdPersonCooldownEffect;                     // 0x1398 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	float                                              CurrentRating;                                 // 0x13B8 (0x0004) [0x0000000000000000]               
	int32_t                                            OwnerStatsID;                                  // 0x13BC (0x0004) [0x0000000000000000]               
	int32_t                                            WeaponStatsID;                                 // 0x13C0 (0x0004) [0x0000000000000000]               
	float                                              ExtraShotChance;                               // 0x13C4 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              ExtraShotChanceBaseValue;                      // 0x13C8 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ExtraShotChanceModifierStack;                  // 0x13D0 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              ExtraShotDelay;                                // 0x13E0 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              ExtraShotDelayBaseValue;                       // 0x13E4 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ExtraShotDelayModifierStack;                   // 0x13E8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FLockOnTargetStateStruct                    LockOnTargetState;                             // 0x13F8 (0x0018) [0x0000000000002000] (CPF_Transient)
	float                                              BarrelSpinUpDuration;                          // 0x1410 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              BarrelSpinUpDurationBaseValue;                 // 0x1414 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            BarrelSpinUpDurationModifierStack;             // 0x1418 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BarrelSpinDownDuration;                        // 0x1428 (0x0004) [0x8000000000002020] (CPF_Net | CPF_Transient)
	float                                              BarrelSpinDownDurationBaseValue;               // 0x142C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            BarrelSpinDownDurationModifierStack;           // 0x1430 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              BarrelSpinUpPercent;                           // 0x1440 (0x0004) [0x4000000000002020] (CPF_Net | CPF_Transient)
	struct FColor                                      WeaponColor;                                   // 0x1444 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AimError;                                      // 0x1448 (0x0004) [0x8000000000002021] (CPF_Edit | CPF_Net | CPF_Transient)
	float                                              AimErrorBaseValue;                             // 0x144C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            AimErrorModifierStack;                         // 0x1450 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              PlayerBonusAimError;                           // 0x1460 (0x0004) [0x8000000000002001] (CPF_Edit | CPF_Transient)
	float                                              PlayerBonusAimErrorBaseValue;                  // 0x1464 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            PlayerBonusAimErrorModifierStack;              // 0x1468 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              PerShotAccuracyImpulse;                        // 0x1478 (0x0004) [0x8000000000002021] (CPF_Edit | CPF_Net | CPF_Transient)
	float                                              PerShotAccuracyImpulseBaseValue;               // 0x147C (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            PerShotAccuracyImpulseModifierStack;           // 0x1480 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ProjectilesPerShot;                            // 0x1490 (0x0004) [0x8000000000002021] (CPF_Edit | CPF_Net | CPF_Transient)
	int32_t                                            ProjectilesPerShotBaseValue;                   // 0x1494 (0x0004) [0x4000000000000022] (CPF_Const | CPF_Net)
	class TArray<class UAttributeModifier*>            ProjectilesPerShotModifierStack;               // 0x1498 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FAppliedAttributeEffect>       ExternalAttributeModifiers;                    // 0x14A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FAppliedAttributeEffect>       WeaponAttributeModifiers;                      // 0x14B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FAppliedAttributeEffect>       ZoomExternalAttributeModifiers;                // 0x14C8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FAppliedAttributeEffect>       ZoomWeaponAttributeModifiers;                  // 0x14D8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FModifierValuePresentationData> WeaponCardModifierStats;                       // 0x14E8 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class UWeaponTypeDefinition*                       Definition;                                    // 0x14F8 (0x0008) [0x0000000000000000]               
	class UWeaponSightDefinition*                      SightDefinition;                               // 0x1500 (0x0008) [0x0000000000002020] (CPF_Net | CPF_Transient)
	class UBodyProviderDefinition*                     BodyProvider;                                  // 0x1508 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FWeaponBoneControllerInstance> WeaponPartBoneControllers;                     // 0x1510 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            VisibleAmmoReloadCnt;                          // 0x1520 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<uint8_t>                              VisibleAmmoBoneIndices;                        // 0x1528 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FName                                       LeftHandGripAnimWeapon;                        // 0x1538 (0x0008) [0x0000000000000000]               
	struct FName                                       StoredPreviousStateName;                       // 0x1540 (0x0008) [0x0000000000000000]               
	class TArray<struct FShellCasingImpact>            ShellCasingImpacts;                            // 0x1548 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ProjectileSpeedMultiplier;                     // 0x1558 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              ProjectileSpeedMultiplierBaseValue;            // 0x155C (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            ProjectileSpeedMultiplierModifierStack;        // 0x1560 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              UpdateMipTimer;                                // 0x1570 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              WantsMissedShotNotifications;                  // 0x1574 (0x0004) [0x8000000000002000] (CPF_Transient)
	float                                              WantsMissedShotNotificationsBaseValue;         // 0x1578 (0x0004) [0x4000000000000002] (CPF_Const)   
	class TArray<class UAttributeModifier*>            WantsMissedShotNotificationsModifierStack;     // 0x1580 (0x0010) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                // 0x1590 (0x0004) [0x0000000000000000]               
	class TArray<struct FNounAttributeState>           NounState;                                     // 0x1598 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              TotalAutomaticFiringTime;                      // 0x15A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FImpactInfo                                 LastLocalHitTraceInfo;                         // 0x15B0 (0x0070) [0x0000000000082000] (CPF_Transient | CPF_Component)
	class FString                                      CrosshairFrameOverride;                        // 0x1620 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            CurrentShotAccuracyBurstCount;                 // 0x1630 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAkComponent*                                WeaponDefaultAkComponent;                      // 0x1638 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UFiringModeDefinition*                       LoopFiringModeDefinition;                      // 0x1640 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWeapon");
		}

		return uClassPointer;
	};

	int32_t GetCurrentMuzzleFlashSlot();
	int32_t GetCurrentFiringSlot();
	bool ShouldAdvanceCylinder();
	void PreviewFire();
	bool IsReadied();
	bool IsLevelRequirementMet(class AController* C, int32_t& RequiredLevel);
	class FString GetElementalFrame();
	class FString GetZippyFrame();
	int32_t GetRarityLevel();
	int32_t GetSellPrice(class APawn* Customer);
	int32_t GetPurchasePrice(class APawn* Customer);
	int32_t GetMonetaryValue();
	ECurrencyType GetCurrencyTypeInventoryIsValuedIn();
	void ForcePutDownInactiveWeapon();
	class FString GetCrosshairFrame();
	bool IsUsefulToThisPlayer(class APlayerController* C);
	void AddGlowScaleImpulse(float ScaleImpulse);
	void StopAnyGlowEffect();
	void StopGlowEffect(class UWeaponGlowEffectDefinition* Effect);
	void PlayGlowEffect(class UWeaponGlowEffectDefinition* Effect);
	float GetLockOnStartTime();
	float GetLockOnRequiredTime();
	bool LockOnInProgress();
	void eventForceZoomDebug();
	class UImpactDefinition* GetTraceImpact();
	void ServerNotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	void eventNotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	static void OverrideRecoilAnimScaleDebug(float AnimScale);
	float GetCurrentZoomedRecoilAnimScale();
	float GetCurrentRecoilAnimScale(bool bIgnoreZoom);
	static class AWillowWeapon* CreateWeaponFromDef(class UWeaponTypeDefinition* NewWeaponDef, class AWillowPawn* PlayerOwner);
	bool DoesDamageType(EDamageType DamageType);
	bool IsMissionWeapon();
	bool CanBeSaved();
	void PlayHitNotificationAudio(const struct FImpactInfo& LastImpactInfo);
	void PlayImpactEffects(const struct FVector& FireLocation, const struct FVector& HitLocation);
	float GetFireIntervalChanceModifier();
	bool CanBeUsedBy(class APawn* Other);
	bool GetSocketLocationOnOwnerOrWeapon(const struct FName& SocketName, struct FVector& SourceLocation);
	class UImpactDefinition* GetDroppedImpactDefinition();
	void GoToBusyState();
	void FinishedWeaponAction();
	void Behavior_ChangeVisibility(bool bVisible);
	void Behavior_ToggleVisibility();
	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void SpawnTracerAtLocation(const struct FVector& EffectLocation, const struct FVector& HitLocation);
	void SpawnTracer(const struct FVector& HitLocation, int32_t FiringSlot);
	struct FVector GetTracerStartLocation(int32_t optionalFiringSlot);
	bool CanCompareUIStat(class UAttributePresentationDefinition* Attrib, class UAttributePresentationDefinition* CompareAttrib, class AWillowWeapon* CompareItem);
	int32_t CompareUIStat(int32_t StatIdx, class AWillowInventory* CompareTo);
	float GetAIRangeValue(struct FAIRange& Range);
	float GetAIBurstLength();
	float GetAIFireDelay();
	float GetBarrelRotationsPerSecondAtFullFireRate();
	EBarrelSpinMode GetBarrelSpinMode();
	float GetFireSpeed();
	void StopAnimation(float fDesiredDuration, const struct FName& optionalAnimNodeName, const struct FName& optionalSequence, class UAnimSet* optionalAnimSet);
	float PlayAnimation(const struct FName& Sequence, const struct FName& optionalAnimNodeName, class UAnimSet* optionalAnimSet, int32_t optionalSlot, float optionalFDesiredDuration, float optionalPlayRateScale, bool optionalBLoop, float optionalBlendInTime, float optionalBlendOutTime, float optionalStartTime);
	void StopBodyAnimation(EBodyWeaponAction ActionType, bool bInterrupted);
	float PlayBodyAnimation(EBodyWeaponAction ActionType, float optionalPlayRateScale, float optionalDuration, class USpecialMoveDefinition*& PlayedSMD);
	bool CanPlayBodyFiringAnimation(int32_t FiringSlot);
	class FString GetTemplateString(int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01);
	void ChangeInstanceDataComponentVisibility(class USkeletalMeshComponent* BaseComp, bool bIsVisible, bool bIncludeParticles, struct FInstanceData2& DataSet);
	void ChangeParticleAttachmentVisibility(bool bIsVisible);
	void ChangeThirdPersonVisibility(bool bIsVisible);
	void ToggleThirdPersonVisibility();
	void ChangeFirstPersonVisibility(bool bIsVisible);
	void ToggleFirstPersonVisibility();
	void ChangeVisibility(bool bIsVisible);
	EBulletFromClip GetCurrentBulletClipType();
	float GetProjectileDamage();
	float GetDamageRadius();
	void SyncReloadCnt();
	void ReloadCntCorrected();
	void RefireDelayAfterBusy();
	void OwnerEnteredVehicle();
	void eventDestroyed();
	bool BeginReload(uint8_t FireModeNum);
	void ClientStopReload(int32_t ServerReloadCnt);
	void ServerStartReload(uint8_t FireModeNum);
	void StartReload(uint8_t FireModeNum);
	void TimeWeaponEndSingleFeedReload();
	void TimeWeaponStartSingleFeedReload();
	void SingleFeedAmmoReloaded();
	void LoopSingleFeedReloadDone();
	void StartSingleFeedReloadDone();
	void TimeWeaponReload();
	void StopReloadAnim();
	void PlayEndReloadAnim();
	void PlayLoopReloadAnim();
	void PlayStartReloadAnim();
	void PlayReloadAnim();
	EWeaponReloadState GetReplicatedReloadState();
	void SetReplicatedReloadState(EWeaponReloadState ReloadState);
	int32_t SelectAnimationData(class TArray<struct FConditionalAnimationData>& Animations);
	struct FName SelectAnimation(class TArray<struct FConditionalAnimationData>& Animations, class UAnimSet*& ReqAnimSet);
	void AmmoReloaded();
	void ReloadDone();
	void StopWeaponAnimation(float BlendOutTime);
	class UWillowAnimNodeSlot* GetWeaponAnimNode(int32_t SlotIndex, bool bFirstPerson, const struct FName& optionalAnimNodeName);
	class UWillowAnimNodeSlot* GetWillowAnimNode(class USkeletalMeshComponent* SKMesh, const struct FName& optionalAnimNodeName);
	void StopReloading(bool optionalBTransitionToNextState);
	bool CanReload();
	bool NeedToReload();
	void ServerInterruptReloadToFire(uint8_t FireModeNum, int32_t ClientReloadCnt);
	bool IsReloading();
	void DisassociateAmmoPool();
	void ItemRemovedFromInvManager();
	void ClientSoldTo(bool bSoldAll);
	void LoadedWeapon(int32_t AmmoCnt);
	void AssociateAmmoPool();
	void UpdateStatsOnWeaponPickup(class APawn* NewOwner);
	void AnnouncePickup(class APawn* Other);
	void GivenTo(class APawn* NewOwner, bool bReady, bool optionalBDoNotActivate);
	void eventRefireCheckTimer();
	bool HasZoomEyeSocket();
	void GetZoomSocketBone(struct FVector& BoneLocation, struct FRotator& BoneRotation);
	void GetZoomSocket(struct FVector& SocketLocation, struct FRotator& SocketRotation);
	class USkeletalMeshSocket* GetIronsightsSocket(const struct FName& SocketName);
	class USkeletalMeshComponent* GetBeamSourceComponent(bool bFirstPerson);
	struct FVector GetPhysicalFireStartLoc(const struct FVector& optionalAimDir);
	void UninitializeAfterPutDown();
	void UpdateLastReloadCnt();
	void TryPutDownEx();
	bool TryPutDown();
	void Unreadied();
	class UIResourcePoolProvider* GetResourcePoolProvider();
	void ClientSetReloadCounts(int32_t InLastReloadCnt, int32_t InReloadCnt);
	void InitializeWeaponAfterBringUp();
	void InitializeAmmoAfterBringUp();
	void WeaponEquipped();
	void FireDelayComplete();
	bool ShouldRefire();
	void ServerSetFireKickSeed(uint8_t InFireKickSeed);
	bool IsHitScan();
	void TickBarrelSpinUp(float DeltaSeconds);
	float GetBurstInterval();
	float GetFireInterval(uint8_t FireModeNum);
	void eventRefillClip();
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	struct FRotator AddSpread(const struct FRotator& BaseAim);
	float GetBonusAimError();
	void eventAddRegeneratedAmmo(int32_t Amount);
	void ExtraFireAmmunition();
	void SharedFireAmmunition();
	bool IsOverheated();
	void AddHeatImpulse(float Heat);
	void FireAmmunition();
	float GetCurrentShotAccuracyCurveValue();
	void AddAccuracyImpulse(float Impulse);
	void ClientVehicleTransitionWeaponSet(bool optionalBOnlyPlayFirstPersonEquipAnim);
	void VehicleTransitionWeaponSet(bool optionalBOnlyPlayFirstPersonEquipAnim);
	bool ClientWeaponSetWaitForAmmoPool();
	void ClientWeaponSet(bool bOptionalSet, bool optionalBDoNotActivate);
	bool ForceWeaponToBeEquipped();
	void SendToFiringState(uint8_t FireModeNum);
	bool CanPerformAction(uint8_t FireModeNum);
	bool SupportsToggleZoom();
	bool CanUnZoom();
	void CycleZoomLevel();
	void PrevZoomLevel();
	void NextZoomLevel();
	void CheckZoomState();
	void eventForceUnzoom(bool optionalBClearInput);
	void ClientStartZoom();
	void StopZoom(bool optionalBSuppressFade);
	void StartZoom();
	void ClientStopZoom(bool optionalBSupressFade);
	void SetZoomStartTime(float ZoomDuration);
	void AdjustZoomBasisTime(bool bUseRealTime);
	float GetZoomBasisTime();
	void EndFire(uint8_t FireModeNum, bool optionalBInterrupted);
	void ClientEndFire(uint8_t FireModeNum, bool optionalBInterrupted);
	void BeginFire(uint8_t FireModeNum);
	void DisplayScope(bool bDisplay);
	bool eventIsScoped();
	void AdjustMuzzleFlashForZoomState(struct FWeaponZoomState& NewZoom);
	void ServerSetZoomState(const struct FWeaponZoomState& InWeaponZoomState, float ZoomFadeOffset);
	void eventSetZoomState(const struct FWeaponZoomState& InWeaponZoomState);
	void SetZoomStateAnimations(struct FWeaponZoomState& NewZoom);
	void SetViewDistanceScaleWeaponZoomFactor(float ZoomFactor);
	float AdjustFOVAngle(float VFOVAngle);
	bool IsZoomedIn(bool optionalBTransitionCounts);
	bool bZoomed();
	void RemoveAllZoomAttributeEffects();
	void ApplyAllZoomAttributeEffects();
	void UpdateFiredStats(int32_t NoShots);
	EDamageSurfaceType GetDamageSurfaceTypeFromImpact(struct FImpactInfo& Impact);
	void ProcessInstantHitBullet(uint8_t FiringMode, const struct FImpactInfo& Impact, float BulletDamage, class UFiringModeDefinition* optionalFiringModeDefinition, class APawn* optionalInstigatorOverride, bool optionalBOvercharged, uint8_t optionalStatId, class UDamagePipeline*& PipelineObject);
	void CustomFire();
	void ExecuteProjectileFiredConstructEvent(class UObject* InInstigator, class UObject* InProjectile, struct FBehaviorConsumerHandle& InConsumerHandle);
	void ConditionalSetGearLikenessOnProjectile(class AWillowProjectile* SpawnedProjectile);
	class AProjectile* eventProjectileDefinitionFire(class UFiringModeDefinition* FireModeDef);
	void AdjustPretendWeaponFire(struct FVector& StartTrace, struct FVector& EndTrace);
	bool FillInPretendHitInfo(const struct FVector& StartTrace, const struct FVector& EndTrace, struct FImpactInfo& OutInfo);
	void ReflectHitScanBulletTowardsNearbyEnemy(class UFiringModeDefinition* FiringDef, float DamageAmount, const struct FVector& InitDirection, float DistanceTraveled, class AActor* ProjectileInstigator, uint8_t StatId, struct FImpactInfo& Impact, struct FReflectionInfo& ReflectionInfo);
	bool PassThroughDamage(class AActor* HitActor);
	void OnFiringModeDefinitionFired(class UFiringModeDefinition* FiringModeDefinition, float DamageAmount, struct FImpactInfo& Impact);
	void eventFiringModeDefinitionFire(class UFiringModeDefinition* FiringModeDefinition);
	void InstantFire();
	bool ShouldBulletRicochetTowardsEnemy();
	bool IsOvercharged();
	class UFiringModeDefinition* GetFiringModeDefinition();
	void eventClearSavedFireData();
	void SaveFireData(const struct FVector& AimPosition, const struct FRotator& AimDirection, const struct FRotator& AimAdjustment, const struct FRotator& SpreadAimAdjustment, float ShotDistance);
	struct FVector InstantFireEndTrace(const struct FVector& StartTrace);
	struct FVector InstantFireStartTrace();
	void ClientWeaponEmpty(bool optionalBEndFire);
	void WeaponEmpty();
	void PlayDryFireSound(bool bTryingToFire);
	void SetVisibleAmmoState(EWeaponVisibleAmmoState NewState);
	bool ShouldAutoReloadWhileFiring();
	bool HasSpareAmmo();
	bool HasAnyAmmo();
	bool HasActiveAmmo(uint8_t FireModeNum, int32_t optionalAmount);
	bool HasAmmo(uint8_t FireModeNum, int32_t optionalAmount);
	bool HasInfiniteAmmo();
	int32_t AddAmmo(int32_t Amount);
	void ConsumeAmmo(uint8_t FireModeNum);
	bool ReadyToFire(bool bFinished);
	uint8_t BestMode();
	bool ShouldFireWithoutTarget();
	bool FireOnRelease();
	void FireHack(uint8_t Mode);
	bool CanHeal(class AActor* Other);
	float GetWeaponRating();
	bool ZoomDOFEnabled();
	bool GetDisableZoomSnapToTarget();
	bool GetScaleAccuracyWhenZoomed();
	uint8_t GetZoomLevel();
	float GetZoomTime(int32_t optionalZoomLevel);
	float GetZoomViewFOVOffset(int32_t ZoomLevel);
	float GetZoomFOVLerpPct(int32_t ZoomLevel);
	float GetZoomFOVRatio(int32_t ZoomLevel);
	float GetZoomLevelEffect();
	float GetZoomEffect();
	EWeaponHand GetHand();
	void SetHand(EWeaponHand NewWeaponHand);
	bool CanThrow();
	void GetViewAxes(struct FVector& XAxis, struct FVector& YAxis, struct FVector& ZAxis);
	void DumpAnimSets(const class FString& optionalEventStr);
	void DetachWeapon();
	void UpdateForegroundFOV();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& optionalSocketName);
	void PlayWeaponEquip();
	void NotifyPawnWeaponChanged();
	void TimeWeaponEquipping();
	float GetEquipTime();
	float RaiseFirstPersonWeapon();
	float LowerFirstPersonWeapon();
	void StopWeaponPutDownAnim();
	void PlayWeaponPutDown(bool bSwappingWeapons);
	void eventTimeWeaponPutDown();
	float GetPutDownTime();
	void TryTimeWeaponPutDown();
	void StopRunawayWeaponFiringLoops();
	void StopWeaponEffect(struct FWeaponEffectsData& EffectsData);
	void StartWeaponEffect(int32_t EffectID, struct FWeaponEffectsData& EffectsData);
	void UpdateMuzzleFlashSeqLength();
	void StopMuzzleFlash();
	void eventMuzzleFlashTimer();
	void PlayStopSpinningUpSound();
	void PlayStartSpinningUpSound();
	void BarrelSpinStateChanged(EWeaponSpinState NewState);
	void ForceSpinBarrel(bool bEnabled);
	void PlayStoppedFiringSound();
	void PlayFiringSound();
	void ShakeView();
	void PlayRezEffect();
	void DeRezEffectFinished();
	float PlayDeRezEffect();
	uint8_t PackFlashLocationFlags(bool bHitScan, int32_t FiringSlot);
	bool TriggerFireEffectsFromReplicatedFlashLocation();
	void StopFireEffects(uint8_t FireModeNum);
	void PlayFireEffects(uint8_t FireModeNum, int32_t optionalFiringSlot);
	float GetFireRecoilAnimDuration(uint8_t FireModeNum);
	float GetFireAnimDuration(uint8_t FireModeNum);
	struct FRotator GetWeaponMuzzleRotation(class USkeletalMeshComponent* WeaponMesh);
	struct FVector GetWeaponMuzzleLocation(class USkeletalMeshComponent* WeaponMesh);
	struct FName GetCurrentMuzzleSocketName();
	struct FRotator GetSocketRotation(const struct FName& SocketName, bool bFirstPerson);
	struct FVector GetSocketLocation(const struct FName& SocketName, bool bFirstPerson);
	class UInventoryCardPresentationDefinition* GetPresentationDefinition();
	void GetWeaponDebug(class TArray<class FString>& DebugInfo);
	void eventLogInventoryDebug();
	class FString FormatFunStatsText(class TArray<struct FModifierValuePresentationData>& BottomStats);
	class FString GenerateFunStatsText();
	void GetInventoryStatTextData(class TArray<struct FModifierValuePresentationData>& Stats);
	int32_t GetAmmoCount();
	int32_t GetMaxAmmo();
	void eventDrawZoomDebug(class AHUD* H);
	bool IsCrosshairEnabled(bool optionalBForScope);
	void SetCrosshairEnabled(bool bNewCrosshairEnabled);
	void RemoveAllExternalAttributeEffects();
	void ApplyAllWeaponAttributeEffects();
	void ApplyAllExternalAttributeEffects();
	void ApplyAnimThresholdAttributeValues();
	bool ClientInitializeFromWeaponTypeDefinition();
	static int32_t StaticCalculateWeaponRarityLevel(struct FWeaponDefinitionData& InDefinitionData);
	static class UWillowDamageTypeDefinition* StaticGetWeaponDamageType(class UWeaponTypeDefinition* InDefinition);
	class UImpactDefinition* GetImpactDefinitionForFiringMode(class UFiringModeDefinition* FiringMode);
	class UDamageTypeDefinition* GetDamageTypeDefinitionForFiringMode(class UFiringModeDefinition* FiringMode);
	void CalculateWeaponBaseValues();
	void CalculateWeaponExpBasedValues();
	void RecomputeAttributeBaseValues();
	void StoreExplosionInstanceData(class UExplosionDefinition* ExplosionDef, const struct FName& InstanceDataName);
	void SightChanged(class UWeaponSightDefinition* PrevDef);
	void ChangeSight(class UWeaponSightDefinition* NewDef);
	void InitializeInternal();
	void eventInitializeFromDefinitionData(class UWeaponTypeDefinition* NewDefinition, class UObject* InAdditionalQueryInterfaceSource);
	void eventInitializeInventory(class UBaseBalanceDefinition* InBalanceDef, class UManufacturerDefinition* InManufacturer, int32_t InGradeIndex, class UObject* InAdditionalQueryInterfaceSource);
	void SetDefinition(class UWeaponTypeDefinition* NewDefinition);
	void eventReplicatedEvent(const struct FName& VarName);
	void SetElementalFrame();
	void SetLightEnvironment(class ULightEnvironmentComponent* LightEnvironment, struct FInstanceData2& DataSet);
	void ChangeFirstPersonOwnerVisibility(bool bInOwnerNoSee);
	void ChangeThirdPersonOwnerVisibility(bool bInOwnerNoSee);
	void ChangeOwnerVisibility(bool bIsFirstPerson);
	void eventDetachThirdPersonMesh();
	void StopLoopingSounds();
	void eventRemoteDetachWeapon();
	void eventDetachFirstPersonMesh();
	void AttachThirdPersonMeshToComponent(class USkeletalMeshComponent* SkeletalMesh, bool bOffHandWeapon);
	void DetachEffectsFromBase(class USkeletalMeshComponent* BaseMesh, class TArray<class UActorComponent*>& ComponentList);
	void AttachFirstPersonMeshToRemotePlayer(class USkeletalMeshComponent* MeshCpnt, bool bOffHandWeapon);
	void UpdateFirstPersonInWorldForeground();
	class UMeshComponent* ClonePrimaryMesh();
	void eventCloneAppearance(class AActor* CloneOwner, class USkeletalMeshComponent* ClonedPrimaryMeshComponent, class TArray<class UPrimitiveComponent*>& ClonedComponentsAttachedToPrimaryMesh, class UMaterialInstance*& ClonedMeshMaterial);
	void AttachMeshToPickup(class AActor* Pickup);
	void InitEffects();
	void EnableAnimations(bool InEnabled);
	float GetExtraSlotModifier();
	void CreateDuplicateWeaponSlots();
	void RemoveMeshAnimation(class USkeletalMeshComponent* Component);
	void RemoveMeshAnimations();
	void InitMeshAnimation(class USkeletalMeshComponent* Component);
	void InitMeshAnimations();
	void InitDuplicateWeaponSlots();
	void InitMeshes();
	bool UsingBodySequence();
	void HideBonesInMesh(class USkeletalMeshComponent* InMesh);
	void SetMaterialScalarParameterValue(const struct FName& ParamName, float NewValue);
	static class UMaterialInstance* BuildWeaponMaterial(class AActor* MaterialOwner, class USkeletalMeshComponent* MeshComp);
	class AWillowInventory* CreateClone();
	uint8_t GetHolsteredWeaponSizeType();
	struct FName GetEquippedStat();
	void OnAbortReload(class UObject* EventInstigator, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnZoomedOut(class UObject* EventInstigator, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnZoomedIn(class UObject* EventInstigator, int32_t ZoomLevel, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnZoomingOut(class UObject* EventInstigator, int32_t ZoomLevel, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnZoomingIn(class UObject* EventInstigator, int32_t ZoomLevel, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnUnequip(class UObject* EventInstigator, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnEquip(class UObject* EventInstigator, class TArray<class UBehaviorProviderDefinition*>& Providers);
	void OnCreate(class TArray<class UBehaviorProviderDefinition*>& Providers);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void DeactivateAttributeSlotSkill();
	void ActivateAttributeSlotSkill();
	bool IsPuttingDown();
	bool IsEquipping();
	static bool IsZoomSocketsDebugEnabled();
	static void ToggleZoomSocketsDebug();
	static bool IsZoomDebugEnabled();
	static void ToggleZoomDebug();
	void eventSetInitialState();
};

// Class WillowGame.WillowWeaponTypes
// 0x0000 (0x0058 - 0x0058)
class UWillowWeaponTypes : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWeaponTypes");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowWeaponUseComponent
// 0x0018 (0x0148 - 0x0160)
class UWillowWeaponUseComponent : public UWeaponUseComponent
{
public:
	class AWillowPawn*                                 WPawn;                                         // 0x0148 (0x0008) [0x0000000000000002] (CPF_Const)   
	class AWillowMind*                                 WMind;                                         // 0x0150 (0x0008) [0x0000000000000002] (CPF_Const)   
	class AWillowWeapon*                               WWeapon;                                       // 0x0158 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWeaponUseComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowWeaponVisualData
// 0x0140 (0x0058 - 0x0198)
class UWillowWeaponVisualData : public UObject
{
public:
	struct FPointer                                    VfTable_IIBodyCompositionInstance;             // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                        // 0x0060 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class AWillowWeapon*                               WeaponOwner;                                   // 0x0068 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FName                                       FirstPersonSocket;                             // 0x0070 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FName                                       ThirdPersonSocket;                             // 0x0078 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bRemoveBaseMesh : 1;                           // 0x0080 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class TArray<class UActorComponent*>               FirstPersonAttachments;                        // 0x0088 (0x0010) [0x0000000004482008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UActorComponent*>               ThirdPersonAttachments;                        // 0x0098 (0x0010) [0x0000000004482008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class USkeletalMeshComponent*                      FirstPersonMesh;                               // 0x00A8 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      ThirdPersonMesh;                               // 0x00B0 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	struct FWeaponEffectsData                          FirstPersonMuzzleEffect;                       // 0x00B8 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          ThirdPersonMuzzleEffect;                       // 0x00D8 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          FirstPersonShellCasingEffect;                  // 0x00F8 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          ThirdPersonShellCasingEffect;                  // 0x0118 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          FirstPersonCooldownEffect;                     // 0x0138 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FWeaponEffectsData                          ThirdPersonCooldownEffect;                     // 0x0158 (0x0020) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FInstanceData2                              InstanceDataState;                             // 0x0178 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FCompressedBodyState2                       CompressedBodyState;                           // 0x0188 (0x0010) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWeaponVisualData");
		}

		return uClassPointer;
	};

	bool eventGetInstanceData(const struct FName& DataName, class TArray<struct FInstanceDataItem2>& InstanceData);
	bool GetInstanceDataState(struct FInstanceData2& OutInstanceDataState);
	bool eventRemoveInstanceData(const struct FName& DataName);
	bool eventSetInstanceData(const struct FInstanceDataItem2& InstanceData, bool optionalBAllowDuplicateNames);
	void SetMaterialScalarParameterValue(const struct FName& ParamName, float NewValue);
	void DetachThirdPerson();
	void AttachThirdPerson(class USkeletalMeshComponent* SkeletalMesh);
	void DetachFirstPerson();
	void AttachFirstPerson(class USkeletalMeshComponent* SkeletalMesh);
};

// Class WillowGame.WillowWorldSoundManager
// 0x0070 (0x0260 - 0x02D0)
class AWillowWorldSoundManager : public AWorldSoundManager
{
public:
	class UAkComponent*                                MusicComponent;                                // 0x0260 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UAkEvent*                                    CurrentMusicStartAkEvent;                      // 0x0268 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    CurrentMusicStopAkEvent;                       // 0x0270 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkState*                                    CurrentAmbientAkState;                         // 0x0278 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkState*                                    CurrentCombatAkState;                          // 0x0280 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkState*                                    CurrentBossAkState;                            // 0x0288 (0x0008) [0x0000000000002000] (CPF_Transient)
	EMusicState                                        CurrentMusicState;                             // 0x0290 (0x0001) [0x0000000000002000] (CPF_Transient)
	class UAkState*                                    CurrentCustomCombatMusicAkState;               // 0x0298 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkState*                                    CurrentCustomAmbientMusicAkState;              // 0x02A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bInCombatMusicVolumeTransition : 1;            // 0x02A8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              CombatMusicTransitionValue;                    // 0x02AC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CombatMusicTransitionStartValue;               // 0x02B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CombatMusicTransitionTargetValue;              // 0x02B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CombatMusicTransitionStartTime;                // 0x02B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CombatMusicTransitionEndTime;                  // 0x02BC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastTransitionDuration;                        // 0x02C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAkRtpc*                                     CombatMusicRtpc;                               // 0x02C8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWorldSoundManager");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	bool IsLevelMusicPlaying();
	static void StaticSetCustomAmbientMusicAkState(class UAkState* CustomAmbientMusicAkState);
	static void StaticSetBossAkState(class UAkState* BossAkState);
	static void StaticConfigureLevelMusic(class UAkEvent* StartMusicAkEvent, class UAkEvent* StopMusicAkEvent, class UAkState* AmbientAkState, class UAkState* CombatAkState);
};

// Class WillowGame.WorldBody
// 0x00C0 (0x0058 - 0x0118)
class UWorldBody : public UObject
{
public:
	struct FPointer                                    VfTable_IIWorldBody;                           // 0x0058 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IIDamageBehavior;                      // 0x0060 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class APawn*                                       Instigator;                                    // 0x0068 (0x0008) [0x0000000000000000]               
	struct FVector                                     Location;                                      // 0x0070 (0x000C) [0x0000000000000000]               
	struct FRotator                                    Rotation;                                      // 0x007C (0x000C) [0x0000000000000000]               
	struct FVector                                     Velocity;                                      // 0x0088 (0x000C) [0x0000000000000000]               
	class UObject*                                     WorldBodyAttachmentProxy;                      // 0x0098 (0x0008) [0x0000000000000000]               
	struct FImpactInfo                                 AttachmentProxyImpactInfo;                     // 0x00A0 (0x0070) [0x0000000000080000] (CPF_Component)
	class UObject*                                     AdditionalQueryInterfaceSource;                // 0x0110 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WorldBody");
		}

		return uClassPointer;
	};

	void Behavior_CauseRadiusDamage(float Radius, float DamageAmount, bool bFullDamage, float Momentum, class UClass* DamageType, class UDamagePipeline* Pipeline, const struct FVector& optionalOffset, class UIDamageCauser* optionalDamageCauser, bool optionalBSkipTraceTest, EOpinion optionalAllegianceFilter, class TArray<class AActor*>& ActorsHurt);
	void Behavior_CauseDamage(class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamagePipeline* Pipeline, class UIDamageCauser* optionalDamageCauser);
	void ShutDown();
	void InitializeFromImpact(class APawn* InInstigator, const struct FImpactInfo& InAttachmentProxyImpactInfo, class UObject* InAdditionalQueryInterfaceSource);
	void Initialize(class APawn* InInstigator, const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& InVelocity, class UObject* InWorldBodyAttachmentProxy, class UObject* InAdditionalQueryInterfaceSource);
	bool WorldBodyAttachComponent(class UActorComponent* Attachment, const struct FVector& optionalAttachmentRelativeLocation, const struct FRotator& optionalAttachmentRelativeRotation, const struct FName& optionalAttachmentPointName);
	bool WorldBodyAttachActor(class AActor* Attachment, const struct FVector& optionalAttachmentRelativeLocation, const struct FRotator& optionalAttachmentRelativeRotation, const struct FName& optionalAttachmentPointName);
	bool WorldBodyAttachTo(class UIWorldBody* OtherWorldBody, const struct FVector& optionalAttachmentRelativeLocation, const struct FRotator& optionalAttachmentRelativeRotation, const struct FName& optionalAttachmentPointName);
	class UIWorldBody* GetWorldBodyFirstPersonAttachmentBase();
	class UIWorldBody* GetWorldBodyAttachmentBase();
	struct FName GetWorldBodyAttachmentBoneForComponent(class UActorComponent* AttachedComponent);
	bool GetWorldBodyAttachmentLocationAndRotation(const struct FName& AttachmentPointName, struct FVector& OutLocation, struct FRotator& OutRotation);
	bool GetWorldBodyAttachmentRotation(const struct FName& AttachmentPointName, struct FRotator& OutRotation);
	bool GetWorldBodyAttachmentLocation(const struct FName& AttachmentPointName, struct FVector& OutLocation);
	struct FVector GetWorldBodyVelocity();
	struct FRotator GetWorldBodyRotation();
	struct FVector GetWorldBodyLocation();
};

// Class WillowGame.WorldDiscoveryArea
// 0x0098 (0x0240 - 0x02D8)
class AWorldDiscoveryArea : public AActor
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                       // 0x0240 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bForFogOfWarOnly : 1;                          // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseCustomName : 1;                            // 0x0248 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bWorldAreaVolume : 1;                          // 0x0248 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bWorldAreaRadius : 1;                          // 0x0248 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FName                                       DefaultWorldAreaShortName;                     // 0x024C (0x0008) [0x0000000000222001] (CPF_Edit | CPF_Transient | CPF_EditConst)
	struct FName                                       CustomName;                                    // 0x0254 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class AVolume*>                       DetectionVolumes;                              // 0x0260 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              DetectionRadius;                               // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetectionHeight;                               // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      WorldAreaDisplayName;                          // 0x0278 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UAkEvent*                                    DiscoveryAkEvent;                              // 0x0288 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class URegionDefinition*                           BalanceToRegionDef;                            // 0x0290 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FAttributeInitializationData                ExperienceRewardMultiplier;                    // 0x0298 (0x0020) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            GameStage;                                     // 0x02B8 (0x0004) [0x4000000000002000] (CPF_Transient)
	class TArray<class APlayerController*>             PlayersDetected;                               // 0x02C0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              NextDetectionTime;                             // 0x02D0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WorldDiscoveryArea");
		}

		return uClassPointer;
	};

	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int32_t NewExpLevel);
	void SetAwesomeLevel(int32_t NewAwesomeLevel);
	void SetGameStage(int32_t NewGameStage);
	int32_t GetExpLevel();
	int32_t GetAwesomeLevel();
	int32_t GetGameStage();
	int32_t GetExperienceReward(class AWillowPlayerController* DiscoveringPlayer);
	struct FName GetWorldAreaShortName();
};

// Class WillowGame.WorldDiscoveryAreaRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class UWorldDiscoveryAreaRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WorldDiscoveryAreaRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_BikeMove
// 0x0000 (0x02C8 - 0x02C8)
class UAction_BikeMove : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_BikeMove");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_BunkerBoss_Flight
// 0x0000 (0x02B8 - 0x02B8)
class UAction_BunkerBoss_Flight : public UAction_FollowMoveNodes
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_BunkerBoss_Flight");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_DeathTrap
// 0x0000 (0x02C8 - 0x02C8)
class UAction_DeathTrap : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_DeathTrap");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Drive_Pursuit
// 0x0000 (0x02C8 - 0x02C8)
class UAction_Drive_Pursuit : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Drive_Pursuit");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Drive_AlongsideTarget
// 0x0000 (0x02C8 - 0x02C8)
class UAction_Drive_AlongsideTarget : public UAction_Drive_Pursuit
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Drive_AlongsideTarget");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Drive_AvoidWall
// 0x0000 (0x02C8 - 0x02C8)
class UAction_Drive_AvoidWall : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Drive_AvoidWall");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Drive_BackUpAndAdjust
// 0x0000 (0x02C8 - 0x02C8)
class UAction_Drive_BackUpAndAdjust : public UAction_Drive_AvoidWall
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Drive_BackUpAndAdjust");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Drive_GoBackToCombatArea
// 0x0000 (0x02C8 - 0x02C8)
class UAction_Drive_GoBackToCombatArea : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Drive_GoBackToCombatArea");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_Drive_Pursuit_TargetOnFoot
// 0x0000 (0x02C8 - 0x02C8)
class UAction_Drive_Pursuit_TargetOnFoot : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_Drive_Pursuit_TargetOnFoot");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_DriveVehicle
// 0x0000 (0x02C8 - 0x02C8)
class UAction_DriveVehicle : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_DriveVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_FinalBoss
// 0x0000 (0x02B8 - 0x02B8)
class UAction_FinalBoss : public UAction_FollowMoveNodes
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_FinalBoss");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_FinalBossFly
// 0x0000 (0x02B8 - 0x02B8)
class UAction_FinalBossFly : public UAction_FollowMoveNodes
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_FinalBossFly");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_LeapAtTarget
// 0x0000 (0x0340 - 0x0340)
class UAction_LeapAtTarget : public UAction_AnimAttack
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_LeapAtTarget");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_MoveToVehicle
// 0x0000 (0x02C8 - 0x02C8)
class UAction_MoveToVehicle : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_MoveToVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Action_VehicleTurret
// 0x0000 (0x02C8 - 0x02C8)
class UAction_VehicleTurret : public UWillowActionSequencePawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Action_VehicleTurret");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowHUDGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UWillowHUDGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowHUDGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryInteractiveSwitch
// 0x0000 (0x00C8 - 0x00C8)
class UActorFactoryInteractiveSwitch : public UActorFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryInteractiveSwitch");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryPropObject
// 0x0000 (0x00C8 - 0x00C8)
class UActorFactoryPropObject : public UActorFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryPropObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSpawnStationPlatform
// 0x0000 (0x08E8 - 0x08E8)
class AVehicleSpawnStationPlatform : public AWillowInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSpawnStationPlatform");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSpawnStationPlatformDefinition
// 0x0000 (0x0268 - 0x0268)
class UVehicleSpawnStationPlatformDefinition : public UInteractiveObjectDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSpawnStationPlatformDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSpawnStationTerminal
// 0x0000 (0x08E8 - 0x08E8)
class AVehicleSpawnStationTerminal : public AWillowInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSpawnStationTerminal");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowVehicle
// 0x0000 (0x00C0 - 0x00C0)
class UActorFactoryWillowVehicle : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ActorFactoryWillowVehicleFactory
// 0x0000 (0x00C0 - 0x00C0)
class UActorFactoryWillowVehicleFactory : public UActorFactoryWillowVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ActorFactoryWillowVehicleFactory");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemDefinition
// 0x0000 (0x0240 - 0x0240)
class UItemDefinition : public UWillowInventoryDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.EquipableItemDefinition
// 0x0000 (0x0240 - 0x0240)
class UEquipableItemDefinition : public UItemDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EquipableItemDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ArtifactDefinition
// 0x0000 (0x0240 - 0x0240)
class UArtifactDefinition : public UEquipableItemDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ArtifactDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPartDefinition
// 0x0000 (0x00E0 - 0x00E0)
class UItemPartDefinition : public UWillowInventoryPartDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.EquipableItemPartDefinition
// 0x0000 (0x00E0 - 0x00E0)
class UEquipableItemPartDefinition : public UItemPartDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EquipableItemPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ArtifactPartDefinition
// 0x0000 (0x00E0 - 0x00E0)
class UArtifactPartDefinition : public UEquipableItemPartDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ArtifactPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AssassinInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class UAssassinInputContextSelector : public UDefaultInputContextSelector
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AssassinInputContextSelector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AssetLibraryManager
// 0x0000 (0x0058 - 0x0058)
class UAssetLibraryManager : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AssetLibraryManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation
// 0x0000 (0x00C8 - 0x00C8)
class UAttackLocation : public UGBXPathConstraint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_Direct
// 0x0000 (0x00C8 - 0x00C8)
class UAttackLocation_Direct : public UGBXPathConstraint_Direct
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_Direct");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_Height
// 0x0000 (0x00D0 - 0x00D0)
class UAttackLocation_Height : public UGBXPathConstraint_Height
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_Height");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_LineOfSight
// 0x0000 (0x0168 - 0x0168)
class UAttackLocation_LineOfSight : public UGBXPathConstraint_LineOfSight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_LineOfSight");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_MaxDistance
// 0x0000 (0x00D0 - 0x00D0)
class UAttackLocation_MaxDistance : public UGBXPathConstraint_MaxDistance
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_MaxDistance");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_Move
// 0x0000 (0x00E0 - 0x00E0)
class UAttackLocation_Move : public UGBXPathConstraint_Move
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_Move");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_ParentDistance
// 0x0000 (0x00C8 - 0x00C8)
class UAttackLocation_ParentDistance : public UGBXPathConstraint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_ParentDistance");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_Range
// 0x0000 (0x00E0 - 0x00E0)
class UAttackLocation_Range : public UGBXPathConstraint_Range
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_Range");
		}

		return uClassPointer;
	};

};

// Class WillowGame.AttackLocation_Side
// 0x0000 (0x00F0 - 0x00F0)
class UAttackLocation_Side : public UGBXPathConstraint_Side
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.AttackLocation_Side");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BadassAttributeValueResolver
// 0x0000 (0x0058 - 0x0058)
class UBadassAttributeValueResolver : public UAttributeValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BadassAttributeValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BaseInventoryPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UBaseInventoryPanelGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BaseInventoryPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BadassPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UBadassPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BadassPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BankGFxDefinition
// 0x0000 (0x0138 - 0x0138)
class UBankGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BankGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TwoPanelInterfaceGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UTwoPanelInterfaceGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TwoPanelInterfaceGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BankGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UBankGFxMovie : public UTwoPanelInterfaceGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BankGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BaseTopLevelPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UBaseTopLevelPanelGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BaseTopLevelPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AddInventoryToStorage
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AddInventoryToStorage : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AddInventoryToStorage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AdjustCameraAnimByEyeHeight
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AdjustCameraAnimByEyeHeight : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AdjustCameraAnimByEyeHeight");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AISetWeaponFireRotation
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AISetWeaponFireRotation : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AISetWeaponFireRotation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AITakeMoney
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AITakeMoney : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AITakeMoney");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AttachAOEStatusEffect
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AttachAOEStatusEffect : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AttachAOEStatusEffect");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AttemptStatusEffect
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AttemptStatusEffect : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AttemptStatusEffect");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_AwardExperienceForMyDeath
// 0x0000 (0x0070 - 0x0070)
class UBehavior_AwardExperienceForMyDeath : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_AwardExperienceForMyDeath");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_BeginLifting
// 0x0000 (0x0070 - 0x0070)
class UBehavior_BeginLifting : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_BeginLifting");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_BroadcastEcho
// 0x0000 (0x0070 - 0x0070)
class UBehavior_BroadcastEcho : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_BroadcastEcho");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ChangeUsability
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ChangeUsability : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ChangeUsability");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ClearStatusEffects
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ClearStatusEffects : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ClearStatusEffects");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ConvertInstanceDataIntoPhysicsActor
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ConvertInstanceDataIntoPhysicsActor : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ConvertInstanceDataIntoPhysicsActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_Crane
// 0x0000 (0x0070 - 0x0070)
class UBehavior_Crane : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_Crane");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_DropItems
// 0x0000 (0x0070 - 0x0070)
class UBehavior_DropItems : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_DropItems");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_EnterVehicle
// 0x0000 (0x0070 - 0x0070)
class UBehavior_EnterVehicle : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_EnterVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_FinishLifting
// 0x0000 (0x0070 - 0x0070)
class UBehavior_FinishLifting : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_FinishLifting");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ForceDownState
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ForceDownState : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ForceDownState");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_GetPlayerStat
// 0x0000 (0x0070 - 0x0070)
class UBehavior_GetPlayerStat : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GetPlayerStat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_GiveChallengeToPlayer
// 0x0000 (0x0070 - 0x0070)
class UBehavior_GiveChallengeToPlayer : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GiveChallengeToPlayer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_GiveInjuredPlayerSecondWind
// 0x0000 (0x0070 - 0x0070)
class UBehavior_GiveInjuredPlayerSecondWind : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_GiveInjuredPlayerSecondWind");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_IncrementPlayerStat
// 0x0000 (0x0070 - 0x0070)
class UBehavior_IncrementPlayerStat : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_IncrementPlayerStat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_NotifyThoughtLockStatus
// 0x0000 (0x0070 - 0x0070)
class UBehavior_NotifyThoughtLockStatus : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_NotifyThoughtLockStatus");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_PlayHardFlinch
// 0x0000 (0x0070 - 0x0070)
class UBehavior_PlayHardFlinch : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_PlayHardFlinch");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_QueuePersonalEcho
// 0x0000 (0x0070 - 0x0070)
class UBehavior_QueuePersonalEcho : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_QueuePersonalEcho");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_RadarIcon
// 0x0000 (0x0070 - 0x0070)
class UBehavior_RadarIcon : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RadarIcon");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_RegisterFastTravelDefinition
// 0x0000 (0x0070 - 0x0070)
class UBehavior_RegisterFastTravelDefinition : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RegisterFastTravelDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_RemoveInventoryFromStorage
// 0x0000 (0x0070 - 0x0070)
class UBehavior_RemoveInventoryFromStorage : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_RemoveInventoryFromStorage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ResetActionSkillCooldown
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ResetActionSkillCooldown : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ResetActionSkillCooldown");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SelectPhaselockTarget
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SelectPhaselockTarget : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SelectPhaselockTarget");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetChallengeCompleted
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetChallengeCompleted : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetChallengeCompleted");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetDemigodMode
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetDemigodMode : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetDemigodMode");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetDualWieldBlendState
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetDualWieldBlendState : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetDualWieldBlendState");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetJackVoiceModulatorState
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetJackVoiceModulatorState : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetJackVoiceModulatorState");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetNumBankSlots
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetNumBankSlots : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetNumBankSlots");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetShieldDamageResistanceType
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetShieldDamageResistanceType : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetShieldDamageResistanceType");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetSkelControlLookAtActor
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetSkelControlLookAtActor : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetSkelControlLookAtActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetSkelControlTurretConstrainedValues
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetSkelControlTurretConstrainedValues : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetSkelControlTurretConstrainedValues");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetUsabilityCost
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetUsabilityCost : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetUsabilityCost");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetUsableIcon
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetUsableIcon : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetUsableIcon");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SetVehicleSimObject
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SetVehicleSimObject : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SetVehicleSimObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ShowGenericReviveMessage
// 0x0000 (0x0070 - 0x0070)
class UBehavior_ShowGenericReviveMessage : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ShowGenericReviveMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SpawnFromSpawnSystem
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SpawnFromSpawnSystem : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnFromSpawnSystem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SpawnFromVehicleSpawnStation
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SpawnFromVehicleSpawnStation : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnFromVehicleSpawnStation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SpawnLoot
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SpawnLoot : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnLoot");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SpawnLootAroundPoint
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SpawnLootAroundPoint : public UBehavior_SpawnLoot
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnLootAroundPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_SpawnParticleSystemAtWorldLocation
// 0x0000 (0x0070 - 0x0070)
class UBehavior_SpawnParticleSystemAtWorldLocation : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_SpawnParticleSystemAtWorldLocation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_StatusEffectSwitch
// 0x0000 (0x0070 - 0x0070)
class UBehavior_StatusEffectSwitch : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_StatusEffectSwitch");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_ToggleTelescopeOverlay
// 0x0000 (0x0058 - 0x0058)
class UBehavior_ToggleTelescopeOverlay : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_ToggleTelescopeOverlay");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_UnlockCustomization
// 0x0000 (0x0058 - 0x0058)
class UBehavior_UnlockCustomization : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UnlockCustomization");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_UnlockCustomizationFromRewardPool
// 0x0000 (0x0058 - 0x0058)
class UBehavior_UnlockCustomizationFromRewardPool : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_UnlockCustomizationFromRewardPool");
		}

		return uClassPointer;
	};

};

// Class WillowGame.Behavior_VoGScreenParticle
// 0x0000 (0x0140 - 0x0140)
class UBehavior_VoGScreenParticle : public UBehavior_ScreenParticle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.Behavior_VoGScreenParticle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BlackMarketDefinition
// 0x0000 (0x0058 - 0x0058)
class UBlackMarketDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BlackMarketDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BlackMarketUpgradeDefinition
// 0x0000 (0x0058 - 0x0058)
class UBlackMarketUpgradeDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BlackMarketUpgradeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BlackMarketUpgradeManager
// 0x0000 (0x0240 - 0x0240)
class ABlackMarketUpgradeManager : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BlackMarketUpgradeManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BoundaryTurretRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class UBoundaryTurretRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BoundaryTurretRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BuzzaxeActionSkill
// 0x0000 (0x0340 - 0x0340)
class ABuzzaxeActionSkill : public AActionSkill
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BuzzaxeActionSkill");
		}

		return uClassPointer;
	};

};

// Class WillowGame.BuzzaxeWeaponTypeDefinition
// 0x0000 (0x08D8 - 0x08D8)
class UBuzzaxeWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.BuzzaxeWeaponTypeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleHandlingDefinition
// 0x0000 (0x0058 - 0x0058)
class UVehicleHandlingDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleHandlingDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CarVehicleHandlingDefinition
// 0x0000 (0x0058 - 0x0058)
class UCarVehicleHandlingDefinition : public UVehicleHandlingDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CarVehicleHandlingDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengeConditionDefinition
// 0x0000 (0x0058 - 0x0058)
class UChallengeConditionDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengeConditionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengeDefinition
// 0x0000 (0x0058 - 0x0058)
class UChallengeDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengeManager
// 0x0000 (0x0240 - 0x0240)
class AChallengeManager : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengeManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengesPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UChallengesPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengesPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChallengesScreenGFxObject
// 0x0000 (0x0058 - 0x0058)
class UChallengesScreenGFxObject : public UBaseTopLevelPanelGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChallengesScreenGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CharacterCustomizationInfoCardGFxObject
// 0x0000 (0x0058 - 0x0058)
class UCharacterCustomizationInfoCardGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CharacterCustomizationInfoCardGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CharacterCustomizationMenuGFxObject
// 0x0000 (0x0058 - 0x0058)
class UCharacterCustomizationMenuGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CharacterCustomizationMenuGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CharacterSelectionCustomizationListGFxObject
// 0x0000 (0x0058 - 0x0058)
class UCharacterSelectionCustomizationListGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CharacterSelectionCustomizationListGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CharacterSelectionReduxGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UCharacterSelectionReduxGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CharacterSelectionReduxGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChassisDefinition
// 0x0000 (0x0058 - 0x0058)
class UChassisDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChassisDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ChopperVehicleHandlingDefinition
// 0x0000 (0x0058 - 0x0058)
class UChopperVehicleHandlingDefinition : public UVehicleHandlingDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ChopperVehicleHandlingDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ClassDropWeightValueResolver
// 0x0000 (0x0058 - 0x0058)
class UClassDropWeightValueResolver : public UAttributeValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ClassDropWeightValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemBalanceDefinition
// 0x0000 (0x00A8 - 0x00A8)
class UItemBalanceDefinition : public UInventoryBalanceDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemBalanceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ClassModBalanceDefinition
// 0x0000 (0x00A8 - 0x00A8)
class UClassModBalanceDefinition : public UItemBalanceDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ClassModBalanceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ClassModDefinition
// 0x0000 (0x0240 - 0x0240)
class UClassModDefinition : public UEquipableItemDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ClassModDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ClassModPartDefinition
// 0x0000 (0x0058 - 0x0058)
class UClassModPartDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ClassModPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ColiseumRuleDefinition
// 0x0000 (0x0058 - 0x0058)
class UColiseumRuleDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ColiseumRuleDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ConfirmCharacterLobbyGFxMovie
// 0x0000 (0x0450 - 0x0450)
class UConfirmCharacterLobbyGFxMovie : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ConfirmCharacterLobbyGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationData
// 0x0000 (0x0058 - 0x0058)
class UCustomizationData : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationData");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationData_Head
// 0x0000 (0x0058 - 0x0058)
class UCustomizationData_Head : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationData_Head");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationData_Skin
// 0x0000 (0x0058 - 0x0058)
class UCustomizationData_Skin : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationData_Skin");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationDefinition
// 0x0000 (0x0058 - 0x0058)
class UCustomizationDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationGFxDefinition
// 0x0000 (0x0170 - 0x0170)
class UCustomizationGFxDefinition : public UWillowGFxThirdPersonDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationGFxMovie
// 0x0000 (0x0660 - 0x0660)
class UCustomizationGFxMovie : public UWillowGFxThirdPersonMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationType
// 0x0000 (0x0058 - 0x0058)
class UCustomizationType : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationType");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationType_Head
// 0x0000 (0x0058 - 0x0058)
class UCustomizationType_Head : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationType_Head");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationType_Skin
// 0x0000 (0x0058 - 0x0058)
class UCustomizationType_Skin : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationType_Skin");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Player
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Player : public UCustomizationUsage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Player");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Assassin
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Assassin : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Assassin");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Vehicle
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Vehicle : public UCustomizationUsage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Vehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_BanditTech
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_BanditTech : public UCustomizationUsage_Vehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_BanditTech");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerA
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerA : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerA");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerB
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerB : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerB");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerC
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerC : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerC");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerD
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerD : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerD");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerE
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerE : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerE");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerF
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerF : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerF");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerG
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerG : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerG");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerH
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerH : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerH");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerI
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerI : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerI");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerJ
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerJ : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerJ");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerK
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerK : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerK");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerL
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerL : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerL");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerM
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerM : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerM");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerN
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerN : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerN");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerO
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerO : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerO");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_ExtraPlayerP
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_ExtraPlayerP : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_ExtraPlayerP");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_FanBoat
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_FanBoat : public UCustomizationUsage_Vehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_FanBoat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Hovercraft
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Hovercraft : public UCustomizationUsage_Vehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Hovercraft");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Mercenary
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Mercenary : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Mercenary");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Runner
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Runner : public UCustomizationUsage_Vehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Runner");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Siren
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Siren : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Siren");
		}

		return uClassPointer;
	};

};

// Class WillowGame.CustomizationUsage_Soldier
// 0x0000 (0x0058 - 0x0058)
class UCustomizationUsage_Soldier : public UCustomizationUsage_Player
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.CustomizationUsage_Soldier");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DeathtrapActionSkill
// 0x0000 (0x0340 - 0x0340)
class ADeathtrapActionSkill : public AActionSkill
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DeathtrapActionSkill");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DefinitionGlobalsDefinition
// 0x0000 (0x0058 - 0x0058)
class UDefinitionGlobalsDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DefinitionGlobalsDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DeployableTurretActor
// 0x0000 (0x0240 - 0x0240)
class ADeployableTurretActor : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DeployableTurretActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DeveloperPerksDefinition
// 0x0000 (0x0058 - 0x0058)
class UDeveloperPerksDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DeveloperPerksDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DownloadableAssetLibraryDefinition
// 0x0000 (0x0058 - 0x0058)
class UDownloadableAssetLibraryDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableAssetLibraryDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerTrainingMessageListDefinition
// 0x0000 (0x0058 - 0x0058)
class UPlayerTrainingMessageListDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerTrainingMessageListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DownloadableVehicleDefinition
// 0x0000 (0x0080 - 0x0080)
class UDownloadableVehicleDefinition : public UDownloadableContentDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DownloadableVehicleDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.DualWieldActionSkill
// 0x0000 (0x0340 - 0x0340)
class ADualWieldActionSkill : public AActionSkill
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.DualWieldActionSkill");
		}

		return uClassPointer;
	};

};

// Class WillowGame.EridiumValueGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UEridiumValueGFxObject : public UValueGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.EridiumValueGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ExecuteActionSkill
// 0x0000 (0x0340 - 0x0340)
class AExecuteActionSkill : public AActionSkill
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ExecuteActionSkill");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelSignGFxMovie
// 0x0000 (0x03F8 - 0x03F8)
class UFastTravelSignGFxMovie : public UGFxMovieInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelSignGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TravelStation
// 0x0000 (0x08E8 - 0x08E8)
class ATravelStation : public AWillowInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TravelStation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelStation
// 0x0000 (0x08E8 - 0x08E8)
class AFastTravelStation : public ATravelStation
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TravelStationDefinition
// 0x0000 (0x0058 - 0x0058)
class UTravelStationDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TravelStationDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelStationDefinition
// 0x0000 (0x0058 - 0x0058)
class UFastTravelStationDefinition : public UTravelStationDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStationDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelStationDiscoveryMessage
// 0x0000 (0x0068 - 0x0068)
class UFastTravelStationDiscoveryMessage : public ULocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStationDiscoveryMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelStationGFxMovie
// 0x0000 (0x0660 - 0x0660)
class UFastTravelStationGFxMovie : public UWillowGFxThirdPersonMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStationGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelStationsListOrder
// 0x0000 (0x0058 - 0x0058)
class UFastTravelStationsListOrder : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStationsListOrder");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FastTravelStationsLookup
// 0x0000 (0x0058 - 0x0058)
class UFastTravelStationsLookup : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FastTravelStationsLookup");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FrontendGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UFrontendGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FrontendGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FrontendGFxMovieDefinition
// 0x0000 (0x0058 - 0x0058)
class UFrontendGFxMovieDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FrontendGFxMovieDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FrontendMenuGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UFrontendMenuGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FrontendMenuGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.FrontEndPlayerListGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UFrontEndPlayerListGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.FrontEndPlayerListGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GammaScreenGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UGammaScreenGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GammaScreenGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GearboxAccountGFxMovie
// 0x0000 (0x0450 - 0x0450)
class UGearboxAccountGFxMovie : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GearboxAccountGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GearLikenessMeshComponent
// 0x0000 (0x0980 - 0x0980)
class UGearLikenessMeshComponent : public USkeletalMeshComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GearLikenessMeshComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GrenadeModDefinition
// 0x0000 (0x0240 - 0x0240)
class UGrenadeModDefinition : public UEquipableItemDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GrenadeModDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.GrenadeModPartDefinition
// 0x0000 (0x0058 - 0x0058)
class UGrenadeModPartDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.GrenadeModPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HashDisplayGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UHashDisplayGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HashDisplayGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HoverVehicleHandlingDefinition
// 0x0000 (0x0058 - 0x0058)
class UHoverVehicleHandlingDefinition : public UCarVehicleHandlingDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HoverVehicleHandlingDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDWidget_Base
// 0x0000 (0x00D8 - 0x00D8)
class UHUDWidget_Base : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDWidget_Base");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDWidget_Challenges
// 0x0000 (0x00D8 - 0x00D8)
class UHUDWidget_Challenges : public UHUDWidget_Base
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDWidget_Challenges");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDWidget_Crosshairs
// 0x0000 (0x00D8 - 0x00D8)
class UHUDWidget_Crosshairs : public UHUDWidget_Base
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDWidget_Crosshairs");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDWidget_Minimap
// 0x0000 (0x00D8 - 0x00D8)
class UHUDWidget_Minimap : public UHUDWidget_Base
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDWidget_Minimap");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDWidget_Missions
// 0x0000 (0x00D8 - 0x00D8)
class UHUDWidget_Missions : public UHUDWidget_Base
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDWidget_Missions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.HUDWidget_WorldSpace
// 0x0000 (0x00D8 - 0x00D8)
class UHUDWidget_WorldSpace : public UHUDWidget_Base
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.HUDWidget_WorldSpace");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InjuredFeedbackMessage
// 0x0000 (0x0068 - 0x0068)
class UInjuredFeedbackMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InjuredFeedbackMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryCardGFx
// 0x0000 (0x0058 - 0x0058)
class UInventoryCardGFx : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryCardGFx");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryDataProviderGFxObject
// 0x0000 (0x0058 - 0x0058)
class UInventoryDataProviderGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryDataProviderGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryListPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UInventoryListPanelGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryListPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.InventoryPartListCollectionDefinition
// 0x0000 (0x0058 - 0x0058)
class UInventoryPartListCollectionDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.InventoryPartListCollectionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemCardGFxObject
// 0x0000 (0x0058 - 0x0058)
class UItemCardGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemCardGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemInspectionGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UItemInspectionGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemInspectionGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemInspectionGFxMovieDefinition
// 0x0000 (0x0058 - 0x0058)
class UItemInspectionGFxMovieDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemInspectionGFxMovieDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemNamePartDefinition
// 0x0000 (0x00E0 - 0x00E0)
class UItemNamePartDefinition : public UItemPartDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemNamePartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemOfTheDayPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UItemOfTheDayPanelGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemOfTheDayPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPartListCollectionDefinition
// 0x0000 (0x0058 - 0x0058)
class UItemPartListCollectionDefinition : public UInventoryPartListCollectionDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPartListCollectionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPartListDefinition
// 0x0000 (0x0058 - 0x0058)
class UItemPartListDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPartListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPickupGFxDefinition
// 0x0000 (0x0058 - 0x0058)
class UItemPickupGFxDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPickupGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ItemPickupGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UItemPickupGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ItemPickupGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LatentRewardGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class ULatentRewardGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LatentRewardGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LevelTransitionSignGFxMovie
// 0x0000 (0x03F8 - 0x03F8)
class ULevelTransitionSignGFxMovie : public UGFxMovieInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelTransitionSignGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LevelTravelStation
// 0x0000 (0x08E8 - 0x08E8)
class ALevelTravelStation : public ATravelStation
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelTravelStation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LevelTravelStationDefinition
// 0x0000 (0x0058 - 0x0058)
class ULevelTravelStationDefinition : public UTravelStationDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LevelTravelStationDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LiftActionSkill
// 0x0000 (0x0340 - 0x0340)
class ALiftActionSkill : public AActionSkill
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LiftActionSkill");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LoadCharacterLobbyGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class ULoadCharacterLobbyGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LoadCharacterLobbyGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LobbyGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class ULobbyGFxMovie : public UFrontendGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LobbyGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LocalInventoryRefreshMessage
// 0x0000 (0x0068 - 0x0068)
class ULocalInventoryRefreshMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalInventoryRefreshMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LocalItemMessage
// 0x0000 (0x0068 - 0x0068)
class ULocalItemMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalItemMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LocalMapChangeMessage
// 0x0000 (0x0068 - 0x0068)
class ULocalMapChangeMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalMapChangeMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.LocalWeaponMessage
// 0x0000 (0x0068 - 0x0068)
class ULocalWeaponMessage : public ULocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.LocalWeaponMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MarketingUnlockDefinition
// 0x0000 (0x0058 - 0x0058)
class UMarketingUnlockDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MarketingUnlockDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MarketingUnlockInventoryDefinition
// 0x0000 (0x0058 - 0x0058)
class UMarketingUnlockInventoryDefinition : public UMarketingUnlockDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MarketingUnlockInventoryDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MarketingUnlockLicenseItem
// 0x0000 (0x0060 - 0x0060)
class UMarketingUnlockLicenseItem : public UDownloadablePackageLicenseItem
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MarketingUnlockLicenseItem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MarketplaceGFxMovieDefinition
// 0x0000 (0x0058 - 0x0058)
class UMarketplaceGFxMovieDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MarketplaceGFxMovieDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MatchmakingLobbyCharacterInfoGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UMatchmakingLobbyCharacterInfoGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MatchmakingLobbyCharacterInfoGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MatchmakingLobbyGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UMatchmakingLobbyGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MatchmakingLobbyGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MatchmakingLobbyResultsGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UMatchmakingLobbyResultsGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MatchmakingLobbyResultsGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MechromancerInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class UMechromancerInputContextSelector : public UDefaultInputContextSelector
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MechromancerInputContextSelector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MercenaryInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class UMercenaryInputContextSelector : public UDefaultInputContextSelector
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MercenaryInputContextSelector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MissionFeedbackMessage
// 0x0000 (0x0068 - 0x0068)
class UMissionFeedbackMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MissionFeedbackMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.MissionRewardGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UMissionRewardGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.MissionRewardGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.NetworkOptionsGFxMovie
// 0x0000 (0x0450 - 0x0450)
class UNetworkOptionsGFxMovie : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.NetworkOptionsGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.NetworkOptionsGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UNetworkOptionsGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.NetworkOptionsGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.OpenedChestMessage
// 0x0000 (0x0068 - 0x0068)
class UOpenedChestMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.OpenedChestMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.OptionsGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UOptionsGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.OptionsGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PackageAssetLibrary
// 0x0000 (0x0058 - 0x0058)
class UPackageAssetLibrary : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PackageAssetLibrary");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PackageAssetSublibrary
// 0x0000 (0x0058 - 0x0058)
class UPackageAssetSublibrary : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PackageAssetSublibrary");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PassengerCameraDefinition
// 0x0000 (0x0058 - 0x0058)
class UPassengerCameraDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PassengerCameraDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PauseGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UPauseGFxMovie : public UFrontendGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PauseGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_DropItems
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_DropItems : public UBehavior_DropItems
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_DropItems");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_Melee
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_Melee : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_Melee");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_PlayEchoCall
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_PlayEchoCall : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_PlayEchoCall");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_RegisterFastTravelStation
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_RegisterFastTravelStation : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_RegisterFastTravelStation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_SpawnTeleporter
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_SpawnTeleporter : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_SpawnTeleporter");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_ThrowGrenade
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_ThrowGrenade : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_ThrowGrenade");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerBehavior_ToggleRevive
// 0x0000 (0x0070 - 0x0070)
class UPlayerBehavior_ToggleRevive : public UPlayerBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerBehavior_ToggleRevive");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerChallengeListDefinition
// 0x0000 (0x0058 - 0x0058)
class UPlayerChallengeListDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerChallengeListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerDetailsGFxMovie
// 0x0000 (0x0450 - 0x0450)
class UPlayerDetailsGFxMovie : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerDetailsGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerDetailsGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UPlayerDetailsGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerDetailsGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerEventProviderDefinition
// 0x0000 (0x0058 - 0x0058)
class UPlayerEventProviderDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerEventProviderDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerSaveGame
// 0x0000 (0x0058 - 0x0058)
class UPlayerSaveGame : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerSaveGame");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PlayerStatsNotifier
// 0x0000 (0x0058 - 0x0058)
class UPlayerStatsNotifier : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PlayerStatsNotifier");
		}

		return uClassPointer;
	};

};

// Class WillowGame.PsychoInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class UPsychoInputContextSelector : public UDefaultInputContextSelector
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.PsychoInputContextSelector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.QuestAcceptGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UQuestAcceptGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.QuestAcceptGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ReceivedAmmoMessage
// 0x0000 (0x0068 - 0x0068)
class UReceivedAmmoMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ReceivedAmmoMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ReceivedCreditsMessage
// 0x0000 (0x0068 - 0x0068)
class UReceivedCreditsMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ReceivedCreditsMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ReceivedItemMessage
// 0x0000 (0x0068 - 0x0068)
class UReceivedItemMessage : public ULocalItemMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ReceivedItemMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ReceivedWeaponMessage
// 0x0000 (0x0068 - 0x0068)
class UReceivedWeaponMessage : public ULocalWeaponMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ReceivedWeaponMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.RecentDropList
// 0x0000 (0x0058 - 0x0058)
class URecentDropList : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.RecentDropList");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ResurrectTravelStation
// 0x0000 (0x08E8 - 0x08E8)
class AResurrectTravelStation : public ATravelStation
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ResurrectTravelStation");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_DiscoverLevelChallengeObject
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_DiscoverLevelChallengeObject : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_DiscoverLevelChallengeObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqAct_SetChallengeCompleted
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetChallengeCompleted : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqAct_SetChallengeCompleted");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SeqCond_HasValidSaveGame
// 0x0000 (0x00C8 - 0x00C8)
class USeqCond_HasValidSaveGame : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SeqCond_HasValidSaveGame");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ShieldDefinition
// 0x0000 (0x0240 - 0x0240)
class UShieldDefinition : public UEquipableItemDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ShieldDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ShieldPartDefinition
// 0x0000 (0x0058 - 0x0058)
class UShieldPartDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ShieldPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.ShopTimerRateValueResolver
// 0x0000 (0x0058 - 0x0058)
class UShopTimerRateValueResolver : public UAttributeValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.ShopTimerRateValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SirenInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class USirenInputContextSelector : public UDefaultInputContextSelector
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SirenInputContextSelector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillPointsFeedbackMessage
// 0x0000 (0x0068 - 0x0068)
class USkillPointsFeedbackMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillPointsFeedbackMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillTreeGFxDefinition
// 0x0000 (0x0058 - 0x0058)
class USkillTreeGFxDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillTreeGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SkillTreeGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class USkillTreeGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SkillTreeGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SoldierInputContextSelector
// 0x0000 (0x0058 - 0x0058)
class USoldierInputContextSelector : public UDefaultInputContextSelector
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SoldierInputContextSelector");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpawnFactoryBlackMarket
// 0x0000 (0x00B0 - 0x00B0)
class USpawnFactoryBlackMarket : public USpawnFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryBlackMarket");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpawnFactoryVendingMachine
// 0x0000 (0x00B0 - 0x00B0)
class USpawnFactoryVendingMachine : public USpawnFactoryInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryVendingMachine");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpawnFactoryWillowVehicle
// 0x0000 (0x0078 - 0x0078)
class USpawnFactoryWillowVehicle : public USpawnFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpawnFactoryWillowVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_FirstPersonDualWieldAction
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_FirstPersonDualWieldAction : public USpecialMove_FirstPerson
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_FirstPersonDualWieldAction");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_PerchLoop
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_PerchLoop : public UWillowAnimDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_PerchLoop");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_PerchRandomLoop
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_PerchRandomLoop : public USpecialMove_PerchLoop
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_PerchRandomLoop");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_PopulationPoint
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_PopulationPoint : public UWillowAnimDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_PopulationPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SpecialMove_Vehicle
// 0x0000 (0x0148 - 0x0148)
class USpecialMove_Vehicle : public UWillowAnimDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SpecialMove_Vehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.SplitscreenHelper
// 0x0000 (0x0058 - 0x0058)
class USplitscreenHelper : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.SplitscreenHelper");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StashGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UStashGFxMovie : public UTwoPanelInterfaceGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StashGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StationTeleporterVehicleExitPoint
// 0x0000 (0x0248 - 0x0248)
class AStationTeleporterVehicleExitPoint : public AStationTeleporterExitPoint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StationTeleporterVehicleExitPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusEffectChanceModifierResolver
// 0x0000 (0x0058 - 0x0058)
class UStatusEffectChanceModifierResolver : public UAttributeContextResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusEffectChanceModifierResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusEffectDefinition
// 0x0000 (0x0058 - 0x0058)
class UStatusEffectDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusEffectDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusEffectExpressionEvaluator
// 0x0000 (0x0058 - 0x0058)
class UStatusEffectExpressionEvaluator : public UExpressionEvaluator
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusEffectExpressionEvaluator");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusEffectProxyActor
// 0x0000 (0x0240 - 0x0240)
class AStatusEffectProxyActor : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusEffectProxyActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusEffectReplicatedEmitter
// 0x0000 (0x0288 - 0x0288)
class AStatusEffectReplicatedEmitter : public AWillowEmitter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusEffectReplicatedEmitter");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusEffectsComponent
// 0x0000 (0x0090 - 0x0090)
class UStatusEffectsComponent : public UActorComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusEffectsComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusMenuEquippedPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UStatusMenuEquippedPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusMenuEquippedPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInventoryGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UWillowInventoryGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInventoryGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusMenuExGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UStatusMenuExGFxMovie : public UWillowInventoryGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusMenuExGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusMenuGFxDefinition
// 0x0000 (0x01B8 - 0x01B8)
class UStatusMenuGFxDefinition : public UWillowInventoryGFxDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusMenuGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusMenuInventoryPanelGFxObject
// 0x0000 (0x0058 - 0x0058)
class UStatusMenuInventoryPanelGFxObject : public UBaseTopLevelPanelGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusMenuInventoryPanelGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.StatusMenuMapGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UStatusMenuMapGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.StatusMenuMapGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TankVehicleHandlingDefinition
// 0x0000 (0x0058 - 0x0058)
class UTankVehicleHandlingDefinition : public UCarVehicleHandlingDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TankVehicleHandlingDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TrainingMessageDefinition
// 0x0000 (0x0058 - 0x0058)
class UTrainingMessageDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TrainingMessageDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TransformedFlagValueResolver
// 0x0000 (0x0058 - 0x0058)
class UTransformedFlagValueResolver : public UFlagValueResolver
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TransformedFlagValueResolver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TravelStationNozzleComponent
// 0x0000 (0x0360 - 0x0360)
class UTravelStationNozzleComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TravelStationNozzleComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TurretWeaponTypeDefinition
// 0x0000 (0x08D8 - 0x08D8)
class UTurretWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TurretWeaponTypeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.TwoPanelInterfaceGFxObject
// 0x0000 (0x0058 - 0x0058)
class UTwoPanelInterfaceGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.TwoPanelInterfaceGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.UsableCustomizationItemDefinition
// 0x0000 (0x0058 - 0x0058)
class UUsableCustomizationItemDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.UsableCustomizationItemDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.UsableItemDefinition
// 0x0000 (0x0240 - 0x0240)
class UUsableItemDefinition : public UItemDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.UsableItemDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.UsableItemPartDefinition
// 0x0000 (0x00E0 - 0x00E0)
class UUsableItemPartDefinition : public UItemPartDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.UsableItemPartDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VantageNode
// 0x0000 (0x0260 - 0x0260)
class AVantageNode : public APathNode
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VantageNode");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleBalanceDefinition
// 0x0000 (0x0058 - 0x0058)
class UVehicleBalanceDefinition : public UBaseBalanceDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleBalanceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleBlockingVolume
// 0x0000 (0x0290 - 0x0290)
class AVehicleBlockingVolume : public ABlockingVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleBlockingVolume");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleChoiceInfoCardGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UVehicleChoiceInfoCardGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleChoiceInfoCardGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleChoiceModuleGFxObject
// 0x0000 (0x00D8 - 0x00D8)
class UVehicleChoiceModuleGFxObject : public UGFxObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleChoiceModuleGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleClassDefinition
// 0x0000 (0x0058 - 0x0058)
class UVehicleClassDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleClassDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleCrewAnimSetLookupTable
// 0x0000 (0x0058 - 0x0058)
class UVehicleCrewAnimSetLookupTable : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleCrewAnimSetLookupTable");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleFamilyDefinition
// 0x0000 (0x0058 - 0x0058)
class UVehicleFamilyDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleFamilyDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleLifetimeManager
// 0x0000 (0x0240 - 0x0240)
class AVehicleLifetimeManager : public AInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleLifetimeManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSeatSwap_PlayerInteractionClient
// 0x0000 (0x0058 - 0x0058)
class UVehicleSeatSwap_PlayerInteractionClient : public UPlayerInteractionClient
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSeatSwap_PlayerInteractionClient");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSeatSwap_PlayerInteractionServer
// 0x0000 (0x0060 - 0x0060)
class UVehicleSeatSwap_PlayerInteractionServer : public UPlayerInteractionServer
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSeatSwap_PlayerInteractionServer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSpawnStationGFxDefinition
// 0x0000 (0x0138 - 0x0138)
class UVehicleSpawnStationGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSpawnStationGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSpawnStationGFxMovie
// 0x0000 (0x05B0 - 0x05B0)
class UVehicleSpawnStationGFxMovie : public UWillowGFxMovie3D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSpawnStationGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleSpawnStationVehicleDefinition
// 0x0000 (0x0058 - 0x0058)
class UVehicleSpawnStationVehicleDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleSpawnStationVehicleDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleStandIn
// 0x0000 (0x0240 - 0x0240)
class AVehicleStandIn : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleStandIn");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleWeaponTypeDefinition
// 0x0000 (0x08D8 - 0x08D8)
class UVehicleWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleWeaponTypeDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VehicleWheelDefinition
// 0x0000 (0x0058 - 0x0058)
class UVehicleWheelDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VehicleWheelDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VendingMachineExGFxDefinition
// 0x0000 (0x0058 - 0x0058)
class UVendingMachineExGFxDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VendingMachineExGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VendingMachineExGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UVendingMachineExGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VendingMachineExGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VendingMachineFeedbackGFxObject
// 0x0000 (0x0058 - 0x0058)
class UVendingMachineFeedbackGFxObject : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VendingMachineFeedbackGFxObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VendingMachineGFxDefinition
// 0x0000 (0x0058 - 0x0058)
class UVendingMachineGFxDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VendingMachineGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.VSSUIDefinition
// 0x0000 (0x0058 - 0x0058)
class UVSSUIDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.VSSUIDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponPartListCollectionDefinition
// 0x0000 (0x0058 - 0x0058)
class UWeaponPartListCollectionDefinition : public UInventoryPartListCollectionDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponPartListCollectionDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponPartListDefinition
// 0x0000 (0x0058 - 0x0058)
class UWeaponPartListDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponPartListDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponScopeGFxDefinition
// 0x0000 (0x0058 - 0x0058)
class UWeaponScopeGFxDefinition : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponScopeGFxDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponScopeGFxMovie
// 0x0000 (0x0058 - 0x0058)
class UWeaponScopeGFxMovie : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponScopeGFxMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WeaponStatusEffectAttributePresentationDefinition
// 0x0000 (0x0150 - 0x0150)
class UWeaponStatusEffectAttributePresentationDefinition : public UAttributePresentationDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WeaponStatusEffectAttributePresentationDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAIBlackboardComponent
// 0x0000 (0x0338 - 0x0338)
class UWillowAIBlackboardComponent : public UWillowAIComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIBlackboardComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAICranePawn
// 0x0000 (0x17C8 - 0x17C8)
class AWillowAICranePawn : public AWillowPawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAICranePawn");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAIEncounterComponent
// 0x0000 (0x02F8 - 0x02F8)
class UWillowAIEncounterComponent : public UDenAIComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIEncounterComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAIMoveNodePathComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowAIMoveNodePathComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAIMoveNodePathComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeAimOffset_BoundaryTurret
// 0x0000 (0x0210 - 0x0210)
class UWillowAnimNodeAimOffset_BoundaryTurret : public UWillowAnimNodeAimOffset
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeAimOffset_BoundaryTurret");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAnimNodeBlendVehicleDirectional
// 0x0000 (0x0150 - 0x0150)
class UWillowAnimNodeBlendVehicleDirectional : public UAnimNodeBlendBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAnimNodeBlendVehicleDirectional");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowItem
// 0x0000 (0x0D10 - 0x0D10)
class AWillowItem : public AWillowInventory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowItem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowEquipAbleItem
// 0x0000 (0x0D10 - 0x0D10)
class AWillowEquipAbleItem : public AWillowItem
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowEquipAbleItem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowArtifact
// 0x0000 (0x0D10 - 0x0D10)
class AWillowArtifact : public AWillowEquipAbleItem
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowArtifact");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowAwarenessZoneDefinition
// 0x0000 (0x0058 - 0x0058)
class UWillowAwarenessZoneDefinition : public UAwarenessZoneDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowAwarenessZoneDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowBaseStats
// 0x0000 (0x0240 - 0x0240)
class AWillowBaseStats : public AInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowBaseStats");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowBoundaryTurret
// 0x0000 (0x0240 - 0x0240)
class AWillowBoundaryTurret : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowBoundaryTurret");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPickupMessage
// 0x0000 (0x0068 - 0x0068)
class UWillowPickupMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPickupMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowBuzzaxeWeapon
// 0x0000 (0x1648 - 0x1648)
class AWillowBuzzaxeWeapon : public AWillowWeapon
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowBuzzaxeWeapon");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowClassMod
// 0x0000 (0x0058 - 0x0058)
class UWillowClassMod : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowClassMod");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCombatPoint
// 0x0000 (0x0240 - 0x0240)
class AWillowCombatPoint : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCombatPoint");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowConsole
// 0x0000 (0x0280 - 0x0280)
class UWillowConsole : public UConsole
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowConsole");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCoopGameInfo
// 0x0000 (0x05D0 - 0x05D0)
class AWillowCoopGameInfo : public AWillowGameInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCoopGameInfo");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCoverComponent
// 0x0000 (0x00F8 - 0x00F8)
class UWillowCoverComponent : public UCoverUseComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCoverComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCoverStanceDefinition
// 0x0000 (0x00B0 - 0x00B0)
class UWillowCoverStanceDefinition : public UCoverStanceDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCoverStanceDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowCustomizationManager
// 0x0000 (0x0058 - 0x0058)
class UWillowCustomizationManager : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowCustomizationManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDamagePipeline
// 0x0000 (0x0318 - 0x0318)
class UWillowDamagePipeline : public UDamagePipeline
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDamagePipeline");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDamageType_Bullet
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDamageType_Bullet : public UWillowDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDamageType_Bullet");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogAct_RandomBranch
// 0x0000 (0x0098 - 0x0098)
class UWillowDialogAct_RandomBranch : public UGearboxDialogAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogAct_RandomBranch");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogAct_Talk
// 0x0000 (0x0098 - 0x0098)
class UWillowDialogAct_Talk : public UGearboxDialogAct_Talk
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogAct_Talk");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogAct_Trigger
// 0x0000 (0x0098 - 0x0098)
class UWillowDialogAct_Trigger : public UGearboxDialogAct_Trigger
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogAct_Trigger");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogEchoActor
// 0x0000 (0x0240 - 0x0240)
class AWillowDialogEchoActor : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogEchoActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogEventTag
// 0x0000 (0x0058 - 0x0058)
class UWillowDialogEventTag : public UGearboxDialogEventTag
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogEventTag");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogEventTagSpecialized
// 0x0000 (0x0058 - 0x0058)
class UWillowDialogEventTagSpecialized : public UWillowDialogEventTag
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogEventTagSpecialized");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogGlobalsDefinition
// 0x0000 (0x0070 - 0x0070)
class UWillowDialogGlobalsDefinition : public UGearboxDialogGlobalsDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogGlobalsDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogManager
// 0x0000 (0x0058 - 0x0058)
class UWillowDialogManager : public UGearboxDialogManager
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogVar_InstanceData
// 0x0000 (0x0098 - 0x0098)
class UWillowDialogVar_InstanceData : public UGearboxDialogVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogVar_InstanceData");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDialogVar_Passenger
// 0x0000 (0x0098 - 0x0098)
class UWillowDialogVar_Passenger : public UGearboxDialogVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDialogVar_Passenger");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_StatusEffect
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_StatusEffect : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_StatusEffect");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_VehicleRanInto
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_VehicleRanInto : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_VehicleRanInto");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgSource_VehicleRanOver
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgSource_VehicleRanOver : public UWillowDamageSource
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgSource_VehicleRanOver");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowDmgType_VehicleCollision
// 0x0000 (0x00A8 - 0x00A8)
class UWillowDmgType_VehicleCollision : public UWillowDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowDmgType_VehicleCollision");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowForcedReachSpec
// 0x0000 (0x0058 - 0x0058)
class UWillowForcedReachSpec : public UForcedReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowForcedReachSpec");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxColiseumOverlayDefinition
// 0x0000 (0x0100 - 0x0100)
class UWillowGFxColiseumOverlayDefinition : public UGFxMovieDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxColiseumOverlayDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxColiseumOverlayMovie
// 0x0000 (0x0450 - 0x0450)
class UWillowGFxColiseumOverlayMovie : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxColiseumOverlayMovie");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxEditDialog
// 0x0000 (0x0450 - 0x0450)
class UWillowGFxEditDialog : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxEditDialog");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxLobbyLoadCharacter
// 0x0000 (0x0450 - 0x0450)
class UWillowGFxLobbyLoadCharacter : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxLobbyLoadCharacter");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxLobbyTools
// 0x0000 (0x0058 - 0x0058)
class UWillowGFxLobbyTools : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxLobbyTools");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxMenuHelperSaveGame
// 0x0000 (0x0058 - 0x0058)
class UWillowGFxMenuHelperSaveGame : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMenuHelperSaveGame");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGFxMoviePressStart
// 0x0000 (0x0450 - 0x0450)
class UWillowGFxMoviePressStart : public UWillowGFxMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGFxMoviePressStart");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowGrenadeMod
// 0x0000 (0x0058 - 0x0058)
class UWillowGrenadeMod : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowGrenadeMod");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowHUDGFxMovieDefinition
// 0x0000 (0x0138 - 0x0138)
class UWillowHUDGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowHUDGFxMovieDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInteractiveSwitch
// 0x0000 (0x08E8 - 0x08E8)
class AWillowInteractiveSwitch : public AWillowInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInteractiveSwitch");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInteractiveSwitchRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowInteractiveSwitchRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInteractiveSwitchRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowInventoryStorage
// 0x0000 (0x0058 - 0x0058)
class UWillowInventoryStorage : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowInventoryStorage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowItemTypes
// 0x0000 (0x0058 - 0x0058)
class UWillowItemTypes : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowItemTypes");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowLeviathanService
// 0x0000 (0x0060 - 0x0060)
class UWillowLeviathanService : public ULeviathanService
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLeviathanService");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowLockWarningMessage
// 0x0000 (0x0068 - 0x0068)
class UWillowLockWarningMessage : public UWillowLocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowLockWarningMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowObstacleRenderComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowObstacleRenderComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowObstacleRenderComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPendingLevelPlayerController
// 0x0000 (0x0E80 - 0x0E80)
class AWillowPendingLevelPlayerController : public AWillowPlayerController
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPendingLevelPlayerController");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPlayerStats
// 0x0000 (0x0240 - 0x0240)
class AWillowPlayerStats : public AWillowBaseStats
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPlayerStats");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPopulationPointDefinition
// 0x0000 (0x0058 - 0x0058)
class UWillowPopulationPointDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPopulationPointDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPopulationPointEditorComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowPopulationPointEditorComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPopulationPointEditorComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPreviewComponent
// 0x0000 (0x0990 - 0x0990)
class UWillowPreviewComponent : public UAnimPreviewComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPreviewComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPopulationPointPreviewComponent
// 0x0000 (0x0990 - 0x0990)
class UWillowPopulationPointPreviewComponent : public UWillowPreviewComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPopulationPointPreviewComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowPropObject
// 0x0000 (0x08E8 - 0x08E8)
class AWillowPropObject : public AWillowInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowPropObject");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowRadarManager
// 0x0000 (0x0240 - 0x0240)
class AWillowRadarManager : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowRadarManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSaveDataHelper
// 0x0000 (0x0058 - 0x0058)
class UWillowSaveDataHelper : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSaveDataHelper");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSaveGameManager
// 0x0000 (0x0058 - 0x0058)
class UWillowSaveGameManager : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSaveGameManager");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScout
// 0x0000 (0x06B8 - 0x06B8)
class AWillowScout : public AScout
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScout");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingList
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingList : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingList");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderAudioOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderAudioOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderAudioOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderBase
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderBase : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderExtras
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderExtras : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderExtras");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderFrontEnd
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderFrontEnd : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderFrontEnd");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderGameOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderGameOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderGameOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderGamepadOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderGamepadOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderGamepadOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderKeyboardMouseOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderKeyboardMouseOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderKeyboardMouseOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderLobby
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderLobby : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderLobby");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderMapList
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderMapList : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderMapList");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderMatchmaking
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderMatchmaking : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderMatchmaking");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderOptionsBase
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderOptionsBase : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderOptionsBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderPartyOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderPartyOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderPartyOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderPause
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderPause : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderPause");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderTopLevelOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderTopLevelOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderTopLevelOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowScrollingListDataProviderVideoOptions
// 0x0000 (0x0058 - 0x0058)
class UWillowScrollingListDataProviderVideoOptions : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowScrollingListDataProviderVideoOptions");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_AILookAt
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqAct_AILookAt : public USeqAct_AIScripted
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_AILookAt");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_BossBar
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_BossBar : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_BossBar");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_CleanUpPlayerVehicles
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_CleanUpPlayerVehicles : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_CleanUpPlayerVehicles");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_CloseColiseumOverlay
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_CloseColiseumOverlay : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_CloseColiseumOverlay");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumAllDead
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumAllDead : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumAllDead");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumAnnouncePenaltyBox
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumAnnouncePenaltyBox : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumAnnouncePenaltyBox");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumAwardCertificate
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumAwardCertificate : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumAwardCertificate");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumNotify
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumNotify : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumNotify");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumRoundAnnounce
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumRoundAnnounce : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumRoundAnnounce");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumRuleAnnounce
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumRuleAnnounce : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumRuleAnnounce");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumStartTimer
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumStartTimer : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumStartTimer");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ColiseumVictory
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ColiseumVictory : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ColiseumVictory");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_InterpMenu
// 0x0000 (0x0210 - 0x0210)
class UWillowSeqAct_InterpMenu : public USeqAct_Interp
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_InterpMenu");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_MarkPlaythroughCompleted
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_MarkPlaythroughCompleted : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_MarkPlaythroughCompleted");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_OpenColiseumOverlay
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_OpenColiseumOverlay : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_OpenColiseumOverlay");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_SetLookAtActor
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_SetLookAtActor : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_SetLookAtActor");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_ToggleCinematicModeAffectsAll
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_ToggleCinematicModeAffectsAll : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_ToggleCinematicModeAffectsAll");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqAct_UpdateColiseumRuleOverlay
// 0x0000 (0x00E8 - 0x00E8)
class UWillowSeqAct_UpdateColiseumRuleOverlay : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqAct_UpdateColiseumRuleOverlay");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqCond_AnyPlayerHasMarketingUnlock
// 0x0000 (0x00C8 - 0x00C8)
class UWillowSeqCond_AnyPlayerHasMarketingUnlock : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqCond_AnyPlayerHasMarketingUnlock");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_Provoked
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_Provoked : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_Provoked");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_ShowCharacterSelectUI
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_ShowCharacterSelectUI : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_ShowCharacterSelectUI");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSeqEvent_VehicleSpawned
// 0x0000 (0x0118 - 0x0118)
class UWillowSeqEvent_VehicleSpawned : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSeqEvent_VehicleSpawned");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowShield
// 0x0000 (0x0058 - 0x0058)
class UWillowShield : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowShield");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowSkelControl_TurretConstrained
// 0x0000 (0x0120 - 0x0120)
class UWillowSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowSkelControl_TurretConstrained");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_CalcCanFire
// 0x0000 (0x0070 - 0x0070)
class UWillowTI_CalcCanFire : public UTI_Calc
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_CalcCanFire");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_CalcCombat
// 0x0000 (0x0070 - 0x0070)
class UWillowTI_CalcCombat : public UTI_Calc
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_CalcCombat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTI_CalcThreat
// 0x0000 (0x0070 - 0x0070)
class UWillowTI_CalcThreat : public UTI_Calc
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTI_CalcThreat");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowTurretWeapon
// 0x0000 (0x1648 - 0x1648)
class AWillowTurretWeapon : public AWillowWeapon
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowTurretWeapon");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowUsableCustomizationItem
// 0x0000 (0x0058 - 0x0058)
class UWillowUsableCustomizationItem : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowUsableCustomizationItem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowUsableItem
// 0x0000 (0x0058 - 0x0058)
class UWillowUsableItem : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowUsableItem");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleBase
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicleBase : public ASVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicle
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicle : public AWillowVehicleBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicle_ChopperVehicle
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicle_ChopperVehicle : public AWillowVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicle_ChopperVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicle_FlyingVehicle
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicle_FlyingVehicle : public AWillowVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicle_FlyingVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicle_Tank
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicle_Tank : public AWillowVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicle_Tank");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicle_Turret
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicle_Turret : public AWillowVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicle_Turret");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicle_WheeledVehicle
// 0x0000 (0x0880 - 0x0880)
class AWillowVehicle_WheeledVehicle : public AWillowVehicle
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicle_WheeledVehicle");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleCombatArea
// 0x0000 (0x0240 - 0x0240)
class AWillowVehicleCombatArea : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleCombatArea");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleCombatAreaRenderingComponent
// 0x0000 (0x0360 - 0x0360)
class UWillowVehicleCombatAreaRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleCombatAreaRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleControlDefinition
// 0x0000 (0x0058 - 0x0058)
class UWillowVehicleControlDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleControlDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleFactory
// 0x0000 (0x0260 - 0x0260)
class AWillowVehicleFactory : public ANavigationPoint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleFactory");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleSeatDefinition
// 0x0000 (0x0058 - 0x0058)
class UWillowVehicleSeatDefinition : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleSeatDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleSimCar
// 0x0000 (0x0110 - 0x0110)
class UWillowVehicleSimCar : public USVehicleSimCar
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleSimCar");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleSimChopper
// 0x0000 (0x00D0 - 0x00D0)
class UWillowVehicleSimChopper : public USVehicleSimBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleSimChopper");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleSimFly
// 0x0000 (0x00D0 - 0x00D0)
class UWillowVehicleSimFly : public USVehicleSimBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleSimFly");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleSimHover
// 0x0000 (0x0110 - 0x0110)
class UWillowVehicleSimHover : public USVehicleSimCar
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleSimHover");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleSimTank
// 0x0000 (0x0140 - 0x0140)
class UWillowVehicleSimTank : public USVehicleSimTank
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleSimTank");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVehicleWeapon
// 0x0000 (0x1648 - 0x1648)
class AWillowVehicleWeapon : public AWillowWeapon
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVehicleWeapon");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVendingMachineBase
// 0x0000 (0x08E8 - 0x08E8)
class AWillowVendingMachineBase : public AWillowInteractiveObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVendingMachineBase");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVendingMachine
// 0x0000 (0x08E8 - 0x08E8)
class AWillowVendingMachine : public AWillowVendingMachineBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVendingMachine");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVendingMachineBlackMarket
// 0x0000 (0x08E8 - 0x08E8)
class AWillowVendingMachineBlackMarket : public AWillowVendingMachineBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVendingMachineBlackMarket");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVendingMachineDefinition
// 0x0000 (0x0268 - 0x0268)
class UWillowVendingMachineDefinition : public UInteractiveObjectDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVendingMachineDefinition");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVersusDuelArena
// 0x0000 (0x0240 - 0x0240)
class AWillowVersusDuelArena : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVersusDuelArena");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVersusDuelBehavior
// 0x0000 (0x0070 - 0x0070)
class UWillowVersusDuelBehavior : public UBehaviorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVersusDuelBehavior");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVersusDuelGlobals
// 0x0000 (0x0058 - 0x0058)
class UWillowVersusDuelGlobals : public UGBXDefinition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVersusDuelGlobals");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowVersusDuelMessage
// 0x0000 (0x0068 - 0x0068)
class UWillowVersusDuelMessage : public ULocalMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowVersusDuelMessage");
		}

		return uClassPointer;
	};

};

// Class WillowGame.WillowWeaponPawn
// 0x0000 (0x0880 - 0x0880)
class AWillowWeaponPawn : public AWillowVehicleBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class WillowGame.WillowWeaponPawn");
		}

		return uClassPointer;
	};

};

/*
# ========================================================================================= #
#
# ========================================================================================= #
*/

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
